[ {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "test197a",
  "sourceCode" : "@Test\r\nvoid test197a() throws Exception {\r\n    final JexlContext jc = new MapContext();\r\n    final JexlScript e = JEXL.createScript(\"@synchronized { return 42; }\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(42, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testError",
  "sourceCode" : "@Test\r\nvoid testError() throws Exception {\r\n    testError(true);\r\n    testError(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testHoistingStatement",
  "sourceCode" : "@Test\r\nvoid testHoistingStatement() throws Exception {\r\n    final AnnotationContext jc = new AnnotationContext();\r\n    final JexlScript e = JEXL.createScript(\"var t = 1; @synchronized for(var x : [2,3,7]) t *= x; t\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(42, r);\r\n    assertEquals(1, jc.getCount());\r\n    assertTrue(jc.getNames().contains(\"synchronized\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testJexlSynchronized0",
  "sourceCode" : "@Test\r\nvoid testJexlSynchronized0() throws InterruptedException {\r\n    final TestRunner tr = new TestRunner();\r\n    final AnnotationContext ctxt = new AnnotationContext();\r\n    final JexlScript script = JEXL.createScript(\"for(var i : 1..NUM_ITERATIONS) {\" + \"@synchronized { syncCounter.inc(); }\" + \"concCounter.inc();\" + \"}\", \"NUM_ITERATIONS\", \"syncCounter\", \"concCounter\");\r\n    // will sync on syncCounter\r\n    tr.run(() -> {\r\n        script.execute(ctxt, NUM_ITERATIONS, tr.syncCounter, tr.concCounter);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testMultiple",
  "sourceCode" : "@Test\r\nvoid testMultiple() throws Exception {\r\n    final AnnotationContext jc = new AnnotationContext();\r\n    final JexlScript e = JEXL.createScript(\"@one(1) @synchronized { return 42; }\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(42, r);\r\n    assertEquals(2, jc.getCount());\r\n    assertTrue(jc.getNames().contains(\"synchronized\"));\r\n    assertTrue(jc.getNames().contains(\"one\"));\r\n    assertTrue(jc.getNames().contains(\"1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testNoArg",
  "sourceCode" : "@Test\r\nvoid testNoArg() throws Exception {\r\n    final AnnotationContext jc = new AnnotationContext();\r\n    final JexlScript e = JEXL.createScript(\"@synchronized { return 42; }\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(42, r);\r\n    assertEquals(1, jc.getCount());\r\n    assertTrue(jc.getNames().contains(\"synchronized\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testNoArgExpression",
  "sourceCode" : "@Test\r\nvoid testNoArgExpression() throws Exception {\r\n    final AnnotationContext jc = new AnnotationContext();\r\n    final JexlScript e = JEXL.createScript(\"@synchronized 42\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(42, r);\r\n    assertEquals(1, jc.getCount());\r\n    assertTrue(jc.getNames().contains(\"synchronized\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testNoArgStatement",
  "sourceCode" : "@Test\r\nvoid testNoArgStatement() throws Exception {\r\n    final AnnotationContext jc = new AnnotationContext();\r\n    final JexlScript e = JEXL.createScript(\"@synchronized if (true) 2 * 3 * 7; else -42;\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(42, r);\r\n    assertEquals(1, jc.getCount());\r\n    assertTrue(jc.getNames().contains(\"synchronized\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testOneArg",
  "sourceCode" : "@Test\r\nvoid testOneArg() throws Exception {\r\n    final AnnotationContext jc = new AnnotationContext();\r\n    final JexlScript e = JEXL.createScript(\"@one(1) { return 42; }\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(42, r);\r\n    assertEquals(1, jc.getCount());\r\n    assertTrue(jc.getNames().contains(\"one\"));\r\n    assertTrue(jc.getNames().contains(\"1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testSynchronized",
  "sourceCode" : "@Test\r\n/**\r\n * A base test to ensure synchronized makes a difference.\r\n */\r\nvoid testSynchronized() throws InterruptedException {\r\n    final TestRunner tr = new TestRunner();\r\n    final Counter syncCounter = tr.syncCounter;\r\n    final Counter concCounter = tr.concCounter;\r\n    tr.run(() -> {\r\n        for (int i = 0; i < NUM_ITERATIONS; i++) {\r\n            synchronized (syncCounter) {\r\n                syncCounter.inc();\r\n            }\r\n            concCounter.inc();\r\n        }\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testUnknown",
  "sourceCode" : "@Test\r\nvoid testUnknown() throws Exception {\r\n    testUnknown(true);\r\n    testUnknown(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AnnotationTest.java",
  "methodName" : "testVarStmt",
  "sourceCode" : "@Test\r\nvoid testVarStmt() throws Exception {\r\n    final OptAnnotationContext jc = new OptAnnotationContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    jc.getEngineOptions().set(JEXL);\r\n    options.setSharedInstance(true);\r\n    Object r;\r\n    final JexlScript e = JEXL.createScript(\"(s, v)->{ @strict(s) @silent(v) var x = y ; 42; }\");\r\n    // wont make an error\r\n    r = e.execute(jc, false, true);\r\n    assertEquals(42, r);\r\n    r = null;\r\n    // will make an error and throw\r\n    options.setSafe(false);\r\n    assertThrows(JexlException.Variable.class, () -> e.execute(jc, true, false));\r\n    r = null;\r\n    // will make an error and will not throw but result is null\r\n    r = e.execute(jc, true, true);\r\n    assertNull(r);\r\n    options.setSafe(true);\r\n    r = null;\r\n    // will not make an error and will not throw\r\n    r = e.execute(jc, false, false);\r\n    assertEquals(42, r);\r\n    // assertEquals(42, r);\r\n    assertTrue(options.isStrict());\r\n    final JexlScript e2 = JEXL.createScript(\"@scale(5) 42;\");\r\n    r = e2.execute(jc);\r\n    assertEquals(42, r);\r\n    assertTrue(options.isStrict());\r\n    assertEquals(5, options.getMathScale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AntishCallTest.java",
  "methodName" : "testAntishArithmetic",
  "sourceCode" : "@Test\r\nvoid testAntishArithmetic() throws Exception {\r\n    final CallSupportArithmetic ja = new CallSupportArithmetic(true);\r\n    final JexlEngine jexl = new JexlBuilder().cache(512).arithmetic(ja).create();\r\n    final Map<String, Object> lmap = new TreeMap<>();\r\n    final JexlContext jc = new MapContext(lmap);\r\n    lmap.put(\"java.math.BigInteger\", java.math.BigInteger.class);\r\n    runTestCall(jexl, jc);\r\n    lmap.put(\"java.math.BigInteger\", new ClassReference(BigInteger.class));\r\n    runTestCall(jexl, jc);\r\n    lmap.remove(\"java.math.BigInteger\");\r\n    assertThrows(JexlException.class, () -> runTestCall(jexl, jc));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AntishCallTest.java",
  "methodName" : "testAntishContextVar",
  "sourceCode" : "@Test\r\nvoid testAntishContextVar() throws Exception {\r\n    final Map<String, Object> lmap = new TreeMap<>();\r\n    final JexlContext jc = new CallSupportContext(lmap).engine(JEXL);\r\n    runTestCall(JEXL, jc);\r\n    lmap.put(\"java.math.BigInteger\", new ClassReference(BigInteger.class));\r\n    runTestCall(JEXL, jc);\r\n    lmap.remove(\"java.math.BigInteger\");\r\n    runTestCall(JEXL, jc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AntishCallTest.java",
  "methodName" : "testSafeAnt",
  "sourceCode" : "// JEXL-300\r\n@Test\r\nvoid testSafeAnt() throws Exception {\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    ctxt.set(\"x.y.z\", 42);\r\n    JexlScript script;\r\n    Object result;\r\n    final JexlScript script0 = JEXL.createScript(\"x.y.z\");\r\n    result = script0.execute(ctxt);\r\n    assertEquals(42, result);\r\n    assertEquals(42, ctxt.get(\"x.y.z\"));\r\n    options.setAntish(false);\r\n    assertThrows(JexlException.class, () -> script0.execute(ctxt), \"antish var shall not be resolved\");\r\n    options.setAntish(true);\r\n    script = JEXL.createScript(\"x?.y?.z\");\r\n    result = script.execute(ctxt);\r\n    // safe navigation, null\r\n    assertNull(result);\r\n    final JexlScript script1 = JEXL.createScript(\"x?.y?.z = 3\");\r\n    assertThrows(JexlException.class, () -> script1.execute(ctxt), \"not antish assign\");\r\n    final JexlScript script2 = JEXL.createScript(\"x.y?.z\");\r\n    assertThrows(JexlException.class, () -> script2.execute(ctxt), \"x not defined\");\r\n    final JexlScript script3 = JEXL.createScript(\"x.y?.z = 3\");\r\n    assertThrows(JexlException.class, () -> script3.execute(ctxt), \"x not defined\");\r\n    final JexlScript script4 = JEXL.createScript(\"x.`'y'`.z = 3\");\r\n    assertThrows(JexlException.class, () -> script4.execute(ctxt), \"x not defined\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "test373a",
  "sourceCode" : "@Test\r\nvoid test373a() {\r\n    testSelfAssignOperators(\"y.add(x++)\", 42, 42, 43);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "test373b",
  "sourceCode" : "@Test\r\nvoid test373b() {\r\n    testSelfAssignOperators(\"y.add(++x)\", 42, 43, 43);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "test373c",
  "sourceCode" : "@Test\r\nvoid test373c() {\r\n    testSelfAssignOperators(\"y.add(x--)\", 42, 42, 41);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "test373d",
  "sourceCode" : "@Test\r\nvoid test373d() {\r\n    testSelfAssignOperators(\"y.add(--x)\", 42, 41, 41);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "test391",
  "sourceCode" : "@Test\r\nvoid test391() throws Exception {\r\n    // with literals\r\n    for (final String src : Arrays.asList(\"2 =~ [1, 2, 3, 4]\", \"[2, 3] =~ [1, 2, 3, 4]\", \"[2, 3,...] =~ [1, 2, 3, 4]\", \"3 =~ [1, 2, 3, 4,...]\", \"[2, 3] =~ [1, 2, 3, 4,...]\", \"[2, 3,...] =~ [1, 2, 3, 4,...]\")) {\r\n        asserter.assertExpression(src, Boolean.TRUE);\r\n    }\r\n    // with variables\r\n    final int[] ic = { 1, 2, 3, 4 };\r\n    final List<Integer> iic = new ArrayList<>();\r\n    for (final int v : ic) {\r\n        iic.add(v);\r\n    }\r\n    final int[] iv = { 2, 3 };\r\n    final List<Integer> iiv = new ArrayList<>();\r\n    for (final int v : iv) {\r\n        iiv.add(v);\r\n    }\r\n    final String src = \"(x,y) -> x =~ y \";\r\n    for (final Object v : Arrays.asList(iv, iiv, 2)) {\r\n        for (final Object c : Arrays.asList(ic, iic)) {\r\n            asserter.assertExpression(src, Boolean.TRUE, v, c);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testDateArithmetic",
  "sourceCode" : "@Test\r\nvoid testDateArithmetic() {\r\n    final Date d = new Date();\r\n    final JexlContext jc = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().cache(32).arithmetic(new DateArithmetic(true)).create();\r\n    final JexlScript expr0 = jexl.createScript(\"date.yyyy = 1969; date.MM=7; date.dd=20; \", \"date\");\r\n    Object value0 = expr0.execute(jc, d);\r\n    assertNotNull(value0);\r\n    value0 = d;\r\n    //d = new Date();\r\n    assertEquals(1969, jexl.createScript(\"date.yyyy\", \"date\").execute(jc, value0));\r\n    assertEquals(7, jexl.createScript(\"date.MM\", \"date\").execute(jc, value0));\r\n    assertEquals(20, jexl.createScript(\"date.dd\", \"date\").execute(jc, value0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testFormatArithmetic",
  "sourceCode" : "@Test\r\nvoid testFormatArithmetic() {\r\n    final Calendar cal = Calendar.getInstance(UTC);\r\n    cal.set(1969, Calendar.AUGUST, 20);\r\n    final Date x0 = cal.getTime();\r\n    final String y0 = \"MM/yy/dd\";\r\n    final Number x1 = 42.12345;\r\n    final String y1 = \"##0.##\";\r\n    final DateContext jc = new DateContext();\r\n    final JexlEngine jexl = new JexlBuilder().cache(32).arithmetic(new DateArithmetic(true)).create();\r\n    final JexlScript expr0 = jexl.createScript(\"x.format(y)\", \"x\", \"y\");\r\n    Object value10 = expr0.execute(jc, x0, y0);\r\n    final Object value20 = expr0.execute(jc, x0, y0);\r\n    assertEquals(value10, value20);\r\n    Object value11 = expr0.execute(jc, x1, y1);\r\n    final Object value21 = expr0.execute(jc, x1, y1);\r\n    assertEquals(value11, value21);\r\n    value10 = expr0.execute(jc, x0, y0);\r\n    assertEquals(value10, value20);\r\n    value11 = expr0.execute(jc, x1, y1);\r\n    assertEquals(value11, value21);\r\n    value10 = expr0.execute(jc, x0, y0);\r\n    assertEquals(value10, value20);\r\n    value11 = expr0.execute(jc, x1, y1);\r\n    assertEquals(value11, value21);\r\n    JexlScript expr1 = jexl.createScript(\"format(x, y)\", \"x\", \"y\");\r\n    value10 = expr1.execute(jc, x0, y0);\r\n    assertEquals(value10, value20);\r\n    Object s0 = expr1.execute(jc, x0, \"EEE dd MMM yyyy\");\r\n    assertEquals(\"Wed 20 Aug 1969\", s0);\r\n    jc.setLocale(Locale.FRANCE);\r\n    s0 = expr1.execute(jc, x0, \"EEE dd MMM yyyy\");\r\n    assertEquals(\"mer. 20 ao\\u00fbt 1969\", s0);\r\n    expr1 = jexl.createScript(\"format(now(), y)\", \"y\");\r\n    final Object n0 = expr1.execute(jc, y0);\r\n    assertNotNull(n0);\r\n    expr1 = jexl.createScript(\"now().format(y)\", \"y\");\r\n    final Object n1 = expr1.execute(jc, y0);\r\n    assertNotNull(n0);\r\n    assertEquals(n0, n1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testFormatArithmeticJxlt",
  "sourceCode" : "@Test\r\nvoid testFormatArithmeticJxlt() throws Exception {\r\n    final Map<String, Object> ns = new HashMap<>();\r\n    ns.put(\"calc\", Aggregate.class);\r\n    final Calendar cal = Calendar.getInstance(UTC);\r\n    cal.set(1969, Calendar.AUGUST, 20);\r\n    final Date x0 = cal.getTime();\r\n    final String y0 = \"yyyy-MM-dd\";\r\n    final DateContext jc = new DateContext();\r\n    final JexlEngine jexl = new JexlBuilder().cache(32).namespaces(ns).arithmetic(new DateArithmetic(true)).create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    JxltEngine.Template expr0 = jxlt.createTemplate(\"${x.format(y)}\", \"x\", \"y\");\r\n    StringWriter strw = new StringWriter();\r\n    expr0.evaluate(jc, strw, x0, y0);\r\n    String strws = strw.toString();\r\n    assertEquals(\"1969-08-20\", strws);\r\n    expr0 = jxlt.createTemplate(\"${calc:sum(x .. y)}\", \"x\", \"y\");\r\n    strw = new StringWriter();\r\n    expr0.evaluate(jc, strw, 1, 3);\r\n    strws = strw.toString();\r\n    assertEquals(\"6\", strws);\r\n    final JxltEngine.Template expr1 = jxlt.createTemplate(\"${jexl:include(s, x, y)}\", \"s\", \"x\", \"y\");\r\n    strw = new StringWriter();\r\n    expr1.evaluate(jc, strw, expr0, 1, 3);\r\n    strws = strw.toString();\r\n    assertEquals(\"6\", strws);\r\n    expr0 = jxlt.createTemplate(\"${now().format(y)}\", \"y\");\r\n    strw = new StringWriter();\r\n    expr0.evaluate(jc, strw, y0);\r\n    strws = strw.toString();\r\n    assertNotNull(strws);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testIncrementOperatorOnNull",
  "sourceCode" : "@Test\r\nvoid testIncrementOperatorOnNull() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(false).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"var i = null; ++i\");\r\n    result = script.execute(null);\r\n    assertEquals(1, result);\r\n    script = jexl.createScript(\"var i = null; --i\");\r\n    result = script.execute(null);\r\n    assertEquals(-1, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testInterval",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid testInterval() {\r\n    final Map<String, Object> ns = new HashMap<>();\r\n    ns.put(\"calc\", Aggregate.class);\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(ns).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"1 .. 3\");\r\n    result = script.execute(null);\r\n    assertInstanceOf(Iterable.class, result);\r\n    Iterator<Integer> ii = ((Iterable<Integer>) result).iterator();\r\n    assertEquals(Integer.valueOf(1), ii.next());\r\n    assertEquals(Integer.valueOf(2), ii.next());\r\n    assertEquals(Integer.valueOf(3), ii.next());\r\n    script = jexl.createScript(\"(4 - 3) .. (9 / 3)\");\r\n    result = script.execute(null);\r\n    assertInstanceOf(Iterable.class, result);\r\n    ii = ((Iterable<Integer>) result).iterator();\r\n    assertEquals(Integer.valueOf(1), ii.next());\r\n    assertEquals(Integer.valueOf(2), ii.next());\r\n    assertEquals(Integer.valueOf(3), ii.next());\r\n    // sum of 1, 2, 3\r\n    script = jexl.createScript(\"var x = 0; for(var y : ((5 - 4) .. (12 / 4))) { x = x + y }; x\");\r\n    result = script.execute(null);\r\n    assertEquals(Integer.valueOf(6), result);\r\n    script = jexl.createScript(\"calc:sum(1 .. 3)\");\r\n    result = script.execute(null);\r\n    assertEquals(Integer.valueOf(6), result);\r\n    script = jexl.createScript(\"calc:sum(-3 .. 3)\");\r\n    result = script.execute(null);\r\n    assertEquals(Integer.valueOf(0), result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testMatch",
  "sourceCode" : "@Test\r\nvoid testMatch() throws Exception {\r\n    // check in/not-in on array, list, map, set and duck-type collection\r\n    final int[] ai = { 2, 4, 42, 54 };\r\n    final List<Integer> al = new ArrayList<>();\r\n    for (final int i : ai) {\r\n        al.add(i);\r\n    }\r\n    final Map<Integer, String> am = new HashMap<>();\r\n    am.put(2, \"two\");\r\n    am.put(4, \"four\");\r\n    am.put(42, \"forty-two\");\r\n    am.put(54, \"fifty-four\");\r\n    final MatchingContainer ad = new MatchingContainer(ai);\r\n    final IterableContainer ic = new IterableContainer(ai);\r\n    final Set<Integer> as = ad.values;\r\n    final Object[] vars = { ai, al, am, ad, as, ic };\r\n    for (final Object variable : vars) {\r\n        asserter.setVariable(\"container\", variable);\r\n        for (final int x : ai) {\r\n            asserter.setVariable(\"x\", x);\r\n            asserter.assertExpression(\"x =~ container\", Boolean.TRUE);\r\n        }\r\n        asserter.setVariable(\"x\", 169);\r\n        asserter.assertExpression(\"x !~ container\", Boolean.TRUE);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testNotStartsEndsWith",
  "sourceCode" : "@Test\r\nvoid testNotStartsEndsWith() throws Exception {\r\n    asserter.setVariable(\"x\", \"foobar\");\r\n    asserter.assertExpression(\"x !^ 'foo'\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x !$ 'foo'\", Boolean.TRUE);\r\n    asserter.setVariable(\"x\", \"barfoo\");\r\n    asserter.assertExpression(\"x !^ 'foo'\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x !$ 'foo'\", Boolean.FALSE);\r\n    final int[] ai = { 2, 4, 42, 54 };\r\n    final IterableContainer ic = new IterableContainer(ai);\r\n    asserter.setVariable(\"x\", ic);\r\n    asserter.assertExpression(\"x !^ 2\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x !$ 54\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x !^ 4\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x !$ 42\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x !^ [2, 4]\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x !^ [42, 54]\", Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testNotStartsEndsWithString",
  "sourceCode" : "@Test\r\nvoid testNotStartsEndsWithString() throws Exception {\r\n    asserter.setVariable(\"x\", \"foobar\");\r\n    asserter.assertExpression(\"x !^ 'foo'\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x !$ 'foo'\", Boolean.TRUE);\r\n    asserter.setVariable(\"x\", \"barfoo\");\r\n    asserter.assertExpression(\"x !^ 'foo'\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x !$ 'foo'\", Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testNotStartsEndsWithStringBuilder",
  "sourceCode" : "@Test\r\nvoid testNotStartsEndsWithStringBuilder() throws Exception {\r\n    asserter.setVariable(\"x\", new StringBuilder(\"foobar\"));\r\n    asserter.assertExpression(\"x !^ 'foo'\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x !$ 'foo'\", Boolean.TRUE);\r\n    asserter.setVariable(\"x\", new StringBuilder(\"barfoo\"));\r\n    asserter.assertExpression(\"x !^ 'foo'\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x !$ 'foo'\", Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testNotStartsEndsWithStringDot",
  "sourceCode" : "@Test\r\nvoid testNotStartsEndsWithStringDot() throws Exception {\r\n    asserter.setVariable(\"x.y\", \"foobar\");\r\n    asserter.assertExpression(\"x.y !^ 'foo'\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x.y !$ 'foo'\", Boolean.TRUE);\r\n    asserter.setVariable(\"x.y\", \"barfoo\");\r\n    asserter.assertExpression(\"x.y !^ 'foo'\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x.y !$ 'foo'\", Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testOperatorError",
  "sourceCode" : "@Test\r\nvoid testOperatorError() throws Exception {\r\n    runOperatorError(true);\r\n    runOperatorError(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testRegexp",
  "sourceCode" : "@Test\r\nvoid testRegexp() throws Exception {\r\n    asserter.setVariable(\"str\", \"abc456\");\r\n    asserter.assertExpression(\"str =~ '.*456'\", Boolean.TRUE);\r\n    asserter.assertExpression(\"str !~ 'ABC.*'\", Boolean.TRUE);\r\n    asserter.setVariable(\"match\", \"abc.*\");\r\n    asserter.setVariable(\"nomatch\", \".*123\");\r\n    asserter.assertExpression(\"str =~ match\", Boolean.TRUE);\r\n    asserter.assertExpression(\"str !~ match\", Boolean.FALSE);\r\n    asserter.assertExpression(\"str !~ nomatch\", Boolean.TRUE);\r\n    asserter.assertExpression(\"str =~ nomatch\", Boolean.FALSE);\r\n    asserter.setVariable(\"match\", new StringBuilder(\"abc.*\"));\r\n    asserter.setVariable(\"nomatch\", new StringBuilder(\".*123\"));\r\n    asserter.assertExpression(\"str =~ match\", Boolean.TRUE);\r\n    asserter.assertExpression(\"str !~ match\", Boolean.FALSE);\r\n    asserter.assertExpression(\"str !~ nomatch\", Boolean.TRUE);\r\n    asserter.assertExpression(\"str =~ nomatch\", Boolean.FALSE);\r\n    asserter.setVariable(\"match\", java.util.regex.Pattern.compile(\"abc.*\"));\r\n    asserter.setVariable(\"nomatch\", java.util.regex.Pattern.compile(\".*123\"));\r\n    asserter.assertExpression(\"str =~ match\", Boolean.TRUE);\r\n    asserter.assertExpression(\"str !~ match\", Boolean.FALSE);\r\n    asserter.assertExpression(\"str !~ nomatch\", Boolean.TRUE);\r\n    asserter.assertExpression(\"str =~ nomatch\", Boolean.FALSE);\r\n    // check the in/not-in variant\r\n    asserter.assertExpression(\"'a' =~ ['a','b','c','d','e','f']\", Boolean.TRUE);\r\n    asserter.assertExpression(\"'a' !~ ['a','b','c','d','e','f']\", Boolean.FALSE);\r\n    asserter.assertExpression(\"'z' =~ ['a','b','c','d','e','f']\", Boolean.FALSE);\r\n    asserter.assertExpression(\"'z' !~ ['a','b','c','d','e','f']\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testRegexp2",
  "sourceCode" : "@Test\r\nvoid testRegexp2() throws Exception {\r\n    asserter.setVariable(\"str\", \"abc456\");\r\n    asserter.assertExpression(\"str =~ ~/.*456/\", Boolean.TRUE);\r\n    asserter.assertExpression(\"str !~ ~/ABC.*/\", Boolean.TRUE);\r\n    asserter.assertExpression(\"str =~ ~/abc\\\\d{3}/\", Boolean.TRUE);\r\n    // legacy, deprecated\r\n    asserter.assertExpression(\"matches(str, ~/.*456/)\", Boolean.TRUE);\r\n    asserter.setVariable(\"str\", \"4/6\");\r\n    asserter.assertExpression(\"str =~ ~/\\\\d\\\\/\\\\d/\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testStartsEndsWith",
  "sourceCode" : "@Test\r\nvoid testStartsEndsWith() throws Exception {\r\n    asserter.setVariable(\"x\", \"foobar\");\r\n    asserter.assertExpression(\"x =^ 'foo'\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x =$ 'foo'\", Boolean.FALSE);\r\n    asserter.setVariable(\"x\", \"barfoo\");\r\n    asserter.assertExpression(\"x =^ 'foo'\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x =$ 'foo'\", Boolean.TRUE);\r\n    final int[] ai = { 2, 4, 42, 54 };\r\n    final IterableContainer ic = new IterableContainer(ai);\r\n    asserter.setVariable(\"x\", ic);\r\n    asserter.assertExpression(\"x =^ 2\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x =$ 54\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x =^ 4\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x =$ 42\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x =^ [2, 4]\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x =^ [42, 54]\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testStartsEndsWithString",
  "sourceCode" : "@Test\r\nvoid testStartsEndsWithString() throws Exception {\r\n    asserter.setVariable(\"x\", \"foobar\");\r\n    asserter.assertExpression(\"x =^ 'foo'\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x =$ 'foo'\", Boolean.FALSE);\r\n    asserter.setVariable(\"x\", \"barfoo\");\r\n    asserter.assertExpression(\"x =^ 'foo'\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x =$ 'foo'\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testStartsEndsWithStringBuilder",
  "sourceCode" : "@Test\r\nvoid testStartsEndsWithStringBuilder() throws Exception {\r\n    asserter.setVariable(\"x\", new StringBuilder(\"foobar\"));\r\n    asserter.assertExpression(\"x =^ 'foo'\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x =$ 'foo'\", Boolean.FALSE);\r\n    asserter.setVariable(\"x\", new StringBuilder(\"barfoo\"));\r\n    asserter.assertExpression(\"x =^ 'foo'\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x =$ 'foo'\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testStartsEndsWithStringDot",
  "sourceCode" : "@Test\r\nvoid testStartsEndsWithStringDot() throws Exception {\r\n    asserter.setVariable(\"x.y\", \"foobar\");\r\n    asserter.assertExpression(\"x.y =^ 'foo'\", Boolean.TRUE);\r\n    asserter.assertExpression(\"x.y =$ 'foo'\", Boolean.FALSE);\r\n    asserter.setVariable(\"x.y\", \"barfoo\");\r\n    asserter.assertExpression(\"x.y =^ 'foo'\", Boolean.FALSE);\r\n    asserter.assertExpression(\"x.y =$ 'foo'\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testSortArray",
  "sourceCode" : "@Test\r\nvoid testSortArray() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(32).arithmetic(new SortingArithmetic(true)).silent(false).create();\r\n    // test data, json like\r\n    final String src = \"[{'id':1,'name':'John','type':9},{'id':2,'name':'Doe','type':7},{'id':3,'name':'Doe','type':10}]\";\r\n    final Object a = jexl.createExpression(src).evaluate(null);\r\n    assertNotNull(a);\r\n    // row 0 and 1 are not ordered\r\n    final Map[] m = (Map[]) a;\r\n    assertEquals(9, m[0].get(\"type\"));\r\n    assertEquals(7, m[1].get(\"type\"));\r\n    // sort the elements on the type\r\n    jexl.createScript(\"array.sort( e -> e.type )\", \"array\").execute(null, a);\r\n    // row 0 and 1 are now ordered\r\n    assertEquals(7, m[0].get(\"type\"));\r\n    assertEquals(9, m[1].get(\"type\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "testPatterns",
  "sourceCode" : "@Test\r\nvoid testPatterns() {\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new MatchingArithmetic(true)).create();\r\n    final JexlScript script = jexl.createScript(\"str =~ [~/abc.*/, ~/def.*/]\", \"str\");\r\n    assertTrue((boolean) script.execute(null, \"abcdef\"));\r\n    assertTrue((boolean) script.execute(null, \"defghi\"));\r\n    assertFalse((boolean) script.execute(null, \"ghijkl\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "test428",
  "sourceCode" : "@Test\r\nvoid test428() {\r\n    // see JEXL-428\r\n    final JexlEngine jexl = new JexlBuilder().cache(32).arithmetic(new Arithmetic428(true)).create();\r\n    final String rhsstr = \"2024-09-09T10:42:42.00Z\";\r\n    final Instant rhs = Instant.parse(rhsstr);\r\n    final String lhs = \"2020-09-09T01:24:24.00Z\";\r\n    JexlScript script;\r\n    script = jexl.createScript(\"x < y\", \"x\", \"y\");\r\n    final JexlScript s0 = script;\r\n    assertThrows(JexlException.class, () -> s0.execute(null, 42, rhs));\r\n    for (final int i : LOOPS) {\r\n        assertTrue((boolean) script.execute(null, lhs, rhs));\r\n    }\r\n    for (final int i : LOOPS) {\r\n        assertTrue((boolean) script.execute(null, lhs, rhs));\r\n    }\r\n    for (final int i : LOOPS) {\r\n        assertFalse((boolean) script.execute(null, rhs, lhs));\r\n    }\r\n    for (final int i : LOOPS) {\r\n        assertFalse((boolean) script.execute(null, rhs, lhs));\r\n    }\r\n    for (final int i : LOOPS) {\r\n        assertTrue((boolean) script.execute(null, lhs, rhs));\r\n    }\r\n    for (final int i : LOOPS) {\r\n        assertFalse((boolean) script.execute(null, rhs, lhs));\r\n    }\r\n    script = jexl.createScript(\"x <= y\", \"x\", \"y\");\r\n    final JexlScript s1 = script;\r\n    assertThrows(JexlException.class, () -> s1.execute(null, 42, rhs));\r\n    assertTrue((boolean) script.execute(null, lhs, rhs));\r\n    assertFalse((boolean) script.execute(null, rhs, lhs));\r\n    script = jexl.createScript(\"x >= y\", \"x\", \"y\");\r\n    final JexlScript s2 = script;\r\n    assertThrows(JexlException.class, () -> s2.execute(null, 42, rhs));\r\n    assertFalse((boolean) script.execute(null, lhs, rhs));\r\n    assertFalse((boolean) script.execute(null, lhs, rhs));\r\n    assertTrue((boolean) script.execute(null, rhs, lhs));\r\n    assertTrue((boolean) script.execute(null, rhs, lhs));\r\n    assertFalse((boolean) script.execute(null, lhs, rhs));\r\n    assertTrue((boolean) script.execute(null, rhs, lhs));\r\n    script = jexl.createScript(\"x > y\", \"x\", \"y\");\r\n    final JexlScript s3 = script;\r\n    assertThrows(JexlException.class, () -> s3.execute(null, 42, rhs));\r\n    assertFalse((boolean) script.execute(null, lhs, rhs));\r\n    assertTrue((boolean) script.execute(null, rhs, lhs));\r\n    script = jexl.createScript(\"x == y\", \"x\", \"y\");\r\n    assertFalse((boolean) script.execute(null, 42, rhs));\r\n    assertFalse((boolean) script.execute(null, lhs, rhs));\r\n    assertFalse((boolean) script.execute(null, lhs, rhs));\r\n    assertTrue((boolean) script.execute(null, rhs, rhsstr));\r\n    assertTrue((boolean) script.execute(null, rhsstr, rhs));\r\n    assertFalse((boolean) script.execute(null, lhs, rhs));\r\n    script = jexl.createScript(\"x != y\", \"x\", \"y\");\r\n    assertTrue((boolean) script.execute(null, 42, rhs));\r\n    assertTrue((boolean) script.execute(null, lhs, rhs));\r\n    assertFalse((boolean) script.execute(null, rhs, rhsstr));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticOperatorTest.java",
  "methodName" : "test429a",
  "sourceCode" : "@Test\r\nvoid test429a() {\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new Arithmetic429(true)).cache(32).create();\r\n    String src;\r\n    JexlScript script;\r\n    src = \"'1.1' > 0\";\r\n    script = jexl.createScript(src);\r\n    assertTrue((boolean) script.execute(null));\r\n    src = \"1.2 <= '1.20'\";\r\n    script = jexl.createScript(src);\r\n    assertTrue((boolean) script.execute(null));\r\n    src = \"1.2 >= '1.2'\";\r\n    script = jexl.createScript(src);\r\n    assertTrue((boolean) script.execute(null));\r\n    src = \"1.2 < '1.2'\";\r\n    script = jexl.createScript(src);\r\n    assertFalse((boolean) script.execute(null));\r\n    src = \"1.2 > '1.2'\";\r\n    script = jexl.createScript(src);\r\n    assertFalse((boolean) script.execute(null));\r\n    src = \"1.20 == 'a'\";\r\n    script = jexl.createScript(src);\r\n    assertFalse((boolean) script.execute(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "test2DoubleLiterals",
  "sourceCode" : "// JEXL-24: doubles with exponent\r\n@Test\r\nvoid test2DoubleLiterals() {\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final String stmt = \"{a = 42.0e1D; b = 42.0E+2D; c = 42.0e-1d; d = 42.0E-2d; e=10e10; f= +1.e1; g=1e1; }\";\r\n    final JexlScript expr = JEXL.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertEquals(Double.valueOf(\"42.0e+1\"), ctxt.get(\"a\"));\r\n    assertEquals(Double.valueOf(\"42.0e+2\"), ctxt.get(\"b\"));\r\n    assertEquals(Double.valueOf(\"42.0e-1\"), ctxt.get(\"c\"));\r\n    assertEquals(Double.valueOf(\"42.0e-2\"), ctxt.get(\"d\"));\r\n    assertEquals(Double.valueOf(\"10e10\"), ctxt.get(\"e\"));\r\n    assertEquals(Double.valueOf(\"10\"), ctxt.get(\"f\"));\r\n    assertEquals(Double.valueOf(\"10\"), ctxt.get(\"g\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testAddWithStringsLenient",
  "sourceCode" : "@Test\r\nvoid testAddWithStringsLenient() {\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new JexlArithmetic(false)).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"'a' + 0\");\r\n    result = script.execute(null);\r\n    assertEquals(\"a0\", result);\r\n    script = jexl.createScript(\"0 + 'a' \");\r\n    result = script.execute(null);\r\n    assertEquals(\"0a\", result);\r\n    script = jexl.createScript(\"0 + '1.2' \");\r\n    result = script.execute(null);\r\n    assertEquals(1.2d, (Double) result, EPSILON);\r\n    script = jexl.createScript(\"'1.2' + 1.2 \");\r\n    result = script.execute(null);\r\n    assertEquals(2.4d, (Double) result, EPSILON);\r\n    script = jexl.createScript(\"1.2 + 1.2 \");\r\n    result = script.execute(null);\r\n    assertEquals(2.4d, (Double) result, EPSILON);\r\n    script = jexl.createScript(\"1.2 + '1.2' \");\r\n    result = script.execute(null);\r\n    assertEquals(2.4d, (Double) result, EPSILON);\r\n    script = jexl.createScript(\"'1.2' + 0 \");\r\n    result = script.execute(null);\r\n    assertEquals(1.2d, (Double) result, EPSILON);\r\n    script = jexl.createScript(\"'1.2' + '1.2' \");\r\n    result = script.execute(null);\r\n    assertEquals(\"1.21.2\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testAddWithStringsStrict",
  "sourceCode" : "@Test\r\nvoid testAddWithStringsStrict() {\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new JexlArithmetic(true)).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"'a' + 0\");\r\n    result = script.execute(null);\r\n    assertEquals(\"a0\", result);\r\n    script = jexl.createScript(\"0 + 'a' \");\r\n    result = script.execute(null);\r\n    assertEquals(\"0a\", result);\r\n    script = jexl.createScript(\"0 + '1.2' \");\r\n    result = script.execute(null);\r\n    assertEquals(\"01.2\", result);\r\n    script = jexl.createScript(\"'1.2' + 1.2 \");\r\n    result = script.execute(null);\r\n    assertEquals(\"1.21.2\", result);\r\n    script = jexl.createScript(\"1.2 + 1.2 \");\r\n    result = script.execute(null);\r\n    assertEquals(2.4d, (Double) result, EPSILON);\r\n    script = jexl.createScript(\"1.2 + '1.2' \");\r\n    result = script.execute(null);\r\n    assertEquals(\"1.21.2\", result);\r\n    script = jexl.createScript(\"'1.2' + 0 \");\r\n    result = script.execute(null);\r\n    assertEquals(\"1.20\", result);\r\n    script = jexl.createScript(\"'1.2' + '1.2' \");\r\n    result = script.execute(null);\r\n    assertEquals(\"1.21.2\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testArithmeticPlus",
  "sourceCode" : "@Test\r\nvoid testArithmeticPlus() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(64).arithmetic(new ArithmeticPlus(false)).create();\r\n    final JexlContext jc = new EmptyTestContext();\r\n    runOverload(jexl, jc);\r\n    runOverload(jexl, jc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testArithmeticPlusNoCache",
  "sourceCode" : "@Test\r\nvoid testArithmeticPlusNoCache() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(0).arithmetic(new ArithmeticPlus(false)).create();\r\n    final JexlContext jc = new EmptyTestContext();\r\n    runOverload(jexl, jc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testAtomicBoolean",
  "sourceCode" : "@Test\r\nvoid testAtomicBoolean() {\r\n    // in a condition\r\n    JexlScript e = JEXL.createScript(\"if (x) 1 else 2;\", \"x\");\r\n    final JexlArithmetic jexla = JEXL.getArithmetic();\r\n    final JexlContext jc = new MapContext();\r\n    final AtomicBoolean ab = new AtomicBoolean();\r\n    Object o;\r\n    o = e.execute(jc, ab);\r\n    assertEquals(Integer.valueOf(2), o);\r\n    ab.set(true);\r\n    o = e.execute(jc, ab);\r\n    assertEquals(Integer.valueOf(1), o);\r\n    // in a binary logical op\r\n    e = JEXL.createScript(\"x && y\", \"x\", \"y\");\r\n    ab.set(true);\r\n    o = e.execute(jc, ab, Boolean.FALSE);\r\n    assertFalse(jexla.toBoolean(o));\r\n    ab.set(true);\r\n    o = e.execute(jc, ab, Boolean.TRUE);\r\n    assertTrue(jexla.toBoolean(o));\r\n    ab.set(false);\r\n    o = e.execute(jc, ab, Boolean.FALSE);\r\n    assertFalse(jexla.toBoolean(o));\r\n    ab.set(false);\r\n    o = e.execute(jc, ab, Boolean.FALSE);\r\n    assertFalse(jexla.toBoolean(o));\r\n    // in arithmetic op\r\n    e = JEXL.createScript(\"x + y\", \"x\", \"y\");\r\n    ab.set(true);\r\n    o = e.execute(jc, ab, 10);\r\n    assertEquals(11, o);\r\n    o = e.execute(jc, 10, ab);\r\n    assertEquals(11, o);\r\n    o = e.execute(jc, ab, 10.d);\r\n    assertEquals(11.d, (Double) o, EPSILON);\r\n    o = e.execute(jc, 10.d, ab);\r\n    assertEquals(11.d, (Double) o, EPSILON);\r\n    final BigInteger bi10 = BigInteger.TEN;\r\n    ab.set(false);\r\n    o = e.execute(jc, ab, bi10);\r\n    assertEquals(bi10, o);\r\n    o = e.execute(jc, bi10, ab);\r\n    assertEquals(bi10, o);\r\n    final BigDecimal bd10 = BigDecimal.TEN;\r\n    ab.set(false);\r\n    o = e.execute(jc, ab, bd10);\r\n    assertEquals(bd10, o);\r\n    o = e.execute(jc, bd10, ab);\r\n    assertEquals(bd10, o);\r\n    // in a (the) monadic op\r\n    e = JEXL.createScript(\"!x\", \"x\");\r\n    ab.set(true);\r\n    o = e.execute(jc, ab);\r\n    assertFalse((Boolean) o);\r\n    ab.set(false);\r\n    o = e.execute(jc, ab);\r\n    assertTrue((Boolean) o);\r\n    // in a (the) monadic op\r\n    e = JEXL.createScript(\"-x\", \"x\");\r\n    ab.set(true);\r\n    o = e.execute(jc, ab);\r\n    assertFalse((Boolean) o);\r\n    ab.set(false);\r\n    o = e.execute(jc, ab);\r\n    assertTrue((Boolean) o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testBigDecimal",
  "sourceCode" : "@Test\r\nvoid testBigDecimal() throws Exception {\r\n    asserter.setVariable(\"left\", new BigDecimal(2));\r\n    asserter.setVariable(\"right\", new BigDecimal(6));\r\n    asserter.assertExpression(\"left + right\", new BigDecimal(8));\r\n    asserter.assertExpression(\"right - left\", new BigDecimal(4));\r\n    asserter.assertExpression(\"right * left\", new BigDecimal(12));\r\n    asserter.assertExpression(\"right / left\", new BigDecimal(3));\r\n    asserter.assertExpression(\"right % left\", new BigDecimal(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testBigdOp",
  "sourceCode" : "@Test\r\nvoid testBigdOp() {\r\n    final BigDecimal sevendot475 = new BigDecimal(\"7.475\");\r\n    final BigDecimal SO = new BigDecimal(\"325\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"SO\", SO);\r\n    final String expr = \"2.3*SO/100\";\r\n    final Object evaluate = JEXL.createExpression(expr).evaluate(jc);\r\n    assertEquals(sevendot475, evaluate);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testBigExponentLiterals",
  "sourceCode" : "// JEXL-24: big decimals with exponent\r\n@Test\r\nvoid testBigExponentLiterals() {\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final String stmt = \"{a = 42.0e1B; b = 42.0E+2B; c = 42.0e-1B; d = 42.0E-2b; e=4242.4242e1b}\";\r\n    final JexlScript expr = JEXL.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertEquals(new BigDecimal(\"42.0e+1\"), ctxt.get(\"a\"));\r\n    assertEquals(new BigDecimal(\"42.0e+2\"), ctxt.get(\"b\"));\r\n    assertEquals(new BigDecimal(\"42.0e-1\"), ctxt.get(\"c\"));\r\n    assertEquals(new BigDecimal(\"42.0e-2\"), ctxt.get(\"d\"));\r\n    assertEquals(new BigDecimal(\"4242.4242e1\"), ctxt.get(\"e\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testBigInteger",
  "sourceCode" : "@Test\r\nvoid testBigInteger() throws Exception {\r\n    asserter.setVariable(\"left\", new BigInteger(\"2\"));\r\n    asserter.setVariable(\"right\", new BigInteger(\"6\"));\r\n    asserter.assertExpression(\"left + right\", new BigInteger(\"8\"));\r\n    asserter.assertExpression(\"right - left\", new BigInteger(\"4\"));\r\n    asserter.assertExpression(\"right * left\", new BigInteger(\"12\"));\r\n    asserter.assertExpression(\"right / left\", new BigInteger(\"3\"));\r\n    asserter.assertExpression(\"right % left\", new BigInteger(\"0\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testBigLiterals",
  "sourceCode" : "// JEXL-24: big integers and big decimals\r\n@Test\r\nvoid testBigLiterals() {\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final String stmt = \"{a = 10H; b = 10h; c = 42.0B; d = 42.0b;}\";\r\n    final JexlScript expr = JEXL.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertEquals(new BigInteger(\"10\"), ctxt.get(\"a\"));\r\n    assertEquals(new BigInteger(\"10\"), ctxt.get(\"b\"));\r\n    assertEquals(new BigDecimal(\"42.0\"), ctxt.get(\"c\"));\r\n    assertEquals(new BigDecimal(\"42.0\"), ctxt.get(\"d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testBigLiteralValue",
  "sourceCode" : "@Test\r\nvoid testBigLiteralValue() {\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final JexlExpression e = JEXL.createExpression(\"9223372036854775806.5B\");\r\n    final String res = String.valueOf(e.evaluate(ctxt));\r\n    assertEquals(\"9223372036854775806.5\", res);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testCalculations",
  "sourceCode" : "/**\r\n * test some simple mathematical calculations\r\n */\r\n@Test\r\nvoid testCalculations() throws Exception {\r\n    asserter.setStrict(true, false);\r\n    /*\r\n         * test new null coersion\r\n         */\r\n    asserter.setVariable(\"imanull\", null);\r\n    asserter.assertExpression(\"imanull + 2\", Integer.valueOf(2));\r\n    asserter.assertExpression(\"imanull + imanull\", Integer.valueOf(0));\r\n    asserter.setVariable(\"foo\", Integer.valueOf(2));\r\n    asserter.assertExpression(\"foo + 2\", Integer.valueOf(4));\r\n    asserter.assertExpression(\"3 + 3\", Integer.valueOf(6));\r\n    asserter.assertExpression(\"3 + 3 + foo\", Integer.valueOf(8));\r\n    asserter.assertExpression(\"3 * 3\", Integer.valueOf(9));\r\n    asserter.assertExpression(\"3 * 3 + foo\", Integer.valueOf(11));\r\n    asserter.assertExpression(\"3 * 3 - foo\", Integer.valueOf(7));\r\n    /*\r\n         * test parenthesized exprs\r\n         */\r\n    asserter.assertExpression(\"(4 + 3) * 6\", Integer.valueOf(42));\r\n    asserter.assertExpression(\"(8 - 2) * 7\", Integer.valueOf(42));\r\n    /*\r\n         * test some floaty stuff\r\n         */\r\n    asserter.assertExpression(\"3 * \\\"3.0\\\"\", Double.valueOf(9));\r\n    asserter.assertExpression(\"3 * 3.0\", Double.valueOf(9));\r\n    /*\r\n         * test / and %\r\n         */\r\n    asserter.setStrict(false, false);\r\n    asserter.assertExpression(\"6 / 3\", Integer.valueOf(6 / 3));\r\n    asserter.assertExpression(\"6.4 / 3\", Double.valueOf(6.4 / 3));\r\n    asserter.assertExpression(\"0 / 3\", Integer.valueOf(0 / 3));\r\n    asserter.assertExpression(\"3 / 0\", Double.valueOf(0));\r\n    asserter.assertExpression(\"4 % 3\", Integer.valueOf(1));\r\n    asserter.assertExpression(\"4.8 % 3\", Double.valueOf(4.8 % 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testCoerceBigDecimal",
  "sourceCode" : "@Test\r\nvoid testCoerceBigDecimal() {\r\n    final JexlArithmetic ja = JEXL.getArithmetic();\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final String stmt = \"{a = 34L; b = 45.0D; c=56.0F; d=67B; e=78H; }\";\r\n    final JexlScript expr = JEXL.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertEquals(BigDecimal.valueOf(34), ja.toBigDecimal(ctxt.get(\"a\")));\r\n    assertEquals(BigDecimal.valueOf(45.), ja.toBigDecimal(ctxt.get(\"b\")));\r\n    assertEquals(BigDecimal.valueOf(56.), ja.toBigDecimal(ctxt.get(\"c\")));\r\n    assertEquals(BigDecimal.valueOf(67), ja.toBigDecimal(ctxt.get(\"d\")));\r\n    assertEquals(BigDecimal.valueOf(78), ja.toBigDecimal(ctxt.get(\"e\")));\r\n    assertEquals(BigDecimal.valueOf(10), ja.toBigDecimal(\"10\"));\r\n    assertEquals(BigDecimal.valueOf(1.), ja.toBigDecimal(true));\r\n    assertEquals(BigDecimal.valueOf(0.), ja.toBigDecimal(false));\r\n    // BigDecimal precision is kept when used as argument\r\n    final BigDecimal a42 = BigDecimal.valueOf(42);\r\n    final BigDecimal a49 = BigDecimal.valueOf(49);\r\n    JexlScript bde = JEXL.createScript(\"a * 6 / 7\", \"a\");\r\n    assertEquals(a42, bde.execute(null, a49));\r\n    bde = JEXL.createScript(\"(a - 12) / 12\", \"a\");\r\n    final MathContext mc = ja.getMathContext();\r\n    final BigDecimal b56 = BigDecimal.valueOf(56);\r\n    final BigDecimal b12 = BigDecimal.valueOf(12);\r\n    final BigDecimal b3dot666 = b56.subtract(b12, mc).divide(b12, mc);\r\n    assertEquals(b3dot666, bde.execute(null, b56));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testCoerceBigInteger",
  "sourceCode" : "@Test\r\nvoid testCoerceBigInteger() {\r\n    final JexlArithmetic ja = JEXL.getArithmetic();\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final String stmt = \"{a = 34L; b = 45.0D; c=56.0F; d=67B; e=78H; }\";\r\n    final JexlScript expr = JEXL.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertEquals(BigInteger.valueOf(34), ja.toBigInteger(ctxt.get(\"a\")));\r\n    assertEquals(BigInteger.valueOf(45), ja.toBigInteger(ctxt.get(\"b\")));\r\n    assertEquals(BigInteger.valueOf(56), ja.toBigInteger(ctxt.get(\"c\")));\r\n    assertEquals(BigInteger.valueOf(67), ja.toBigInteger(ctxt.get(\"d\")));\r\n    assertEquals(BigInteger.valueOf(78), ja.toBigInteger(ctxt.get(\"e\")));\r\n    assertEquals(BigInteger.valueOf(10), ja.toBigInteger(\"10\"));\r\n    assertEquals(BigInteger.valueOf(1), ja.toBigInteger(true));\r\n    assertEquals(BigInteger.valueOf(0), ja.toBigInteger(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testCoerceDouble",
  "sourceCode" : "@Test\r\nvoid testCoerceDouble() {\r\n    final JexlArithmetic ja = JEXL.getArithmetic();\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final String stmt = \"{a = 34L; b = 45.0D; c=56.0F; d=67B; e=78H; }\";\r\n    final JexlScript expr = JEXL.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertEquals(34, ja.toDouble(ctxt.get(\"a\")), EPSILON);\r\n    assertEquals(45, ja.toDouble(ctxt.get(\"b\")), EPSILON);\r\n    assertEquals(56, ja.toDouble(ctxt.get(\"c\")), EPSILON);\r\n    assertEquals(67, ja.toDouble(ctxt.get(\"d\")), EPSILON);\r\n    assertEquals(78, ja.toDouble(ctxt.get(\"e\")), EPSILON);\r\n    assertEquals(10d, ja.toDouble(\"10\"), EPSILON);\r\n    assertEquals(1.D, ja.toDouble(true), EPSILON);\r\n    assertEquals(0.D, ja.toDouble(false), EPSILON);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testCoerceInteger",
  "sourceCode" : "@Test\r\nvoid testCoerceInteger() {\r\n    final JexlArithmetic ja = JEXL.getArithmetic();\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final String stmt = \"a = 34L; b = 45.0D; c=56.0F; d=67B; e=78H;\";\r\n    final JexlScript expr = JEXL.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertEquals(34, ja.toInteger(ctxt.get(\"a\")));\r\n    assertEquals(45, ja.toInteger(ctxt.get(\"b\")));\r\n    assertEquals(56, ja.toInteger(ctxt.get(\"c\")));\r\n    assertEquals(67, ja.toInteger(ctxt.get(\"d\")));\r\n    assertEquals(78, ja.toInteger(ctxt.get(\"e\")));\r\n    assertEquals(10, ja.toInteger(\"10\"));\r\n    assertEquals(1, ja.toInteger(true));\r\n    assertEquals(0, ja.toInteger(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testCoerceLong",
  "sourceCode" : "@Test\r\nvoid testCoerceLong() {\r\n    final JexlArithmetic ja = JEXL.getArithmetic();\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final String stmt = \"a = 34L; b = 45.0D; c=56.0F; d=67B; e=78H;\";\r\n    final JexlScript expr = JEXL.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertEquals(34L, ja.toLong(ctxt.get(\"a\")));\r\n    assertEquals(45L, ja.toLong(ctxt.get(\"b\")));\r\n    assertEquals(56L, ja.toLong(ctxt.get(\"c\")));\r\n    assertEquals(67L, ja.toLong(ctxt.get(\"d\")));\r\n    assertEquals(78L, ja.toLong(ctxt.get(\"e\")));\r\n    assertEquals(10L, ja.toLong(\"10\"));\r\n    assertEquals(1L, ja.toLong(true));\r\n    assertEquals(0L, ja.toLong(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testCoercions",
  "sourceCode" : "@Test\r\nvoid testCoercions() throws Exception {\r\n    // numerics default to Integer\r\n    asserter.assertExpression(\"1\", Integer.valueOf(1));\r\n    asserter.assertExpression(\"5L\", Long.valueOf(5));\r\n    asserter.setVariable(\"I2\", Integer.valueOf(2));\r\n    asserter.setVariable(\"L2\", Long.valueOf(2));\r\n    asserter.setVariable(\"L3\", Long.valueOf(3));\r\n    asserter.setVariable(\"B10\", BigInteger.TEN);\r\n    // Integer & Integer => Integer\r\n    asserter.assertExpression(\"I2 + 2\", Integer.valueOf(4));\r\n    asserter.assertExpression(\"I2 * 2\", Integer.valueOf(4));\r\n    asserter.assertExpression(\"I2 - 2\", Integer.valueOf(0));\r\n    asserter.assertExpression(\"I2 / 2\", Integer.valueOf(1));\r\n    // Integer & Long => Long\r\n    asserter.assertExpression(\"I2 * L2\", Long.valueOf(4));\r\n    asserter.assertExpression(\"I2 / L2\", Long.valueOf(1));\r\n    // Long & Long => Long\r\n    asserter.assertExpression(\"L2 + 3\", Long.valueOf(5));\r\n    asserter.assertExpression(\"L2 + L3\", Long.valueOf(5));\r\n    asserter.assertExpression(\"L2 / L2\", Long.valueOf(1));\r\n    asserter.assertExpression(\"L2 / 2\", Long.valueOf(1));\r\n    // BigInteger\r\n    asserter.assertExpression(\"B10 / 10\", BigInteger.ONE);\r\n    asserter.assertExpression(\"B10 / I2\", new BigInteger(\"5\"));\r\n    asserter.assertExpression(\"B10 / L2\", new BigInteger(\"5\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testCompare",
  "sourceCode" : "@Test\r\nvoid testCompare() {\r\n    // JEXL doesn't support more than one operator in the same expression, for example: 1 == 1 == 1\r\n    final Object[] EXPRESSIONS = { // Basic compare\r\n    \"1 == 1\", true, \"1 === 1\", true, \"1.d === 1\", false, \"1 != 1\", false, \"1 != 2\", true, \"1 > 2\", false, \"1 >= 2\", false, \"1 < 2\", true, \"1 <= 2\", true, // Int <-> Float Coercion\r\n    \"1.0 == 1\", true, \"1 == 1.0\", true, \"1.1 != 1\", true, \"1.1 < 2\", true, // Big Decimal <-> Big Integer Coercion\r\n    \"1.0b == 1h\", true, \"1.0b !== 1h\", true, \"1h == 1.0b\", true, \"1.1b != 1h\", true, \"1.1b < 2h\", true, // Mix all type of numbers\r\n    // long and int\r\n    \"1l == 1.0\", // long and int\r\n    true, // long and int\r\n    \"1l !== 1.0\", // long and int\r\n    true, // double and float\r\n    \"1.0d == 1.0f\", // double and float\r\n    true, \"1l == 1.0b\", true, \"1l == 1h\", true, \"1.0d == 1.0b\", true, \"1.0f == 1.0b\", true, \"1.0d == 1h\", true, \"1.0f == 1h\", true, // numbers and strings\r\n    \"'1' == 1\", true, \"'1' == 1l\", true, \"'1' == 1h\", true, // empty string is coerced to zero (ECMA compliance)\r\n    \"'' == 0\", // empty string is coerced to zero (ECMA compliance)\r\n    true, \"'1.0' == 1\", true, \"'1.0' == 1.0f\", true, \"'1.0' == 1.0d\", true, \"'1.0' == 1.0b\", true, \"'1.01' == 1.01\", true, \"'1.01' == 1\", false, \"'1.01' == 1b\", false, \"'1.01' == 1h\", false, \"'1.00001' == 1b\", false, \"'1.00001' == 1h\", false, \"'1.00000001' == 1\", false, \"'1.00000001' == 1b\", false, \"'1.00000001' == 1h\", false, \"1.0 >= '1'\", true, \"1.0 > '1'\", false, \"1.0 == 'a'\", false, \"10 == 'a'\", false, \"10 > 'a'\", ArithmeticException.class, \"10.0 > 'a'\", ArithmeticException.class, \"'a' <= 10b\", ArithmeticException.class, \"'a' >= 1h\", ArithmeticException.class };\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext jc = new EmptyTestContext();\r\n    for (int e = 0; e < EXPRESSIONS.length; e += 2) {\r\n        final String stext = (String) EXPRESSIONS[e];\r\n        final Object expected = EXPRESSIONS[e + 1];\r\n        final JexlExpression expression = jexl.createExpression(stext);\r\n        try {\r\n            final Object result = expression.evaluate(jc);\r\n            assertEquals(expected, result, () -> \"failed on \" + stext);\r\n        } catch (final JexlException jexlException) {\r\n            final Throwable cause = jexlException.getCause();\r\n            if (cause == null || !cause.getClass().equals(expected)) {\r\n                fail(stext);\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testDivClass",
  "sourceCode" : "@Test\r\nvoid testDivClass() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext jc = new MapContext();\r\n    final Object ra = jexl.createExpression(\"463.0d / 0.1\").evaluate(jc);\r\n    assertEquals(Double.class, ra.getClass());\r\n    final Object r0 = jexl.createExpression(\"463.0B / 0.1\").evaluate(jc);\r\n    assertEquals(java.math.BigDecimal.class, r0.getClass());\r\n    final Object r1 = jexl.createExpression(\"463.0B / 0.1B\").evaluate(jc);\r\n    assertEquals(java.math.BigDecimal.class, r1.getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testDivideByZero",
  "sourceCode" : "/**\r\n * if silent, all arith exception return 0.0\r\n * if not silent, all arith exception throw\r\n */\r\n@Test\r\nvoid testDivideByZero() throws Exception {\r\n    final Map<String, Object> vars = new HashMap<>();\r\n    final JexlEvalContext context = new JexlEvalContext(vars);\r\n    final JexlOptions options = context.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    vars.put(\"aByte\", Byte.valueOf((byte) 1));\r\n    vars.put(\"aShort\", Short.valueOf((short) 2));\r\n    vars.put(\"aInteger\", Integer.valueOf(3));\r\n    vars.put(\"aLong\", Long.valueOf(4));\r\n    vars.put(\"aFloat\", Float.valueOf((float) 5.5));\r\n    vars.put(\"aDouble\", Double.valueOf(6.6));\r\n    vars.put(\"aBigInteger\", new BigInteger(\"7\"));\r\n    vars.put(\"aBigDecimal\", new BigDecimal(\"8.8\"));\r\n    vars.put(\"zByte\", Byte.valueOf((byte) 0));\r\n    vars.put(\"zShort\", Short.valueOf((short) 0));\r\n    vars.put(\"zInteger\", Integer.valueOf(0));\r\n    vars.put(\"zLong\", Long.valueOf(0));\r\n    vars.put(\"zFloat\", Float.valueOf(0));\r\n    vars.put(\"zDouble\", Double.valueOf(0));\r\n    vars.put(\"zBigInteger\", new BigInteger(\"0\"));\r\n    vars.put(\"zBigDecimal\", new BigDecimal(\"0\"));\r\n    final String[] tnames = { \"Byte\", \"Short\", \"Integer\", \"Long\", \"Float\", \"Double\", \"BigInteger\", \"BigDecimal\" };\r\n    // number of permutations this will generate\r\n    final int PERMS = tnames.length * tnames.length;\r\n    final JexlEngine jexl = JEXL;\r\n    // for non-silent, silent...\r\n    for (int s = 0; s < 2; ++s) {\r\n        final boolean strict = s != 0;\r\n        options.setStrict(true);\r\n        options.setStrictArithmetic(strict);\r\n        int zthrow = 0;\r\n        int zeval = 0;\r\n        // for vars of all types...\r\n        for (final String vname : tnames) {\r\n            // for zeros of all types...\r\n            for (final String zname : tnames) {\r\n                // divide var by zero\r\n                final String expr = \"a\" + vname + \" / \" + \"z\" + zname;\r\n                try {\r\n                    final JexlExpression zexpr = jexl.createExpression(expr);\r\n                    final Object nan = zexpr.evaluate(context);\r\n                    // check we have a zero & increment zero count\r\n                    if (nan instanceof Number) {\r\n                        final double zero = ((Number) nan).doubleValue();\r\n                        if (zero == 0.0) {\r\n                            zeval += 1;\r\n                        }\r\n                    }\r\n                } catch (final Exception any) {\r\n                    // increment the exception count\r\n                    zthrow += 1;\r\n                }\r\n            }\r\n        }\r\n        if (strict) {\r\n            assertEquals(zthrow, PERMS, \"All expressions should have thrown \" + zthrow + \"/\" + PERMS);\r\n        } else {\r\n            assertEquals(zeval, PERMS, \"All expressions should have zeroed \" + zeval + \"/\" + PERMS);\r\n        }\r\n    }\r\n    debuggerCheck(jexl);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testDivideEdges",
  "sourceCode" : "@Test\r\nvoid testDivideEdges() {\r\n    assertNullOperand(() -> jexla.divide(null, null));\r\n    assertEquals(0, jexlb.divide(null, null));\r\n    assertNullOperand(() -> jexla.divide(null, null));\r\n    assertEquals(0, jexlb.mod(null, null));\r\n    assertArithmeticException(() -> jexla.divide(1, 0));\r\n    assertArithmeticException(() -> jexla.divide(1L, 0L));\r\n    assertArithmeticException(() -> jexla.divide(1f, 0f));\r\n    assertArithmeticException(() -> jexla.divide(1d, 0d));\r\n    assertArithmeticException(() -> jexla.divide(BigInteger.ONE, BigInteger.ZERO));\r\n    assertArithmeticException(() -> jexla.divide(BigInteger.ONE, BigDecimal.ZERO));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testEmpty",
  "sourceCode" : "@Test\r\nvoid testEmpty() throws Exception {\r\n    final Object[] SCRIPTS = { \"var x = null; log('x = %s', x);\", 0, \"var x = 'abc'; log('x = %s', x);\", 1, \"var x = 333; log('x = %s', x);\", 1, \"var x = [1, 2]; log('x = %s', x);\", 2, \"var x = ['a', 'b']; log('x = %s', x);\", 2, \"var x = {1:'A', 2:'B'}; log('x = %s', x);\", 1, \"var x = null; return empty(x);\", true, \"var x = ''; return empty(x);\", true, \"var x = 'abc'; return empty(x);\", false, \"var x = 0; return empty(x);\", true, \"var x = 333; return empty(x);\", false, \"var x = []; return empty(x);\", true, \"var x = [1, 2]; return empty(x);\", false, \"var x = ['a', 'b']; return empty(x);\", false, \"var x = [...]; return empty(x);\", true, \"var x = [1, 2,...]; return empty(x);\", false, \"var x = {:}; return empty(x);\", true, \"var x = {1:'A', 2:'B'}; return empty(x);\", false, \"var x = {}; return empty(x);\", true, \"var x = {'A','B'}; return empty(x);\", false };\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext jc = new EmptyTestContext();\r\n    JexlScript script;\r\n    for (int e = 0; e < SCRIPTS.length; e += 2) {\r\n        final String stext = (String) SCRIPTS[e];\r\n        final Object expected = SCRIPTS[e + 1];\r\n        script = jexl.createScript(stext);\r\n        final Object result = script.execute(jc);\r\n        assertEquals(expected, result, () -> \"failed on \" + stext);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testEmptyDouble",
  "sourceCode" : "@Test\r\nvoid testEmptyDouble() {\r\n    Object x;\r\n    x = JEXL.createScript(\"4294967296.d\").execute(null);\r\n    assertEquals(4294967296.0d, (Double) x, EPSILON);\r\n    checkEmpty(x, false);\r\n    x = JEXL.createScript(\"4294967296.0d\").execute(null);\r\n    assertEquals(4294967296.0d, (Double) x, EPSILON);\r\n    checkEmpty(x, false);\r\n    x = JEXL.createScript(\"0.0d\").execute(null);\r\n    assertEquals(0.0d, (Double) x, EPSILON);\r\n    checkEmpty(x, true);\r\n    x = Double.NaN;\r\n    checkEmpty(x, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testEmptyFloat",
  "sourceCode" : "@Test\r\nvoid testEmptyFloat() {\r\n    Object x;\r\n    x = JEXL.createScript(\"4294967296.f\").execute(null);\r\n    assertEquals(4294967296.0f, (Float) x, EPSILON);\r\n    checkEmpty(x, false);\r\n    x = JEXL.createScript(\"4294967296.0f\").execute(null);\r\n    assertEquals(4294967296.0f, (Float) x, EPSILON);\r\n    checkEmpty(x, false);\r\n    x = JEXL.createScript(\"0.0f\").execute(null);\r\n    assertEquals(0.0f, (Float) x, EPSILON);\r\n    checkEmpty(x, true);\r\n    x = Float.NaN;\r\n    checkEmpty(x, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testEmptyLong",
  "sourceCode" : "@Test\r\nvoid testEmptyLong() {\r\n    Object x;\r\n    x = JEXL.createScript(\"new('java.lang.Long', 4294967296)\").execute(null);\r\n    assertEquals(4294967296L, ((Long) x).longValue());\r\n    x = JEXL.createScript(\"new Long(4294967296)\").execute(null);\r\n    assertEquals(4294967296L, ((Long) x).longValue());\r\n    x = JEXL.createScript(\"new('java.lang.Long', '4294967296')\").execute(null);\r\n    assertEquals(4294967296L, ((Long) x).longValue());\r\n    x = JEXL.createScript(\"4294967296l\").execute(null);\r\n    assertEquals(4294967296L, ((Long) x).longValue());\r\n    x = JEXL.createScript(\"4294967296L\").execute(null);\r\n    assertEquals(4294967296L, ((Long) x).longValue());\r\n    checkEmpty(x, false);\r\n    x = JEXL.createScript(\"0L\").execute(null);\r\n    assertEquals(0, ((Long) x).longValue());\r\n    checkEmpty(x, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testFailAllOperators",
  "sourceCode" : "@Test\r\nvoid testFailAllOperators() {\r\n    // @formatter:off\r\n    final String[] scripts = { \"(x, y)->{ x < y }\", \"(x, y)->{ x <= y }\", \"(x, y)->{ x > y }\", \"(x, y)->{ x >= y }\", \"(x, y)->{ x == y }\", \"(x, y)->{ x != y }\", \"(x, y)->{ x === y }\", \"(x, y)->{ x !== y }\", \"(x, y)->{ x % y }\", \"(x, y)->{ x * y }\", \"(x, y)->{ x + y }\", \"(x, y)->{ x - y }\", \"(x, y)->{ x ^ y }\", \"(x, y)->bitwiseXor(x,y)\", \"(x, y)->{ x || y }\", \"(x, y)->{ x | y }\", \"(x, y)->bitwiseOr(x,y)\", \"(x, y)->{ x << y }\", \"(x, y)->{ x >> y }\", \"(x, y)->{ x >>> y }\", \"(x, y)->{ x & y }\", \"(x, y)->{ x && y }\", \"(x, y)->bitwiseAnd(x,y)\", \"(x, y)->{ x =^ y }\", \"(x, y)->{ x !^ y }\", \"(x, y)->{ x =$ y }\", \"(x, y)->{ x !$ y }\", \"(x, y)->{ x =~ y }\", \"(x, y)->{ x !~ y }\", \"(x, ignore)->{ -x }\", \"(x, ignore)->{ +x }\", \"(x, ignore)->{ --x }\", \"(x, ignore)->{ ++x }\", \"(x, ignore)->{ x-- }\", \"(x, ignore)->{ x++ }\" };\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().cache(64).arithmetic(new ArithmeticFail(true)).create();\r\n    final JexlContext jc = new EmptyTestContext();\r\n    for (final String src : scripts) {\r\n        final JexlScript script = jexl.createScript(src);\r\n        assertThrows(JexlException.class, () -> script.execute(jc, new Var(42), new Var(43)));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testInfiniteArithmetic",
  "sourceCode" : "@Test\r\nvoid testInfiniteArithmetic() {\r\n    final Map<String, Object> ns = new HashMap<>();\r\n    ns.put(\"math\", Math.class);\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new Arithmetic132()).namespaces(ns).create();\r\n    Object evaluate = jexl.createExpression(\"1/0\").evaluate(null);\r\n    assertTrue(Double.isInfinite((Double) evaluate));\r\n    evaluate = jexl.createExpression(\"-1/0\").evaluate(null);\r\n    assertTrue(Double.isInfinite((Double) evaluate));\r\n    evaluate = jexl.createExpression(\"1.0/0.0\").evaluate(null);\r\n    assertTrue(Double.isInfinite((Double) evaluate));\r\n    evaluate = jexl.createExpression(\"-1.0/0.0\").evaluate(null);\r\n    assertTrue(Double.isInfinite((Double) evaluate));\r\n    evaluate = jexl.createExpression(\"math:abs(-42)\").evaluate(null);\r\n    assertEquals(42, evaluate);\r\n    evaluate = jexl.createExpression(\"42B / 7\").evaluate(null);\r\n    assertEquals(6, evaluate);\r\n    evaluate = jexl.createExpression(\"42.7B / 7\").evaluate(null);\r\n    assertEquals(BigDecimal.valueOf(6.1d), evaluate);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testInstanceOf0",
  "sourceCode" : "@Test\r\nvoid testInstanceOf0() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(false).create();\r\n    final JexlContext ctxt = new InstanceofContext();\r\n    runInstanceof(jexl, ctxt);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testInstanceOf1",
  "sourceCode" : "@Test\r\nvoid testInstanceOf1() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(false).imports(\"java.lang\").create();\r\n    runInstanceof(jexl, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testIntegerCoercionEdges",
  "sourceCode" : "@Test\r\nvoid testIntegerCoercionEdges() {\r\n    assertNullOperand(() -> jexla.toBoolean(null));\r\n    assertTrue(jexla.toBoolean(date));\r\n    // int coercions\r\n    assertNullOperand(() -> jexla.toInteger(null));\r\n    assertEquals(0, jexlb.toInteger(null));\r\n    assertArithmeticException(() -> jexla.toInteger(date));\r\n    assertEquals(0, jexla.toInteger(Double.NaN));\r\n    assertEquals(0, jexla.toInteger(\"\"));\r\n    assertEquals('b', jexla.toInteger('b'));\r\n    assertEquals(1, jexla.toInteger(new AtomicBoolean(true)));\r\n    assertEquals(0, jexla.toInteger(new AtomicBoolean()));\r\n    // long coercions\r\n    assertNullOperand(() -> jexla.toLong(null));\r\n    assertEquals(0L, jexlb.toLong(null));\r\n    assertArithmeticException(() -> jexla.toLong(date));\r\n    assertEquals(0L, jexla.toLong(Double.NaN));\r\n    assertEquals(0L, jexla.toLong(\"\"));\r\n    assertEquals('b', jexla.toLong('b'));\r\n    assertEquals(1L, jexla.toLong(new AtomicBoolean(true)));\r\n    assertEquals(0L, jexla.toLong(new AtomicBoolean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testIsFloatingPointPattern",
  "sourceCode" : "@Test\r\nvoid testIsFloatingPointPattern() {\r\n    final JexlArithmetic ja = new JexlArithmetic(true);\r\n    assertFalse(ja.isFloatingPointNumber(\"floating point\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"a1.\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"b1.2\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"-10.2a-34\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"+10.2a+34\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"0\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"1\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"12A\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"2F3\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"23\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"+3\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"+34\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"+3-4\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"+3.-4\"));\r\n    assertFalse(ja.isFloatingPointNumber(\"3ee4\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"0.\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"1.\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"1.2\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"1.2e3\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"2e3\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"+2e-3\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"+23E-34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"+23.E-34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"-23.4E+45\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"1.2e34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"10.2e34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"+10.2e34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"-10.2e34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"10.2e-34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"10.2e+34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"-10.2e-34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"+10.2e+34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"-10.2E-34\"));\r\n    assertTrue(ja.isFloatingPointNumber(\"+10.2E+34\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testJexl173",
  "sourceCode" : "@Test\r\nvoid testJexl173() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext jc = new MapContext();\r\n    final Callable173 c173 = new Callable173();\r\n    JexlScript e = jexl.createScript(\"c173(9, 6)\", \"c173\");\r\n    Object result = e.execute(jc, c173);\r\n    assertEquals(54, result);\r\n    e = jexl.createScript(\"c173('fourty', 'two')\", \"c173\");\r\n    result = e.execute(jc, c173);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testLeftNullOperand",
  "sourceCode" : "@Test\r\nvoid testLeftNullOperand() throws Exception {\r\n    asserter.setVariable(\"left\", null);\r\n    asserter.setVariable(\"right\", Integer.valueOf(8));\r\n    asserter.setStrict(true);\r\n    asserter.failExpression(\"left + right\", \".*null.*\");\r\n    asserter.failExpression(\"left - right\", \".*null.*\");\r\n    asserter.failExpression(\"left * right\", \".*null.*\");\r\n    asserter.failExpression(\"left / right\", \".*null.*\");\r\n    asserter.failExpression(\"left % right\", \".*null.*\");\r\n    asserter.failExpression(\"left & right\", \".*null.*\");\r\n    asserter.failExpression(\"left | right\", \".*null.*\");\r\n    asserter.failExpression(\"left ^ right\", \".*null.*\");\r\n    asserter.failExpression(\"left < right\", \".*null.*\");\r\n    asserter.failExpression(\"left <= right\", \".*null.*\");\r\n    asserter.failExpression(\"left > right\", \".*null.*\");\r\n    asserter.failExpression(\"left >= right\", \".*null.*\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testLeftNullOperand2",
  "sourceCode" : "@Test\r\nvoid testLeftNullOperand2() throws Exception {\r\n    asserter.setVariable(\"x.left\", null);\r\n    asserter.setVariable(\"right\", Integer.valueOf(8));\r\n    asserter.setStrict(true);\r\n    asserter.failExpression(\"x.left + right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left - right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left * right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left / right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left % right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left & right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left | right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left ^ right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left < right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left <= right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left > right\", \".*null.*\");\r\n    asserter.failExpression(\"x.left >= right\", \".*null.*\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testLongLiterals",
  "sourceCode" : "// JEXL-24: long integers (and doubles)\r\n@Test\r\nvoid testLongLiterals() {\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final String stmt = \"{a = 10L; b = 10l; c = 42.0D; d = 42.0d; e=56.3F; f=56.3f; g=63.5; h=0x10; i=010; j=0x10L; k=010l}\";\r\n    final JexlScript expr = JEXL.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertEquals(10L, ctxt.get(\"a\"));\r\n    assertEquals(10L, ctxt.get(\"b\"));\r\n    assertEquals(42.0D, ctxt.get(\"c\"));\r\n    assertEquals(42.0d, ctxt.get(\"d\"));\r\n    assertEquals(56.3f, ctxt.get(\"e\"));\r\n    assertEquals(56.3f, ctxt.get(\"f\"));\r\n    assertEquals(63.5d, ctxt.get(\"g\"));\r\n    assertEquals(0x10, ctxt.get(\"h\"));\r\n    // octal 010\r\n    assertEquals(010, ctxt.get(\"i\"));\r\n    // hexa 010L\r\n    assertEquals(0x10L, ctxt.get(\"j\"));\r\n    // octal 010L\r\n    assertEquals(010L, ctxt.get(\"k\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testMinusClass",
  "sourceCode" : "@Test\r\nvoid testMinusClass() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext jc = new MapContext();\r\n    final Object ra = jexl.createExpression(\"463.0d - 0.1\").evaluate(jc);\r\n    assertEquals(Double.class, ra.getClass());\r\n    final Object r0 = jexl.createExpression(\"463.0B - 0.1\").evaluate(jc);\r\n    assertEquals(java.math.BigDecimal.class, r0.getClass());\r\n    final Object r1 = jexl.createExpression(\"463.0B - 0.1B\").evaluate(jc);\r\n    assertEquals(java.math.BigDecimal.class, r1.getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testMinusMinusPostfix",
  "sourceCode" : "@Test\r\nvoid testMinusMinusPostfix() throws Exception {\r\n    asserter.setVariable(\"aByte\", Byte.valueOf((byte) 2));\r\n    asserter.setVariable(\"aShort\", Short.valueOf((short) 3));\r\n    asserter.setVariable(\"anInteger\", Integer.valueOf(4));\r\n    asserter.setVariable(\"aLong\", Long.valueOf(5));\r\n    asserter.setVariable(\"aFloat\", Float.valueOf((float) 6.6));\r\n    asserter.setVariable(\"aDouble\", Double.valueOf(7.7));\r\n    asserter.setVariable(\"aBigInteger\", new BigInteger(\"8\"));\r\n    asserter.setVariable(\"aBigDecimal\", new BigDecimal(\"9.9\"));\r\n    asserter.setVariable(\"aString\", \"forty-two\");\r\n    asserter.assertExpression(\"aByte--\", Byte.valueOf((byte) 2));\r\n    asserter.assertExpression(\"aShort--\", Short.valueOf((short) 3));\r\n    asserter.assertExpression(\"anInteger--\", Integer.valueOf(4));\r\n    asserter.assertExpression(\"aLong--\", Long.valueOf(5));\r\n    asserter.assertExpression(\"aFloat--\", Float.valueOf((float) 6.6));\r\n    asserter.assertExpression(\"aDouble--\", Double.valueOf(7.7));\r\n    asserter.assertExpression(\"aBigInteger--\", new BigInteger(\"8\"));\r\n    asserter.assertExpression(\"aBigDecimal--\", new BigDecimal(\"9.9\"));\r\n    asserter.assertExpression(\"aByte\", Byte.valueOf((byte) 1));\r\n    asserter.assertExpression(\"aShort\", Short.valueOf((short) 2));\r\n    asserter.assertExpression(\"anInteger\", Integer.valueOf(3));\r\n    asserter.assertExpression(\"aLong\", Long.valueOf(4));\r\n    asserter.assertExpression(\"aFloat\", Float.valueOf((float) 5.6));\r\n    asserter.assertExpression(\"aDouble\", Double.valueOf(6.7));\r\n    asserter.assertExpression(\"aBigInteger\", new BigInteger(\"7\"));\r\n    asserter.assertExpression(\"aBigDecimal\", new BigDecimal(\"8.9\"));\r\n    asserter.failExpression(\"aString--\", \"--\", String::contains);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testMinusMinusPrefix",
  "sourceCode" : "@Test\r\nvoid testMinusMinusPrefix() throws Exception {\r\n    asserter.setVariable(\"aByte\", Byte.valueOf((byte) 2));\r\n    asserter.setVariable(\"aShort\", Short.valueOf((short) 3));\r\n    asserter.setVariable(\"anInteger\", Integer.valueOf(4));\r\n    asserter.setVariable(\"aLong\", Long.valueOf(5));\r\n    asserter.setVariable(\"aFloat\", Float.valueOf((float) 6.6));\r\n    asserter.setVariable(\"aDouble\", Double.valueOf(7.7));\r\n    asserter.setVariable(\"aBigInteger\", new BigInteger(\"8\"));\r\n    asserter.setVariable(\"aBigDecimal\", new BigDecimal(\"9.9\"));\r\n    asserter.setVariable(\"aString\", \"forty-two\");\r\n    asserter.assertExpression(\"--aByte\", Byte.valueOf((byte) 1));\r\n    asserter.assertExpression(\"--aShort\", Short.valueOf((short) 2));\r\n    asserter.assertExpression(\"--anInteger\", Integer.valueOf(3));\r\n    asserter.assertExpression(\"--aLong\", Long.valueOf(4));\r\n    asserter.assertExpression(\"--aFloat\", Float.valueOf((float) 5.6));\r\n    asserter.assertExpression(\"--aDouble\", Double.valueOf(6.7));\r\n    asserter.assertExpression(\"--aBigInteger\", new BigInteger(\"7\"));\r\n    asserter.assertExpression(\"--aBigDecimal\", new BigDecimal(\"8.9\"));\r\n    asserter.failExpression(\"aString--\", \"--\", String::contains);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testModEdge",
  "sourceCode" : "@Test\r\nvoid testModEdge() {\r\n    assertNullOperand(() -> jexla.mod(null, null));\r\n    assertEquals(0, jexlb.mod(null, null));\r\n    assertArithmeticException(() -> jexla.mod(1, 0));\r\n    assertArithmeticException(() -> jexla.mod(1L, 0L));\r\n    assertArithmeticException(() -> jexla.mod(1f, 0f));\r\n    assertArithmeticException(() -> jexla.mod(1d, 0d));\r\n    assertArithmeticException(() -> jexla.mod(BigInteger.ONE, BigInteger.ZERO));\r\n    assertArithmeticException(() -> jexla.mod(BigInteger.ONE, BigDecimal.ZERO));\r\n    assertNullOperand(() -> jexla.divide(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testMultClass",
  "sourceCode" : "/**\r\n * JEXL-156.\r\n */\r\n@Test\r\nvoid testMultClass() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext jc = new MapContext();\r\n    final Object ra = jexl.createExpression(\"463.0d * 0.1\").evaluate(jc);\r\n    assertEquals(Double.class, ra.getClass());\r\n    final Object r0 = jexl.createExpression(\"463.0B * 0.1\").evaluate(jc);\r\n    assertEquals(java.math.BigDecimal.class, r0.getClass());\r\n    final Object r1 = jexl.createExpression(\"463.0B * 0.1B\").evaluate(jc);\r\n    assertEquals(java.math.BigDecimal.class, r1.getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testNaN",
  "sourceCode" : "@Test\r\nvoid testNaN() {\r\n    final Map<String, Object> ns = new HashMap<>();\r\n    ns.put(\"double\", Double.class);\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(ns).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"#NaN\");\r\n    result = script.execute(null);\r\n    assertTrue(Double.isNaN((Double) result));\r\n    script = jexl.createScript(\"NaN\");\r\n    result = script.execute(null);\r\n    assertTrue(Double.isNaN((Double) result));\r\n    script = jexl.createScript(\"double:isNaN(#NaN)\");\r\n    result = script.execute(null);\r\n    assertTrue((Boolean) result);\r\n    script = jexl.createScript(\"double:isNaN(NaN)\");\r\n    result = script.execute(null);\r\n    assertTrue((Boolean) result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testNarrowBigDecimal",
  "sourceCode" : "@Test\r\nvoid testNarrowBigDecimal() throws Exception {\r\n    final List<String> ls = Arrays.asList(\"zero\", \"one\", \"two\");\r\n    asserter.setVariable(\"list\", ls);\r\n    asserter.assertExpression(\"a -> list.get(a)\", \"zero\", BigDecimal.ZERO);\r\n    asserter.assertExpression(\"a -> list.get(a)\", \"one\", BigDecimal.ONE);\r\n    asserter.assertExpression(\"a -> list.get(2B)\", \"two\");\r\n    final BigDecimal bd42 = BigDecimal.valueOf(42);\r\n    asserter.setVariable(\"bd10\", BigDecimal.valueOf(10d));\r\n    asserter.setVariable(\"bd420\", BigDecimal.valueOf(420d));\r\n    asserter.assertExpression(\"420 / bd10\", bd42);\r\n    asserter.assertExpression(\"420l / bd10\", bd42);\r\n    asserter.assertExpression(\"420H / bd10\", bd42);\r\n    asserter.assertExpression(\"bd420 / 10\", bd42);\r\n    asserter.assertExpression(\"bd420 / 10H\", bd42);\r\n    asserter.assertExpression(\"bd420 / 10B\", bd42);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testNarrowBigInteger",
  "sourceCode" : "@Test\r\nvoid testNarrowBigInteger() throws Exception {\r\n    final List<String> ls = Arrays.asList(\"zero\", \"one\", \"two\");\r\n    asserter.setVariable(\"list\", ls);\r\n    asserter.assertExpression(\"a -> list.get(a)\", \"zero\", BigInteger.ZERO);\r\n    asserter.assertExpression(\"a -> list.get(a)\", \"one\", BigInteger.ONE);\r\n    asserter.assertExpression(\"a -> list.get(2H)\", \"two\");\r\n    final BigInteger b42 = BigInteger.valueOf(42);\r\n    asserter.setVariable(\"bi10\", BigInteger.valueOf(10));\r\n    asserter.setVariable(\"bi420\", BigInteger.valueOf(420));\r\n    asserter.assertExpression(\"420 / bi10\", b42);\r\n    asserter.assertExpression(\"420l / bi10\", b42);\r\n    asserter.assertExpression(\"bi420 / 420\", BigInteger.ONE);\r\n    asserter.assertExpression(\"bi420 / 420l\", BigInteger.ONE);\r\n    asserter.assertExpression(\"bi420 / 420H\", BigInteger.ONE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testNullArgs",
  "sourceCode" : "@Test\r\nvoid testNullArgs() {\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new JexlArithmetic(true) {\r\n\r\n        @Override\r\n        public boolean isStrict(final JexlOperator op) {\r\n            return JexlOperator.ADD != op && super.isStrict(op);\r\n        }\r\n    }).create();\r\n    final JexlScript script = jexl.createScript(\"'1.2' + x \", \"x\");\r\n    final Object result = script.execute(null);\r\n    assertEquals(\"1.2\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testNullOperand",
  "sourceCode" : "@Test\r\nvoid testNullOperand() throws Exception {\r\n    asserter.setVariable(\"right\", null);\r\n    asserter.failExpression(\"~right\", \".*null.*\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testNullOperands",
  "sourceCode" : "@Test\r\nvoid testNullOperands() throws Exception {\r\n    asserter.setVariable(\"left\", null);\r\n    asserter.setVariable(\"right\", null);\r\n    asserter.failExpression(\"left + right\", \".*null.*\");\r\n    asserter.failExpression(\"left - right\", \".*null.*\");\r\n    asserter.failExpression(\"left * right\", \".*null.*\");\r\n    asserter.failExpression(\"left / right\", \".*null.*\");\r\n    asserter.failExpression(\"left % right\", \".*null.*\");\r\n    asserter.failExpression(\"left & right\", \".*null.*\");\r\n    asserter.failExpression(\"left | right\", \".*null.*\");\r\n    asserter.failExpression(\"left ^ right\", \".*null.*\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testOperatorsEdges",
  "sourceCode" : "@Test\r\nvoid testOperatorsEdges() {\r\n    assertNullOperand(() -> jexla.multiply(null, null));\r\n    assertEquals(0, jexlb.multiply(null, null));\r\n    assertNullOperand(() -> jexla.add(null, null));\r\n    assertEquals(0, jexlb.add(null, null));\r\n    assertNullOperand(() -> jexla.subtract(null, null));\r\n    assertEquals(0, jexlb.subtract(null, null));\r\n    assertTrue(jexla.contains(null, null));\r\n    assertFalse(jexla.contains(true, null));\r\n    assertFalse(jexla.contains(null, true));\r\n    assertTrue(jexla.endsWith(null, null));\r\n    assertFalse(jexla.endsWith(true, null));\r\n    assertFalse(jexla.endsWith(null, true));\r\n    assertTrue(jexla.startsWith(null, null));\r\n    assertFalse(jexla.startsWith(true, null));\r\n    assertFalse(jexla.startsWith(null, true));\r\n    assertTrue(jexla.isEmpty(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testOption",
  "sourceCode" : "@Test\r\nvoid testOption() {\r\n    final Map<String, Object> vars = new HashMap<>();\r\n    final JexlEvalContext context = new JexlEvalContext(vars);\r\n    final JexlOptions options = context.getEngineOptions();\r\n    options.setStrictArithmetic(true);\r\n    final JexlScript script = JEXL.createScript(\"0 + '1.2' \");\r\n    Object result;\r\n    options.setStrictArithmetic(true);\r\n    result = script.execute(context);\r\n    assertEquals(\"01.2\", result);\r\n    options.setStrictArithmetic(false);\r\n    result = script.execute(context);\r\n    assertEquals(1.2d, (Double) result, EPSILON);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testOverflows",
  "sourceCode" : "@Test\r\nvoid testOverflows() throws Exception {\r\n    asserter.assertExpression(\"1 + 2147483647\", Long.valueOf(\"2147483648\"));\r\n    asserter.assertExpression(\"3 + \" + (Long.MAX_VALUE - 2), BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE));\r\n    asserter.assertExpression(\"-2147483648 - 1\", Long.valueOf(\"-2147483649\"));\r\n    asserter.assertExpression(\"-3 + \" + (Long.MIN_VALUE + 2), BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.ONE));\r\n    asserter.assertExpression(\"1 + 9223372036854775807\", new BigInteger(\"9223372036854775808\"));\r\n    asserter.assertExpression(\"-1 + (-9223372036854775808)\", new BigInteger(\"-9223372036854775809\"));\r\n    asserter.assertExpression(\"-9223372036854775808 - 1\", new BigInteger(\"-9223372036854775809\"));\r\n    final BigInteger maxl = BigInteger.valueOf(Long.MAX_VALUE);\r\n    asserter.assertExpression(maxl + \" * \" + maxl, maxl.multiply(maxl));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testPlusClass",
  "sourceCode" : "@Test\r\nvoid testPlusClass() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext jc = new MapContext();\r\n    final Object ra = jexl.createExpression(\"463.0d + 0.1\").evaluate(jc);\r\n    assertEquals(Double.class, ra.getClass());\r\n    final Object r0 = jexl.createExpression(\"463.0B + 0.1\").evaluate(jc);\r\n    assertEquals(java.math.BigDecimal.class, r0.getClass());\r\n    final Object r1 = jexl.createExpression(\"463.0B + 0.1B\").evaluate(jc);\r\n    assertEquals(java.math.BigDecimal.class, r1.getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testPlusPlusPostfix",
  "sourceCode" : "@Test\r\nvoid testPlusPlusPostfix() throws Exception {\r\n    asserter.setVariable(\"aByte\", Byte.valueOf((byte) 0));\r\n    asserter.setVariable(\"aShort\", Short.valueOf((short) 1));\r\n    asserter.setVariable(\"anInteger\", Integer.valueOf(2));\r\n    asserter.setVariable(\"aLong\", Long.valueOf(3));\r\n    asserter.setVariable(\"aFloat\", Float.valueOf((float) 4.4));\r\n    asserter.setVariable(\"aDouble\", Double.valueOf(5.5));\r\n    asserter.setVariable(\"aBigInteger\", new BigInteger(\"6\"));\r\n    asserter.setVariable(\"aBigDecimal\", new BigDecimal(\"7.7\"));\r\n    asserter.setVariable(\"aString\", \"forty-two\");\r\n    asserter.assertExpression(\"aByte++\", Byte.valueOf((byte) 0));\r\n    asserter.assertExpression(\"aShort++\", Short.valueOf((short) 1));\r\n    asserter.assertExpression(\"anInteger++\", Integer.valueOf(2));\r\n    asserter.assertExpression(\"aLong++\", Long.valueOf(3));\r\n    asserter.assertExpression(\"aFloat++\", Float.valueOf((float) 4.4));\r\n    asserter.assertExpression(\"aDouble++\", Double.valueOf(5.5));\r\n    asserter.assertExpression(\"aBigInteger++\", new BigInteger(\"6\"));\r\n    asserter.assertExpression(\"aBigDecimal++\", new BigDecimal(\"7.7\"));\r\n    asserter.assertExpression(\"aByte\", Byte.valueOf((byte) 1));\r\n    asserter.assertExpression(\"aShort\", Short.valueOf((short) 2));\r\n    asserter.assertExpression(\"anInteger\", Integer.valueOf(3));\r\n    asserter.assertExpression(\"aLong\", Long.valueOf(4));\r\n    asserter.assertExpression(\"aFloat\", Float.valueOf((float) 5.4));\r\n    asserter.assertExpression(\"aDouble\", Double.valueOf(6.5));\r\n    asserter.assertExpression(\"aBigInteger\", new BigInteger(\"7\"));\r\n    asserter.assertExpression(\"aBigDecimal\", new BigDecimal(\"8.7\"));\r\n    asserter.failExpression(\"aString++\", \"++\", String::contains);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testPlusPlusPrefix",
  "sourceCode" : "@Test\r\nvoid testPlusPlusPrefix() throws Exception {\r\n    asserter.setVariable(\"aByte\", Byte.valueOf((byte) 0));\r\n    asserter.setVariable(\"aShort\", Short.valueOf((short) 1));\r\n    asserter.setVariable(\"anInteger\", Integer.valueOf(2));\r\n    asserter.setVariable(\"aLong\", Long.valueOf(3));\r\n    asserter.setVariable(\"aFloat\", Float.valueOf((float) 4.4));\r\n    asserter.setVariable(\"aDouble\", Double.valueOf(5.5));\r\n    asserter.setVariable(\"aBigInteger\", new BigInteger(\"6\"));\r\n    asserter.setVariable(\"aBigDecimal\", new BigDecimal(\"7.7\"));\r\n    asserter.setVariable(\"aString\", \"forty-two\");\r\n    asserter.assertExpression(\"++aByte\", Byte.valueOf((byte) 1));\r\n    asserter.assertExpression(\"++aShort\", Short.valueOf((short) 2));\r\n    asserter.assertExpression(\"++anInteger\", Integer.valueOf(3));\r\n    asserter.assertExpression(\"++aLong\", Long.valueOf(4));\r\n    asserter.assertExpression(\"++aFloat\", Float.valueOf((float) 5.4));\r\n    asserter.assertExpression(\"++aDouble\", Double.valueOf(6.5));\r\n    asserter.assertExpression(\"++aBigInteger\", new BigInteger(\"7\"));\r\n    asserter.assertExpression(\"++aBigDecimal\", new BigDecimal(\"8.7\"));\r\n    asserter.failExpression(\"++aString\", \"++\", String::contains);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testRealCoercionEdges",
  "sourceCode" : "@Test\r\nvoid testRealCoercionEdges() throws Exception {\r\n    assertNullOperand(() -> jexla.toDouble(null));\r\n    assertEquals(0.0d, jexlb.toDouble(null), EPSILON);\r\n    assertEquals(32.0d, jexlb.toDouble((char) 32), EPSILON);\r\n    assertArithmeticException(() -> jexla.toDouble(date));\r\n    assertTrue(Double.isNaN(jexla.toDouble(\"\")));\r\n    assertEquals(\"\", jexla.toString(Double.NaN));\r\n    assertNullOperand(() -> jexla.toBigInteger(null));\r\n    assertArithmeticException(() -> jexla.toBigInteger(date));\r\n    assertEquals(BigInteger.ZERO, jexla.toBigInteger(Double.NaN));\r\n    assertEquals(BigInteger.ZERO, jexla.toBigInteger(\"\"));\r\n    assertEquals(BigInteger.ZERO, jexla.toBigInteger((char) 0));\r\n    assertNullOperand(() -> jexla.toBigDecimal(null));\r\n    assertArithmeticException(() -> jexla.toBigDecimal(date));\r\n    assertEquals(BigDecimal.ZERO, jexla.toBigDecimal(Double.NaN));\r\n    assertEquals(BigDecimal.ZERO, jexla.toBigDecimal(\"\"));\r\n    assertEquals(BigDecimal.ZERO, jexla.toBigDecimal((char) 0));\r\n    final Double d64d3 = Double.valueOf(6.4 / 3);\r\n    assertEquals(d64d3, ((Number) JEXL.createExpression(\"6.4 / 3\").evaluate(null)).doubleValue(), EPSILON);\r\n    asserter.assertExpression(\"6.4 / 3\", d64d3);\r\n    assertEquals(d64d3, ((Number) JEXL.createExpression(\"6.4 / 3d\").evaluate(null)).doubleValue(), EPSILON);\r\n    asserter.assertExpression(\"6.4 / 3d\", d64d3);\r\n    assertEquals(64d / 3, ((Number) JEXL.createExpression(\"64d / 3\").evaluate(null)).doubleValue(), EPSILON);\r\n    asserter.assertExpression(\"64 / 3d\", 64 / 3d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testRightNullOperand",
  "sourceCode" : "@Test\r\nvoid testRightNullOperand() throws Exception {\r\n    asserter.setVariable(\"left\", Integer.valueOf(9));\r\n    asserter.setVariable(\"right\", null);\r\n    asserter.failExpression(\"left + right\", \".*null.*\");\r\n    asserter.failExpression(\"left - right\", \".*null.*\");\r\n    asserter.failExpression(\"left * right\", \".*null.*\");\r\n    asserter.failExpression(\"left / right\", \".*null.*\");\r\n    asserter.failExpression(\"left % right\", \".*null.*\");\r\n    asserter.failExpression(\"left & right\", \".*null.*\");\r\n    asserter.failExpression(\"left | right\", \".*null.*\");\r\n    asserter.failExpression(\"left ^ right\", \".*null.*\");\r\n    asserter.failExpression(\"left < right\", \".*null.*\");\r\n    asserter.failExpression(\"left <= right\", \".*null.*\");\r\n    asserter.failExpression(\"left > right\", \".*null.*\");\r\n    asserter.failExpression(\"left >= right\", \".*null.*\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testRightNullOperand2",
  "sourceCode" : "@Test\r\nvoid testRightNullOperand2() throws Exception {\r\n    asserter.setVariable(\"left\", Integer.valueOf(9));\r\n    asserter.setVariable(\"y.right\", null);\r\n    asserter.failExpression(\"left + y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left - y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left * y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left / y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left % y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left & y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left | y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left ^ y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left < y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left <= y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left > y.right\", \".*null.*\");\r\n    asserter.failExpression(\"left >= y.right\", \".*null.*\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testUnaryMinus",
  "sourceCode" : "/**\r\n * test some simple mathematical calculations\r\n */\r\n@Test\r\nvoid testUnaryMinus() throws Exception {\r\n    asserter.setVariable(\"aByte\", Byte.valueOf((byte) 1));\r\n    asserter.setVariable(\"aShort\", Short.valueOf((short) 2));\r\n    asserter.setVariable(\"anInteger\", Integer.valueOf(3));\r\n    asserter.setVariable(\"aLong\", Long.valueOf(4));\r\n    asserter.setVariable(\"aFloat\", Float.valueOf((float) 5.5));\r\n    asserter.setVariable(\"aDouble\", Double.valueOf(6.6));\r\n    asserter.setVariable(\"aBigInteger\", new BigInteger(\"7\"));\r\n    asserter.setVariable(\"aBigDecimal\", new BigDecimal(\"8.8\"));\r\n    // loop to allow checking caching of constant numerals (debug)\r\n    for (int i = 0; i < 2; ++i) {\r\n        asserter.assertExpression(\"-3\", Integer.valueOf(\"-3\"));\r\n        asserter.assertExpression(\"-3.0\", Double.valueOf(\"-3.0\"));\r\n        asserter.assertExpression(\"-aByte\", Byte.valueOf((byte) -1));\r\n        asserter.assertExpression(\"-aShort\", Short.valueOf((short) -2));\r\n        asserter.assertExpression(\"-anInteger\", Integer.valueOf(-3));\r\n        asserter.assertExpression(\"-aLong\", Long.valueOf(-4));\r\n        asserter.assertExpression(\"-aFloat\", Float.valueOf((float) -5.5));\r\n        asserter.assertExpression(\"-aDouble\", Double.valueOf(-6.6));\r\n        asserter.assertExpression(\"-aBigInteger\", new BigInteger(\"-7\"));\r\n        asserter.assertExpression(\"-aBigDecimal\", new BigDecimal(\"-8.8\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testUnaryopsEdges",
  "sourceCode" : "@Test\r\nvoid testUnaryopsEdges() {\r\n    assertArithmeticException(() -> jexla.positivize(date));\r\n    assertNullOperand(() -> jexla.positivize(null));\r\n    assertNull(jexlb.positivize(null));\r\n    assertEquals(42, jexla.positivize((char) 42));\r\n    assertEquals(Boolean.TRUE, jexla.positivize(Boolean.TRUE));\r\n    assertEquals(Boolean.FALSE, jexla.positivize(Boolean.FALSE));\r\n    assertEquals(Boolean.TRUE, jexla.positivize(new AtomicBoolean(true)));\r\n    assertEquals(Boolean.FALSE, jexla.positivize(new AtomicBoolean()));\r\n    assertNullOperand(() -> jexla.negate(null));\r\n    assertNull(jexlb.negate(null));\r\n    assertArithmeticException(() -> jexla.negate(date));\r\n    assertEquals(Boolean.FALSE, jexla.negate(Boolean.TRUE));\r\n    assertEquals(Boolean.TRUE, jexla.negate(Boolean.FALSE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testUnaryPlus",
  "sourceCode" : "/**\r\n * test some simple mathematical calculations\r\n */\r\n@Test\r\nvoid testUnaryPlus() throws Exception {\r\n    asserter.setVariable(\"aByte\", Byte.valueOf((byte) 1));\r\n    asserter.setVariable(\"aShort\", Short.valueOf((short) 2));\r\n    asserter.setVariable(\"anInteger\", Integer.valueOf(3));\r\n    asserter.setVariable(\"aLong\", Long.valueOf(4));\r\n    asserter.setVariable(\"aFloat\", Float.valueOf((float) 5.5));\r\n    asserter.setVariable(\"aDouble\", Double.valueOf(6.6));\r\n    asserter.setVariable(\"aBigInteger\", new BigInteger(\"7\"));\r\n    asserter.setVariable(\"aBigDecimal\", new BigDecimal(\"8.8\"));\r\n    // loop to allow checking caching of constant numerals (debug)\r\n    for (int i = 0; i < 2; ++i) {\r\n        asserter.assertExpression(\"+3\", Integer.valueOf(\"3\"));\r\n        asserter.assertExpression(\"+3.0\", Double.valueOf(\"3.0\"));\r\n        asserter.assertExpression(\"+aByte\", Integer.valueOf(1));\r\n        asserter.assertExpression(\"+aShort\", Integer.valueOf(2));\r\n        asserter.assertExpression(\"+anInteger\", Integer.valueOf(3));\r\n        asserter.assertExpression(\"+aLong\", Long.valueOf(4));\r\n        asserter.assertExpression(\"+aFloat\", Float.valueOf((float) 5.5));\r\n        asserter.assertExpression(\"+aDouble\", Double.valueOf(6.6));\r\n        asserter.assertExpression(\"+aBigInteger\", new BigInteger(\"7\"));\r\n        asserter.assertExpression(\"+aBigDecimal\", new BigDecimal(\"8.8\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testUndefinedVar",
  "sourceCode" : "@Test\r\nvoid testUndefinedVar() throws Exception {\r\n    asserter.failExpression(\"objects[1].status\", \".*variable 'objects' is undefined.*\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testXmlArithmetic",
  "sourceCode" : "/**\r\n * Inspired by JEXL-16{1,2}.\r\n */\r\n@Test\r\nvoid testXmlArithmetic() throws Exception {\r\n    Document xml;\r\n    Node x;\r\n    Boolean empty;\r\n    int size;\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(false).arithmetic(new XmlArithmetic(false)).create();\r\n    final JexlScript e0 = jexl.createScript(\"x.empty()\", \"x\");\r\n    final JexlScript e1 = jexl.createScript(\"empty(x)\", \"x\");\r\n    final JexlScript s0 = jexl.createScript(\"x.size()\", \"x\");\r\n    final JexlScript s1 = jexl.createScript(\"size(x)\", \"x\");\r\n    empty = (Boolean) e1.execute(null, (Object) null);\r\n    assertTrue(empty);\r\n    size = (Integer) s1.execute(null, (Object) null);\r\n    assertEquals(0, size);\r\n    try {\r\n        final Object xx = e0.execute(null, (Object) null);\r\n        assertNull(xx);\r\n    } catch (final JexlException.Variable xvar) {\r\n        assertNotNull(xvar);\r\n    }\r\n    try {\r\n        final Object xx = s0.execute(null, (Object) null);\r\n        assertNull(xx);\r\n    } catch (final JexlException.Variable xvar) {\r\n        assertNotNull(xvar);\r\n    }\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setSafe(true);\r\n    final Object x0 = e0.execute(ctxt, (Object) null);\r\n    assertNull(x0);\r\n    final Object x1 = s0.execute(ctxt, (Object) null);\r\n    assertNull(x1);\r\n    xml = getDocument(\"<node info='123'/>\");\r\n    x = xml.getLastChild();\r\n    empty = (Boolean) e0.execute(null, x);\r\n    assertFalse(empty);\r\n    empty = (Boolean) e1.execute(null, x);\r\n    assertFalse(empty);\r\n    size = (Integer) s0.execute(null, x);\r\n    assertEquals(0, size);\r\n    size = (Integer) s1.execute(null, x);\r\n    assertEquals(0, size);\r\n    xml = getDocument(\"<node><a/><b/></node>\");\r\n    x = xml.getLastChild();\r\n    empty = (Boolean) e0.execute(null, x);\r\n    assertFalse(empty);\r\n    empty = (Boolean) e1.execute(null, x);\r\n    assertFalse(empty);\r\n    size = (Integer) s0.execute(null, x);\r\n    assertEquals(2, size);\r\n    size = (Integer) s1.execute(null, x);\r\n    assertEquals(2, size);\r\n    xml = getDocument(\"<node/>\");\r\n    x = xml.getLastChild();\r\n    empty = (Boolean) e0.execute(null, x);\r\n    assertTrue(empty);\r\n    empty = (Boolean) e1.execute(null, x);\r\n    assertTrue(empty);\r\n    size = (Integer) s0.execute(null, x);\r\n    assertEquals(0, size);\r\n    size = (Integer) s1.execute(null, x);\r\n    assertEquals(0, size);\r\n    xml = getDocument(\"<node info='123'/>\");\r\n    NamedNodeMap nnm = xml.getLastChild().getAttributes();\r\n    Attr info = (Attr) nnm.getNamedItem(\"info\");\r\n    assertEquals(\"123\", info.getValue());\r\n    // JEXL-161\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", xml.getLastChild());\r\n    final String y = \"456\";\r\n    jc.set(\"y\", y);\r\n    final JexlScript s = jexl.createScript(\"x.attribute.info = y\");\r\n    Object r;\r\n    try {\r\n        r = s.execute(jc);\r\n        nnm = xml.getLastChild().getAttributes();\r\n        info = (Attr) nnm.getNamedItem(\"info\");\r\n        assertEquals(y, r);\r\n        assertEquals(y, info.getValue());\r\n    } catch (final JexlException.Property xprop) {\r\n        // test fails in java > 11 because modules, etc; need investigation\r\n        assertTrue(xprop.getMessage().contains(\"info\"));\r\n        assertTrue(getJavaVersion() > 11);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testShortCircuitAnd",
  "sourceCode" : "@Test\r\nvoid testShortCircuitAnd() {\r\n    final String src = \"(x, y, z) -> x && y && z\";\r\n    final JexlBuilder builder = new JexlBuilder();\r\n    final JexlEngine jexl = builder.create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(src);\r\n    result = script.execute(null, true, \"foo\", 42);\r\n    assertEquals(42, result);\r\n    result = script.execute(null, true, \"\", 42);\r\n    assertEquals(\"\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testShortCircuitOr",
  "sourceCode" : "@Test\r\nvoid testShortCircuitOr() {\r\n    final OptContext optc = new OptContext();\r\n    final String src = \"(x, y, z) -> x || y || z\";\r\n    final JexlBuilder builder = new JexlBuilder();\r\n    final JexlEngine jexl = builder.create();\r\n    final JexlOptions options = builder.options();\r\n    optc.setOptions(options);\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(src);\r\n    result = script.execute(optc, 0, \"\", 42);\r\n    assertEquals(42, result);\r\n    result = script.execute(optc, true, 42, null);\r\n    assertEquals(true, result);\r\n    options.setBooleanLogical(true);\r\n    result = script.execute(optc, 0, \"\", Double.NaN);\r\n    assertEquals(false, result);\r\n    result = script.execute(optc, 0, \"\", Collections.emptySet());\r\n    assertEquals(true, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArithmeticTest.java",
  "methodName" : "testLogicalValue",
  "sourceCode" : "@Test\r\nvoid testLogicalValue() {\r\n    final String src = \"function sanitize(const n) { n == 0 ? NaN : n }; sanitize(x) && 420 / x\";\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(src, \"x\");\r\n    result = script.execute(null, 10);\r\n    assertEquals(42, result);\r\n    result = script.execute(null, 0);\r\n    assertTrue(Double.isNaN(((Number) result).doubleValue()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayAccessTest.java",
  "methodName" : "testArrayAccess",
  "sourceCode" : "/**\r\n * test simple array access\r\n */\r\n@Test\r\nvoid testArrayAccess() throws Exception {\r\n    /*\r\n         * test List access\r\n         */\r\n    final List<Integer> l = new ArrayList<>();\r\n    l.add(Integer.valueOf(1));\r\n    l.add(Integer.valueOf(2));\r\n    l.add(Integer.valueOf(3));\r\n    asserter.setVariable(\"list\", l);\r\n    asserter.assertExpression(\"list[1]\", Integer.valueOf(2));\r\n    asserter.assertExpression(\"list[1+1]\", Integer.valueOf(3));\r\n    asserter.setVariable(\"loc\", Integer.valueOf(1));\r\n    asserter.assertExpression(\"list[loc+1]\", Integer.valueOf(3));\r\n    /*\r\n         * test array access\r\n         */\r\n    final String[] args = { \"hello\", \"there\" };\r\n    asserter.setVariable(\"array\", args);\r\n    asserter.assertExpression(\"array[0]\", \"hello\");\r\n    /*\r\n         * to think that this was an intentional syntax...\r\n         */\r\n    asserter.assertExpression(\"array.0\", \"hello\");\r\n    /*\r\n         * test map access\r\n         */\r\n    final Map<String, String> m = new HashMap<>();\r\n    m.put(\"foo\", \"bar\");\r\n    asserter.setVariable(\"map\", m);\r\n    asserter.setVariable(\"key\", \"foo\");\r\n    asserter.assertExpression(\"map[\\\"foo\\\"]\", \"bar\");\r\n    asserter.assertExpression(\"map[key]\", \"bar\");\r\n    /*\r\n         * test bean access\r\n         */\r\n    asserter.setVariable(\"foo\", new Foo());\r\n    asserter.assertExpression(\"foo[\\\"bar\\\"]\", GET_METHOD_STRING);\r\n    asserter.assertExpression(\"foo[\\\"bar\\\"] == foo.bar\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayAccessTest.java",
  "methodName" : "testArrayAndDottedConflict",
  "sourceCode" : "// This is JEXL-26\r\n@Test\r\nvoid testArrayAndDottedConflict() throws Exception {\r\n    final Object[] objects = { \"an\", \"array\", Long.valueOf(0) };\r\n    asserter.setStrict(false);\r\n    asserter.setSilent(true);\r\n    asserter.setVariable(\"objects\", objects);\r\n    asserter.setVariable(\"status\", \"Enabled\");\r\n    asserter.assertExpression(\"objects[1].status\", null);\r\n    asserter.assertExpression(\"objects.1.status\", null);\r\n    asserter.setVariable(\"base.status\", \"Ok\");\r\n    asserter.assertExpression(\"base.objects[1].status\", null);\r\n    asserter.assertExpression(\"base.objects.1.status\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayAccessTest.java",
  "methodName" : "testArrayArray",
  "sourceCode" : "@Test\r\nvoid testArrayArray() throws Exception {\r\n    final Integer i42 = Integer.valueOf(42);\r\n    final Integer i43 = Integer.valueOf(43);\r\n    final String s42 = \"fourty-two\";\r\n    final String s43 = \"fourty-three\";\r\n    final Object[] foo = new Object[3];\r\n    foo[0] = foo;\r\n    foo[1] = i42;\r\n    foo[2] = s42;\r\n    asserter.setVariable(\"foo\", foo);\r\n    asserter.setVariable(\"zero\", Integer.valueOf(0));\r\n    asserter.setVariable(\"one\", Integer.valueOf(1));\r\n    asserter.setVariable(\"two\", Integer.valueOf(2));\r\n    for (int l = 0; l < 2; ++l) {\r\n        asserter.assertExpression(\"foo[0]\", foo);\r\n        asserter.assertExpression(\"foo[0][0]\", foo);\r\n        asserter.assertExpression(\"foo[1]\", foo[1]);\r\n        asserter.assertExpression(\"foo[0][1]\", foo[1]);\r\n        asserter.assertExpression(\"foo[0][1] = 43\", i43);\r\n        asserter.assertExpression(\"foo[0][1]\", i43);\r\n        asserter.assertExpression(\"foo[0][1] = 42\", i42);\r\n        asserter.assertExpression(\"foo[0][1]\", i42);\r\n        asserter.assertExpression(\"foo[0][0][1]\", foo[1]);\r\n        asserter.assertExpression(\"foo[0][0][1] = 43\", i43);\r\n        asserter.assertExpression(\"foo[0][0][1]\", i43);\r\n        asserter.assertExpression(\"foo[0][0][1] = 42\", i42);\r\n        asserter.assertExpression(\"foo[0][0][1]\", i42);\r\n        asserter.assertExpression(\"foo[2]\", foo[2]);\r\n        asserter.assertExpression(\"foo[0][2]\", foo[2]);\r\n        asserter.assertExpression(\"foo[0][2] = 'fourty-three'\", s43);\r\n        asserter.assertExpression(\"foo[0][2]\", s43);\r\n        asserter.assertExpression(\"foo[0][2] = 'fourty-two'\", s42);\r\n        asserter.assertExpression(\"foo[0][2]\", s42);\r\n        asserter.assertExpression(\"foo[0][0][2]\", foo[2]);\r\n        asserter.assertExpression(\"foo[0][0][2] = 'fourty-three'\", s43);\r\n        asserter.assertExpression(\"foo[0][0][2]\", s43);\r\n        asserter.assertExpression(\"foo[0][0][2] = 'fourty-two'\", s42);\r\n        asserter.assertExpression(\"foo[0][0][2]\", s42);\r\n        asserter.assertExpression(\"foo[zero]\", foo);\r\n        asserter.assertExpression(\"foo[zero][zero]\", foo);\r\n        asserter.assertExpression(\"foo[one]\", foo[1]);\r\n        asserter.assertExpression(\"foo[zero][one]\", foo[1]);\r\n        asserter.assertExpression(\"foo[zero][one] = 43\", i43);\r\n        asserter.assertExpression(\"foo[zero][one]\", i43);\r\n        asserter.assertExpression(\"foo[zero][one] = 42\", i42);\r\n        asserter.assertExpression(\"foo[zero][one]\", i42);\r\n        asserter.assertExpression(\"foo[zero][zero][one]\", foo[1]);\r\n        asserter.assertExpression(\"foo[zero][zero][one] = 43\", i43);\r\n        asserter.assertExpression(\"foo[zero][zero][one]\", i43);\r\n        asserter.assertExpression(\"foo[zero][zero][one] = 42\", i42);\r\n        asserter.assertExpression(\"foo[zero][zero][one]\", i42);\r\n        asserter.assertExpression(\"foo[two]\", foo[2]);\r\n        asserter.assertExpression(\"foo[zero][two]\", foo[2]);\r\n        asserter.assertExpression(\"foo[zero][two] = 'fourty-three'\", s43);\r\n        asserter.assertExpression(\"foo[zero][two]\", s43);\r\n        asserter.assertExpression(\"foo[zero][two] = 'fourty-two'\", s42);\r\n        asserter.assertExpression(\"foo[zero][two]\", s42);\r\n        asserter.assertExpression(\"foo[zero][zero][two]\", foo[2]);\r\n        asserter.assertExpression(\"foo[zero][zero][two] = 'fourty-three'\", s43);\r\n        asserter.assertExpression(\"foo[zero][zero][two]\", s43);\r\n        asserter.assertExpression(\"foo[zero][zero][two] = 'fourty-two'\", s42);\r\n        asserter.assertExpression(\"foo[zero][zero][two]\", s42);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayAccessTest.java",
  "methodName" : "testArrayGetSet",
  "sourceCode" : "@Test\r\nvoid testArrayGetSet() throws Exception {\r\n    final Sample bar = new Sample();\r\n    bar.setFoo(new int[] { 24 });\r\n    asserter.setVariable(\"bar\", bar);\r\n    asserter.assertExpression(\"bar.foo[0]\", 24);\r\n    asserter.assertExpression(\"bar.foo = []\", new int[0]);\r\n    //asserter.assertExpression(\"bar.foo[0]\", 42);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayAccessTest.java",
  "methodName" : "testArrayIdentifierParsing",
  "sourceCode" : "@Test\r\nvoid testArrayIdentifierParsing() throws Exception {\r\n    final Map<Object, Number> map = new HashMap<>();\r\n    map.put(\"00200\", -42.42d);\r\n    map.put(200, 42.42d);\r\n    asserter.setVariable(\"objects\", map);\r\n    asserter.assertExpression(\"objects.get('00200')\", -42.42d);\r\n    asserter.assertExpression(\"objects.'00200'\", -42.42d);\r\n    asserter.assertExpression(\"objects.get(200)\", 42.42d);\r\n    asserter.assertExpression(\"objects.'200'\", 42.42d);\r\n    asserter.assertExpression(\"objects.200\", 42.42d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayAccessTest.java",
  "methodName" : "testArrayMethods",
  "sourceCode" : "@Test\r\nvoid testArrayMethods() throws Exception {\r\n    final Object[] objects = { \"an\", \"array\", Long.valueOf(0) };\r\n    asserter.setVariable(\"objects\", objects);\r\n    asserter.assertExpression(\"objects.get(1)\", \"array\");\r\n    asserter.assertExpression(\"objects.size()\", Integer.valueOf(3));\r\n    // setting an index returns the old value\r\n    asserter.assertExpression(\"objects.set(1, 'dion')\", \"array\");\r\n    asserter.assertExpression(\"objects[1]\", \"dion\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayAccessTest.java",
  "methodName" : "testArrayProperty",
  "sourceCode" : "@Test\r\nvoid testArrayProperty() throws Exception {\r\n    final Foo foo = new Foo();\r\n    asserter.setVariable(\"foo\", foo);\r\n    asserter.assertExpression(\"foo.array[1]\", GET_METHOD_ARRAY[1]);\r\n    asserter.assertExpression(\"foo.array.1\", GET_METHOD_ARRAY[1]);\r\n    asserter.assertExpression(\"foo.array2[1][1]\", GET_METHOD_ARRAY2[1][1]);\r\n    asserter.assertExpression(\"foo.array2[1].1\", GET_METHOD_ARRAY2[1][1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayAccessTest.java",
  "methodName" : "testDoubleArrays",
  "sourceCode" : "/**\r\n * test some simple double array lookups\r\n */\r\n@Test\r\nvoid testDoubleArrays() throws Exception {\r\n    final Object[][] foo = new Object[2][2];\r\n    foo[0][0] = \"one\";\r\n    foo[0][1] = \"two\";\r\n    asserter.setVariable(\"foo\", foo);\r\n    asserter.assertExpression(\"foo[0][1]\", \"two\");\r\n    asserter.assertExpression(\"foo[0][1] = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo[0][1]\", \"three\");\r\n    foo[0][0] = \"one\";\r\n    foo[0][1] = \"two\";\r\n    asserter.assertExpression(\"foo.0[1]\", \"two\");\r\n    asserter.assertExpression(\"foo.0[1] = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo.0[1]\", \"three\");\r\n    foo[0][0] = \"one\";\r\n    foo[0][1] = \"two\";\r\n    asserter.assertExpression(\"foo.0.'1'\", \"two\");\r\n    asserter.assertExpression(\"foo.0.'1' = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo.0.'1'\", \"three\");\r\n    foo[0][0] = \"one\";\r\n    foo[0][1] = \"two\";\r\n    asserter.assertExpression(\"foo.'0'.'1'\", \"two\");\r\n    asserter.assertExpression(\"foo.'0'.'1' = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo.'0'.'1'\", \"three\");\r\n    foo[0][0] = \"one\";\r\n    foo[0][1] = \"two\";\r\n    asserter.assertExpression(\"foo.0.1\", \"two\");\r\n    asserter.assertExpression(\"foo.0.1 = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo.0.1\", \"three\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayAccessTest.java",
  "methodName" : "testDoubleMaps",
  "sourceCode" : "@Test\r\nvoid testDoubleMaps() throws Exception {\r\n    final Map<Object, Map<Object, Object>> foo = new HashMap<>();\r\n    final Map<Object, Object> foo0 = new HashMap<>();\r\n    foo.put(0, foo0);\r\n    foo0.put(0, \"one\");\r\n    foo0.put(1, \"two\");\r\n    foo0.put(\"3.0\", \"three\");\r\n    asserter.setVariable(\"foo\", foo);\r\n    asserter.assertExpression(\"foo[0][1]\", \"two\");\r\n    asserter.assertExpression(\"foo[0][1] = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo[0][1]\", \"three\");\r\n    asserter.assertExpression(\"foo[0]['3.0']\", \"three\");\r\n    foo0.put(0, \"one\");\r\n    foo0.put(1, \"two\");\r\n    asserter.assertExpression(\"foo.0[1]\", \"two\");\r\n    asserter.assertExpression(\"foo.0[1] = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo.0[1]\", \"three\");\r\n    asserter.assertExpression(\"foo.0['3.0']\", \"three\");\r\n    foo0.put(0, \"one\");\r\n    foo0.put(1, \"two\");\r\n    asserter.assertExpression(\"foo.0.'1'\", \"two\");\r\n    asserter.assertExpression(\"foo.0.'1' = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo.0.'1'\", \"three\");\r\n    foo0.put(0, \"one\");\r\n    foo0.put(1, \"two\");\r\n    asserter.assertExpression(\"foo.'0'.'1'\", \"two\");\r\n    asserter.assertExpression(\"foo.'0'.'1' = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo.'0'.'1'\", \"three\");\r\n    foo0.put(0, \"one\");\r\n    foo0.put(1, \"two\");\r\n    asserter.assertExpression(\"foo.0.1\", \"two\");\r\n    asserter.assertExpression(\"foo.0.1 = 'three'\", \"three\");\r\n    asserter.assertExpression(\"foo.0.1\", \"three\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testChangeThroughVariables",
  "sourceCode" : "@Test\r\nvoid testChangeThroughVariables() throws Exception {\r\n    final JexlContext jc = new MapContext();\r\n    final JexlExpression e147 = JEXL.createExpression(\"quux = [one, two]\");\r\n    jc.set(\"one\", 1);\r\n    jc.set(\"two\", 2);\r\n    final int[] o1 = (int[]) e147.evaluate(jc);\r\n    assertEquals(1, o1[0]);\r\n    assertEquals(2, o1[1]);\r\n    jc.set(\"one\", 10);\r\n    jc.set(\"two\", 20);\r\n    final int[] o2 = (int[]) e147.evaluate(jc);\r\n    assertEquals(10, o2[0]);\r\n    assertEquals(20, o2[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testEmptyArrayLiteral",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayLiteral() throws Exception {\r\n    final JexlContext jc = new MapContext();\r\n    Object o;\r\n    o = JEXL.createExpression(\"[]\").evaluate(jc);\r\n    assertInstanceOf(Object[].class, o);\r\n    assertEquals(0, ((Object[]) o).length);\r\n    o = JEXL.createExpression(\"[...]\").evaluate(jc);\r\n    assertInstanceOf(List.class, o);\r\n    assertEquals(0, ((List<?>) o).size());\r\n    assertThrows(JexlException.Parsing.class, () -> JEXL.createExpression(\"[ , ]\"));\r\n    assertThrows(JexlException.Parsing.class, () -> JEXL.createExpression(\"[ ... , ]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testLiteralWithElipsis",
  "sourceCode" : "@Test\r\nvoid testLiteralWithElipsis() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"[ 'foo' , 'bar', ... ]\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    final Object[] check = { \"foo\", \"bar\" };\r\n    assertEquals(Arrays.asList(check), o);\r\n    assertEquals(2, ((List<?>) o).size());\r\n    assertThrows(JexlException.Parsing.class, () -> JEXL.createExpression(\"[ 'foo' , 'bar', ... , ]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testLiteralWithIntegers",
  "sourceCode" : "@Test\r\nvoid testLiteralWithIntegers() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"[ 5 , 10 ]\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    final int[] check = { 5, 10 };\r\n    assertArrayEquals(check, (int[]) o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testLiteralWithNulls",
  "sourceCode" : "@Test\r\nvoid testLiteralWithNulls() throws Exception {\r\n    final String[] exprs = { \"[ null , 10 ]\", \"[ 10 , null ]\", \"[ 10 , null , 10]\", \"[ '10' , null ]\", \"[ null, '10' , null ]\" };\r\n    final Object[][] checks = { { null, Integer.valueOf(10) }, { Integer.valueOf(10), null }, { Integer.valueOf(10), null, Integer.valueOf(10) }, { \"10\", null }, { null, \"10\", null } };\r\n    final JexlContext jc = new MapContext();\r\n    for (int t = 0; t < exprs.length; ++t) {\r\n        final JexlExpression e = JEXL.createExpression(exprs[t]);\r\n        final Object o = e.evaluate(jc);\r\n        assertArrayEquals(checks[t], (Object[]) o, exprs[t]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testLiteralWithNumbers",
  "sourceCode" : "@Test\r\nvoid testLiteralWithNumbers() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"[ 5.0 , 10 ]\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    final Object[] check = { Double.valueOf(5), Integer.valueOf(10) };\r\n    assertArrayEquals(check, (Object[]) o);\r\n    assertTrue(o.getClass().isArray() && o.getClass().getComponentType().equals(Number.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testLiteralWithOneEntry",
  "sourceCode" : "@Test\r\nvoid testLiteralWithOneEntry() throws Exception {\r\n    final Object[] check = { \"foo\" };\r\n    final List<String> sources = Arrays.asList(\"[ 'foo']\", \"[ 'foo' , ]\");\r\n    for (final String src : sources) {\r\n        final JexlExpression e = JEXL.createExpression(src);\r\n        final Object o = e.evaluate(null);\r\n        assertArrayEquals(check, (Object[]) o);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testLiteralWithStrings",
  "sourceCode" : "@Test\r\nvoid testLiteralWithStrings() throws Exception {\r\n    final Object[] check = { \"foo\", \"bar\" };\r\n    final List<String> sources = Arrays.asList(\"[ 'foo' , 'bar' ]\", \"[ 'foo' , 'bar', ]\");\r\n    for (final String src : sources) {\r\n        final JexlExpression e = JEXL.createExpression(src);\r\n        final Object o = e.evaluate(null);\r\n        assertArrayEquals(check, (Object[]) o);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testNotEmptySimpleArrayLiteral",
  "sourceCode" : "@Test\r\nvoid testNotEmptySimpleArrayLiteral() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"empty([ 'foo' , 'bar' ])\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    assertFalse((Boolean) o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testNotestCallingMethodsOnNewMapLiteral",
  "sourceCode" : "@Test\r\nvoid testNotestCallingMethodsOnNewMapLiteral() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"size({ 'foo' : 'bar' }.values())\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(1), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayLiteralTest.java",
  "methodName" : "testSizeOfSimpleArrayLiteral",
  "sourceCode" : "@Test\r\nvoid testSizeOfSimpleArrayLiteral() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"size([ 'foo' , 'bar' ])\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(2), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ArrayTypeTest.java",
  "methodName" : "testArrayTypes",
  "sourceCode" : "@Test\r\nvoid testArrayTypes() {\r\n    final ArrayBuilder ab = new ArrayBuilder(1);\r\n    // An engine for expressions with args\r\n    final JexlFeatures features = JexlFeatures.createScript().script(false);\r\n    final JexlEngine jexl = new JexlBuilder().features(features).create();\r\n    // Super for ClassC\r\n    final Set<Class<?>> superSet = ClassMisc.getSuperClasses(ClassC.class);\r\n    assertTrue(superSet.size() > 0);\r\n    // verify the order\r\n    final List<Class<?>> ordered = Arrays.asList(ClassB.class, ClassA.class, Class0.class, InterC.class, InterX.class, InterB.class, InterA.class, Inter0.class);\r\n    int i = 0;\r\n    for (final Class<?> clazz : superSet) {\r\n        assertEquals(clazz, ordered.get(i++), \"order \" + i);\r\n    }\r\n    // intersect ClassC, ClassX -> Class0\r\n    Class<?> inter = ClassMisc.getCommonSuperClass(ClassC.class, ClassX.class);\r\n    assertEquals(Class0.class, inter);\r\n    // intersect ClassC, ClassB -> ClassB\r\n    inter = ClassMisc.getCommonSuperClass(ClassC.class, ClassB.class);\r\n    assertEquals(ClassB.class, inter);\r\n    // intersect ArrayList, ArrayDeque -> AbstractCollection\r\n    final Class<?> list = ClassMisc.getCommonSuperClass(ArrayList.class, ArrayDeque.class);\r\n    assertEquals(list, AbstractCollection.class);\r\n    final Set<Class<?>> sset = ClassMisc.getSuperClasses(ArrayList.class, ArrayDeque.class);\r\n    assertFalse(sset.isEmpty());\r\n    // in java 21, a SequenceCollection interface is added to the sset\r\n    final List<Class<?>> expected = Arrays.asList(AbstractCollection.class, Collection.class, Iterable.class, Cloneable.class, Serializable.class);\r\n    assertTrue(sset.containsAll(expected));\r\n    Class<?> collection = ClassMisc.getCommonSuperClass(ArrayList.class, Collections.emptyList().getClass());\r\n    assertEquals(AbstractList.class, collection);\r\n    collection = ClassMisc.getSuperClasses(ArrayList.class, Collections.emptyList().getClass()).stream().findFirst().orElse(Object.class);\r\n    // apply on objects\r\n    final Object a = new ClassA(1);\r\n    final Object b = new ClassB(2);\r\n    final Object c = new ClassC(3);\r\n    final Object x = new ClassX(4);\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"[ a, b, c, d ]\", \"a\", \"b\", \"c\", \"d\");\r\n    // intersect a, b, c, c -> classA\r\n    result = script.execute(null, a, b, c, c);\r\n    assertTrue(result.getClass().isArray() && result.getClass().getComponentType().equals(ClassA.class));\r\n    // intersect a, b, c, x -> class0\r\n    result = script.execute(null, a, b, c, x);\r\n    assertTrue(result.getClass().isArray() && result.getClass().getComponentType().equals(Class0.class));\r\n    // intersect x, c, b, a -> class0\r\n    result = script.execute(null, x, c, b, a);\r\n    assertTrue(result.getClass().isArray() & result.getClass().getComponentType().equals(Class0.class));\r\n    // intersect a, b, c, d -> inter0\r\n    final Object d = new ClassD();\r\n    result = script.execute(null, a, b, c, d);\r\n    assertTrue(result.getClass().isArray() && result.getClass().getComponentType().equals(Inter0.class));\r\n    script = jexl.createScript(\"[ a, b, c, d, ... ]\", \"a\", \"b\", \"c\", \"d\");\r\n    // intersect a, b, c, c -> classA\r\n    result = script.execute(null, a, b, c, c);\r\n    assertInstanceOf(List.class, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testAmbiguous",
  "sourceCode" : "@Test\r\nvoid testAmbiguous() {\r\n    final JexlExpression assign = JEXL.createExpression(\"froboz.nosuchbean = 10\");\r\n    final JexlContext jc = new MapContext();\r\n    final Froboz froboz = new Froboz(-169);\r\n    jc.set(\"froboz\", froboz);\r\n    final RuntimeException xrt = assertThrows(RuntimeException.class, () -> assign.evaluate(jc));\r\n    assertTrue(xrt.toString().contains(\"nosuchbean\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testAntish",
  "sourceCode" : "/**\r\n * Make sure bean assignment works\r\n */\r\n@Test\r\nvoid testAntish() {\r\n    final JexlExpression assign = JEXL.createExpression(\"froboz.value = 10\");\r\n    final JexlExpression check = JEXL.createExpression(\"froboz.value\");\r\n    final JexlContext jc = new MapContext();\r\n    Object o = assign.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n    o = check.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testAntishInteger",
  "sourceCode" : "@Test\r\nvoid testAntishInteger() {\r\n    final JexlExpression assign = JEXL.createExpression(\"froboz.0 = 10\");\r\n    final JexlExpression check = JEXL.createExpression(\"froboz.0\");\r\n    final JexlContext jc = new MapContext();\r\n    Object o = assign.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n    o = check.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@Test\r\nvoid testArray() {\r\n    final JexlExpression assign = JEXL.createExpression(\"froboz[\\\"value\\\"] = 10\");\r\n    final JexlExpression check = JEXL.createExpression(\"froboz[\\\"value\\\"]\");\r\n    final JexlContext jc = new MapContext();\r\n    final Froboz froboz = new Froboz(0);\r\n    jc.set(\"froboz\", froboz);\r\n    Object o = assign.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n    o = check.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testBeanish",
  "sourceCode" : "@Test\r\nvoid testBeanish() {\r\n    final JexlExpression assign = JEXL.createExpression(\"froboz.value = 10\");\r\n    final JexlExpression check = JEXL.createExpression(\"froboz.value\");\r\n    final JexlContext jc = new MapContext();\r\n    final Froboz froboz = new Froboz(-169);\r\n    jc.set(\"froboz\", froboz);\r\n    Object o = assign.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n    o = check.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testGetInError1",
  "sourceCode" : "@Test\r\nvoid testGetInError1() {\r\n    final JexlException.Property e = assertThrows(JexlException.Property.class, () -> JEXL.getProperty(\"the_x_value\", \"y\"));\r\n    assertEquals(\"y\", e.getProperty());\r\n    assertThrows(JexlException.class, () -> JEXL.getProperty(null, \"y\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testMini",
  "sourceCode" : "@Test\r\nvoid testMini() {\r\n    final JexlContext jc = new MapContext();\r\n    final JexlExpression assign = JEXL.createExpression(\"quux = 10\");\r\n    final Object o = assign.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testMore",
  "sourceCode" : "@Test\r\nvoid testMore() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"quuxClass\", Quux.class);\r\n    final JexlExpression create = JEXL.createExpression(\"quux = new(quuxClass, 'xuuq', 100)\");\r\n    final JexlExpression assign = JEXL.createExpression(\"quux.froboz.value = 10\");\r\n    final JexlExpression check = JEXL.createExpression(\"quux[\\\"froboz\\\"].value\");\r\n    final Quux quux = (Quux) create.evaluate(jc);\r\n    assertNotNull(quux, \"quux is null\");\r\n    Object o = assign.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n    o = check.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testPropertyInError0",
  "sourceCode" : "@Test\r\nvoid testPropertyInError0() {\r\n    for (final String op : Arrays.asList(\" = \", \"+= \", \" -= \", \" *= \", \" /= \", \" %= \", \" &= \", \" |= \", \" ^= \", \" <<= \", \" >>= \", \" >>>= \")) {\r\n        final JexlScript script = JEXL.createScript(\"x -> x.y \" + op + \"42\");\r\n        final JexlException.Property xprop = assertThrows(JexlException.Property.class, () -> script.execute(null, \"the_x_value\"));\r\n        assertEquals(\"y\", xprop.getProperty());\r\n    }\r\n    final JexlScript script = JEXL.createScript(\"x -> x.y \");\r\n    final JexlException.Property xprop = assertThrows(JexlException.Property.class, () -> script.execute(null, \"the_x_value\"));\r\n    assertEquals(\"y\", xprop.getProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testRejectLocal",
  "sourceCode" : "@Test\r\nvoid testRejectLocal() {\r\n    final JexlContext jc = new MapContext();\r\n    final JexlScript assign = JEXL.createScript(\"var quux = null; quux.froboz.value = 10\");\r\n    assertNotNull(assertThrows(JexlException.class, () -> assign.execute(jc)).toString());\r\n    // quux is a global antish var\r\n    final JexlScript assign2 = JEXL.createScript(\"quux.froboz.value = 10\");\r\n    final Object o = assign2.execute(jc);\r\n    assertEquals(10, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testSetInError1",
  "sourceCode" : "@Test\r\nvoid testSetInError1() {\r\n    final JexlException.Property xprop = assertThrows(JexlException.Property.class, () -> JEXL.setProperty(\"the_x_value\", \"y\", 42));\r\n    assertEquals(\"y\", xprop.getProperty());\r\n    assertThrows(JexlException.Property.class, () -> JEXL.setProperty(null, \"y\", 42));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\AssignTest.java",
  "methodName" : "testUtil",
  "sourceCode" : "@Test\r\nvoid testUtil() {\r\n    final Quux quux = JEXL.newInstance(Quux.class, \"xuuq\", Integer.valueOf(100));\r\n    assertNotNull(quux);\r\n    JEXL.setProperty(quux, \"froboz.value\", Integer.valueOf(100));\r\n    Object o = JEXL.getProperty(quux, \"froboz.value\");\r\n    assertEquals(Integer.valueOf(100), o);\r\n    JEXL.setProperty(quux, \"['froboz'].value\", Integer.valueOf(1000));\r\n    o = JEXL.getProperty(quux, \"['froboz']['value']\");\r\n    assertEquals(Integer.valueOf(1000), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testAndSimple",
  "sourceCode" : "@Test\r\nvoid testAndSimple() throws Exception {\r\n    asserter.assertExpression(\"15 & 3\", Long.valueOf(15 & 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testAndVariableNumberCoercion",
  "sourceCode" : "@Test\r\nvoid testAndVariableNumberCoercion() throws Exception {\r\n    asserter.setVariable(\"x\", Integer.valueOf(15));\r\n    asserter.setVariable(\"y\", Short.valueOf((short) 7));\r\n    asserter.assertExpression(\"x & y\", Long.valueOf(15 & 7));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testAndVariableStringCoercion",
  "sourceCode" : "@Test\r\nvoid testAndVariableStringCoercion() throws Exception {\r\n    asserter.setVariable(\"x\", Integer.valueOf(15));\r\n    asserter.setVariable(\"y\", \"7\");\r\n    asserter.assertExpression(\"x & y\", Long.valueOf(15 & 7));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testAndWithLeftNull",
  "sourceCode" : "@Test\r\nvoid testAndWithLeftNull() throws Exception {\r\n    asserter.assertExpression(\"null & 1\", Long.valueOf(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testAndWithRightNull",
  "sourceCode" : "@Test\r\nvoid testAndWithRightNull() throws Exception {\r\n    asserter.assertExpression(\"1 & null\", Long.valueOf(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testAndWithTwoNulls",
  "sourceCode" : "@Test\r\nvoid testAndWithTwoNulls() throws Exception {\r\n    asserter.assertExpression(\"null & null\", Long.valueOf(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testComplementSimple",
  "sourceCode" : "@Test\r\nvoid testComplementSimple() throws Exception {\r\n    asserter.assertExpression(\"~128\", Long.valueOf(-129));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testComplementVariableNumberCoercion",
  "sourceCode" : "@Test\r\nvoid testComplementVariableNumberCoercion() throws Exception {\r\n    asserter.setVariable(\"x\", Integer.valueOf(15));\r\n    asserter.assertExpression(\"~x\", Long.valueOf(~15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testComplementVariableStringCoercion",
  "sourceCode" : "@Test\r\nvoid testComplementVariableStringCoercion() throws Exception {\r\n    asserter.setVariable(\"x\", \"15\");\r\n    asserter.assertExpression(\"~x\", Long.valueOf(~15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testComplementWithNull",
  "sourceCode" : "@Test\r\nvoid testComplementWithNull() throws Exception {\r\n    asserter.assertExpression(\"~null\", Long.valueOf(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testOrSimple",
  "sourceCode" : "@Test\r\nvoid testOrSimple() throws Exception {\r\n    asserter.assertExpression(\"12 | 3\", Long.valueOf(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testOrVariableNumberCoercion",
  "sourceCode" : "@Test\r\nvoid testOrVariableNumberCoercion() throws Exception {\r\n    asserter.setVariable(\"x\", Integer.valueOf(12));\r\n    asserter.setVariable(\"y\", Short.valueOf((short) 3));\r\n    asserter.assertExpression(\"x | y\", Long.valueOf(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testOrVariableStringCoercion",
  "sourceCode" : "@Test\r\nvoid testOrVariableStringCoercion() throws Exception {\r\n    asserter.setVariable(\"x\", Integer.valueOf(12));\r\n    asserter.setVariable(\"y\", \"3\");\r\n    asserter.assertExpression(\"x | y\", Long.valueOf(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testOrWithLeftNull",
  "sourceCode" : "@Test\r\nvoid testOrWithLeftNull() throws Exception {\r\n    asserter.assertExpression(\"null | 1\", Long.valueOf(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testOrWithRightNull",
  "sourceCode" : "@Test\r\nvoid testOrWithRightNull() throws Exception {\r\n    asserter.assertExpression(\"1 | null\", Long.valueOf(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testOrWithTwoNulls",
  "sourceCode" : "@Test\r\nvoid testOrWithTwoNulls() throws Exception {\r\n    asserter.assertExpression(\"null | null\", Long.valueOf(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testParenthesized",
  "sourceCode" : "@Test\r\nvoid testParenthesized() throws Exception {\r\n    asserter.assertExpression(\"(2 | 1) & 3\", Long.valueOf(3L));\r\n    asserter.assertExpression(\"(2 & 1) | 3\", Long.valueOf(3L));\r\n    asserter.assertExpression(\"~(120 | 42)\", Long.valueOf(~(120 | 42)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testXorSimple",
  "sourceCode" : "@Test\r\nvoid testXorSimple() throws Exception {\r\n    asserter.assertExpression(\"1 ^ 3\", Long.valueOf(1 ^ 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testXorVariableNumberCoercion",
  "sourceCode" : "@Test\r\nvoid testXorVariableNumberCoercion() throws Exception {\r\n    asserter.setVariable(\"x\", Integer.valueOf(1));\r\n    asserter.setVariable(\"y\", Short.valueOf((short) 3));\r\n    asserter.assertExpression(\"x ^ y\", Long.valueOf(1 ^ 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testXorVariableStringCoercion",
  "sourceCode" : "@Test\r\nvoid testXorVariableStringCoercion() throws Exception {\r\n    asserter.setVariable(\"x\", Integer.valueOf(1));\r\n    asserter.setVariable(\"y\", \"3\");\r\n    asserter.assertExpression(\"x ^ y\", Long.valueOf(1 ^ 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testXorWithLeftNull",
  "sourceCode" : "@Test\r\nvoid testXorWithLeftNull() throws Exception {\r\n    asserter.assertExpression(\"null ^ 1\", Long.valueOf(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testXorWithRightNull",
  "sourceCode" : "@Test\r\nvoid testXorWithRightNull() throws Exception {\r\n    asserter.assertExpression(\"1 ^ null\", Long.valueOf(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BitwiseOperatorTest.java",
  "methodName" : "testXorWithTwoNulls",
  "sourceCode" : "@Test\r\nvoid testXorWithTwoNulls() throws Exception {\r\n    asserter.assertExpression(\"null ^ null\", Long.valueOf(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BlockTest.java",
  "methodName" : "testBlockExecutesAll",
  "sourceCode" : "@Test\r\nvoid testBlockExecutesAll() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (true) { x = 'Hello'; y = 'World';}\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"Hello\", jc.get(\"x\"), \"First result is wrong\");\r\n    assertEquals(\"World\", jc.get(\"y\"), \"Second result is wrong\");\r\n    assertEquals(\"World\", o, \"Block result is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BlockTest.java",
  "methodName" : "testBlockLastExecuted01",
  "sourceCode" : "@Test\r\nvoid testBlockLastExecuted01() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (true) { x = 1; } else { x = 2; }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(1), o, \"Block result is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BlockTest.java",
  "methodName" : "testBlockLastExecuted02",
  "sourceCode" : "@Test\r\nvoid testBlockLastExecuted02() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (false) { x = 1; } else { x = 2; }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(2), o, \"Block result is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BlockTest.java",
  "methodName" : "testBlockSimple",
  "sourceCode" : "@Test\r\nvoid testBlockSimple() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (true) { 'hello'; }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"hello\", o, \"Result is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BlockTest.java",
  "methodName" : "testEmptyBlock",
  "sourceCode" : "@Test\r\nvoid testEmptyBlock() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (true) { }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertNull(o, \"Result is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BlockTest.java",
  "methodName" : "testNestedBlock",
  "sourceCode" : "@Test\r\nvoid testNestedBlock() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (true) { x = 'hello'; y = 'world';\" + \" if (true) { x; } y; }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"world\", o, \"Block result is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BuilderTest.java",
  "methodName" : "testFlags",
  "sourceCode" : "@Test\r\nvoid testFlags() {\r\n    assertTrue(builder().antish(true).antish());\r\n    assertFalse(builder().antish(false).antish());\r\n    assertTrue(builder().cancellable(true).cancellable());\r\n    assertFalse(builder().cancellable(false).cancellable());\r\n    assertTrue(builder().safe(true).safe());\r\n    assertFalse(builder().safe(false).safe());\r\n    assertTrue(builder().silent(true).silent());\r\n    assertFalse(builder().silent(false).silent());\r\n    assertTrue(builder().lexical(true).lexical());\r\n    assertFalse(builder().lexical(false).lexical());\r\n    assertTrue(builder().lexicalShade(true).lexicalShade());\r\n    assertFalse(builder().lexicalShade(false).lexicalShade());\r\n    assertTrue(builder().silent(true).silent());\r\n    assertFalse(builder().silent(false).silent());\r\n    assertTrue(builder().strict(true).strict());\r\n    assertFalse(builder().strict(false).strict());\r\n    assertTrue(builder().booleanLogical(true).options().isBooleanLogical());\r\n    assertFalse(builder().booleanLogical(false).options().isBooleanLogical());\r\n    assertTrue(builder().strictInterpolation(true).options().isStrictInterpolation());\r\n    assertFalse(builder().strictInterpolation(false).options().isStrictInterpolation());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BuilderTest.java",
  "methodName" : "testOther",
  "sourceCode" : "@Test\r\nvoid testOther() {\r\n    final ClassLoader cls = getClass().getClassLoader().getParent();\r\n    assertEquals(cls, builder().loader(cls).loader());\r\n    final Charset cs = StandardCharsets.UTF_16;\r\n    assertEquals(cs, builder().charset(cs).charset());\r\n    assertEquals(cs, builder().loader(cs).charset());\r\n    final JexlUberspect u0 = builder().create().getUberspect();\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    final JexlUberspect uberspect = new SandboxUberspect(u0, sandbox);\r\n    assertEquals(sandbox, builder().sandbox(sandbox).sandbox());\r\n    assertEquals(uberspect, builder().uberspect(uberspect).uberspect());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\BuilderTest.java",
  "methodName" : "testValues",
  "sourceCode" : "@Test\r\nvoid testValues() {\r\n    assertEquals(1, builder().collectMode(1).collectMode());\r\n    assertEquals(0, builder().collectMode(0).collectMode());\r\n    assertEquals(32, builder().cacheThreshold(32).cacheThreshold());\r\n    assertEquals(8, builder().stackOverflow(8).stackOverflow());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CachePerformanceTest.java",
  "methodName" : "testConcurrent",
  "sourceCode" : "@Test\r\nvoid testConcurrent() throws Exception {\r\n    final JexlBuilder builder = new JexlBuilder().cacheFactory(ConcurrentCache::new).cache(CACHED);\r\n    final JexlEngine jexl = builder.create();\r\n    runTest(\"testConcurrent\", jexl);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CachePerformanceTest.java",
  "methodName" : "testSpread",
  "sourceCode" : "@Test\r\nvoid testSpread() throws Exception {\r\n    final JexlBuilder builder = new JexlBuilder().cacheFactory(SpreadCache::new).cache(CACHED);\r\n    final JexlEngine jexl = builder.create();\r\n    runTest(\"testSpread\", jexl);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CachePerformanceTest.java",
  "methodName" : "testSynchronized",
  "sourceCode" : "@Test\r\nvoid testSynchronized() throws Exception {\r\n    final JexlBuilder builder = new JexlBuilder().cache(CACHED);\r\n    final JexlEngine jexl = builder.create();\r\n    runTest(\"testSynchronized\", jexl);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testAssignBooleanCache",
  "sourceCode" : "@Test\r\nvoid testAssignBooleanCache() throws Exception {\r\n    runThreaded(AssignBooleanTask.class, LOOPS, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testAssignBooleanNoCache",
  "sourceCode" : "@Test\r\nvoid testAssignBooleanNoCache() throws Exception {\r\n    runThreaded(AssignBooleanTask.class, LOOPS, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testAssignCache",
  "sourceCode" : "@Test\r\nvoid testAssignCache() throws Exception {\r\n    runThreaded(AssignTask.class, LOOPS, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testAssignListCache",
  "sourceCode" : "@Test\r\nvoid testAssignListCache() throws Exception {\r\n    runThreaded(AssignListTask.class, LOOPS, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testAssignListNoCache",
  "sourceCode" : "@Test\r\nvoid testAssignListNoCache() throws Exception {\r\n    runThreaded(AssignListTask.class, LOOPS, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testAssignNoCache",
  "sourceCode" : "@Test\r\nvoid testAssignNoCache() throws Exception {\r\n    runThreaded(AssignTask.class, LOOPS, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testComputeCache",
  "sourceCode" : "@Test\r\nvoid testComputeCache() throws Exception {\r\n    runThreaded(ComputeTask.class, LOOPS, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testCOMPUTECache",
  "sourceCode" : "@Test\r\nvoid testCOMPUTECache() throws Exception {\r\n    final TestCacheArguments args = new TestCacheArguments();\r\n    args.ca = new Object[] { Cached.class, Cached1.class, Cached2.class };\r\n    args.value = new Object[] { Integer.valueOf(2), \"quux\" };\r\n    doCOMPUTE(args, LOOPS, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testComputeNoCache",
  "sourceCode" : "@Test\r\nvoid testComputeNoCache() throws Exception {\r\n    runThreaded(ComputeTask.class, LOOPS, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testCOMPUTENoCache",
  "sourceCode" : "@Test\r\nvoid testCOMPUTENoCache() throws Exception {\r\n    final TestCacheArguments args = new TestCacheArguments();\r\n    args.ca = new Object[] { Cached.class, Cached1.class, Cached2.class };\r\n    args.value = new Object[] { Integer.valueOf(2), \"quux\" };\r\n    doCOMPUTE(args, LOOPS, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testNullAssignCache",
  "sourceCode" : "@Test\r\nvoid testNullAssignCache() throws Exception {\r\n    runThreaded(AssignNullTask.class, LOOPS, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CacheTest.java",
  "methodName" : "testNullAssignNoCache",
  "sourceCode" : "@Test\r\nvoid testNullAssignNoCache() throws Exception {\r\n    runThreaded(AssignNullTask.class, LOOPS, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ClassCreatorTest.java",
  "methodName" : "testBasicCtor",
  "sourceCode" : "@Test\r\nvoid testBasicCtor() {\r\n    final JexlScript s = jexl.createScript(\"(c, v)->{ var ct2 = new(c, v); ct2.value; }\");\r\n    Object r = s.execute(null, TwoCtors.class, 10);\r\n    assertEquals(10, r);\r\n    r = s.execute(null, TwoCtors.class, 5 + 5);\r\n    assertEquals(10, r);\r\n    r = s.execute(null, TwoCtors.class, 10d);\r\n    assertEquals(-10, r);\r\n    r = s.execute(null, TwoCtors.class, 100f);\r\n    assertEquals(-100, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ClassCreatorTest.java",
  "methodName" : "testContextualCtor",
  "sourceCode" : "@Test\r\nvoid testContextualCtor() {\r\n    final MapContext ctxt = new MapContext();\r\n    ctxt.set(\"value\", 42);\r\n    JexlScript s = jexl.createScript(\"(c)->{ new(c).value }\");\r\n    Object r = s.execute(ctxt, ContextualCtor.class);\r\n    assertEquals(42, r);\r\n    s = jexl.createScript(\"(c, v)->{ new(c, v).value }\");\r\n    r = s.execute(ctxt, ContextualCtor.class, 100);\r\n    assertEquals(142, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ClassCreatorTest.java",
  "methodName" : "testFunctor2Class",
  "sourceCode" : "@Test\r\nvoid testFunctor2Class() throws Exception {\r\n    functorTwo(new NsTest(ClassCreator.GEN_CLASS + \"foo2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ClassCreatorTest.java",
  "methodName" : "testFunctor2Name",
  "sourceCode" : "@Test\r\nvoid testFunctor2Name() throws Exception {\r\n    functorTwo(ClassCreator.GEN_CLASS + \"foo2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ClassCreatorTest.java",
  "methodName" : "testFunctorOne",
  "sourceCode" : "@Test\r\nvoid testFunctorOne() throws Exception {\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"value\", 1000);\r\n    // create a class foo1 with a ctor whose body gets a value\r\n    // from the context to initialize its value\r\n    final ClassCreator cctor = new ClassCreator(jexl, base);\r\n    cctor.setSeed(1);\r\n    cctor.setCtorBody(\"value = (Integer) ctxt.get(\\\"value\\\") + 10;\");\r\n    Class<?> foo1 = cctor.createClass(true);\r\n    assertSame(foo1.getClassLoader(), cctor.getClassLoader());\r\n    assertEquals(\"foo1\", foo1.getSimpleName());\r\n    Object result = cctor.newInstance(foo1, ctxt);\r\n    assertEquals(foo1, result.getClass());\r\n    jexl.setClassLoader(cctor.getClassLoader());\r\n    cctor.clear();\r\n    // check we can invoke that ctor using its name or class\r\n    final JexlScript script = jexl.createScript(\"(c)->{ new(c).value; }\");\r\n    result = script.execute(ctxt, foo1);\r\n    assertEquals(1010, result);\r\n    result = script.execute(ctxt, foo1.getName());\r\n    assertEquals(1010, result);\r\n    // re-create foo1 with a different body!\r\n    cctor.setSeed(1);\r\n    cctor.setCtorBody(\"value = (Integer) ctxt.get(\\\"value\\\") + 99;\");\r\n    final Class<?> foo11 = cctor.createClass(true);\r\n    assertEquals(\"foo1\", foo1.getSimpleName());\r\n    assertNotSame(foo11, foo1);\r\n    foo1 = foo11;\r\n    result = cctor.newInstance(foo1, ctxt);\r\n    assertEquals(foo1, result.getClass());\r\n    // drum rolll....\r\n    jexl.setClassLoader(foo1.getClassLoader());\r\n    result = script.execute(ctxt, foo1.getName());\r\n    // tada!\r\n    assertEquals(1099, result);\r\n    result = script.execute(ctxt, foo1);\r\n    assertEquals(1099, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ClassCreatorTest.java",
  "methodName" : "testFunctorThree",
  "sourceCode" : "@Test\r\nvoid testFunctorThree() throws Exception {\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"value\", 1000);\r\n    final ClassCreator cctor = new ClassCreator(jexl, base);\r\n    cctor.setSeed(2);\r\n    cctor.setCtorBody(\"value = (Integer) ctxt.get(\\\"value\\\") + 10;\");\r\n    Class<?> foo1 = cctor.createClass(true);\r\n    assertSame(foo1.getClassLoader(), cctor.getClassLoader());\r\n    assertEquals(\"foo2\", foo1.getSimpleName());\r\n    Object result = cctor.newInstance(foo1, ctxt);\r\n    assertEquals(foo1, result.getClass());\r\n    jexl.setClassLoader(cctor.getClassLoader());\r\n    cctor.clear();\r\n    final Map<String, Object> ns = new HashMap<>();\r\n    ns.put(\"test\", foo1);\r\n    final JexlEngine jexl2 = new JexlBuilder().namespaces(ns).create();\r\n    final JexlScript script = jexl2.createScript(\"test:getValue()\");\r\n    result = script.execute(ctxt, foo1.getName());\r\n    assertEquals(1010, result);\r\n    cctor.setSeed(2);\r\n    cctor.setCtorBody(\"value = (Integer) ctxt.get(\\\"value\\\") + 99;\");\r\n    final Class<?> foo11 = cctor.createClass(true);\r\n    assertEquals(\"foo2\", foo1.getSimpleName());\r\n    assertNotSame(foo11, foo1);\r\n    foo1 = foo11;\r\n    result = cctor.newInstance(foo1, ctxt);\r\n    assertEquals(foo1, result.getClass());\r\n    // drum rolll....\r\n    jexl2.setClassLoader(foo1.getClassLoader());\r\n    result = script.execute(ctxt, foo1.getName());\r\n    // tada!\r\n    assertEquals(1099, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ClassCreatorTest.java",
  "methodName" : "testMany",
  "sourceCode" : "@Test\r\nvoid testMany() throws Exception {\r\n    // abort test if class creator cannot run\r\n    if (!ClassCreator.canRun) {\r\n        return;\r\n    }\r\n    int pass = 0;\r\n    int gced = -1;\r\n    final ReferenceQueue<Object> queue = new ReferenceQueue<>();\r\n    final List<Reference<?>> stuff = new ArrayList<>();\r\n    // keeping a reference on methods prevent classes from being GCed\r\n    //        List<Object> mm = new ArrayList<Object>();\r\n    final JexlExpression expr = jexl.createExpression(\"foo.value\");\r\n    final JexlExpression newx = jexl.createExpression(\"foo = new(clazz)\");\r\n    final JexlEvalContext context = new JexlEvalContext();\r\n    final JexlOptions options = context.getEngineOptions();\r\n    options.setStrict(false);\r\n    options.setSilent(true);\r\n    final ClassCreator cctor = new ClassCreator(jexl, base);\r\n    for (int i = 0; i < LOOPS && gced < 0; ++i) {\r\n        cctor.setSeed(i);\r\n        Class<?> clazz;\r\n        if (pass == 0) {\r\n            clazz = cctor.createClass();\r\n        } else {\r\n            clazz = cctor.getClassInstance();\r\n            if (clazz == null) {\r\n                assertEquals(i, gced);\r\n                break;\r\n            }\r\n        }\r\n        // this code verifies the assumption that holding a strong reference to a method prevents\r\n        // its owning class from being GCed\r\n        //          Method m = clazz.getDeclaredMethod(\"getValue\", new Class<?>[0]);\r\n        //          mm.add(m);\r\n        // we should not be able to create foox since it is unknown to the JEXL classloader\r\n        context.set(\"clazz\", cctor.getClassName());\r\n        context.set(\"foo\", null);\r\n        Object z = newx.evaluate(context);\r\n        assertNull(z);\r\n        // check with the class itself\r\n        context.set(\"clazz\", clazz);\r\n        z = newx.evaluate(context);\r\n        assertNotNull(z, clazz + \": class \" + i + \" could not be instantiated on pass \" + pass);\r\n        assertEquals(Integer.valueOf(i), expr.evaluate(context));\r\n        // with the proper class loader, attempt to create an instance from the class name\r\n        jexl.setClassLoader(cctor.getClassLoader());\r\n        z = newx.evaluate(context);\r\n        assertEquals(z.getClass(), clazz);\r\n        assertEquals(Integer.valueOf(i), expr.evaluate(context));\r\n        cctor.clear();\r\n        jexl.setClassLoader(null);\r\n        // on pass 0, attempt to force GC to run and collect generated classes\r\n        if (pass == 0) {\r\n            // add a weak reference on the class\r\n            stuff.add(new ClassReference(clazz, queue));\r\n            // add a soft reference on an instance\r\n            stuff.add(new InstanceReference(clazz.getConstructor().newInstance(), queue));\r\n            // attempt to force GC:\r\n            // while we still have a MB free, create & store big objects\r\n            for (int b = 0; b < 1024 && Runtime.getRuntime().freeMemory() > MEGA; ++b) {\r\n                final BigObject big = new BigObject(b);\r\n                stuff.add(new InstanceReference(big, queue));\r\n            }\r\n            // hint it...\r\n            System.gc();\r\n            // let's see if some weak refs got collected\r\n            boolean qr = false;\r\n            while (queue.poll() != null) {\r\n                final Reference<?> ref = queue.remove(1);\r\n                if (ref instanceof ClassReference) {\r\n                    gced = i;\r\n                    qr = true;\r\n                }\r\n            }\r\n            if (qr) {\r\n                //logger.warn(\"may have GCed class around \" + i);\r\n                pass = 1;\r\n                i = 0;\r\n            }\r\n        }\r\n    }\r\n    if (gced < 0) {\r\n        logger.warn(\"unable to force GC\");\r\n        //assertTrue(gced > 0);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ClassCreatorTest.java",
  "methodName" : "testOne",
  "sourceCode" : "@Test\r\nvoid testOne() throws Exception {\r\n    // abort test if class creator cannot run\r\n    if (!ClassCreator.canRun) {\r\n        logger.warn(\"unable to create classes\");\r\n        return;\r\n    }\r\n    final ClassCreator cctor = new ClassCreator(jexl, base);\r\n    cctor.setSeed(1);\r\n    final Class<?> foo1 = cctor.createClass();\r\n    assertEquals(\"foo1\", foo1.getSimpleName());\r\n    cctor.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ClassCreatorTest.java",
  "methodName" : "test432",
  "sourceCode" : "@Test\r\nvoid test432() throws Exception {\r\n    final ClassCreator cctor = new ClassCreator(jexl, base);\r\n    cctor.setSeed(2);\r\n    cctor.setCtorBody(\"value = (Integer) ctxt.get(\\\"value\\\") + 10;\");\r\n    Class<?> foo1 = cctor.createClass(true);\r\n    assertSame(foo1.getClassLoader(), cctor.getClassLoader());\r\n    assertEquals(\"foo2\", foo1.getSimpleName());\r\n    final Map<String, Object> ns = new HashMap<>();\r\n    ns.put(\"test\", foo1.getName());\r\n    // use cache\r\n    final JexlEngine jexl2 = new JexlBuilder().namespaces(ns).cache(16).create();\r\n    jexl2.setClassLoader(cctor.getClassLoader());\r\n    cctor.clear();\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"value\", 1000);\r\n    final JexlScript script = jexl2.createScript(\"test:getValue()\");\r\n    Object result = script.execute(ctxt);\r\n    assertEquals(1010, result);\r\n    cctor.setSeed(2);\r\n    cctor.setCtorBody(\"value = (Integer) ctxt.get(\\\"value\\\") + 99;\");\r\n    final Class<?> foo11 = cctor.createClass(true);\r\n    assertEquals(\"foo2\", foo1.getSimpleName());\r\n    assertNotSame(foo11, foo1);\r\n    foo1 = foo11;\r\n    // drum rolll....\r\n    jexl2.setClassLoader(foo1.getClassLoader());\r\n    result = script.execute(ctxt);\r\n    // tada!\r\n    assertEquals(1099, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CollectionLiteralTest.java",
  "methodName" : "testArrayBuilder",
  "sourceCode" : "@Test\r\nvoid testArrayBuilder() {\r\n    final Arithmetic363 jc = new Arithmetic363(true);\r\n    final JexlEngine jexl = new JexlBuilder().cache(4).arithmetic(jc).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"[ (x)->{ 1 + x; }, (y)->{ y - 1; } ]\");\r\n    Object previous = null;\r\n    for (int i = 0; i < 4; ++i) {\r\n        result = script.execute(null);\r\n        assertNotNull(result);\r\n        assertNotSame(previous, result);\r\n        previous = result;\r\n        assertEquals(1 + i, jc.arrays.get());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CollectionLiteralTest.java",
  "methodName" : "testMapLBuilder",
  "sourceCode" : "@Test\r\nvoid testMapLBuilder() {\r\n    final Arithmetic363 jc = new Arithmetic363(true);\r\n    final JexlEngine jexl = new JexlBuilder().cache(4).arithmetic(jc).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"{ 'x':(x)->{ 1 + x; }, 'y' : (y)->{ y - 1; } }\");\r\n    Object previous = null;\r\n    for (int i = 0; i < 4; ++i) {\r\n        result = script.execute(null);\r\n        assertNotNull(result);\r\n        assertNotSame(previous, result);\r\n        previous = result;\r\n        assertEquals(1 + i, jc.maps.get());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\CollectionLiteralTest.java",
  "methodName" : "testSetBuilder",
  "sourceCode" : "@Test\r\nvoid testSetBuilder() {\r\n    final Arithmetic363 jc = new Arithmetic363(true);\r\n    final JexlEngine jexl = new JexlBuilder().cache(4).arithmetic(jc).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"{ (x)->{ 1 + x; }, (y)->{ y - 1; } }\");\r\n    Object previous = null;\r\n    for (int i = 0; i < 4; ++i) {\r\n        result = script.execute(null);\r\n        assertNotNull(result);\r\n        assertNotSame(previous, result);\r\n        previous = result;\r\n        assertEquals(1 + i, jc.sets.get());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ComposePermissionsTest.java",
  "methodName" : "testComposePermissions",
  "sourceCode" : "@Test\r\nvoid testComposePermissions() throws Exception {\r\n    runComposePermissions(JexlPermissions.UNRESTRICTED);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ComposePermissionsTest.java",
  "methodName" : "testComposePermissions1",
  "sourceCode" : "@Test\r\nvoid testComposePermissions1() throws Exception {\r\n    runComposePermissions(new JexlPermissions.Delegate(JexlPermissions.UNRESTRICTED) {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"delegate:\" + base.toString();\r\n        }\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ComposePermissionsTest.java",
  "methodName" : "testComposePermissions2",
  "sourceCode" : "@Test\r\nvoid testComposePermissions2() throws Exception {\r\n    runComposePermissions(new JexlPermissions.ClassPermissions(JexlPermissions.UNRESTRICTED, Collections.emptySet()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNamespace346a",
  "sourceCode" : "@Test\r\nvoid testNamespace346a() {\r\n    final JexlContext ctxt = new Context346();\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    final String src = \"x != null ? x : func(y)\";\r\n    final JexlScript script = jexl.createScript(src, \"x\", \"y\");\r\n    Object result = script.execute(ctxt, null, 1);\r\n    assertEquals(42, result);\r\n    result = script.execute(ctxt, 169, -169);\r\n    assertEquals(169, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNamespace346b",
  "sourceCode" : "@Test\r\nvoid testNamespace346b() {\r\n    final JexlContext ctxt = new MapContext();\r\n    final Map<String, Object> ns = new HashMap<>();\r\n    ns.put(\"x\", Math.class);\r\n    ns.put(null, Math.class);\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).namespaces(ns).create();\r\n    final String src = \"x != null ? x : abs(y)\";\r\n    final JexlScript script = jexl.createScript(src, \"x\", \"y\");\r\n    Object result = script.execute(ctxt, null, 42);\r\n    assertEquals(42, result);\r\n    result = script.execute(ctxt, 169, -169);\r\n    assertEquals(169, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNamespace348a",
  "sourceCode" : "@Test\r\nvoid testNamespace348a() {\r\n    final JexlContext ctxt = new MapContext();\r\n    final Map<String, Object> ns = new HashMap<>();\r\n    ns.put(\"ns\", Ns348.class);\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).namespaces(ns).create();\r\n    run348a(jexl, ctxt);\r\n    run348b(jexl, ctxt);\r\n    run348c(jexl, ctxt);\r\n    run348d(jexl, ctxt);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNamespace348b",
  "sourceCode" : "@Test\r\nvoid testNamespace348b() {\r\n    final JexlContext ctxt = new ContextNs348();\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    // no space for ns name as syntactic hint\r\n    run348a(jexl, ctxt, \"ns:\");\r\n    run348b(jexl, ctxt, \"ns:\");\r\n    run348c(jexl, ctxt, \"ns:\");\r\n    run348d(jexl, ctxt, \"ns:\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNamespace348c",
  "sourceCode" : "@Test\r\nvoid testNamespace348c() {\r\n    final JexlContext ctxt = new ContextNs348();\r\n    final Map<String, Object> ns = new HashMap<>();\r\n    ns.put(\"ns\", Ns348.class);\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.namespaceTest(n -> true);\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(ns).features(f).safe(false).create();\r\n    run348a(jexl, ctxt);\r\n    run348b(jexl, ctxt);\r\n    run348c(jexl, ctxt);\r\n    run348d(jexl, ctxt);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNamespace348d",
  "sourceCode" : "@Test\r\nvoid testNamespace348d() {\r\n    final JexlContext ctxt = new ContextNs348();\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.namespaceTest(n -> true);\r\n    final JexlEngine jexl = new JexlBuilder().features(f).safe(false).create();\r\n    run348a(jexl, ctxt);\r\n    run348b(jexl, ctxt);\r\n    run348c(jexl, ctxt);\r\n    run348d(jexl, ctxt);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNamespacePragma",
  "sourceCode" : "@Test\r\nvoid testNamespacePragma() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext context = new TaxesContext(18.6);\r\n    // local namespace tax declared\r\n    final String strs = \"#pragma jexl.namespace.tax org.apache.commons.jexl3.ContextNamespaceTest$Taxes\\n\" + \"tax:vat(2000)\";\r\n    final JexlScript staxes = jexl.createScript(strs);\r\n    final Object result = staxes.execute(context);\r\n    assertEquals(372., result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNamespacePragmaString",
  "sourceCode" : "@Test\r\nvoid testNamespacePragmaString() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext context = new MapContext();\r\n    // local namespace str declared\r\n    final String strs = \"#pragma jexl.namespace.str java.lang.String\\n\" + \"str:format('%04d', 42)\";\r\n    final JexlScript staxes = jexl.createScript(strs);\r\n    final Object result = staxes.execute(context);\r\n    assertEquals(\"0042\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNsNsContext0",
  "sourceCode" : "@Test\r\nvoid testNsNsContext0() {\r\n    nsnsCtor.set(0);\r\n    final String clsName = NsNs.class.getName();\r\n    runNsNsContext(Collections.singletonMap(\"nsns\", clsName));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testNsNsContext1",
  "sourceCode" : "@Test\r\nvoid testNsNsContext1() {\r\n    nsnsCtor.set(0);\r\n    runNsNsContext(Collections.singletonMap(\"nsns\", NsNs.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testObjectContext",
  "sourceCode" : "@Test\r\nvoid testObjectContext() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).silent(false).create();\r\n    final Vat vat = new Vat(18.6);\r\n    final ObjectContext<Vat> ctxt = new ObjectContext<>(jexl, vat);\r\n    assertEquals(18.6d, (Double) ctxt.get(\"VAT\"), 0.0001d);\r\n    ctxt.set(\"VAT\", 20.0d);\r\n    assertEquals(20.0d, (Double) ctxt.get(\"VAT\"), 0.0001d);\r\n    assertThrows(JexlException.Property.class, () -> ctxt.get(\"vat\"));\r\n    assertThrows(JexlException.Property.class, () -> ctxt.set(\"vat\", 33.0d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testStaticNs0",
  "sourceCode" : "@Test\r\nvoid testStaticNs0() {\r\n    runStaticNsContext(Collections.singletonMap(\"sns\", StaticNs.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testStaticNs1",
  "sourceCode" : "@Test\r\nvoid testStaticNs1() {\r\n    runStaticNsContext(Collections.singletonMap(\"sns\", StaticNs.class.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ContextNamespaceTest.java",
  "methodName" : "testThreadedContext",
  "sourceCode" : "@Test\r\nvoid testThreadedContext() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext context = new TaxesContext(18.6);\r\n    final String strs = \"taxes:vat(1000)\";\r\n    final JexlScript staxes = jexl.createScript(strs);\r\n    final Object result = staxes.execute(context);\r\n    assertEquals(186., result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testEmptyBody",
  "sourceCode" : "@Test\r\nvoid testEmptyBody() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var i = 0; do ; while((i+=1) < 10); i\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(10, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testEmptyStmtBody",
  "sourceCode" : "@Test\r\nvoid testEmptyStmtBody() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var i = 0; do {} while((i+=1) < 10); i\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(10, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testForEachBreakInsideFunction",
  "sourceCode" : "@Test\r\nvoid testForEachBreakInsideFunction() throws Exception {\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> JEXL.createScript(\"for (i : 1..2) {  y = function() { break; } }\"), \"break is out of loop!\");\r\n    final String str = xparse.detailedMessage();\r\n    assertTrue(str.contains(\"break\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testForEachContinueInsideFunction",
  "sourceCode" : "@Test\r\nvoid testForEachContinueInsideFunction() throws Exception {\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> JEXL.createScript(\"for (i : 1..2) {  y = function() { continue; } }\"), \"break is out of loop!\");\r\n    final String str = xparse.detailedMessage();\r\n    assertTrue(str.contains(\"continue\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testForEachLambda",
  "sourceCode" : "@Test\r\nvoid testForEachLambda() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"(x)->{ for (i : 1..2) {  continue; var y = function() { 42; } break; } }\");\r\n    assertNotNull(e);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testForLoop0",
  "sourceCode" : "@Test\r\nvoid testForLoop0() {\r\n    final String src = \"(l)->{ for(let x = 0; x < 4; ++x) { l.add(x); } }\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final List<Integer> l = new ArrayList<>();\r\n    final Object result = script.execute(null, l);\r\n    assertNotNull(result);\r\n    assertEquals(Arrays.asList(0, 1, 2, 3), l);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testForLoop1",
  "sourceCode" : "@Test\r\nvoid testForLoop1() {\r\n    final String src = \"(l)->{ for(var x = 0; x < 4; ++x) { l.add(x); } }\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final List<Integer> l = new ArrayList<>();\r\n    final Object result = script.execute(null, l);\r\n    assertNotNull(result);\r\n    assertEquals(Arrays.asList(0, 1, 2, 3), l);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testForLoop2",
  "sourceCode" : "@Test\r\nvoid testForLoop2() {\r\n    final String src = \"(l)->{ for(x = 0; x < 4; ++x) { l.add(x); } }\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final List<Integer> l = new ArrayList<>();\r\n    final JexlContext ctxt = new MapContext();\r\n    final Object result = script.execute(ctxt, l);\r\n    assertNotNull(result);\r\n    assertEquals(Arrays.asList(0, 1, 2, 3), l);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testSimpleWhileFalse",
  "sourceCode" : "@Test\r\nvoid testSimpleWhileFalse() throws Exception {\r\n    JexlScript e = JEXL.createScript(\"do {} while (false)\");\r\n    final JexlContext jc = new MapContext();\r\n    Object o = e.execute(jc);\r\n    assertNull(o);\r\n    e = JEXL.createScript(\"do {} while (false); 23\");\r\n    o = e.execute(jc);\r\n    assertEquals(23, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testWhileEmptyBody",
  "sourceCode" : "@Test\r\nvoid testWhileEmptyBody() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var i = 0; while((i+=1) < 10); i\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(10, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testWhileEmptyStmtBody",
  "sourceCode" : "@Test\r\nvoid testWhileEmptyStmtBody() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var i = 0; while((i+=1) < 10) {}; i\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(10, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testWhileExecutesExpressionWhenLooping",
  "sourceCode" : "@Test\r\nvoid testWhileExecutesExpressionWhenLooping() throws Exception {\r\n    JexlScript e = JEXL.createScript(\"do x = x + 1 while (x < 10)\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", 1);\r\n    Object o = e.execute(jc);\r\n    assertEquals(10, o);\r\n    assertEquals(10, jc.get(\"x\"));\r\n    e = JEXL.createScript(\"var x = 0; do x += 1; while (x < 23)\");\r\n    o = e.execute(jc);\r\n    assertEquals(23, o);\r\n    jc.set(\"x\", 1);\r\n    e = JEXL.createScript(\"do x += 1; while (x < 23); return 42;\");\r\n    o = e.execute(jc);\r\n    assertEquals(23, jc.get(\"x\"));\r\n    assertEquals(42, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\DoWhileTest.java",
  "methodName" : "testWhileWithBlock",
  "sourceCode" : "@Test\r\nvoid testWhileWithBlock() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"do { x = x + 1; y = y * 2; } while (x < 10)\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", Integer.valueOf(1));\r\n    jc.set(\"y\", Integer.valueOf(1));\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(512), o, \"Result is wrong\");\r\n    assertEquals(Integer.valueOf(10), jc.get(\"x\"), \"x is wrong\");\r\n    assertEquals(Integer.valueOf(512), jc.get(\"y\"), \"y is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\examples\\ArrayTest.java",
  "methodName" : "testExample",
  "sourceCode" : "/**\r\n * Unit test entry point.\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testExample() throws Exception {\r\n    example(AbstractOutput.JUNIT);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\examples\\MethodPropertyTest.java",
  "methodName" : "testExample",
  "sourceCode" : "/**\r\n * Unit test entry point.\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testExample() throws Exception {\r\n    example(AbstractOutput.JUNIT);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\examples\\StreamTest.java",
  "methodName" : "testURICollection",
  "sourceCode" : "@Test\r\nvoid testURICollection() {\r\n    // A collection map/filter aware context\r\n    final JexlContext sctxt = new CollectionContext();\r\n    // Some uris\r\n    final List<URI> uris = Arrays.asList(URI.create(\"http://user@www.apache.org:8000?qry=true\"), URI.create(\"https://commons.apache.org/releases/prepare.html\"), URI.create(\"mailto:henrib@apache.org\"));\r\n    // filter, all results schemes start with 'http'\r\n    final JexlScript filter = jexl.createScript(\"list.filter(uri -> uri.scheme =^ 'http')\", \"list\");\r\n    final Object filtered = filter.execute(sctxt, uris);\r\n    assertInstanceOf(List.class, filtered);\r\n    List<URI> result = (List<URI>) filtered;\r\n    assertEquals(2, result.size());\r\n    for (final URI uri : result) {\r\n        assertTrue(uri.getScheme().startsWith(\"http\"));\r\n    }\r\n    // map, all results scheme now 'https'\r\n    final JexlScript mapper = jexl.createScript(\"list.map(uri -> uri.scheme =^ 'http'? URI:create(`https://${uri.host}`) : null)\", \"list\");\r\n    final Object transformed = mapper.execute(sctxt, uris);\r\n    assertInstanceOf(List.class, transformed);\r\n    result = (List<URI>) transformed;\r\n    assertEquals(2, result.size());\r\n    for (final URI uri : result) {\r\n        assertEquals(\"https\", uri.getScheme());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\examples\\StreamTest.java",
  "methodName" : "testURIStream",
  "sourceCode" : "@Test\r\nvoid testURIStream() {\r\n    // let's assume a collection of uris need to be processed and transformed to be simplified ;\r\n    // we want only http/https ones, only the host part and using a https scheme\r\n    final List<URI> uris = Arrays.asList(URI.create(\"http://user@www.apache.org:8000?qry=true\"), URI.create(\"https://commons.apache.org/releases/prepare.html\"), URI.create(\"mailto:henrib@apache.org\"));\r\n    // Create the test control, the expected result of our script evaluation\r\n    final List<?> control = uris.stream().map(uri -> uri.getScheme().startsWith(\"http\") ? \"https://\" + uri.getHost() : null).filter(Objects::nonNull).collect(Collectors.toList());\r\n    assertEquals(2, control.size());\r\n    // Create scripts:\r\n    // uri is the name of the variable used as parameter; the beans are exposed as properties\r\n    // note that it is also used in the backquoted string\r\n    final JexlScript mapper = jexl.createScript(\"uri.scheme =^ 'http'? `https://${uri.host}` : null\", \"uri\");\r\n    // using the bang-bang / !! - JScript like -  is the way to coerce to boolean in the filter\r\n    final JexlScript transform = jexl.createScript(\"list.stream().map(mapper).filter(x -> !!x).collect(Collectors.toList())\", \"list\");\r\n    // Execute scripts:\r\n    final JexlContext sctxt = new StreamContext();\r\n    // expose the static methods of Collectors; java.util.* is allowed by permissions\r\n    sctxt.set(\"Collectors\", Collectors.class);\r\n    // expose the mapper script as a global variable in the context\r\n    sctxt.set(\"mapper\", mapper);\r\n    final Object transformed = transform.execute(sctxt, uris);\r\n    assertInstanceOf(List.class, transformed);\r\n    assertEquals(control, transformed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ExceptionTest.java",
  "methodName" : "test206",
  "sourceCode" : "@Test\r\nvoid test206() throws Exception {\r\n    String src = \"null.1 = 2; return 42\";\r\n    doTest206(src, false, false);\r\n    doTest206(src, false, true);\r\n    doTest206(src, true, false);\r\n    doTest206(src, true, true);\r\n    src = \"x = null.1; return 42\";\r\n    doTest206(src, false, false);\r\n    doTest206(src, false, true);\r\n    doTest206(src, true, false);\r\n    doTest206(src, true, true);\r\n    src = \"x = y.1; return 42\";\r\n    doTest206(src, false, false);\r\n    doTest206(src, false, true);\r\n    doTest206(src, true, false);\r\n    doTest206(src, true, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ExceptionTest.java",
  "methodName" : "testEx",
  "sourceCode" : "// Unknown vars and properties versus null operands\r\n// JEXL-73\r\n@Test\r\nvoid testEx() throws Exception {\r\n    final JexlEngine jexl = createEngine(false);\r\n    final JexlExpression e = jexl.createExpression(\"c.e * 6\");\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    // make unknown vars throw\r\n    options.setStrict(true);\r\n    // empty cotext\r\n    JexlException.Variable xjexl = assertThrows(JexlException.Variable.class, () -> e.evaluate(ctxt), \"c not defined as variable should throw\");\r\n    String msg = xjexl.getMessage();\r\n    assertTrue(msg.indexOf(\"variable 'c.e'\") > 0);\r\n    // disallow null operands\r\n    options.setStrictArithmetic(true);\r\n    ctxt.set(\"c.e\", null);\r\n    xjexl = assertThrows(JexlException.Variable.class, () -> e.evaluate(ctxt), \"c.e as null operand should throw\");\r\n    msg = xjexl.getMessage();\r\n    assertTrue(msg.indexOf(\"variable 'c.e'\") > 0);\r\n    // allow null operands\r\n    options.setStrictArithmetic(false);\r\n    /* Object o = */\r\n    e.evaluate(ctxt);\r\n    // ensure c.e is not a defined property\r\n    ctxt.set(\"c\", \"{ 'a' : 3, 'b' : 5}\");\r\n    ctxt.set(\"e\", Integer.valueOf(2));\r\n    final JexlException.Property ep = assertThrows(JexlException.Property.class, () -> e.evaluate(ctxt));\r\n    msg = ep.getMessage();\r\n    assertTrue(msg.indexOf(\"property 'e\") > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ExceptionTest.java",
  "methodName" : "testExMethod",
  "sourceCode" : "// Unknown vars and properties versus null operands\r\n@Test\r\nvoid testExMethod() throws Exception {\r\n    final JexlEngine jexl = createEngine(false);\r\n    final JexlExpression e = jexl.createExpression(\"c.e.foo()\");\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    // make unknown vars throw\r\n    options.setStrict(true);\r\n    // empty cotext\r\n    JexlException xjexl = assertThrows(JexlException.class, () -> e.evaluate(ctxt), \"c not declared as variable should throw\");\r\n    String msg = xjexl.getMessage();\r\n    assertTrue(msg.indexOf(\"variable 'c.e'\") > 0);\r\n    // disallow null operands\r\n    options.setStrictArithmetic(true);\r\n    ctxt.set(\"c.e\", null);\r\n    xjexl = assertThrows(JexlException.class, () -> e.evaluate(ctxt));\r\n    msg = xjexl.getMessage();\r\n    assertTrue(msg.indexOf(\"variable 'c.e'\") > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ExceptionTest.java",
  "methodName" : "testExVar",
  "sourceCode" : "// null local vars and strict arithmetic effects\r\n@Test\r\nvoid testExVar() throws Exception {\r\n    final JexlEngine jexl = createEngine(false);\r\n    final JexlScript e = jexl.createScript(\"(x)->{ x * 6 }\");\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    // make unknown vars throw\r\n    options.setStrict(true);\r\n    options.setStrictArithmetic(true);\r\n    // empty cotext\r\n    final JexlException xjexl = assertThrows(JexlException.class, () -> e.execute(ctxt));\r\n    final String msg = xjexl.getMessage();\r\n    assertTrue(msg.indexOf(\"null\") > 0);\r\n    // allow null operands\r\n    options.setStrictArithmetic(false);\r\n    assertEquals(0, e.execute(ctxt, (Object) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ExceptionTest.java",
  "methodName" : "testWrappedEx",
  "sourceCode" : "@Test\r\nvoid testWrappedEx() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlExpression e = jexl.createExpression(\"npe()\");\r\n    final JexlContext jc = new ObjectContext<>(jexl, new ThrowNPE());\r\n    final JexlException xany = assertThrows(JexlException.class, () -> e.evaluate(jc));\r\n    final Throwable xth = xany.getCause();\r\n    assertEquals(NullPointerException.class, xth.getClass(), \"Should have thrown NPE\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ExceptionTest.java",
  "methodName" : "testWrappedExmore",
  "sourceCode" : "@Test\r\nvoid testWrappedExmore() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final ThrowNPE npe = new ThrowNPE();\r\n    assertNull(assertThrows(JexlException.Property.class, () -> jexl.getProperty(npe, \"foo\")).getCause());\r\n    assertNull(assertThrows(JexlException.Property.class, () -> jexl.setProperty(npe, \"foo\", 42)).getCause());\r\n    final boolean b = (Boolean) jexl.getProperty(npe, \"fail\");\r\n    assertFalse(b);\r\n    jexl.setProperty(npe, \"fail\", false);\r\n    assertEquals(NullPointerException.class, assertThrows(JexlException.Property.class, () -> jexl.setProperty(npe, \"fail\", true)).getCause().getClass());\r\n    assertEquals(NullPointerException.class, assertThrows(JexlException.Property.class, () -> jexl.getProperty(npe, \"fail\")).getCause().getClass());\r\n    assertNull(assertThrows(JexlException.Method.class, () -> jexl.invokeMethod(npe, \"foo\", 42)).getCause());\r\n    assertEquals(NullPointerException.class, assertThrows(JexlException.Method.class, () -> jexl.invokeMethod(npe, \"npe\")).getCause().getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "test410a",
  "sourceCode" : "@Test\r\nvoid test410a() {\r\n    final long x = JexlFeatures.createAll().getFlags();\r\n    assertEquals(AMBIGUOUS_STATEMENT + 1, Long.bitCount(x));\r\n    assertTrue((x & 1L << AMBIGUOUS_STATEMENT) != 0);\r\n    final JexlFeatures all = JexlFeatures.createAll();\r\n    final JexlEngine jexl = new JexlBuilder().features(all).create();\r\n    final JexlScript script = jexl.createScript(\"#0 * #1\", \"#0\", \"#1\");\r\n    final Object r = script.execute(null, 6, 7);\r\n    assertEquals(42, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "test410b",
  "sourceCode" : "@Test\r\nvoid test410b() {\r\n    final JexlFeatures features = JexlFeatures.createScript();\r\n    assertTrue(features.isLexical());\r\n    assertTrue(features.isLexicalShade());\r\n    assertTrue(features.supportsConstCapture());\r\n    //features.pragmaAnywhere(false);\r\n    assertFalse(features.supportsPragmaAnywhere());\r\n    //features.comparatorNames(false);\r\n    assertFalse(features.supportsComparatorNames());\r\n    final JexlEngine jexl = new JexlBuilder().features(features).create();\r\n    final Collection<String> reserved = features.getReservedNames();\r\n    for (final String varName : reserved) {\r\n        final String src = \"var \" + varName;\r\n        //JexlScript script = jexl.createScript(src);\r\n        assertThrows(JexlException.Feature.class, () -> jexl.createScript(src), src);\r\n    }\r\n    final String[] cmpNameScripts = { \"1 eq 1\", \"2 ne 3\", \"1 lt 2\", \"3 le 3\", \"4 gt 2\", \"3 ge 2\" };\r\n    for (final String src : cmpNameScripts) {\r\n        assertThrows(JexlException.Ambiguous.class, () -> jexl.createScript(src), src);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testAnnotations",
  "sourceCode" : "@Test\r\nvoid testAnnotations() {\r\n    final JexlFeatures f = new JexlFeatures().annotation(false);\r\n    final String[] scripts = { \"@synchronized(2) { return 42; }\", \"@two var x = 3;\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testArrayRefs",
  "sourceCode" : "@Test\r\nvoid testArrayRefs() {\r\n    final JexlFeatures f = new JexlFeatures().arrayReferenceExpr(false);\r\n    final String[] scripts = { \"x[y]\", \"x['a'][b]\", \"x()['a'][b]\", \"x.y['a'][b]\" };\r\n    checkFeature(f, scripts);\r\n    assertOk(scripts);\r\n    // same ones with constant array refs should work\r\n    final String[] scriptsOk = { \"x['y']\", \"x['a'][1]\", \"x()['a']['b']\", \"x.y['a']['b']\" };\r\n    assertOk(scriptsOk);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testConstCapture",
  "sourceCode" : "@Test\r\nvoid testConstCapture() {\r\n    final JexlFeatures f = new JexlFeatures().constCapture(true);\r\n    final String[] scripts = { \"let x = 0; const f = y -> x += y; f(42)\", \"let x = 0; function f(y) { z -> x *= y }; f(42)\" };\r\n    checkFeature(f, scripts);\r\n    final JexlFeatures nof = new JexlFeatures().constCapture(true);\r\n    assertOk(scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testCreate",
  "sourceCode" : "@Test\r\nvoid testCreate() {\r\n    final JexlFeatures f = JexlFeatures.createNone();\r\n    assertTrue(f.supportsExpression());\r\n    assertFalse(f.supportsAnnotation());\r\n    assertFalse(f.supportsArrayReferenceExpr());\r\n    assertFalse(f.supportsComparatorNames());\r\n    assertFalse(f.supportsFatArrow());\r\n    assertFalse(f.supportsImportPragma());\r\n    assertFalse(f.supportsLambda());\r\n    assertFalse(f.supportsLocalVar());\r\n    assertFalse(f.supportsLoops());\r\n    assertFalse(f.supportsMethodCall());\r\n    assertFalse(f.supportsNamespacePragma());\r\n    assertFalse(f.supportsNewInstance());\r\n    assertFalse(f.supportsPragma());\r\n    assertFalse(f.supportsPragmaAnywhere());\r\n    assertFalse(f.supportsScript());\r\n    assertFalse(f.supportsStructuredLiteral());\r\n    assertFalse(f.isLexical());\r\n    assertFalse(f.isLexicalShade());\r\n    assertFalse(f.supportsConstCapture());\r\n    final JexlEngine jnof = new JexlBuilder().features(f).create();\r\n    assertThrows(JexlException.Feature.class, () -> jnof.createScript(\"{ 3 + 4 }\"));\r\n    assertNotNull(jnof.createExpression(\"3 + 4\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testIssue409",
  "sourceCode" : "@Test\r\nvoid testIssue409() {\r\n    final JexlFeatures baseFeatures = JexlFeatures.createDefault();\r\n    assertFalse(baseFeatures.isLexical());\r\n    assertFalse(baseFeatures.isLexicalShade());\r\n    assertFalse(baseFeatures.supportsConstCapture());\r\n    final JexlFeatures scriptFeatures = JexlFeatures.createScript();\r\n    assertTrue(scriptFeatures.isLexical());\r\n    assertTrue(scriptFeatures.isLexicalShade());\r\n    scriptFeatures.lexical(false);\r\n    assertFalse(scriptFeatures.isLexical());\r\n    assertFalse(scriptFeatures.isLexicalShade());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testMethodCalls",
  "sourceCode" : "@Test\r\nvoid testMethodCalls() {\r\n    final JexlFeatures f = new JexlFeatures().methodCall(false);\r\n    final String[] scripts = { \"x.y(z)\", \"x['a'].m(b)\", \"x()['a'](b)\", \"x.y['a'](b)\" };\r\n    checkFeature(f, scripts);\r\n    // same ones with constant array refs should work\r\n    final String[] scriptsOk = { \"x('y')\", \"x('a')[1]\", \"x()['a']['b']\" };\r\n    assertOk(scriptsOk);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testMixedFeatures",
  "sourceCode" : "@Test\r\nvoid testMixedFeatures() {\r\n    // no new, no local, no lambda, no loops, no-side effects\r\n    final JexlFeatures f = new JexlFeatures().newInstance(false).localVar(false).lambda(false).loops(false).sideEffectGlobal(false);\r\n    final String[] scripts = { \"return new(clazz);\", \"()->{ return 0 };\", \"var x = 0;\", \"(x, y)->{ return 0 };\", \"for(var i : {0 .. 10}) { bar(i); }\", \"x += 1\", \"x.y += 1\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testNoComparatorNames",
  "sourceCode" : "@Test\r\nvoid testNoComparatorNames() {\r\n    final JexlFeatures f = new JexlFeatures().comparatorNames(false);\r\n    final String[] scripts = { \"1 eq 1\", \"2 ne 3\", \"1 lt 2\", \"3 le 3\", \"4 gt 2\", \"3 ge 2\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testNoLambda",
  "sourceCode" : "@Test\r\nvoid testNoLambda() {\r\n    final JexlFeatures f = new JexlFeatures().lambda(false);\r\n    final String[] scripts = { \"var x  = ()->{ return 0 };\", \"()->{ return 0 };\", \"(x, y)->{ return 0 };\", \"function() { return 0 };\", \"function(x, y) { return 0 };\", \"if (false) { (function(x, y) { return x + y })(3, 4) }\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testNoLocals",
  "sourceCode" : "@Test\r\nvoid testNoLocals() {\r\n    final JexlFeatures f = new JexlFeatures().localVar(false);\r\n    final String[] scripts = { \"var x = 0;\", \"(x)->{ x }\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testNoLoop",
  "sourceCode" : "@Test\r\nvoid testNoLoop() {\r\n    final JexlFeatures f = new JexlFeatures().loops(false);\r\n    final String[] scripts = { \"while(true);\", \"for(var i : {0 .. 10}) { bar(i); }\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testNoNew",
  "sourceCode" : "@Test\r\nvoid testNoNew() {\r\n    final JexlFeatures f = new JexlFeatures().newInstance(false);\r\n    final String[] scripts = { \"return new(clazz);\", \"new('java.math.BigDecimal', 12) + 1\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testNoScript",
  "sourceCode" : "@Test\r\nvoid testNoScript() {\r\n    final JexlFeatures f = new JexlFeatures().script(false);\r\n    assertTrue(f.supportsExpression());\r\n    final String[] scripts = { \"if (false) { block(); }\", \"{ noway(); }\", \"while(true);\", \"for(var i : {0 .. 10}) { bar(i); }\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testNoSideEffects",
  "sourceCode" : "@Test\r\nvoid testNoSideEffects() {\r\n    final JexlFeatures f = new JexlFeatures().sideEffect(false);\r\n    final String[] scripts = { \"x = 1\", \"x.y = 1\", \"x().y = 1\", \"x += 1\", \"x.y += 1\", \"x().y += 1\", \"x -= 1\", \"x *= 1\", \"x /= 1\", \"x %= 1\", \"x ^= 1\", \"x &= 1\", \"x |= 1\", \"x >>= 1\", \"x <<= 1\", \"x >>>= 1\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testNoSideEffectsGlobal",
  "sourceCode" : "@Test\r\nvoid testNoSideEffectsGlobal() {\r\n    final JexlFeatures f = new JexlFeatures().sideEffectGlobal(false);\r\n    final String[] scripts = { \"x = 1\", \"x.y = 1\", \"x().y = 1\", \"x += 1\", \"x.y += 1\", \"x().y += 1\", \"x -= 1\", \"x *= 1\", \"x /= 1\", \"x ^= 1\", \"x &= 1\", \"x |= 1\", \"4 + (x.y = 1)\", \"if (true) x.y.z = 4\" };\r\n    // these should all fail with x undeclared as local, thus x as global\r\n    checkFeature(f, scripts);\r\n    // same ones with x as local should work\r\n    for (final String str : scripts) {\r\n        try {\r\n            final JexlScript e = jexl.createScript(\"var x = foo(); \" + str);\r\n        } catch (final JexlException.Feature xfeature) {\r\n            fail(str + \" :: should not fail parse: \" + xfeature.getMessage());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testPragma",
  "sourceCode" : "@Test\r\nvoid testPragma() {\r\n    final JexlFeatures f = new JexlFeatures().pragma(false);\r\n    final String[] scripts = { \"#pragma foo 42\", \"#pragma foo 'bar'\\n@two var x = 3;\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testPragmaAnywhere",
  "sourceCode" : "@Test\r\nvoid testPragmaAnywhere() {\r\n    final JexlFeatures f = new JexlFeatures().pragmaAnywhere(false);\r\n    final String[] scripts = { \"var x = 3;\\n#pragma foo 42\" };\r\n    checkFeature(f, scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testReservedVars",
  "sourceCode" : "@Test\r\nvoid testReservedVars() {\r\n    final JexlFeatures f = new JexlFeatures().reservedNames(Arrays.asList(\"foo\", \"bar\"));\r\n    final String[] scripts = { \"var foo = 0;\", \"(bar)->{ bar }\", \"var f = function(bar) { bar; }\" };\r\n    checkFeature(f, scripts);\r\n    final String[] scriptsOk = { \"var foo0 = 0;\", \"(bar1)->{ bar }\", \"var f = function(bar2) { bar2; }\" };\r\n    assertOk(scriptsOk);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\FeaturesTest.java",
  "methodName" : "testStructuredLiterals",
  "sourceCode" : "@Test\r\nvoid testStructuredLiterals() {\r\n    final JexlFeatures f = new JexlFeatures().structuredLiteral(false);\r\n    final String[] scripts = { \"{1, 2, 3}\", \"[1, 2, 3]\", \"{ 1 :'one', 2 : 'two', 3 : 'three' }\", \"(1 .. 5)\" };\r\n    checkFeature(f, scripts);\r\n    assertOk(scripts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachBreakBroken",
  "sourceCode" : "@Test\r\nvoid testForEachBreakBroken() throws Exception {\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> JEXL.createScript(\"if (true) { break; }\"), \"break is out of loop!\");\r\n    assertTrue(xparse.detailedMessage().contains(\"break\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachBreakMethod",
  "sourceCode" : "@Test\r\nvoid testForEachBreakMethod() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var rr = -1; for (var item : [1, 2, 3 ,4 ,5, 6]) { if (item == 3) { rr = item; break; }} rr\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", new Foo());\r\n    final Object o = e.execute(jc);\r\n    assertEquals(3, o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachContinueBroken",
  "sourceCode" : "@Test\r\nvoid testForEachContinueBroken() throws Exception {\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> JEXL.createScript(\"var rr = 0; continue;\"), \"continue is out of loop!\");\r\n    assertTrue(xparse.detailedMessage().contains(\"continue\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachContinueMethod",
  "sourceCode" : "@Test\r\nvoid testForEachContinueMethod() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var rr = 0; for (var item : [1, 2, 3 ,4 ,5, 6]) { if (item <= 3) continue; rr = rr + item;}\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", new Foo());\r\n    final Object o = e.execute(jc);\r\n    assertEquals(15, o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithArray",
  "sourceCode" : "@Test\r\nvoid testForEachWithArray() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for (item : list) item\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", new Object[] { \"Hello\", \"World\" });\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"World\", o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithBlock",
  "sourceCode" : "@Test\r\nvoid testForEachWithBlock() throws Exception {\r\n    final JexlScript exs0 = JEXL.createScript(\"for (var in : list) { x = x + in; }\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", new Object[] { 2, 3 });\r\n    jc.set(\"x\", Integer.valueOf(1));\r\n    final Object o = exs0.execute(jc);\r\n    assertEquals(Integer.valueOf(6), o, \"Result is wrong\");\r\n    assertEquals(Integer.valueOf(6), jc.get(\"x\"), \"x is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithCollection",
  "sourceCode" : "@Test\r\nvoid testForEachWithCollection() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for (var item : list) item\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", Arrays.asList(\"Hello\", \"World\"));\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"World\", o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithEmptyList",
  "sourceCode" : "@Test\r\nvoid testForEachWithEmptyList() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for (item : list) 1+1\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", Collections.emptyList());\r\n    final Object o = e.execute(jc);\r\n    assertNull(o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithEmptyStatement",
  "sourceCode" : "@Test\r\nvoid testForEachWithEmptyStatement() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for (item : list) ;\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", Collections.emptyList());\r\n    final Object o = e.execute(jc);\r\n    assertNull(o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithEnumeration",
  "sourceCode" : "@Test\r\nvoid testForEachWithEnumeration() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for (var item : list) item\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", new StringTokenizer(\"Hello,World\", \",\"));\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"World\", o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithIterator",
  "sourceCode" : "@Test\r\nvoid testForEachWithIterator() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for (var item : list) item\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", Arrays.asList(\"Hello\", \"World\").iterator());\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"World\", o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithIteratorMethod",
  "sourceCode" : "@Test\r\nvoid testForEachWithIteratorMethod() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for (var item : list.cheezy) item\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", new Foo());\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"brie\", o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithListExpression",
  "sourceCode" : "@Test\r\nvoid testForEachWithListExpression() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for (var item : list.keySet()) item\");\r\n    final JexlContext jc = new MapContext();\r\n    final Map<?, ?> map = System.getProperties();\r\n    final String lastKey = (String) new ArrayList<Object>(map.keySet()).get(System.getProperties().size() - 1);\r\n    jc.set(\"list\", map);\r\n    final Object o = e.execute(jc);\r\n    assertEquals(lastKey, o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithMap",
  "sourceCode" : "@Test\r\nvoid testForEachWithMap() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for(item : list) item\");\r\n    final JexlContext jc = new MapContext();\r\n    final Map<?, ?> map = System.getProperties();\r\n    final String lastProperty = (String) new ArrayList<Object>(map.values()).get(System.getProperties().size() - 1);\r\n    jc.set(\"list\", map);\r\n    final Object o = e.execute(jc);\r\n    assertEquals(lastProperty, o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForEachWithProperty",
  "sourceCode" : "@Test\r\nvoid testForEachWithProperty() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"for(var item : list.cheeseList) item\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"list\", new Foo());\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"brie\", o, \"Result is not last evaluated expression\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForLoop0a",
  "sourceCode" : "@Test\r\nvoid testForLoop0a() {\r\n    final String src = \"(l)->{ for (let x = 0; x < 4; ++x) { l.add(x); } }\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final List<Integer> l = new ArrayList<>();\r\n    final Object result = script.execute(null, l);\r\n    assertNotNull(result);\r\n    assertEquals(Arrays.asList(0, 1, 2, 3), l);\r\n    final String resrc = toString(script);\r\n    assertEquals(src, resrc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ForEachTest.java",
  "methodName" : "testForLoop0b0",
  "sourceCode" : "@Test\r\nvoid testForLoop0b0() {\r\n    final String src = \"(l)->{ for (let x = 0, y = 0; x < 4; ++x) l.add(x) }\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final List<Integer> l = new ArrayList<>();\r\n    final Object result = script.execute(null, l);\r\n    assertNotNull(result);\r\n    assertEquals(Arrays.asList(0, 1, 2, 3), l);\r\n    final String resrc = toString(script);\r\n    assertEquals(src, resrc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testBlockElse",
  "sourceCode" : "/**\r\n * Test the if statement handles blocks in the else statement correctly\r\n *\r\n * @throws Exception on any error\r\n */\r\n@Test\r\nvoid testBlockElse() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (false) {1} else {2 ; 3}\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(3), o, \"Result is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testBlockIfTrue",
  "sourceCode" : "/**\r\n * Test the if statement handles blocks correctly\r\n *\r\n * @throws Exception on any error\r\n */\r\n@Test\r\nvoid testBlockIfTrue() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (true) { 'hello'; }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(\"hello\", o, \"Result is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testIfElseIfExpression",
  "sourceCode" : "@Test\r\nvoid testIfElseIfExpression() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (x == 1) { 10; } else if (x == 2) 20  else 30\", \"x\");\r\n    Object o = e.execute(null, 1);\r\n    assertEquals(10, o);\r\n    o = e.execute(null, 2);\r\n    assertEquals(20, o);\r\n    o = e.execute(null, 4);\r\n    assertEquals(30, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testIfElseIfReturnExpression",
  "sourceCode" : "@Test\r\nvoid testIfElseIfReturnExpression() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (x == 1) return 10;  if (x == 2) return 20  else if (x == 3) return 30; else return 40;\", \"x\");\r\n    Object o = e.execute(null, 1);\r\n    assertEquals(10, o);\r\n    o = e.execute(null, 2);\r\n    assertEquals(20, o);\r\n    o = e.execute(null, 3);\r\n    assertEquals(30, o);\r\n    o = e.execute(null, 4);\r\n    assertEquals(40, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testIfElseIfReturnExpression0",
  "sourceCode" : "@Test\r\nvoid testIfElseIfReturnExpression0() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (x == 1) return 10; if (x == 2)  return 20; else if (x == 3) return 30  else { return 40 }\", \"x\");\r\n    Object o = e.execute(null, 1);\r\n    assertEquals(10, o);\r\n    o = e.execute(null, 2);\r\n    assertEquals(20, o);\r\n    o = e.execute(null, 3);\r\n    assertEquals(30, o);\r\n    o = e.execute(null, 4);\r\n    assertEquals(40, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testIfWithArithmeticExpression",
  "sourceCode" : "/**\r\n * Test the if statement evaluates arithmetic expressions correctly\r\n *\r\n * @throws Exception on any error\r\n */\r\n@Test\r\nvoid testIfWithArithmeticExpression() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if ((x * 2) + 1 == 5) true;\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", Integer.valueOf(2));\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Boolean.TRUE, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testIfWithAssignment",
  "sourceCode" : "/**\r\n * Test the if statement works with assignment\r\n *\r\n * @throws Exception on any error\r\n */\r\n@Test\r\nvoid testIfWithAssignment() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if ((x * 2) == 5) {y = 1} else {y = 2;}\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", Float.valueOf(2.5f));\r\n    e.execute(jc);\r\n    final Object result = jc.get(\"y\");\r\n    assertEquals(Integer.valueOf(1), result, \"y has the wrong value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testIfWithDecimalArithmeticExpression",
  "sourceCode" : "/**\r\n * Test the if statement evaluates decimal arithmetic expressions correctly\r\n *\r\n * @throws Exception on any error\r\n */\r\n@Test\r\nvoid testIfWithDecimalArithmeticExpression() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if ((x * 2) == 5) true\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", Float.valueOf(2.5f));\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Boolean.TRUE, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testIfWithSimpleExpression",
  "sourceCode" : "/**\r\n * Test the if statement evaluates expressions correctly\r\n *\r\n * @throws Exception on any error\r\n */\r\n@Test\r\nvoid testIfWithSimpleExpression() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (x == 1) true;\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", Integer.valueOf(1));\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Boolean.TRUE, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testNullCoaelescing",
  "sourceCode" : "@Test\r\nvoid testNullCoaelescing() throws Exception {\r\n    Object o;\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlExpression xtrue = JEXL.createExpression(\"x??true\");\r\n    o = xtrue.evaluate(jc);\r\n    assertEquals(true, o);\r\n    jc.set(\"x\", false);\r\n    o = xtrue.evaluate(jc);\r\n    assertEquals(false, o);\r\n    final JexlExpression yone = JEXL.createExpression(\"y??1\");\r\n    o = yone.evaluate(jc);\r\n    assertEquals(1, o);\r\n    jc.set(\"y\", 0);\r\n    o = yone.evaluate(jc);\r\n    assertEquals(0, o);\r\n    debuggerCheck(JEXL);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testNullCoaelescingScript",
  "sourceCode" : "@Test\r\nvoid testNullCoaelescingScript() throws Exception {\r\n    Object o;\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlScript xtrue = JEXL.createScript(\"x??true\");\r\n    o = xtrue.execute(jc);\r\n    assertEquals(true, o);\r\n    jc.set(\"x\", false);\r\n    o = xtrue.execute(jc);\r\n    assertEquals(false, o);\r\n    final JexlScript yone = JEXL.createScript(\"y??1\");\r\n    o = yone.execute(jc);\r\n    assertEquals(1, o);\r\n    jc.set(\"y\", 0);\r\n    o = yone.execute(jc);\r\n    assertEquals(0, o);\r\n    debuggerCheck(JEXL);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testSimpleElse",
  "sourceCode" : "/**\r\n * Make sure if false executes the false statement\r\n *\r\n * @throws Exception on any error\r\n */\r\n@Test\r\nvoid testSimpleElse() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (false) 1 else 2;\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(2), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testSimpleIfFalse",
  "sourceCode" : "/**\r\n * Make sure if false doesn't execute the true statement\r\n *\r\n * @throws Exception on any error\r\n */\r\n@Test\r\nvoid testSimpleIfFalse() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (false) 1\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertNull(o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testSimpleIfTrue",
  "sourceCode" : "/**\r\n * Make sure if true executes the true statement\r\n *\r\n * @throws Exception on any error\r\n */\r\n@Test\r\nvoid testSimpleIfTrue() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"if (true) 1\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(1), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testTernary",
  "sourceCode" : "/**\r\n * Ternary operator condition undefined or null evaluates to false\r\n * independently of engine flags.\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testTernary() throws Exception {\r\n    final JexlEngine jexl = JEXL;\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    final JexlExpression e = jexl.createExpression(\"x.y.z = foo ?'bar':'quux'\");\r\n    Object o;\r\n    // undefined foo\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n    }\r\n    jc.set(\"foo\", null);\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n    }\r\n    jc.set(\"foo\", Boolean.FALSE);\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n    }\r\n    jc.set(\"foo\", Boolean.TRUE);\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"bar\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"bar\", o);\r\n    }\r\n    debuggerCheck(jexl);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testTernaryFail",
  "sourceCode" : "@Test\r\nvoid testTernaryFail() throws Exception {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    final JexlExpression e = JEXL.createExpression(\"false ? bar : quux\");\r\n    options.setStrict(true);\r\n    options.setSilent(false);\r\n    final JexlException xjexl = assertThrows(JexlException.class, () -> e.evaluate(jc));\r\n    assertTrue(xjexl.toString().contains(\"quux\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IfTest.java",
  "methodName" : "testTernaryShorthand",
  "sourceCode" : "/**\r\n * Ternary operator condition undefined or null evaluates to false\r\n * independently of engine flags; same for null coalescing operator.\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testTernaryShorthand() throws Exception {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    final JexlExpression e = JEXL.createExpression(\"x.y.z = foo?:'quux'\");\r\n    final JexlExpression f = JEXL.createExpression(\"foo??'quux'\");\r\n    Object o;\r\n    // undefined foo\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n        o = f.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n    }\r\n    jc.set(\"foo\", null);\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n        o = f.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n    }\r\n    jc.set(\"foo\", Boolean.FALSE);\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n        o = f.evaluate(jc);\r\n        assertEquals(false, o);\r\n    }\r\n    jc.set(\"foo\", Double.NaN);\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n        o = f.evaluate(jc);\r\n        assertTrue(Double.isNaN((Double) o), \"Should be NaN\");\r\n    }\r\n    jc.set(\"foo\", \"\");\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n        o = f.evaluate(jc);\r\n        assertEquals(\"\", o, \"Should be empty string\");\r\n    }\r\n    jc.set(\"foo\", \"false\");\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n        o = f.evaluate(jc);\r\n        assertEquals(\"false\", o);\r\n    }\r\n    jc.set(\"foo\", 0d);\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n        o = f.evaluate(jc);\r\n        assertEquals(0.d, o);\r\n    }\r\n    jc.set(\"foo\", 0);\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"quux\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"quux\", o);\r\n        o = f.evaluate(jc);\r\n        assertEquals(0, o);\r\n    }\r\n    jc.set(\"foo\", \"bar\");\r\n    for (int l = 0; l < 4; ++l) {\r\n        options.setStrict((l & 1) == 0);\r\n        options.setSilent((l & 2) != 0);\r\n        o = e.evaluate(jc);\r\n        assertEquals(\"bar\", o);\r\n        o = jc.get(\"x.y.z\");\r\n        assertEquals(\"bar\", o);\r\n    }\r\n    debuggerCheck(JEXL);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\FqcnTest.java",
  "methodName" : "testBadImport0",
  "sourceCode" : "@Test\r\nvoid testBadImport0() {\r\n    List<String> imports = Collections.singletonList(\"org.apache.commons.jexl4242\");\r\n    assertThrows(JexlException.class, () -> new JexlBuilder().imports(imports).create());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\FqcnTest.java",
  "methodName" : "testBadImport1",
  "sourceCode" : "@Test\r\nvoid testBadImport1() {\r\n    // permissions will not allow this import\r\n    List<String> imports = Collections.singletonList(\"org.apache.commons.jexl.JexlEngine\");\r\n    assertThrows(JexlException.class, () -> new JexlBuilder().imports(imports).create());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\FqcnTest.java",
  "methodName" : "testFqcn",
  "sourceCode" : "@Test\r\npublic void testFqcn() throws Exception {\r\n    List<String> imports = Arrays.asList(\"org.apache.commons.jexl3.internal.FqcnTest\", \"org.apache.commons.jexl3.internal\", \"java.lang\");\r\n    Object c = getConstant(imports, \"FqcnScope.UNDEFINED\");\r\n    assertNotNull(c);\r\n    assertEquals(FqcnScope.UNDEFINED, c);\r\n    c = getConstant(imports, \"FqcnScope.SUPER\");\r\n    assertEquals(FqcnScope.SUPER, c);\r\n    c = getConstant(imports, \"FqcnScope.SUPER\");\r\n    assertEquals(FqcnScope.SUPER, c);\r\n    c = getConstant(imports, \"FqcnTest.FORTYTWO\");\r\n    assertEquals(42, c);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\DiscoveryTest.java",
  "methodName" : "testBeanIntrospection",
  "sourceCode" : "@Test\r\nvoid testBeanIntrospection() throws Exception {\r\n    final Uberspect uber = Engine.getUberspect(null, null);\r\n    final Bean bean = new Bean(\"JEXL\", \"LXEJ\");\r\n    final JexlPropertyGet get = uber.getPropertyGet(bean, \"value\");\r\n    final JexlPropertySet set = uber.getPropertySet(bean, \"value\", \"foo\");\r\n    assertInstanceOf(PropertyGetExecutor.class, get, \"bean property getter\");\r\n    assertInstanceOf(PropertySetExecutor.class, set, \"bean property setter\");\r\n    // introspector and uberspect should return same result\r\n    assertEquals(get, uber.getPropertyGet(bean, \"value\"));\r\n    assertEquals(set, uber.getPropertySet(bean, \"value\", \"foo\"));\r\n    // different property should return different setter/getter\r\n    assertNotEquals(get, uber.getPropertyGet(bean, \"eulav\"));\r\n    assertNotEquals(set, uber.getPropertySet(bean, \"eulav\", \"foo\"));\r\n    // setter returns argument\r\n    final Object bar = set.invoke(bean, \"bar\");\r\n    assertEquals(\"bar\", bar);\r\n    // getter should return last value\r\n    assertEquals(\"bar\", get.invoke(bean));\r\n    // tryExecute should succeed on same property\r\n    final Object quux = set.tryInvoke(bean, \"value\", \"quux\");\r\n    assertEquals(\"quux\", quux);\r\n    assertEquals(\"quux\", get.invoke(bean));\r\n    // tryExecute should fail on different property\r\n    assertEquals(AbstractExecutor.TRY_FAILED, set.tryInvoke(bean, \"eulav\", \"nope\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\DiscoveryTest.java",
  "methodName" : "testDuckIntrospection",
  "sourceCode" : "@Test\r\nvoid testDuckIntrospection() throws Exception {\r\n    final Uberspect uber = Engine.getUberspect(null, null);\r\n    final Duck duck = new Duck(\"JEXL\", \"LXEJ\");\r\n    final JexlPropertyGet get = uber.getPropertyGet(duck, \"value\");\r\n    final JexlPropertySet set = uber.getPropertySet(duck, \"value\", \"foo\");\r\n    assertInstanceOf(DuckGetExecutor.class, get, \"duck property getter\");\r\n    assertInstanceOf(DuckSetExecutor.class, set, \"duck property setter\");\r\n    // introspector and uberspect should return same result\r\n    assertEquals(get, uber.getPropertyGet(duck, \"value\"));\r\n    assertEquals(set, uber.getPropertySet(duck, \"value\", \"foo\"));\r\n    // different property should return different setter/getter\r\n    assertNotEquals(get, uber.getPropertyGet(duck, \"eulav\"));\r\n    assertNotEquals(set, uber.getPropertySet(duck, \"eulav\", \"foo\"));\r\n    // setter returns argument\r\n    final Object bar = set.invoke(duck, \"bar\");\r\n    assertEquals(\"bar\", bar);\r\n    // getter should return last value\r\n    assertEquals(\"bar\", get.invoke(duck));\r\n    // tryExecute should succeed on same property\r\n    final Object quux = set.tryInvoke(duck, \"value\", \"quux\");\r\n    assertEquals(\"quux\", quux);\r\n    assertEquals(\"quux\", get.invoke(duck));\r\n    // tryExecute should fail on different property\r\n    assertEquals(AbstractExecutor.TRY_FAILED, set.tryInvoke(duck, \"eulav\", \"nope\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\DiscoveryTest.java",
  "methodName" : "testListIntrospection",
  "sourceCode" : "@Test\r\nvoid testListIntrospection() throws Exception {\r\n    final Uberspect uber = Engine.getUberspect(null, null);\r\n    final List<Object> list = new ArrayList<>();\r\n    list.add(\"LIST\");\r\n    list.add(\"TSIL\");\r\n    final JexlPropertyGet get = uber.getPropertyGet(list, 1);\r\n    final JexlPropertySet set = uber.getPropertySet(list, 1, \"foo\");\r\n    assertInstanceOf(ListGetExecutor.class, get, \"list property getter\");\r\n    assertInstanceOf(ListSetExecutor.class, set, \"list property setter\");\r\n    // introspector and uberspect should return same result\r\n    assertEquals(get, uber.getPropertyGet(list, 1));\r\n    assertEquals(set, uber.getPropertySet(list, 1, \"foo\"));\r\n    // different property should return different setter/getter\r\n    assertNotEquals(get, uber.getPropertyGet(list, 0));\r\n    assertNotEquals(get, uber.getPropertySet(list, 0, \"foo\"));\r\n    // setter returns argument\r\n    final Object bar = set.invoke(list, \"bar\");\r\n    assertEquals(\"bar\", bar);\r\n    // getter should return last value\r\n    assertEquals(\"bar\", get.invoke(list));\r\n    // tryExecute should succeed on integer property\r\n    final Object quux = set.tryInvoke(list, 1, \"quux\");\r\n    assertEquals(\"quux\", quux);\r\n    // getter should return last value\r\n    assertEquals(\"quux\", get.invoke(list));\r\n    // tryExecute should fail on non-integer property class\r\n    assertEquals(AbstractExecutor.TRY_FAILED, set.tryInvoke(list, \"eulav\", \"nope\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\DiscoveryTest.java",
  "methodName" : "testMapIntrospection",
  "sourceCode" : "@Test\r\nvoid testMapIntrospection() throws Exception {\r\n    final Uberspect uber = Engine.getUberspect(null, null);\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"value\", \"MAP\");\r\n    map.put(\"eulav\", \"PAM\");\r\n    final JexlPropertyGet get = uber.getPropertyGet(map, \"value\");\r\n    final JexlPropertySet set = uber.getPropertySet(map, \"value\", \"foo\");\r\n    assertInstanceOf(MapGetExecutor.class, get, \"map property getter\");\r\n    assertInstanceOf(MapSetExecutor.class, set, \"map property setter\");\r\n    // introspector and uberspect should return same result\r\n    assertEquals(get, uber.getPropertyGet(map, \"value\"));\r\n    assertEquals(set, uber.getPropertySet(map, \"value\", \"foo\"));\r\n    // different property should return different setter/getter\r\n    assertNotEquals(get, uber.getPropertyGet(map, \"eulav\"));\r\n    assertNotEquals(get, uber.getPropertySet(map, \"eulav\", \"foo\"));\r\n    // setter returns argument\r\n    final Object bar = set.invoke(map, \"bar\");\r\n    assertEquals(\"bar\", bar);\r\n    // getter should return last value\r\n    assertEquals(\"bar\", get.invoke(map));\r\n    // tryExecute should succeed on same property class\r\n    final Object quux = set.tryInvoke(map, \"value\", \"quux\");\r\n    assertEquals(\"quux\", quux);\r\n    // getter should return last value\r\n    assertEquals(\"quux\", get.invoke(map));\r\n    // tryExecute should fail on different property class\r\n    assertEquals(AbstractExecutor.TRY_FAILED, set.tryInvoke(map, 1, \"nope\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\DiscoveryTest.java",
  "methodName" : "testMethodIntrospection",
  "sourceCode" : "@Test\r\nvoid testMethodIntrospection() throws Exception {\r\n    final Uberspect uber = new Uberspect(null, null);\r\n    final Bulgroz bulgroz = new Bulgroz();\r\n    JexlMethod jmethod;\r\n    Object result;\r\n    jmethod = uber.getMethod(bulgroz, \"list\", 0);\r\n    result = jmethod.invoke(bulgroz, 0);\r\n    assertEquals(0, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", \"1\");\r\n    result = jmethod.invoke(bulgroz, \"1\");\r\n    assertEquals(1, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", bulgroz);\r\n    result = jmethod.invoke(bulgroz, bulgroz);\r\n    assertEquals(2, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", 1, bulgroz);\r\n    result = jmethod.invoke(bulgroz, 1, bulgroz);\r\n    assertEquals(3, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", 1, bulgroz, bulgroz);\r\n    result = jmethod.invoke(bulgroz, 1, bulgroz, bulgroz);\r\n    assertEquals(3, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", 1, 2);\r\n    result = jmethod.invoke(bulgroz, 1, 2);\r\n    assertEquals(4, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", \"1\", bulgroz);\r\n    result = jmethod.invoke(bulgroz, \"1\", bulgroz);\r\n    assertEquals(5, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", \"1\", \"2\");\r\n    result = jmethod.invoke(bulgroz, \"1\", \"2\");\r\n    assertEquals(6, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", bulgroz, bulgroz);\r\n    result = jmethod.invoke(bulgroz, bulgroz, bulgroz);\r\n    assertEquals(8, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", bulgroz, 1, bulgroz);\r\n    result = jmethod.invoke(bulgroz, bulgroz, 1, bulgroz);\r\n    assertEquals(7, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", bulgroz, 1, \"1\");\r\n    result = jmethod.invoke(bulgroz, bulgroz, 1, \"1\");\r\n    assertEquals(7, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", (Object) null);\r\n    result = jmethod.invoke(bulgroz, (Object) null);\r\n    assertEquals(2, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", bulgroz, (Object) null);\r\n    result = jmethod.invoke(bulgroz, bulgroz, (Object) null);\r\n    assertEquals(8, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", null, \"1\");\r\n    result = jmethod.invoke(bulgroz, null, \"1\");\r\n    assertEquals(8, result);\r\n    jmethod = uber.getMethod(bulgroz, \"list\", bulgroz, null, null);\r\n    result = jmethod.invoke(bulgroz, bulgroz, null, null);\r\n    assertEquals(7, result);\r\n    jmethod = uber.getMethod(bulgroz, \"amb\", 3d);\r\n    assertNotNull(jmethod);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MethodKeyTest.java",
  "methodName" : "testDebugString",
  "sourceCode" : "@Test\r\nvoid testDebugString() throws Exception {\r\n    final MethodKey c = KEY_LIST[0];\r\n    final String str = c.debugString();\r\n    assertNotNull(str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MethodKeyTest.java",
  "methodName" : "testObjectKey",
  "sourceCode" : "@Test\r\nvoid testObjectKey() throws Exception {\r\n    for (final MethodKey ctl : KEY_LIST) {\r\n        final MethodKey key = makeKey(ctl.getMethod(), ctl.getParameters());\r\n        final String out = BY_KEY.get(key);\r\n        assertNotNull(out);\r\n        assertEquals(ctl.toString(), out, () -> ctl.toString() + \" != \" + out);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MethodKeyTest.java",
  "methodName" : "testPerfKey",
  "sourceCode" : "@Test\r\nvoid testPerfKey() throws Exception {\r\n    for (int l = 0; l < LOOP; ++l) {\r\n        for (final MethodKey ctl : KEY_LIST) {\r\n            final MethodKey key = makeKey(ctl.getMethod(), ctl.getParameters());\r\n            final String out = BY_KEY.get(key);\r\n            assertNotNull(out);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MethodKeyTest.java",
  "methodName" : "testPerfKey2",
  "sourceCode" : "@Test\r\nvoid testPerfKey2() throws Exception {\r\n    for (int l = 0; l < LOOP; ++l) {\r\n        for (final String method : METHODS) {\r\n            for (final Object value : ARGS) {\r\n                checkKey(method, value.getClass());\r\n                for (final Object o : ARGS) {\r\n                    checkKey(method, value.getClass(), o.getClass());\r\n                    for (final Object arg : ARGS) {\r\n                        checkKey(method, value.getClass(), o.getClass(), arg.getClass());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MethodKeyTest.java",
  "methodName" : "testPerfString",
  "sourceCode" : "@Test\r\nvoid testPerfString() throws Exception {\r\n    for (int l = 0; l < LOOP; ++l) {\r\n        for (final MethodKey ctl : KEY_LIST) {\r\n            final String key = makeStringKey(ctl.getMethod(), ctl.getParameters());\r\n            final MethodKey out = BY_STRING.get(key);\r\n            assertNotNull(out);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MethodKeyTest.java",
  "methodName" : "testPerfStringKey2",
  "sourceCode" : "@Test\r\nvoid testPerfStringKey2() throws Exception {\r\n    for (int l = 0; l < LOOP; ++l) {\r\n        for (final String method : METHODS) {\r\n            for (final Object value : ARGS) {\r\n                checkStringKey(method, value.getClass());\r\n                for (final Object o : ARGS) {\r\n                    checkStringKey(method, value.getClass(), o.getClass());\r\n                    for (final Object arg : ARGS) {\r\n                        checkStringKey(method, value.getClass(), o.getClass(), arg.getClass());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MethodKeyTest.java",
  "methodName" : "testStringKey",
  "sourceCode" : "@Test\r\nvoid testStringKey() throws Exception {\r\n    for (final MethodKey ctl : KEY_LIST) {\r\n        final String key = makeStringKey(ctl.getMethod(), ctl.getParameters());\r\n        final MethodKey out = BY_STRING.get(key);\r\n        assertNotNull(out);\r\n        assertEquals(ctl, out, ctl.toString() + \" != \" + key);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MiscIntrospectionTest.java",
  "methodName" : "testArrayIterator",
  "sourceCode" : "@Test\r\nvoid testArrayIterator() {\r\n    // not on lists\r\n    assertThrows(IllegalArgumentException.class, () -> new ArrayIterator(new ArrayList<>()));\r\n    // wih null ?\r\n    ArrayIterator ai0 = new ArrayIterator(null);\r\n    assertFalse(ai0.hasNext());\r\n    assertThrows(NoSuchElementException.class, ai0::next);\r\n    // an array\r\n    ai0 = new ArrayIterator(new int[] { 42 });\r\n    assertTrue(ai0.hasNext());\r\n    assertEquals(42, ai0.next());\r\n    assertFalse(ai0.hasNext());\r\n    assertThrows(NoSuchElementException.class, ai0::next);\r\n    // no remove\r\n    assertThrows(UnsupportedOperationException.class, ai0::remove);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MiscIntrospectionTest.java",
  "methodName" : "testArrayListWrapper",
  "sourceCode" : "@Test\r\nvoid testArrayListWrapper() {\r\n    ArrayListWrapper alw;\r\n    assertThrows(IllegalArgumentException.class, () -> new ArrayListWrapper(1));\r\n    final Integer[] ai = { 1, 2 };\r\n    alw = new ArrayListWrapper(ai);\r\n    assertEquals(1, alw.indexOf(2));\r\n    assertEquals(-1, alw.indexOf(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\MiscIntrospectionTest.java",
  "methodName" : "testEmptyContext",
  "sourceCode" : "@Test\r\nvoid testEmptyContext() {\r\n    assertThrows(UnsupportedOperationException.class, () -> JexlEngine.EMPTY_CONTEXT.set(\"nope\", 42));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\NoJexlTest.java",
  "methodName" : "testNoJexlPermissions",
  "sourceCode" : "@Test\r\nvoid testNoJexlPermissions() throws Exception {\r\n    final Permissions p = Permissions.UNRESTRICTED;\r\n    assertFalse(p.allow((Field) null));\r\n    assertFalse(p.allow((Package) null));\r\n    assertFalse(p.allow((Method) null));\r\n    assertFalse(p.allow((Constructor<?>) null));\r\n    assertFalse(p.allow((Class<?>) null));\r\n    assertFalse(p.allow(A2.class));\r\n    assertTrue(p.allow(A3.class));\r\n    assertTrue(p.allow(A5.class));\r\n    final Method mA = A.class.getMethod(\"method\");\r\n    assertNotNull(mA);\r\n    final Method mA0 = A0.class.getMethod(\"method\");\r\n    assertNotNull(mA0);\r\n    final Method mA1 = A1.class.getMethod(\"method\");\r\n    assertNotNull(mA1);\r\n    final Method mA2 = A2.class.getMethod(\"method\");\r\n    assertNotNull(mA2);\r\n    final Method mA3 = A2.class.getDeclaredMethod(\"method\");\r\n    assertNotNull(mA3);\r\n    assertTrue(p.allow(mA));\r\n    assertFalse(p.allow(mA0));\r\n    assertFalse(p.allow(mA1));\r\n    assertFalse(p.allow(mA2));\r\n    assertFalse(p.allow(mA3));\r\n    final Field fA = A.class.getField(\"i\");\r\n    assertNotNull(fA);\r\n    assertTrue(p.allow(fA));\r\n    final Field fA0 = A0.class.getField(\"i0\");\r\n    assertNotNull(fA0);\r\n    assertFalse(p.allow(fA0));\r\n    final Field fA1 = A1.class.getDeclaredField(\"i1\");\r\n    assertNotNull(fA1);\r\n    assertFalse(p.allow(fA0));\r\n    final Constructor<?> cA = A.class.getConstructor();\r\n    assertNotNull(cA);\r\n    assertTrue(p.allow(cA));\r\n    final Constructor<?> cA0 = A0.class.getConstructor();\r\n    assertNotNull(cA0);\r\n    assertFalse(p.allow(cA0));\r\n    final Constructor<?> cA3 = A3.class.getDeclaredConstructor();\r\n    assertNotNull(cA3);\r\n    assertFalse(p.allow(cA3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testGetPackageName",
  "sourceCode" : "@Test\r\nvoid testGetPackageName() {\r\n    final String PKG = \"org.apache.commons.jexl3.internal.introspection\";\r\n    String pkg = ClassTool.getPackageName(Outer.class);\r\n    assertEquals(PKG, pkg);\r\n    pkg = ClassTool.getPackageName(Outer.Inner.class);\r\n    assertEquals(PKG, pkg);\r\n    final Outer[] oo = {};\r\n    pkg = ClassTool.getPackageName(oo.getClass());\r\n    assertEquals(PKG, pkg);\r\n    final Outer.Inner[] ii = {};\r\n    pkg = ClassTool.getPackageName(ii.getClass());\r\n    assertEquals(PKG, pkg);\r\n    pkg = ClassTool.getPackageName(Process.class);\r\n    assertEquals(\"java.lang\", pkg);\r\n    pkg = ClassTool.getPackageName(Integer.TYPE);\r\n    assertEquals(\"java.lang\", pkg);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testParsePermissions0a",
  "sourceCode" : "@Test\r\nvoid testParsePermissions0a() throws Exception {\r\n    final String src = \"java.lang { Runtime { exit(); exec(); } }\\njava.net { URL {} }\";\r\n    final Permissions p = (Permissions) JexlPermissions.parse(src);\r\n    final Map<String, Permissions.NoJexlPackage> nojexlmap = p.getPackages();\r\n    assertNotNull(nojexlmap);\r\n    final Permissions.NoJexlPackage njp = nojexlmap.get(\"java.lang\");\r\n    assertNotNull(njp);\r\n    final Method exit = getMethod(java.lang.Runtime.class, \"exit\");\r\n    assertNotNull(exit);\r\n    assertFalse(p.allow(exit));\r\n    final Method exec = getMethod(java.lang.Runtime.class, \"exec\");\r\n    assertNotNull(exec);\r\n    assertFalse(p.allow(exec));\r\n    final Method avp = getMethod(java.lang.Runtime.class, \"availableProcessors\");\r\n    assertNotNull(avp);\r\n    assertTrue(p.allow(avp));\r\n    final JexlUberspect uber = new Uberspect(null, null, p);\r\n    assertNull(uber.getClassByName(\"java.net.URL\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testParsePermissions0b",
  "sourceCode" : "@Test\r\nvoid testParsePermissions0b() throws Exception {\r\n    final String src = \"java.lang { -Runtime { exit(); } }\";\r\n    final Permissions p = (Permissions) JexlPermissions.parse(src);\r\n    final Method exit = getMethod(java.lang.Runtime.class, \"exit\");\r\n    assertNotNull(exit);\r\n    assertFalse(p.allow(exit));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testParsePermissions0c",
  "sourceCode" : "@Test\r\nvoid testParsePermissions0c() throws Exception {\r\n    final String src = \"java.lang { +Runtime { availableProcessorCount(); } }\";\r\n    final Permissions p = (Permissions) JexlPermissions.parse(src);\r\n    final Method exit = getMethod(java.lang.Runtime.class, \"exit\");\r\n    assertNotNull(exit);\r\n    assertFalse(p.allow(exit));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testParsePermissions0d",
  "sourceCode" : "@Test\r\nvoid testParsePermissions0d() throws Exception {\r\n    final String src = \"java.lang { +System { currentTimeMillis(); } }\";\r\n    final JexlPermissions p = RESTRICTED.compose(src);\r\n    final Field in = System.class.getField(\"in\");\r\n    assertNotNull(in);\r\n    assertFalse(p.allow(in));\r\n    final Method ctm = getMethod(java.lang.System.class, \"currentTimeMillis\");\r\n    assertNotNull(ctm);\r\n    assertTrue(p.allow(ctm));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testParsePermissions0e",
  "sourceCode" : "@Test\r\nvoid testParsePermissions0e() throws Exception {\r\n    final String src = \"java.lang { +System { in; } }\";\r\n    final JexlPermissions p = RESTRICTED.compose(src);\r\n    final Field in = System.class.getField(\"in\");\r\n    assertNotNull(in);\r\n    assertTrue(p.allow(in));\r\n    final Method ctm = getMethod(java.lang.System.class, \"currentTimeMillis\");\r\n    assertNotNull(ctm);\r\n    assertFalse(p.allow(ctm));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testParsePermissions0f",
  "sourceCode" : "@Test\r\nvoid testParsePermissions0f() throws Exception {\r\n    final String src = \"java.lang { +Class { getName(); getSimpleName(); } }\";\r\n    final JexlPermissions p = RESTRICTED.compose(src);\r\n    final Method getName = getMethod(java.lang.Class.class, \"getName\");\r\n    assertNotNull(getName);\r\n    assertTrue(p.allow(getName));\r\n    assertFalse(RESTRICTED.allow(getName));\r\n    final Method getSimpleName = getMethod(java.lang.Class.class, \"getSimpleName\");\r\n    assertNotNull(getSimpleName);\r\n    assertTrue(p.allow(getSimpleName));\r\n    assertFalse(RESTRICTED.allow(getSimpleName));\r\n    final Method getMethod = getMethod(java.lang.Class.class, \"getMethod\");\r\n    assertNotNull(getMethod);\r\n    assertFalse(p.allow(getMethod));\r\n    final Method exit = getMethod(java.lang.Runtime.class, \"exit\");\r\n    assertNotNull(exit);\r\n    assertFalse(p.allow(exit));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testParsePermissions0g",
  "sourceCode" : "@Test\r\nvoid testParsePermissions0g() throws Exception {\r\n    final String src = \"java.lang { +Class {  } }\";\r\n    final JexlPermissions p = RESTRICTED.compose(src);\r\n    final Method getName = getMethod(java.lang.Class.class, \"getName\");\r\n    assertNotNull(getName);\r\n    assertTrue(p.allow(getName));\r\n    final Method getMethod = getMethod(java.lang.Class.class, \"getMethod\");\r\n    assertNotNull(getMethod);\r\n    assertTrue(p.allow(getMethod));\r\n    final Method exit = getMethod(java.lang.Runtime.class, \"exit\");\r\n    assertNotNull(exit);\r\n    assertFalse(p.allow(exit));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testParsePermissions1",
  "sourceCode" : "@Test\r\nvoid testParsePermissions1() {\r\n    final String[] src = { \"java.lang.*\", \"java.math.*\", \"java.text.*\", \"java.util.*\", \"java.lang { Runtime {} }\", \"java.rmi {}\", \"java.io { File {} }\", \"java.nio { Path {} }\", \"org.apache.commons.jexl3.internal.introspection { \" + \"PermissionsTest { #level 0\\n\" + \" Outer { #level 1\\n\" + \" Inner { #level 2\\n\" + \" callMeNot();\" + \" }\" + \" }\" + \" }\" + \" }\" };\r\n    final Permissions p = (Permissions) JexlPermissions.parse(src);\r\n    final Map<String, Permissions.NoJexlPackage> nojexlmap = p.getPackages();\r\n    assertNotNull(nojexlmap);\r\n    final Set<String> wildcards = p.getWildcards();\r\n    assertEquals(4, wildcards.size());\r\n    final JexlEngine jexl = new JexlBuilder().permissions(p).safe(false).lexical(true).create();\r\n    final Method exit = getMethod(java.lang.Runtime.class, \"exit\");\r\n    assertNotNull(exit);\r\n    assertFalse(p.allow(exit));\r\n    final Method exec = getMethod(java.lang.Runtime.class, \"getRuntime\");\r\n    assertNotNull(exec);\r\n    assertFalse(p.allow(exec));\r\n    final Method callMeNot = getMethod(Outer.Inner.class, \"callMeNot\");\r\n    assertNotNull(callMeNot);\r\n    assertFalse(p.allow(callMeNot));\r\n    final JexlScript script = jexl.createScript(\"o.callMeNot()\", \"o\");\r\n    assertEquals(\"callMeNot\", assertThrows(JexlException.Method.class, () -> script.execute(null, new Outer.Inner())).getMethod());\r\n    final Method uncallable = getMethod(Invisible.class, \"uncallable\");\r\n    assertFalse(p.allow(uncallable));\r\n    final Package ip = Invisible.class.getPackage();\r\n    assertFalse(p.allow(ip));\r\n    final JexlScript script2 = jexl.createScript(\"o.uncallable()\", \"o\");\r\n    assertEquals(\"uncallable\", assertThrows(JexlException.Method.class, () -> script2.execute(null, new Invisible())).getMethod());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testParsePermissionsFailures",
  "sourceCode" : "@Test\r\nvoid testParsePermissionsFailures() {\r\n    // @formatter:off\r\n    final String[] srcs = { \"java.lang.*.*\", \"java.math.*.\", \"java.text.*;\", \"java.lang {{ Runtime {} }\", \"java.rmi {}}\", \"java.io { Text File {} }\", \"java.io { File { m.x } }\" };\r\n    // @formatter:on\r\n    for (final String src : srcs) {\r\n        assertThrows(IllegalStateException.class, () -> JexlPermissions.parse(src));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testPermissions0",
  "sourceCode" : "@Test\r\nvoid testPermissions0() throws Exception {\r\n    runTestPermissions(permissions0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testPermissions1",
  "sourceCode" : "@Test\r\nvoid testPermissions1() throws Exception {\r\n    runTestPermissions(new JexlPermissions.Delegate(permissions0()) {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"delegate:\" + base.toString();\r\n        }\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testPermissions2",
  "sourceCode" : "@Test\r\nvoid testPermissions2() throws Exception {\r\n    runTestPermissions(new JexlPermissions.ClassPermissions(permissions0(), Collections.emptySet()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testPrivateOverload1",
  "sourceCode" : "@Test\r\nvoid testPrivateOverload1() throws Exception {\r\n    final String src = \"parseDouble(\\\"PHM1\\\".substring(3)).intValue()\";\r\n    final JexlArithmetic jexla = new I33Arithmetic(true);\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).arithmetic(jexla).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(1, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testProtectedOverride0",
  "sourceCode" : "@Test\r\nvoid testProtectedOverride0() {\r\n    JexlScript script;\r\n    Object r;\r\n    final Foo2 foo3 = new Foo3();\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    // call public override of protected, nok\r\n    final Foo2 foo2 = new Foo2();\r\n    script = jexl.createScript(\"x.protectedMethod()\", \"x\");\r\n    assertThrows(JexlException.class, () -> script.execute(null, foo2), \"protectedMethod() is not public through superclass Foo2\");\r\n    // call public override, ok\r\n    r = script.execute(null, foo3);\r\n    assertEquals(\"foo3\", r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testProtectedOverride1",
  "sourceCode" : "@Test\r\nvoid testProtectedOverride1() {\r\n    final List<String> a = new LinkedList<>();\r\n    a.add(\"aaa\");\r\n    a.add(\"bbb\");\r\n    final String src = \"a.clone()\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final JexlContext context = new MapContext();\r\n    context.set(\"a\", a);\r\n    final Object result = script.execute(context, a);\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testSecurePermissions",
  "sourceCode" : "@Test\r\nvoid testSecurePermissions() {\r\n    assertNotNull(JexlTestCase.SECURE);\r\n    final List<Class<?>> acs = Arrays.asList(java.lang.Runtime.class, java.math.BigDecimal.class, java.text.SimpleDateFormat.class, java.util.Map.class);\r\n    for (final Class<?> ac : acs) {\r\n        final Package p = ac.getPackage();\r\n        assertNotNull(p, ac::getName);\r\n        assertTrue(JexlTestCase.SECURE.allow(p), ac::getName);\r\n    }\r\n    final List<Class<?>> nacs = Arrays.asList(java.lang.annotation.ElementType.class, java.lang.instrument.ClassDefinition.class, java.lang.invoke.CallSite.class, java.lang.management.BufferPoolMXBean.class, java.lang.ref.SoftReference.class, java.lang.reflect.Method.class);\r\n    for (final Class<?> nac : nacs) {\r\n        final Package p = nac.getPackage();\r\n        assertNotNull(p, nac::getName);\r\n        assertFalse(JexlTestCase.SECURE.allow(p), nac::getName);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\introspection\\PermissionsTest.java",
  "methodName" : "testWildCardPackages",
  "sourceCode" : "@Test\r\nvoid testWildCardPackages() {\r\n    Set<String> wildcards;\r\n    boolean found;\r\n    wildcards = new HashSet<>(Arrays.asList(\"com.apache.*\"));\r\n    found = Permissions.wildcardAllow(wildcards, \"com.apache.commons.jexl3\");\r\n    assertTrue(found);\r\n    found = Permissions.wildcardAllow(wildcards, \"com.google.spexl\");\r\n    assertFalse(found);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\RangeTest.java",
  "methodName" : "testAscIterator",
  "sourceCode" : "@Test\r\nvoid testAscIterator() {\r\n    final Iterator<Integer> ii = new AscIntegerIterator(3, 5);\r\n    Integer i = 3;\r\n    while (ii.hasNext()) {\r\n        assertEquals(i, ii.next());\r\n        i += 1;\r\n    }\r\n    assertThrows(NoSuchElementException.class, ii::next, \"iterator exhausted\");\r\n    assertThrows(UnsupportedOperationException.class, ii::remove, \"remove not implemented\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\RangeTest.java",
  "methodName" : "testAscLongIterator",
  "sourceCode" : "@Test\r\nvoid testAscLongIterator() {\r\n    final Iterator<Long> ii = new AscLongIterator(3L, 5L);\r\n    Long i = 3L;\r\n    while (ii.hasNext()) {\r\n        assertEquals(i, ii.next());\r\n        i += 1;\r\n    }\r\n    assertThrows(NoSuchElementException.class, ii::next, \"iterator exhausted\");\r\n    assertThrows(UnsupportedOperationException.class, ii::remove, \"remove not implemented\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\RangeTest.java",
  "methodName" : "testMisc",
  "sourceCode" : "@Test\r\nvoid testMisc() {\r\n    assertEquals(\"?\", Scope.UNDEFINED.toString());\r\n    assertEquals(\"??\", Scope.UNDECLARED.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\RangeTest.java",
  "methodName" : "testRanges",
  "sourceCode" : "@Test\r\nvoid testRanges() throws Exception {\r\n    final LongRange lr0 = LongRange.create(20, 10);\r\n    assertEquals(10L, lr0.getMin());\r\n    assertEquals(20L, lr0.getMax());\r\n    assertFalse(lr0.isEmpty());\r\n    assertTrue(lr0.contains(10L));\r\n    assertTrue(lr0.contains(20L));\r\n    assertFalse(lr0.contains(30L));\r\n    assertFalse(lr0.contains(5L));\r\n    assertFalse(lr0.contains(null));\r\n    checkIteration(lr0, 20L, 10L);\r\n    final LongRange lr1 = LongRange.create(10, 20);\r\n    checkIteration(lr1, 10L, 20L);\r\n    assertTrue(lr0.containsAll(lr1));\r\n    final LongRange lr2 = LongRange.create(10, 15);\r\n    assertNotEquals(lr0, lr2);\r\n    assertTrue(lr0.containsAll(lr2));\r\n    assertFalse(lr2.containsAll(lr1));\r\n    final IntegerRange ir0 = IntegerRange.create(20, 10);\r\n    checkIteration(ir0, 20, 10);\r\n    assertEquals(10, ir0.getMin());\r\n    assertEquals(20, ir0.getMax());\r\n    assertFalse(ir0.isEmpty());\r\n    assertTrue(ir0.contains(10));\r\n    assertTrue(ir0.contains(20));\r\n    assertFalse(ir0.contains(30));\r\n    assertFalse(ir0.contains(5));\r\n    assertFalse(ir0.contains(null));\r\n    final IntegerRange ir1 = IntegerRange.create(10, 20);\r\n    checkIteration(ir1, 10, 20);\r\n    assertTrue(ir0.containsAll(ir1));\r\n    assertNotEquals(ir0, lr0);\r\n    assertNotEquals(ir1, lr1);\r\n    final IntegerRange ir2 = IntegerRange.create(10, 15);\r\n    assertNotEquals(ir0, ir2);\r\n    assertTrue(ir0.containsAll(ir2));\r\n    assertFalse(ir2.containsAll(ir1));\r\n    long lc0 = 20;\r\n    final Iterator<Long> il0 = lr0.iterator();\r\n    while (il0.hasNext()) {\r\n        final long v0 = il0.next();\r\n        assertEquals(lc0, v0);\r\n        try {\r\n            switch((int) v0) {\r\n                case 10:\r\n                    il0.remove();\r\n                    fail();\r\n                    break;\r\n                case 11:\r\n                    lr1.add(v0);\r\n                    fail();\r\n                    break;\r\n                case 12:\r\n                    lr1.remove(v0);\r\n                    fail();\r\n                    break;\r\n                case 13:\r\n                    lr1.addAll(Collections.singletonList(v0));\r\n                    fail();\r\n                    break;\r\n                case 14:\r\n                    lr1.removeAll(Collections.singletonList(v0));\r\n                    fail();\r\n                    break;\r\n                case 15:\r\n                    lr1.retainAll(Collections.singletonList(v0));\r\n                    fail();\r\n                    break;\r\n            }\r\n        } catch (final UnsupportedOperationException xuo) {\r\n            // ok\r\n        }\r\n        lc0 -= 1;\r\n    }\r\n    assertEquals(9L, lc0);\r\n    assertThrows(NoSuchElementException.class, il0::next);\r\n    int ic0 = 20;\r\n    final Iterator<Integer> ii0 = ir0.iterator();\r\n    while (ii0.hasNext()) {\r\n        final int v0 = ii0.next();\r\n        assertEquals(ic0, v0);\r\n        try {\r\n            switch(v0) {\r\n                case 10:\r\n                    ii0.remove();\r\n                    fail();\r\n                    break;\r\n                case 11:\r\n                    ir1.add(v0);\r\n                    fail();\r\n                    break;\r\n                case 12:\r\n                    ir1.remove(v0);\r\n                    fail();\r\n                    break;\r\n                case 13:\r\n                    ir1.addAll(Collections.singletonList(v0));\r\n                    fail();\r\n                    break;\r\n                case 14:\r\n                    ir1.removeAll(Collections.singletonList(v0));\r\n                    fail();\r\n                    break;\r\n                case 15:\r\n                    ir1.retainAll(Collections.singletonList(v0));\r\n                    fail();\r\n                    break;\r\n            }\r\n        } catch (final UnsupportedOperationException xuo) {\r\n            // ok\r\n        }\r\n        ic0 -= 1;\r\n    }\r\n    assertEquals(9, ic0);\r\n    assertThrows(NoSuchElementException.class, ii0::next);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\internal\\RangeTest.java",
  "methodName" : "testSource",
  "sourceCode" : "@Test\r\nvoid testSource() {\r\n    final JexlFeatures features = JexlFeatures.createDefault();\r\n    final Source src0 = new Source(features, \"x -> -x\");\r\n    final Source src0b = new Source(features, \"x -> -x\");\r\n    final Source src1 = new Source(features, \"x -> +x\");\r\n    assertEquals(7, src0.length());\r\n    assertEquals(src0, src0);\r\n    assertEquals(src0, src0b);\r\n    assertNotEquals(src0, src1);\r\n    assertEquals(src0.hashCode(), src0b.hashCode());\r\n    assertNotEquals(src0.hashCode(), src1.hashCode());\r\n    assertTrue(src0.compareTo(src0b) == 0);\r\n    assertTrue(src0.compareTo(src1) > 0);\r\n    assertTrue(src1.compareTo(src0) < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testCantSeeMe",
  "sourceCode" : "@Test\r\nvoid testCantSeeMe() {\r\n    final JexlContext jc = new MapContext();\r\n    final String expr = \"foo.doIt()\";\r\n    JexlScript script;\r\n    Object result;\r\n    final JexlSandbox sandbox = new JexlSandbox(false);\r\n    sandbox.allow(Foo.class.getName());\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).strict(true).safe(false).create();\r\n    jc.set(\"foo\", new CantSeeMe());\r\n    script = sjexl.createScript(expr);\r\n    assertThrows(JexlException.class, () -> script.execute(jc));\r\n    jc.set(\"foo\", new Foo(\"42\"));\r\n    result = script.execute(jc);\r\n    assertEquals(42, ((Integer) result).intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testCtorAllow",
  "sourceCode" : "@Test\r\nvoid testCtorAllow() {\r\n    final String expr = \"new('\" + Foo.class.getName() + \"', '42')\";\r\n    JexlScript script;\r\n    Object result;\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    sandbox.allow(Foo.class.getName()).execute(\"\");\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).strict(true).safe(false).create();\r\n    script = sjexl.createScript(expr);\r\n    result = script.execute(null);\r\n    assertEquals(\"42\", ((Foo) result).getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testCtorBlock",
  "sourceCode" : "@Test\r\nvoid testCtorBlock() {\r\n    final String expr = \"new('\" + Foo.class.getName() + \"', '42')\";\r\n    final JexlScript script = JEXL.createScript(expr);\r\n    Object result;\r\n    result = script.execute(null);\r\n    assertEquals(\"42\", ((Foo) result).getName());\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    sandbox.block(Foo.class.getName()).execute(\"\");\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).strict(true).safe(false).create();\r\n    final JexlScript script2 = sjexl.createScript(expr);\r\n    assertThrows(JexlException.Method.class, () -> script2.execute(null), \"ctor should not be accessible\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testGetAllow",
  "sourceCode" : "@Test\r\nvoid testGetAllow() {\r\n    final Foo foo = new Foo(\"42\");\r\n    final String expr = \"foo.alias\";\r\n    JexlScript script;\r\n    Object result;\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    sandbox.allow(Foo.class.getName()).read(\"alias\");\r\n    sandbox.get(Foo.class.getName()).read().alias(\"alias\", \"ALIAS\");\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).safe(false).strict(true).create();\r\n    script = sjexl.createScript(expr, \"foo\");\r\n    result = script.execute(null, foo);\r\n    assertEquals(foo.alias, result);\r\n    script = sjexl.createScript(\"foo.ALIAS\", \"foo\");\r\n    result = script.execute(null, foo);\r\n    assertEquals(foo.alias, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testGetBlock",
  "sourceCode" : "@Test\r\nvoid testGetBlock() {\r\n    final String expr = \"foo.alias\";\r\n    final JexlScript script = JEXL.createScript(expr, \"foo\");\r\n    final Foo foo = new Foo(\"42\");\r\n    Object result;\r\n    result = script.execute(null, foo);\r\n    assertEquals(foo.alias, result);\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    sandbox.block(Foo.class.getName()).read(\"alias\");\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).strict(true).safe(false).create();\r\n    final JexlScript script2 = sjexl.createScript(expr, \"foo\");\r\n    assertThrows(JexlException.Property.class, () -> script2.execute(null, foo), \"alias should not be accessible\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testGetNullKeyAllowed0",
  "sourceCode" : "@Test\r\nvoid testGetNullKeyAllowed0() {\r\n    final JexlEngine jexl = new JexlBuilder().sandbox(new JexlSandbox(true)).create();\r\n    final JexlExpression expression = jexl.createExpression(\"{null : 'foo'}[null]\");\r\n    final Object o = expression.evaluate(null);\r\n    assertEquals(\"foo\", o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testGetNullKeyAllowed1",
  "sourceCode" : "@Test\r\nvoid testGetNullKeyAllowed1() {\r\n    final JexlSandbox sandbox = new JexlSandbox(true, true);\r\n    final JexlSandbox.Permissions p = sandbox.permissions(\"java.util.Map\", false, true, true);\r\n    p.read().add(\"quux\");\r\n    final JexlEngine jexl = new JexlBuilder().sandbox(sandbox).create();\r\n    // cant read quux\r\n    // quotes are important!\r\n    final String q = \"'quux'\";\r\n    final JexlExpression expression = jexl.createExpression(\"{\" + q + \" : 'foo'}[\" + q + \"]\");\r\n    assertTrue(assertThrows(JexlException.Property.class, () -> expression.evaluate(null), \"should have blocked \" + q).getMessage().contains(\"undefined\"));\r\n    // can read foo, null\r\n    for (final String k : Arrays.asList(\"'foo'\", \"null\")) {\r\n        final JexlExpression expression2 = jexl.createExpression(\"{\" + k + \" : 'foo'}[\" + k + \"]\");\r\n        final Object o = expression2.evaluate(null);\r\n        assertEquals(\"foo\", o);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testGetNullKeyBlocked",
  "sourceCode" : "@Test\r\nvoid testGetNullKeyBlocked() {\r\n    final JexlSandbox sandbox = new JexlSandbox(true, true);\r\n    final JexlSandbox.Permissions p = sandbox.permissions(\"java.util.Map\", false, true, true);\r\n    p.read().add(null);\r\n    p.read().add(\"quux\");\r\n    // can read bar\r\n    final JexlEngine jexl = new JexlBuilder().sandbox(sandbox).create();\r\n    final JexlExpression e0 = jexl.createExpression(\"{'bar' : 'foo'}['bar']\");\r\n    final Object r0 = e0.evaluate(null);\r\n    assertEquals(\"foo\", r0);\r\n    // cannot read quux, null\r\n    for (final String k : Arrays.asList(\"'quux'\", \"null\")) {\r\n        final JexlExpression expression = jexl.createExpression(\"{\" + k + \" : 'foo'}[\" + k + \"]\");\r\n        assertTrue(assertThrows(JexlException.Property.class, () -> expression.evaluate(null), \"should have blocked \" + k).getMessage().contains(\"undefined\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testInheritedPermission0",
  "sourceCode" : "@Test\r\nvoid testInheritedPermission0() {\r\n    final Foo386 foo = new Foo386();\r\n    final JexlSandbox sandbox = new JexlSandbox(false, true);\r\n    sandbox.permissions(SomeInterface.class.getName(), true, true, true, true);\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).safe(false).strict(true).create();\r\n    final JexlScript someOp = sjexl.createScript(\"foo.bar()\", \"foo\");\r\n    assertEquals(42, (int) someOp.execute(null, foo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testInheritedPermission1",
  "sourceCode" : "@Test\r\nvoid testInheritedPermission1() {\r\n    final Quux386 foo = new Quux386();\r\n    final JexlSandbox sandbox = new JexlSandbox(false, true);\r\n    sandbox.permissions(Foo386.class.getName(), true, true, true, true);\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).safe(false).strict(true).create();\r\n    final JexlScript someOp = sjexl.createScript(\"foo.bar()\", \"foo\");\r\n    assertEquals(-42, (int) someOp.execute(null, foo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testMethodAllow",
  "sourceCode" : "@Test\r\nvoid testMethodAllow() {\r\n    final Foo foo = new Foo(\"42\");\r\n    final String expr = \"foo.Quux()\";\r\n    JexlScript script;\r\n    Object result;\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    sandbox.allow(Foo.class.getName()).execute(\"Quux\");\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).strict(true).safe(false).create();\r\n    script = sjexl.createScript(expr, \"foo\");\r\n    result = script.execute(null, foo);\r\n    assertEquals(foo.Quux(), result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testMethodBlock",
  "sourceCode" : "@Test\r\nvoid testMethodBlock() {\r\n    final String expr = \"foo.Quux()\";\r\n    final JexlScript script = JEXL.createScript(expr, \"foo\");\r\n    final Foo foo = new Foo(\"42\");\r\n    Object result;\r\n    result = script.execute(null, foo);\r\n    assertEquals(foo.Quux(), result);\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    sandbox.block(Foo.class.getName()).execute(\"Quux\");\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).strict(true).safe(false).create();\r\n    final JexlScript script2 = sjexl.createScript(expr, \"foo\");\r\n    assertThrows(JexlException.Method.class, () -> script2.execute(null, foo), \"Quux should not be accessible\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testMethodNoJexl",
  "sourceCode" : "@Test\r\nvoid testMethodNoJexl() {\r\n    final Foo foo = new Foo(\"42\");\r\n    // @formatter:off\r\n    final String[] exprs = { \"foo.cantCallMe()\", \"foo.tryMe()\", \"foo.tryMeARiver()\", \"foo.callMeNot()\", \"foo.NONO\", \"new('org.apache.commons.jexl3.SandboxTest$Foo', 'one', 'two')\" };\r\n    // @formatter:on\r\n    final JexlEngine sjexl = new JexlBuilder().strict(true).safe(false).create();\r\n    for (final String expr : exprs) {\r\n        final JexlScript script = sjexl.createScript(expr, \"foo\");\r\n        assertThrows(JexlException.class, () -> script.execute(null, foo), \"should have not been possible\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testNoJexl312",
  "sourceCode" : "@Test\r\nvoid testNoJexl312() {\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlEngine sjexl = new JexlBuilder().safe(false).strict(true).create();\r\n    final JexlScript foo = sjexl.createScript(\"x.getFoo()\", \"x\");\r\n    assertThrows(JexlException.class, () -> foo.execute(ctxt, new Foo44()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testNonInheritedPermission0",
  "sourceCode" : "@Test\r\nvoid testNonInheritedPermission0() {\r\n    final Foo386 foo = new Foo386();\r\n    final JexlSandbox sandbox = new JexlSandbox(false, true);\r\n    sandbox.permissions(SomeInterface.class.getName(), false, true, true, true);\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).safe(false).strict(true).create();\r\n    final JexlScript someOp = sjexl.createScript(\"foo.bar()\", \"foo\");\r\n    assertThrows(JexlException.class, () -> someOp.execute(null, foo), \"should not be possible\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testNonInheritedPermission1",
  "sourceCode" : "@Test\r\nvoid testNonInheritedPermission1() {\r\n    final Quux386 foo = new Quux386();\r\n    final JexlSandbox sandbox = new JexlSandbox(false, true);\r\n    sandbox.permissions(Foo386.class.getName(), false, true, true, true);\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).safe(false).strict(true).create();\r\n    final JexlScript someOp = sjexl.createScript(\"foo.bar()\", \"foo\");\r\n    assertThrows(JexlException.class, () -> someOp.execute(null, foo), \"should not be possible\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testRestrict",
  "sourceCode" : "@Test\r\nvoid testRestrict() {\r\n    final JexlContext context = new MapContext();\r\n    context.set(\"System\", System.class);\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    // only allow call to currentTimeMillis (avoid exit, gc, loadLibrary, etc.)\r\n    sandbox.allow(System.class.getName()).execute(\"currentTimeMillis\");\r\n    // cannot create a new file\r\n    sandbox.block(java.io.File.class.getName()).execute(\"\");\r\n    final JexlEngine sjexl = new JexlBuilder().permissions(JexlPermissions.UNRESTRICTED).sandbox(sandbox).safe(false).strict(true).create();\r\n    Object result;\r\n    final JexlScript script1 = sjexl.createScript(\"System.exit()\");\r\n    assertThrows(JexlException.class, () -> script1.execute(context), \"should not allow calling exit!\");\r\n    final JexlScript script2 = sjexl.createScript(\"System.exit(1)\");\r\n    assertThrows(JexlException.class, () -> script2.execute(context), \"should not allow calling exit!\");\r\n    final JexlScript script3 = sjexl.createScript(\"new('java.io.File', '/tmp/should-not-be-created')\");\r\n    assertThrows(JexlException.class, () -> script3.execute(context), \"should not allow creating a file\");\r\n    final JexlScript script4 = sjexl.createScript(\"System.currentTimeMillis()\");\r\n    result = script4.execute(context);\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testSandboxInherit0",
  "sourceCode" : "@Test\r\nvoid testSandboxInherit0() {\r\n    Object result;\r\n    final JexlContext ctxt = null;\r\n    final List<String> foo = new ArrayList<>();\r\n    final JexlSandbox sandbox = new JexlSandbox(false, true);\r\n    sandbox.allow(List.class.getName());\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).safe(false).strict(true).create();\r\n    final JexlScript method = sjexl.createScript(\"foo.add(y)\", \"foo\", \"y\");\r\n    final JexlScript set = sjexl.createScript(\"foo[x] = y\", \"foo\", \"x\", \"y\");\r\n    final JexlScript get = sjexl.createScript(\"foo[x]\", \"foo\", \"x\");\r\n    result = method.execute(ctxt, foo, \"nothing\");\r\n    assertTrue((boolean) result);\r\n    result = get.execute(null, foo, Integer.valueOf(0));\r\n    assertEquals(\"nothing\", result);\r\n    result = set.execute(null, foo, Integer.valueOf(0), \"42\");\r\n    assertEquals(\"42\", result);\r\n    result = get.execute(null, foo, Integer.valueOf(0));\r\n    assertEquals(\"42\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testSandboxInherit1",
  "sourceCode" : "@Test\r\nvoid testSandboxInherit1() {\r\n    Object result;\r\n    final JexlContext ctxt = null;\r\n    final Operation2 foo = new Operation2(12);\r\n    final JexlSandbox sandbox = new JexlSandbox(false, true);\r\n    sandbox.allow(Operation.class.getName());\r\n    sandbox.block(Operation.class.getName()).execute(\"nonCallable\");\r\n    // sandbox.block(Foo.class.getName()).execute();\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).safe(false).strict(true).create();\r\n    final JexlScript someOp = sjexl.createScript(\"foo.someOp(y)\", \"foo\", \"y\");\r\n    result = someOp.execute(ctxt, foo, Integer.valueOf(30));\r\n    assertEquals(42, (int) result);\r\n    final JexlScript nonCallable = sjexl.createScript(\"foo.nonCallable(y)\", \"foo\", \"y\");\r\n    assertThrows(JexlException.class, () -> nonCallable.execute(null, foo, Integer.valueOf(0)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testSetAllow",
  "sourceCode" : "@Test\r\nvoid testSetAllow() {\r\n    final Foo foo = new Foo(\"42\");\r\n    final String expr = \"foo.alias = $0\";\r\n    JexlScript script;\r\n    Object result;\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    sandbox.allow(Foo.class.getName()).write(\"alias\");\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).safe(false).strict(true).create();\r\n    script = sjexl.createScript(expr, \"foo\", \"$0\");\r\n    result = script.execute(null, foo, \"43\");\r\n    assertEquals(\"43\", result);\r\n    assertEquals(\"43\", foo.alias);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testSetBlock",
  "sourceCode" : "@Test\r\nvoid testSetBlock() {\r\n    final String expr = \"foo.alias = $0\";\r\n    final JexlScript script1 = JEXL.createScript(expr, \"foo\", \"$0\");\r\n    final Foo foo = new Foo(\"42\");\r\n    Object result;\r\n    result = script1.execute(null, foo, \"43\");\r\n    assertEquals(\"43\", result);\r\n    final JexlSandbox sandbox = new JexlSandbox();\r\n    sandbox.block(Foo.class.getName()).write(\"alias\");\r\n    final JexlEngine sjexl = new JexlBuilder().sandbox(sandbox).strict(true).safe(false).create();\r\n    final JexlScript script2 = sjexl.createScript(expr, \"foo\", \"$0\");\r\n    assertThrows(JexlException.class, () -> script2.execute(null, foo, \"43\"), \"alias should not be accessible\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testSetNullKeyAllowed0",
  "sourceCode" : "@Test\r\nvoid testSetNullKeyAllowed0() {\r\n    final Arithmetic350 a350 = new Arithmetic350(true);\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(a350).sandbox(new JexlSandbox(true)).create();\r\n    final JexlContext jc = new MapContext();\r\n    final JexlExpression expression = jexl.createExpression(\"{null : 'foo'}[null] = 'bar'\");\r\n    expression.evaluate(jc);\r\n    final Map<?, ?> map = a350.getLastMap();\r\n    assertEquals(\"bar\", map.get(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testSetNullKeyAllowed1",
  "sourceCode" : "@Test\r\nvoid testSetNullKeyAllowed1() {\r\n    final Arithmetic350 a350 = new Arithmetic350(true);\r\n    final JexlSandbox sandbox = new JexlSandbox(true, true);\r\n    final JexlSandbox.Permissions p = sandbox.permissions(\"java.util.Map\", true, false, true);\r\n    p.write().add(\"quux\");\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(a350).sandbox(sandbox).create();\r\n    // cannot write quux\r\n    // quotes are important!\r\n    final String q = \"'quux'\";\r\n    final JexlExpression expression1 = jexl.createExpression(\"{\" + q + \" : 'foo'}[\" + q + \"] = '42'\");\r\n    assertTrue(assertThrows(JexlException.Property.class, () -> expression1.evaluate(null), \"should have blocked \" + q).getMessage().contains(\"undefined\"));\r\n    // can write bar, null\r\n    JexlExpression expression2 = jexl.createExpression(\"{'bar' : 'foo'}['bar'] = '42'\");\r\n    expression2.evaluate(null);\r\n    Map<?, ?> map = a350.getLastMap();\r\n    assertEquals(\"42\", map.get(\"bar\"));\r\n    map.clear();\r\n    expression2 = jexl.createExpression(\"{null : 'foo'}[null] = '42'\");\r\n    expression2.evaluate(null);\r\n    map = a350.getLastMap();\r\n    assertEquals(\"42\", map.get(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testSetNullKeyBlocked",
  "sourceCode" : "@Test\r\nvoid testSetNullKeyBlocked() {\r\n    final Arithmetic350 a350 = new Arithmetic350(true);\r\n    final JexlSandbox sandbox = new JexlSandbox(true, true);\r\n    final JexlSandbox.Permissions p = sandbox.permissions(\"java.util.Map\", true, false, true);\r\n    p.write().add(null);\r\n    p.write().add(\"quux\");\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(a350).sandbox(sandbox).create();\r\n    // can write bar\r\n    final JexlExpression expression = jexl.createExpression(\"{'bar' : 'foo'}['bar'] = '42'\");\r\n    expression.evaluate(null);\r\n    final Map<?, ?> map = a350.getLastMap();\r\n    assertEquals(\"42\", map.get(\"bar\"));\r\n    // cannot write quux, null\r\n    for (final String k : Arrays.asList(\"'quux'\", \"null\")) {\r\n        final JexlExpression expression2 = jexl.createExpression(\"{\" + k + \" : 'foo'}[\" + k + \"] = '42'\");\r\n        assertTrue(assertThrows(JexlException.Property.class, () -> expression2.evaluate(null), \"should have blocked \" + k).getMessage().contains(\"undefined\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testPermissionOrder",
  "sourceCode" : "@Test\r\nvoid testPermissionOrder() {\r\n    // permissions should not be dependent on order of evaluation\r\n    final JexlSandbox sandboxAB = new JexlSandbox(false, true);\r\n    sandboxAB.permissions(I.class.getName(), true, true, true, false);\r\n    assertEquals(\"allow{all}\", sandboxAB.get(A.class.getName()).write().toString());\r\n    assertEquals(\"allow{all}\", sandboxAB.get(B.class.getName()).write().toString());\r\n    final JexlSandbox sandboxBA = new JexlSandbox(false, true);\r\n    sandboxBA.permissions(I.class.getName(), true, true, true, false);\r\n    assertEquals(\"allow{all}\", sandboxBA.get(B.class.getName()).write().toString());\r\n    assertEquals(\"allow{all}\", sandboxBA.get(A.class.getName()).write().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\introspection\\SandboxTest.java",
  "methodName" : "testIssue424",
  "sourceCode" : "@Test\r\nvoid testIssue424() {\r\n    final JexlSandbox sandbox = new JexlSandbox(false, true);\r\n    sandbox.permissions(Map.class.getName(), true, true, true, true);\r\n    final String jexlCode = \"x.foo = 'bar'\";\r\n    final JexlEngine engine = new JexlBuilder().sandbox(sandbox).safe(false).strict(true).create();\r\n    final JexlContext context = new MapContext();\r\n    final Map<String, Object> x = new LinkedHashMap<>();\r\n    context.set(\"x\", x);\r\n    final Object result = engine.createScript(jexlCode).execute(context);\r\n    assertEquals(\"bar\", result);\r\n    assertEquals(\"bar\", x.get(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test100",
  "sourceCode" : "@Test\r\nvoid test100() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().cache(4).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    final int[] foo = { 42 };\r\n    ctxt.set(\"foo\", foo);\r\n    Object value;\r\n    for (int l = 0; l < 2; ++l) {\r\n        value = jexl.createExpression(\"foo[0]\").evaluate(ctxt);\r\n        assertEquals(42, value);\r\n        value = jexl.createExpression(\"foo[0] = 43\").evaluate(ctxt);\r\n        assertEquals(43, value);\r\n        value = jexl.createExpression(\"foo.0\").evaluate(ctxt);\r\n        assertEquals(43, value);\r\n        value = jexl.createExpression(\"foo.0 = 42\").evaluate(ctxt);\r\n        assertEquals(42, value);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test105",
  "sourceCode" : "@Test\r\nvoid test105() throws Exception {\r\n    final JexlContext context = new MapContext();\r\n    final JexlExpression selectExp = new Engine().createExpression(\"[a.propA]\");\r\n    context.set(\"a\", new A105(\"a1\", \"p1\"));\r\n    Object[] r = (Object[]) selectExp.evaluate(context);\r\n    assertEquals(\"p1\", r[0]);\r\n    //selectExp = new Engine().createExpression(\"[a.propA]\");\r\n    context.set(\"a\", new A105(\"a2\", \"p2\"));\r\n    r = (Object[]) selectExp.evaluate(context);\r\n    assertEquals(\"p2\", r[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test106",
  "sourceCode" : "@Test\r\nvoid test106() throws Exception {\r\n    final JexlEvalContext context = new JexlEvalContext();\r\n    final JexlOptions options = context.getEngineOptions();\r\n    options.setStrict(true);\r\n    options.setStrictArithmetic(true);\r\n    context.set(\"a\", new BigDecimal(1));\r\n    context.set(\"b\", new BigDecimal(3));\r\n    final JexlEngine jexl = new Engine();\r\n    final Object value = jexl.createExpression(\"a / b\").evaluate(context);\r\n    assertNotNull(value);\r\n    options.setMathContext(MathContext.UNLIMITED);\r\n    options.setMathScale(2);\r\n    assertThrows(JexlException.class, () -> jexl.createExpression(\"a / b\").evaluate(context));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test107",
  "sourceCode" : "@Test\r\nvoid test107() throws Exception {\r\n    // @formatter:off\r\n    final String[] exprs = { \"'Q4'.toLowerCase()\", \"q4\", \"(Q4).toLowerCase()\", \"q4\", \"(4).toString()\", \"4\", \"(1 + 3).toString()\", \"4\", \"({ 'q' : 'Q4'}).get('q').toLowerCase()\", \"q4\", \"{ 'q' : 'Q4'}.get('q').toLowerCase()\", \"q4\", \"({ 'q' : 'Q4'})['q'].toLowerCase()\", \"q4\", \"(['Q4'])[0].toLowerCase()\", \"q4\" };\r\n    // @formatter:on\r\n    final JexlContext context = new MapContext();\r\n    context.set(\"Q4\", \"Q4\");\r\n    final JexlEngine jexl = new Engine();\r\n    for (int e = 0; e < exprs.length; e += 2) {\r\n        JexlExpression expr = jexl.createExpression(exprs[e]);\r\n        final Object expected = exprs[e + 1];\r\n        Object value = expr.evaluate(context);\r\n        assertEquals(expected, value);\r\n        expr = jexl.createExpression(expr.getParsedText());\r\n        value = expr.evaluate(context);\r\n        assertEquals(expected, value);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test108",
  "sourceCode" : "@Test\r\nvoid test108() throws Exception {\r\n    JexlScript expr;\r\n    Object value;\r\n    final JexlEngine jexl = new Engine();\r\n    expr = jexl.createScript(\"size([])\");\r\n    value = expr.execute(null);\r\n    assertEquals(0, value);\r\n    expr = jexl.createScript(expr.getParsedText());\r\n    value = expr.execute(null);\r\n    assertEquals(0, value);\r\n    expr = jexl.createScript(\"if (true) { [] } else { {:} }\");\r\n    value = expr.execute(null);\r\n    assertTrue(value.getClass().isArray());\r\n    expr = jexl.createScript(expr.getParsedText());\r\n    value = expr.execute(null);\r\n    assertTrue(value.getClass().isArray());\r\n    expr = jexl.createScript(\"size({:})\");\r\n    value = expr.execute(null);\r\n    assertEquals(0, value);\r\n    expr = jexl.createScript(expr.getParsedText());\r\n    value = expr.execute(null);\r\n    assertEquals(0, value);\r\n    expr = jexl.createScript(\"if (false) { [] } else { {:} }\");\r\n    value = expr.execute(null);\r\n    assertInstanceOf(Map.class, value);\r\n    expr = jexl.createScript(expr.getParsedText());\r\n    value = expr.execute(null);\r\n    assertInstanceOf(Map.class, value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test109",
  "sourceCode" : "@Test\r\nvoid test109() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    Object value;\r\n    final JexlContext context = new MapContext();\r\n    context.set(\"foo.bar\", 40);\r\n    value = jexl.createExpression(\"foo.bar + 2\").evaluate(context);\r\n    assertEquals(42, value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test110",
  "sourceCode" : "@Test\r\nvoid test110() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final String[] names = { \"foo\" };\r\n    Object value;\r\n    final JexlContext context = new MapContext();\r\n    value = jexl.createScript(\"foo + 2\", names).execute(context, 40);\r\n    assertEquals(42, value);\r\n    context.set(\"frak.foo\", -40);\r\n    value = jexl.createScript(\"frak.foo - 2\", names).execute(context, 40);\r\n    assertEquals(-42, value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test111",
  "sourceCode" : "@Test\r\nvoid test111() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    Object value;\r\n    final JexlContext context = new MapContext();\r\n    final String strExpr = \"((x>0)?\\\"FirstValue=\\\"+(y-x):\\\"SecondValue=\\\"+x)\";\r\n    final JexlExpression expr = jexl.createExpression(strExpr);\r\n    context.set(\"x\", 1);\r\n    context.set(\"y\", 10);\r\n    value = expr.evaluate(context);\r\n    assertEquals(\"FirstValue=9\", value);\r\n    context.set(\"x\", 1.0d);\r\n    context.set(\"y\", 10.0d);\r\n    value = expr.evaluate(context);\r\n    assertEquals(\"FirstValue=9.0\", value);\r\n    context.set(\"x\", 1);\r\n    context.set(\"y\", 10.0d);\r\n    value = expr.evaluate(context);\r\n    assertEquals(\"FirstValue=9.0\", value);\r\n    context.set(\"x\", 1.0d);\r\n    context.set(\"y\", 10);\r\n    value = expr.evaluate(context);\r\n    assertEquals(\"FirstValue=9.0\", value);\r\n    context.set(\"x\", -10);\r\n    context.set(\"y\", 1);\r\n    value = expr.evaluate(context);\r\n    assertEquals(\"SecondValue=-10\", value);\r\n    context.set(\"x\", -10.0d);\r\n    context.set(\"y\", 1.0d);\r\n    value = expr.evaluate(context);\r\n    assertEquals(\"SecondValue=-10.0\", value);\r\n    context.set(\"x\", -10);\r\n    context.set(\"y\", 1.0d);\r\n    value = expr.evaluate(context);\r\n    assertEquals(\"SecondValue=-10\", value);\r\n    context.set(\"x\", -10.0d);\r\n    context.set(\"y\", 1);\r\n    value = expr.evaluate(context);\r\n    assertEquals(\"SecondValue=-10.0\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test112",
  "sourceCode" : "@Test\r\nvoid test112() throws Exception {\r\n    Object result;\r\n    final JexlEngine jexl = new Engine();\r\n    result = jexl.createScript(Integer.toString(Integer.MAX_VALUE)).execute(null);\r\n    assertEquals(Integer.MAX_VALUE, result);\r\n    result = jexl.createScript(Integer.toString(Integer.MIN_VALUE + 1)).execute(null);\r\n    assertEquals(Integer.MIN_VALUE + 1, result);\r\n    result = jexl.createScript(Integer.toString(Integer.MIN_VALUE)).execute(null);\r\n    assertEquals(Integer.MIN_VALUE, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test117",
  "sourceCode" : "@Test\r\nvoid test117() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlExpression e = jexl.createExpression(\"TIMESTAMP > 20100102000000\");\r\n    final JexlContext ctx = new MapContext();\r\n    ctx.set(\"TIMESTAMP\", Long.valueOf(\"20100103000000\"));\r\n    final Object result = e.evaluate(ctx);\r\n    assertTrue((Boolean) result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test125",
  "sourceCode" : "@Test\r\nvoid test125() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlExpression e = jexl.createExpression(\"method()\");\r\n    final JexlContext jc = new Foo125Context(jexl, new Foo125());\r\n    assertEquals(\"OK\", e.evaluate(jc));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test130a",
  "sourceCode" : "@Test\r\nvoid test130a() throws Exception {\r\n    final String myName = \"Test.Name\";\r\n    final Object myValue = \"Test.Value\";\r\n    final JexlEngine myJexlEngine = new Engine();\r\n    final MapContext myMapContext = new MapContext();\r\n    myMapContext.set(myName, myValue);\r\n    final Object myObjectWithTernaryConditional = myJexlEngine.createScript(myName + \"?:null\").execute(myMapContext);\r\n    assertEquals(myValue, myObjectWithTernaryConditional);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test130b",
  "sourceCode" : "@Test\r\nvoid test130b() throws Exception {\r\n    final String myName = \"Test.Name\";\r\n    final Object myValue = new Object() {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"Test.Value\";\r\n        }\r\n    };\r\n    final JexlEngine myJexlEngine = new Engine();\r\n    final MapContext myMapContext = new MapContext();\r\n    myMapContext.set(myName, myValue);\r\n    final Object myObjectWithTernaryConditional = myJexlEngine.createScript(myName + \"?:null\").execute(myMapContext);\r\n    assertEquals(myValue, myObjectWithTernaryConditional);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test135",
  "sourceCode" : "@Test\r\nvoid test135() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlContext jc = new MapContext();\r\n    JexlScript script;\r\n    Object result;\r\n    final Map<Integer, Object> foo = new HashMap<>();\r\n    foo.put(3, 42);\r\n    jc.set(\"state\", foo);\r\n    script = jexl.createScript(\"var y = state[3]; y\");\r\n    result = script.execute(jc, foo);\r\n    assertEquals(42, result);\r\n    jc.set(\"a\", 3);\r\n    script = jexl.createScript(\"var y = state[a]; y\");\r\n    result = script.execute(jc, foo);\r\n    assertEquals(42, result);\r\n    jc.set(\"a\", 2);\r\n    script = jexl.createScript(\"var y = state[a + 1]; y\");\r\n    result = script.execute(jc, foo);\r\n    assertEquals(42, result);\r\n    jc.set(\"a\", 2);\r\n    jc.set(\"b\", 1);\r\n    script = jexl.createScript(\"var y = state[a + b]; y\");\r\n    result = script.execute(jc, foo);\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"var y = state[3]; y\", \"state\");\r\n    result = script.execute(null, foo, 3);\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"var y = state[a]; y\", \"state\", \"a\");\r\n    result = script.execute(null, foo, 3);\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"var y = state[a + 1]; y\", \"state\", \"a\");\r\n    result = script.execute(null, foo, 2);\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"var y = state[a + b]; y\", \"state\", \"a\", \"b\");\r\n    result = script.execute(null, foo, 2, 1);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test136",
  "sourceCode" : "@Test\r\nvoid test136() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlContext jc = new MapContext();\r\n    JexlScript script;\r\n    JexlExpression expr;\r\n    Object result;\r\n    script = jexl.createScript(\"var x = $TAB[idx]; return x;\", \"idx\");\r\n    jc.set(\"fn01\", script);\r\n    script = jexl.createScript(\"$TAB = { 1:11, 2:22, 3:33}; IDX=2;\");\r\n    script.execute(jc);\r\n    expr = jexl.createExpression(\"fn01(IDX)\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(22, result, \"EXPR01 result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test143",
  "sourceCode" : "//    @Test\r\n//    void test138() throws Exception {\r\n//        MapContext ctxt = new MapContext();\r\n//        ctxt.set(\"tz\", java.util.TimeZone.class);\r\n//        String source = \"\"\r\n//                + \"var currentDate = new('java.util.Date');\"\r\n//                +  \"var gmt = tz.getTimeZone('GMT');\"\r\n//                +  \"var cet = tz.getTimeZone('CET');\"\r\n//                +  \"var calendarGMT = new('java.util.GregorianCalendar' , gmt);\"\r\n//                +  \"var calendarCET = new('java.util.GregorianCalendar', cet);\"\r\n//                +  \"var diff = calendarCET.getTime() - calendarGMT.getTime();\"\r\n//                + \"return diff\";\r\n//\r\n//        JexlEngine jexl = new Engine();\r\n//        JexlScript script = jexl.createScript(source);\r\n//        Object result = script.execute(ctxt);\r\n//        assertNotNull(result);\r\n//    }\r\n@Test\r\nvoid test143() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlContext jc = new MapContext();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"var total = 10; total = (total - ((x < 3)? y : z)) / (total / 10); total\", \"x\", \"y\", \"z\");\r\n    result = script.execute(jc, 2, 2, 1);\r\n    assertEquals(8, result);\r\n    script = jexl.createScript(\"var total = 10; total = (total - ((x < 3)? y : 1)) / (total / 10); total\", \"x\", \"y\", \"z\");\r\n    result = script.execute(jc, 2, 2, 1);\r\n    assertEquals(8, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test144",
  "sourceCode" : "@Test\r\nvoid test144() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlContext jc = new MapContext();\r\n    final JexlScript script = jexl.createScript(\"var total = 10; total('tt')\");\r\n    final JexlException.Method ambiguous = assertThrows(JexlException.Method.class, () -> script.execute(jc));\r\n    assertEquals(\"total\", ambiguous.getMethod());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test144a",
  "sourceCode" : "@Test\r\nvoid test144a() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"quuxClass\", Quux144.class);\r\n    final JexlExpression create = jexl.createExpression(\"quux = new(quuxClass)\");\r\n    JexlExpression assignArray = jexl.createExpression(\"quux.arr = [ 'hello', 'world' ]\");\r\n    final JexlExpression checkArray = jexl.createExpression(\"quux.arr\");\r\n    // test with a string\r\n    final Quux144 quux = (Quux144) create.evaluate(jc);\r\n    assertNotNull(quux, \"quux is null\");\r\n    // test with a nonempty string array\r\n    Object o = assignArray.evaluate(jc);\r\n    assertEquals(String[].class, o.getClass(), \"Result is not a string array\");\r\n    o = checkArray.evaluate(jc);\r\n    assertEquals(Arrays.asList(\"hello\", \"world\"), Arrays.asList((String[]) o));\r\n    // test with a null array\r\n    assignArray = jexl.createExpression(\"quux.arr = null\");\r\n    o = assignArray.evaluate(jc);\r\n    assertNull(o);\r\n    o = checkArray.evaluate(jc);\r\n    assertNull(o);\r\n    // test with an empty array\r\n    assignArray = jexl.createExpression(\"quux.arr = [ ]\");\r\n    o = assignArray.evaluate(jc);\r\n    assertNotNull(o);\r\n    o = checkArray.evaluate(jc);\r\n    assertEquals(Collections.emptyList(), Arrays.asList((String[]) o));\r\n    assertEquals(0, ((String[]) o).length, \"The array size is not zero\");\r\n    // test with an empty array on the overloaded setter for different types.\r\n    // so, the assignment should fail with logging 'The ambiguous property, arr2, should have failed.'\r\n    final JexlExpression assignArray2 = jexl.createExpression(\"quux.arr2 = [ ]\");\r\n    assertThrows(JexlException.Property.class, () -> assignArray2.evaluate(jc), \"The arr2 property shouldn't be set due to its ambiguity (overloaded setters with different types).\");\r\n    assertNull(quux.arr2, \"The arr2 property value should remain as null, not an empty array.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test147b",
  "sourceCode" : "@Test\r\nvoid test147b() throws Exception {\r\n    final String[] scripts = { // results to 1\r\n    \"var x = new ('java.util.HashMap'); x.one = 1; x.two = 2; x.one\", // results to 1\r\n    \"x = new ('java.util.HashMap'); x.one = 1; x.two = 2; x.one\", //results to 1\r\n    \"x = new ('java.util.HashMap'); x.one = 1; x.two = 2; x['one']\", // result to null ?\r\n    \"var x = new ('java.util.HashMap'); x.one = 1; x.two = 2; x['one']\" };\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlContext jc = new MapContext();\r\n    for (final String s : scripts) {\r\n        final Object o = jexl.createScript(s).execute(jc);\r\n        assertEquals(1, o);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test147c",
  "sourceCode" : "@Test\r\nvoid test147c() throws Exception {\r\n    final String[] scripts = { \"var x = new ('java.util.HashMap'); x.one = 1; x.two = 2; x.one\", \"x = new ('java.util.HashMap'); x.one = 1; x.two = 2; x.one\", \"x = new ('java.util.HashMap'); x.one = 1; x.two = 2; x['one']\", \"var x = new ('java.util.HashMap'); x.one = 1; x.two = 2; x['one']\" };\r\n    final JexlEngine jexl = new Engine();\r\n    for (final String s : scripts) {\r\n        final JexlContext jc = new MapContext();\r\n        final Object o = jexl.createScript(s).execute(jc);\r\n        assertEquals(1, o);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test148a",
  "sourceCode" : "@Test\r\nvoid test148a() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"u\", new Utils());\r\n    String src = \"u.asList(['foo', 'bar'])\";\r\n    JexlScript e = jexl.createScript(src);\r\n    Object o = e.execute(jc);\r\n    assertInstanceOf(List.class, o);\r\n    assertEquals(Arrays.asList(\"foo\", \"bar\"), o);\r\n    src = \"u.asList([1, 2])\";\r\n    e = jexl.createScript(src);\r\n    o = e.execute(jc);\r\n    assertInstanceOf(List.class, o);\r\n    assertEquals(Arrays.asList(1, 2), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test155",
  "sourceCode" : "@Test\r\nvoid test155() throws Exception {\r\n    final JexlEngine jexlEngine = new Engine();\r\n    final JexlExpression jexlExpresssion = jexlEngine.createExpression(\"first.second.name\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"first.second.name\", \"RIGHT\");\r\n    jc.set(\"name\", \"WRONG\");\r\n    final Object value = jexlExpresssion.evaluate(jc);\r\n    assertEquals(\"RIGHT\", value.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test179",
  "sourceCode" : "@Test\r\nvoid test179() throws Exception {\r\n    final JexlContext jc = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final String src = \"x = new ('java.util.HashSet'); x.add(1); x\";\r\n    final JexlScript e = jexl.createScript(src);\r\n    final Object o = e.execute(jc);\r\n    assertInstanceOf(Set.class, o);\r\n    assertTrue(((Set) o).contains(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test192",
  "sourceCode" : "@Test\r\nvoid test192() throws Exception {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x.y.z\", C192.class);\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    JexlExpression js0 = jexl.createExpression(\"x.y.z.callme(t)\");\r\n    jc.set(\"t\", null);\r\n    assertNull(js0.evaluate(jc));\r\n    jc.set(\"t\", 10);\r\n    assertEquals(42, js0.evaluate(jc));\r\n    jc.set(\"t\", -10);\r\n    assertEquals(-42, js0.evaluate(jc));\r\n    jc.set(\"t\", null);\r\n    assertNull(js0.evaluate(jc));\r\n    js0 = jexl.createExpression(\"x.y.z.kickme().callme(t)\");\r\n    jc.set(\"t\", null);\r\n    assertNull(js0.evaluate(jc));\r\n    jc.set(\"t\", 10);\r\n    assertEquals(42, js0.evaluate(jc));\r\n    jc.set(\"t\", -10);\r\n    assertEquals(-42, js0.evaluate(jc));\r\n    jc.set(\"t\", null);\r\n    assertNull(js0.evaluate(jc));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test199",
  "sourceCode" : "@Test\r\nvoid test199() throws Exception {\r\n    final JexlContext jc = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new JexlArithmetic(false)).create();\r\n    final JexlScript e = jexl.createScript(\"(x, y)->{ x + y }\");\r\n    Object r = e.execute(jc, true, \"EURT\");\r\n    assertEquals(\"trueEURT\", r);\r\n    r = e.execute(jc, \"ELSAF\", false);\r\n    assertEquals(\"ELSAFfalse\", r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test5115a",
  "sourceCode" : "@Test\r\nvoid test5115a() throws Exception {\r\n    final String str = \"{\\n\" + \"  var x = \\\"A comment\\\";\\n\" + \"  var y = \\\"A comment\\\";\\n\" + \"}\";\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlScript s = jexl.createScript(str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test5115b",
  "sourceCode" : "@Test\r\nvoid test5115b() throws Exception {\r\n    final String str = \"{\\n\" + \"  var x = \\\"A comment\\\";\\n\" + \"}\";\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlScript s = jexl.createScript(str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "test5115c",
  "sourceCode" : "@Test\r\nvoid test5115c() throws Exception {\r\n    final URL testUrl = new File(TESTA).toURI().toURL();\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlScript s = jexl.createScript(testUrl);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "testQuestion42",
  "sourceCode" : "@Test\r\nvoid testQuestion42() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new Arithmetic42()).create();\r\n    final JexlContext jc = new Question42();\r\n    final String str0 = \"(functionA('z') | functionB('b')) &  (functionC('c') |  functionD('d') ) \";\r\n    final JexlExpression expr0 = jexl.createExpression(str0);\r\n    final Object value0 = expr0.evaluate(jc);\r\n    assertEquals(\"BCD\", value0);\r\n    final String str1 = \"(functionA('z') & functionB('b')) |  (functionC('c') &  functionD('d') ) \";\r\n    final JexlExpression expr1 = jexl.createExpression(str1);\r\n    final Object value1 = expr1.evaluate(jc);\r\n    assertEquals(\"CD\", value1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "testRichContext",
  "sourceCode" : "@Test\r\nvoid testRichContext() throws Exception {\r\n    final A105 a105 = new A105(\"foo\", \"bar\");\r\n    final JexlEngine jexl = new Engine();\r\n    Object value;\r\n    final JexlContext context = new RichContext(jexl, a105);\r\n    value = jexl.createScript(\"uppercase(nameA + propA)\").execute(context);\r\n    assertEquals(\"FOOBAR\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues100Test.java",
  "methodName" : "testScaleIssue",
  "sourceCode" : "@Test\r\nvoid testScaleIssue() throws Exception {\r\n    final JexlEngine jexlX = new Engine();\r\n    final String expStr1 = \"result == salary/month * work.percent/100.00\";\r\n    final JexlExpression exp1 = jexlX.createExpression(expStr1);\r\n    final JexlEvalContext ctx = new JexlEvalContext();\r\n    final JexlOptions options = ctx.getEngineOptions();\r\n    ctx.set(\"result\", new BigDecimal(\"9958.33\"));\r\n    ctx.set(\"salary\", new BigDecimal(\"119500.00\"));\r\n    ctx.set(\"month\", new BigDecimal(\"12.00\"));\r\n    ctx.set(\"work.percent\", new BigDecimal(\"100.00\"));\r\n    // will fail because default scale is 5\r\n    assertFalse((Boolean) exp1.evaluate(ctx));\r\n    // will succeed with scale = 2\r\n    options.setMathScale(2);\r\n    assertTrue((Boolean) exp1.evaluate(ctx));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test200",
  "sourceCode" : "@Test\r\nvoid test200() {\r\n    final JexlContext jc = new MapContext();\r\n    final Map<String, Object> funcs = new HashMap<>();\r\n    final Eval eval = new Eval();\r\n    funcs.put(null, eval);\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(funcs).create();\r\n    eval.setJexl(jexl);\r\n    final String src = \"var f = fn(\\'(x)->{x + 42}\\'); f(y)\";\r\n    final JexlScript s200 = jexl.createScript(src, \"y\");\r\n    assertEquals(142, s200.execute(jc, 100));\r\n    assertEquals(52, s200.execute(jc, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test200b",
  "sourceCode" : "@Test\r\nvoid test200b() {\r\n    final JexlContext jc = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript e = jexl.createScript(\"var x = 0; var f = (y)->{ x = y; }; f(42); x\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(0, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test209a",
  "sourceCode" : "@Test\r\nvoid test209a() {\r\n    final JexlContext jc = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript e = jexl.createScript(\"var x = new('java.util.HashMap'); x.a = ()->{return 1}; x['a']()\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(1, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test209b",
  "sourceCode" : "@Test\r\nvoid test209b() {\r\n    final JexlContext jc = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript e = jexl.createScript(\"var x = new('java.util.HashMap'); x['a'] = ()->{return 1}; x.a()\");\r\n    final Object r = e.execute(jc);\r\n    assertEquals(1, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test210",
  "sourceCode" : "@Test\r\nvoid test210() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"v210\", new T210());\r\n    final JexlEngine jexl = new JexlBuilder().strict(false).silent(false).create();\r\n    final JexlScript e = jexl.createScript(\"v210.npe()\");\r\n    final JexlException xjexl = assertThrows(JexlException.class, () -> e.execute(jc));\r\n    final Throwable th = xjexl.getCause();\r\n    assertEquals(\"NPE210\", th.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test217",
  "sourceCode" : "@Test\r\nvoid test217() {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    jc.set(\"foo\", new int[] { 0, 1, 2, 42 });\r\n    JexlEngine jexl;\r\n    JexlScript e;\r\n    Object r;\r\n    jexl = new JexlBuilder().strict(false).silent(false).create();\r\n    e = jexl.createScript(\"foo[3]\");\r\n    r = e.execute(jc);\r\n    assertEquals(42, r);\r\n    // cache and fail?\r\n    jc.set(\"foo\", new int[] { 0, 1 });\r\n    options.setStrict(true);\r\n    assertTrue(options.isStrict());\r\n    final JexlException xjexl = assertThrows(JexlException.class, () -> e.execute(jc));\r\n    assertEquals(ArrayIndexOutOfBoundsException.class, xjexl.getCause().getClass());\r\n    //\r\n    options.setStrict(false);\r\n    r = e.execute(jc);\r\n    assertNull(r, \"oob adverted\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test221",
  "sourceCode" : "@Test\r\nvoid test221() {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final Map<String, Integer> map = new HashMap<>();\r\n    map.put(\"one\", 1);\r\n    jc.set(\"map\", map);\r\n    final JexlEngine jexl = new JexlBuilder().cache(256).create();\r\n    final JexlScript e = jexl.createScript(\"(x)->{ map[x] }\");\r\n    Object r;\r\n    r = e.execute(jc, (Object) null);\r\n    assertNull(r);\r\n    r = e.execute(jc, (Object) null);\r\n    assertNull(r);\r\n    r = e.execute(jc, \"one\");\r\n    assertEquals(1, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test224",
  "sourceCode" : "@Test\r\nvoid test224() {\r\n    final List<String> a0 = Arrays.asList(\"one\", \"two\");\r\n    final Set<String> a1 = new TreeSet<>(a0);\r\n    final JexlContext jc = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new JexlArithmetic224(true)).create();\r\n    Object r;\r\n    JexlScript e = jexl.createScript(\"(map, x)->{ map[x] }\");\r\n    r = e.execute(jc, a0, 1);\r\n    assertEquals(\"two\", r);\r\n    r = e.execute(jc, a1, 1);\r\n    assertEquals(\"two\", r);\r\n    e = jexl.createScript(\"(map)->{ map.1 }\");\r\n    r = e.execute(jc, a0);\r\n    assertEquals(\"two\", r);\r\n    r = e.execute(jc, a1);\r\n    assertEquals(\"two\", r);\r\n    e = jexl.createScript(\"(map, x)->{ map(x) }\");\r\n    r = e.execute(jc, a0, 1);\r\n    assertEquals(\"two\", r);\r\n    r = e.execute(jc, a1, 1);\r\n    assertEquals(\"two\", r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test225",
  "sourceCode" : "@Test\r\nvoid test225() {\r\n    final Context225 df = new Context225();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlExpression expression = jexl.createExpression(\"bar()\");\r\n    assertEquals(\"bar\", expression.evaluate(df));\r\n    final ObjectContext<Object> context = new ObjectContext<>(jexl, df);\r\n    assertEquals(\"bar\", expression.evaluate(context));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test230",
  "sourceCode" : "@Test\r\nvoid test230() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(4).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    final int[] foo = { 42 };\r\n    ctxt.set(\"fo o\", foo);\r\n    Object value;\r\n    for (int l = 0; l < 2; ++l) {\r\n        value = jexl.createExpression(\"fo\\\\ o[0]\").evaluate(ctxt);\r\n        assertEquals(42, value);\r\n        value = jexl.createExpression(\"fo\\\\ o[0] = 43\").evaluate(ctxt);\r\n        assertEquals(43, value);\r\n        value = jexl.createExpression(\"fo\\\\ o.0\").evaluate(ctxt);\r\n        assertEquals(43, value);\r\n        value = jexl.createExpression(\"fo\\\\ o.0 = 42\").evaluate(ctxt);\r\n        assertEquals(42, value);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test241",
  "sourceCode" : "@Test\r\nvoid test241() {\r\n    ExecutorService pool;\r\n    final JexlScript script = new JexlBuilder().create().createScript(\"`${item}`\");\r\n    pool = Executors.newFixedThreadPool(4);\r\n    final Map<String, Object> m1 = new HashMap<>();\r\n    m1.put(\"item\", \"A\");\r\n    final Map<String, Object> m2 = new HashMap<>();\r\n    m2.put(\"item\", \"B\");\r\n    handle(pool, script, m1);\r\n    script.execute(new MapContext(m2));\r\n    pool.shutdown();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test242",
  "sourceCode" : "@Test\r\nvoid test242() {\r\n    final Double a = -40.05d;\r\n    final Double b = -8.01d;\r\n    final Double c = a + b;\r\n    final JexlContext context = new MapContext();\r\n    context.set(\"a\", a);\r\n    context.set(\"b\", b);\r\n    final JexlEngine JEXL_ENGINE = new JexlBuilder().strict(true).silent(true).create();\r\n    final JexlExpression jsp = JEXL_ENGINE.createExpression(\"a + b\");\r\n    final Double e = (Double) jsp.evaluate(context);\r\n    assertEquals(c, e, 0.0, () -> Double.doubleToLongBits(e) + \" != \" + Double.doubleToLongBits(c));\r\n    assertEquals(a + b, e, 0.0, () -> Double.doubleToLongBits(e) + \" != \" + Double.doubleToLongBits(c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test243a",
  "sourceCode" : "@Test\r\nvoid test243a() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(32).create();\r\n    final JexlScript script = jexl.createScript(\"while(true);\");\r\n    assertThrows(JexlException.class, () -> jexl.createExpression(\"while(true);\"), \"expr do not allow 'while' statement\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test245",
  "sourceCode" : "@Test\r\nvoid test245() {\r\n    final MapContext ctx = new MapContext();\r\n    final Foo245 foo245 = new Foo245();\r\n    ctx.set(\"foo\", foo245);\r\n    final JexlEngine engine = new JexlBuilder().strict(true).safe(false).silent(false).create();\r\n    final JexlExpression foobar = engine.createExpression(\"foo.bar\");\r\n    final JexlExpression foobaz = engine.createExpression(\"foo.baz\");\r\n    final JexlExpression foobarbaz = engine.createExpression(\"foo.bar.baz\");\r\n    // add ambiguity with null & not-null\r\n    final Object[] args = { null, 245 };\r\n    for (final Object arg : args) {\r\n        foo245.setBar(arg);\r\n        // ok\r\n        assertEquals(foo245.getBar(), foobar.evaluate(ctx));\r\n        // fail level 1\r\n        assertThrows(JexlException.Property.class, () -> foobaz.evaluate(ctx), \"foo.baz is not solvable, exception expected\");\r\n        // fail level 2\r\n        assertThrows(JexlException.Property.class, () -> foobarbaz.evaluate(ctx), \"foo.bar.baz is not solvable, exception expected\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test256",
  "sourceCode" : "@Test\r\nvoid test256() {\r\n    final MapContext ctx = new MapContext() {\r\n\r\n        @Override\r\n        public Object get(final String name) {\r\n            if (\"java\".equals(name)) {\r\n                return null;\r\n            }\r\n            return super.get(name);\r\n        }\r\n\r\n        @Override\r\n        public boolean has(final String name) {\r\n            if (\"java\".equals(name)) {\r\n                return false;\r\n            }\r\n            return super.has(name);\r\n        }\r\n\r\n        @Override\r\n        public void set(final String name, final Object value) {\r\n            if (\"java\".equals(name)) {\r\n                throw new JexlException(null, \"cannot set \" + name);\r\n            }\r\n            super.set(name, value);\r\n        }\r\n    };\r\n    ctx.set(\"java.version\", 10);\r\n    final JexlEngine engine = new JexlBuilder().strict(true).silent(false).create();\r\n    final JexlScript script = engine.createScript(\"java = 3\");\r\n    assertThrows(JexlException.class, () -> script.execute(ctx));\r\n    assertEquals(10, engine.createScript(\"java.version\").execute(ctx));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test265",
  "sourceCode" : "@Test\r\nvoid test265() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(4).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"x\", 42);\r\n    Object result;\r\n    JexlScript script;\r\n    assertThrows(JexlException.Parsing.class, () -> jexl.createScript(\"(true) ? x : abs(1)\"), \"ambiguous, parsing should fail\");\r\n    script = jexl.createScript(\"(true) ? (x) : abs(2)\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"(true) ? x : (abs(3))\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"(!true) ? abs(4) : x\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test266",
  "sourceCode" : "@Test\r\nvoid test266() {\r\n    Object result;\r\n    JexlScript script;\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new Arithmetic266(true)).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    final List<Integer> li = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6));\r\n    ctxt.set(\"list\", li);\r\n    script = jexl.createScript(\"for (var item : list) { if (item <= 3) remove(); } return size(list)\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(3, result);\r\n    assertEquals(3, li.size());\r\n    final Map<String, Integer> msi = new HashMap<>();\r\n    msi.put(\"a\", 1);\r\n    msi.put(\"b\", 2);\r\n    msi.put(\"c\", 3);\r\n    msi.put(\"d\", 4);\r\n    msi.put(\"e\", 5);\r\n    msi.put(\"f\", 6);\r\n    ctxt.set(\"map\", msi);\r\n    script = jexl.createScript(\"for (var item : map) { if (item <= 2) remove(); } return size(map)\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(4, result);\r\n    assertEquals(4, msi.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test267",
  "sourceCode" : "@Test\r\nvoid test267() {\r\n    Object result;\r\n    JexlScript script;\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext ctxt = new MapContext();\r\n    // API declared params\r\n    script = jexl.createScript(\"x + y\", \"x\", \"y\");\r\n    result = script.execute(ctxt, 20, 22);\r\n    assertEquals(42, result);\r\n    // script declared params\r\n    script = jexl.createScript(\"(x, y)->{ x + y}\");\r\n    result = script.execute(ctxt, 22, 20);\r\n    assertEquals(42, result);\r\n    // explicitly returning the lambda\r\n    script = jexl.createScript(\"return (x, y)->{ x + y}\");\r\n    result = script.execute(ctxt);\r\n    assertInstanceOf(JexlScript.class, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test274",
  "sourceCode" : "@Test\r\nvoid test274() {\r\n    JexlEngine jexl = new JexlBuilder().strict(true).safe(true).stackOverflow(5).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlScript script = jexl.createScript(\"var f = (x)->{ x > 1? x * f(x - 1) : x }; f(a)\", \"a\");\r\n    final Object result = script.execute(ctxt, 3);\r\n    assertEquals(6, result);\r\n    JexlException.StackOverflow xstack = assertThrows(JexlException.StackOverflow.class, () -> script.execute(ctxt, 32));\r\n    assertTrue(xstack.toString().contains(\"jexl\"));\r\n    jexl = new JexlBuilder().strict(true).create();\r\n    final JexlScript script2 = jexl.createScript(\"var f = (x)->{ x * f(x - 1) }; f(a)\", \"a\");\r\n    xstack = assertThrows(JexlException.StackOverflow.class, () -> script2.execute(ctxt, 32));\r\n    assertTrue(xstack.toString().contains(\"jvm\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test275a",
  "sourceCode" : "@Test\r\nvoid test275a() {\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"out\", System.out);\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(true).create();\r\n    final JexlScript e = jexl.createScript(\"out.println(xyz)\");\r\n    final JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> e.execute(ctxt));\r\n    assertEquals(\"xyz\", xvar.getVariable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test275b",
  "sourceCode" : "@Test\r\nvoid test275b() {\r\n    final JexlContext ctxt = new MapContext();\r\n    // ctxt.set(\"out\", System.out);\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(true).create();\r\n    final JexlScript e = jexl.createScript(\"var xyz = xyz\");\r\n    final Object o = e.execute(ctxt);\r\n    assertNull(o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test275c",
  "sourceCode" : "@Test\r\nvoid test275c() {\r\n    final JexlContext ctxt = new MapContext();\r\n    // ctxt.set(\"out\", System.out);\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(true).silent(true).create();\r\n    JexlScript e;\r\n    Object r;\r\n    e = jexl.createScript(\"(s, v)->{  var x = y ; 42; }\");\r\n    // wont make an error\r\n    r = e.execute(ctxt, false, true);\r\n    assertEquals(42, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test275d",
  "sourceCode" : "@Test\r\nvoid test275d() {\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"out\", System.out);\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(true).create();\r\n    final JexlScript e = jexl.createScript(\"{ var xyz = 42 } out.println(xyz)\");\r\n    final Object o = e.execute(ctxt);\r\n    assertNull(o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test278",
  "sourceCode" : "@Test\r\nvoid test278() {\r\n    // @formatter:off\r\n    final String[] srcs = { \"return union x143('arg',5,6) \", \"return union y143('arg',5,6)   ;\", \"return union\\n z143('arg',5,6)   ;\", \"var f =()->{ return union 143 } foo[0]\" };\r\n    final Object[] ctls = { \"42\", \"42\", \"42\", 42 };\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().cache(4).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    final int[] foo = { 42 };\r\n    ctxt.set(\"foo\", foo);\r\n    ctxt.set(\"union\", \"42\");\r\n    Object value;\r\n    JexlScript jc;\r\n    for (int i = 0; i < srcs.length; ++i) {\r\n        final String src = srcs[i];\r\n        final JexlException.Ambiguous xa = assertThrows(JexlException.Ambiguous.class, () -> jexl.createScript(src), src);\r\n        final String str = xa.toString();\r\n        assertTrue(str.contains(\"143\"));\r\n        final String clean = xa.tryCleanSource(src);\r\n        jc = jexl.createScript(clean);\r\n        value = jc.execute(ctxt);\r\n        assertEquals(ctls[i], value, clean);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test279",
  "sourceCode" : "@Test\r\nvoid test279() {\r\n    // LogFactory.getLog(Issues200Test.class);\r\n    final Log logger = null;\r\n    Object result;\r\n    JexlScript script;\r\n    final JexlContext ctxt = new Context279();\r\n    // @formatter:off\r\n    final String[] srcs = { \"var z = null; identity(z[0]);\", \"var z = null; z.0;\", \"var z = null; z.foo();\", \"z['y']['z']\", \"z.y.any()\", \"identity(z.any())\", \"z[0]\", \"z.0\", \"z.foo()\", \"z.y[0]\", \"z.y[0].foo()\", \"z.y.0\", \"z.y.foo()\", \"var z = { 'y' : [42] }; z.y[1]\", \"var z = { 'y' : [42] }; z.y.1\", \"var z = { 'y' : [-42] }; z.y[1].foo()\", \"var z = { 'y' : [42] }; z.y.1.foo()\", \"var z = { 'y' : [null, null] }; z.y[1].foo()\", \"var z = { 'y' : [null, null] }; z.y.1.foo()\" };\r\n    // @formatter:on\r\n    for (int i = 0; i < 2; ++i) {\r\n        for (final boolean strict : new boolean[] { true, false }) {\r\n            final JexlEngine jexl = new JexlBuilder().safe(false).strict(strict).create();\r\n            for (final String src : srcs) {\r\n                script = jexl.createScript(src);\r\n                try {\r\n                    result = script.execute(ctxt);\r\n                    if (strict) {\r\n                        if (logger != null) {\r\n                            logger.warn(ctxt.has(\"z\") + \": \" + src + \": no fail, \" + result);\r\n                        }\r\n                        fail(\"should have failed: \" + src);\r\n                    }\r\n                    // not reachable\r\n                    assertNull(result, \"non-null result ?!\");\r\n                } catch (final JexlException.Variable xvar) {\r\n                    if (logger != null) {\r\n                        logger.warn(ctxt.has(\"z\") + \": \" + src + \": fail, \" + xvar);\r\n                    }\r\n                    if (!strict) {\r\n                        fail(src + \", should not have thrown \" + xvar);\r\n                    } else {\r\n                        assertTrue(xvar.toString().contains(\"z\"), () -> src + \": \" + xvar.toString());\r\n                    }\r\n                } catch (final JexlException.Property xprop) {\r\n                    if (logger != null) {\r\n                        logger.warn(ctxt.has(\"z\") + \": \" + src + \": fail, \" + xprop);\r\n                    }\r\n                    if (!strict) {\r\n                        fail(src + \", should not have thrown \" + xprop);\r\n                    } else {\r\n                        assertTrue(xprop.toString().contains(\"1\"), () -> src + \": \" + xprop.toString());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ctxt.set(\"z.y\", null);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test279b",
  "sourceCode" : "@Test\r\nvoid test279b() {\r\n    Object result;\r\n    JexlScript script;\r\n    final JexlContext ctxt = new Context279();\r\n    ctxt.set(\"ctxt\", ctxt);\r\n    final String src = \"(x)->{ spread(x)[0].toString() }\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).strict(true).create();\r\n    script = jexl.createScript(src);\r\n    result = script.execute(ctxt, \"abc\");\r\n    assertEquals(\"a\", result);\r\n    result = script.execute(ctxt, (Object) null);\r\n    assertNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test285",
  "sourceCode" : "@Test\r\nvoid test285() {\r\n    final List<String> out = new ArrayList<>(6);\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"$out\", out);\r\n    // @formatter:off\r\n    final String src = \"for(var b: ['g','h','i']) {\\n\" + \"  var c = b;\\n\" + \"  $out.add(c);\\n\" + \"}\\n\" + \" \\n\" + \"for(var dc: ['j','k','l']) {\\n\" + \"  $out.add(dc);\\n\" + \"}\" + \" \\n\" + \"$out.size()\";\r\n    // @formatter:on\r\n    final JexlFeatures features = new JexlFeatures();\r\n    features.lexical(true);\r\n    final JexlEngine jexl = new JexlBuilder().//.features(features)\r\n    safe(false).strict(true).lexical(true).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(ctxt, (Object) null);\r\n    assertEquals(6, result);\r\n    final List<String> ctl = Arrays.asList(\"g\", \"h\", \"i\", \"j\", \"k\", \"l\");\r\n    assertEquals(ctl, out);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test285a",
  "sourceCode" : "@Test\r\nvoid test285a() {\r\n    final List<String> out = new ArrayList<>(6);\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"$out\", out);\r\n    final String src = \"for(var b: ['g','h','i']) { $out.add(b); }\\n\" + \"for(b: ['j','k','l']) { $out.add(b);}\\n\" + \"$out.size()\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).lexical(false).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(ctxt, (Object) null);\r\n    assertEquals(6, result);\r\n    final List<String> ctl = Arrays.asList(\"g\", \"h\", \"i\", \"j\", \"k\", \"l\");\r\n    assertEquals(ctl, out);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test285b",
  "sourceCode" : "@Test\r\nvoid test285b() {\r\n    final List<String> out = new ArrayList<>(6);\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"$out\", out);\r\n    final String src = \"for(b: ['g','h','i']) { $out.add(b); }\\n\" + \"for(var b: ['j','k','l']) { $out.add(b);}\\n\" + \"$out.size()\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(ctxt, (Object) null);\r\n    assertEquals(6, result);\r\n    final List<String> ctl = Arrays.asList(\"g\", \"h\", \"i\", \"j\", \"k\", \"l\");\r\n    assertEquals(ctl, out);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test286",
  "sourceCode" : "@Test\r\nvoid test286() {\r\n    final String s286 = \"var x = 0; for(x : 1..2){}; return x\";\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    assertEquals(2, jexl.createScript(s286).execute(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test287",
  "sourceCode" : "@Test\r\nvoid test287() {\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    String src;\r\n    JexlScript script;\r\n    Object result;\r\n    // declared, not defined\r\n    src = \"x = 1; if (false) var x = 2; x\";\r\n    script = jexl.createScript(src);\r\n    result = script.execute(ctxt);\r\n    assertEquals(1, result);\r\n    // declared and defined\r\n    src = \"x = 1; if (true) var x = 2; x\";\r\n    script = jexl.createScript(src);\r\n    result = script.execute(ctxt);\r\n    assertEquals(2, result);\r\n    // definition using shadowed global\r\n    src = \"x = 1; var x = x + 41; x\";\r\n    script = jexl.createScript(src);\r\n    result = script.execute(ctxt);\r\n    assertEquals(42, result);\r\n    // definition using shadowed global\r\n    options.setLexical(false);\r\n    src = \"(x)->{ if (x==1) { var y = 2; } else if (x==2) { var y = 3; }; y }\";\r\n    final JexlScript script1 = jexl.createScript(src);\r\n    result = script1.execute(ctxt, 1);\r\n    assertEquals(2, result);\r\n    result = script1.execute(ctxt, 2);\r\n    assertEquals(3, result);\r\n    options.setStrict(true);\r\n    final JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> script1.execute(ctxt, 0));\r\n    assertTrue(xvar.getMessage().contains(\"y\"));\r\n    options.setStrict(false);\r\n    result = script1.execute(ctxt, 0);\r\n    assertNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test289",
  "sourceCode" : "@Test\r\nvoid test289() {\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    String src;\r\n    JexlScript script;\r\n    Object result;\r\n    src = \"var x = function(a) { var b; return b}; x(1,2)\";\r\n    script = jexl.createScript(src);\r\n    result = script.execute(ctxt);\r\n    assertNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test290a",
  "sourceCode" : "@Test\r\nvoid test290a() {\r\n    Object result;\r\n    JexlScript script;\r\n    final String[] srcs = { \"(x)->{ x.nothing().toString() }\", \"(x)->{ x.toString().nothing() }\", \"(x)->{ x.nothing().nothing() }\" };\r\n    for (final boolean safe : new boolean[] { true, false }) {\r\n        final JexlEngine jexl = new JexlBuilder().safe(safe).strict(true).create();\r\n        for (final String src : srcs) {\r\n            script = jexl.createScript(src);\r\n            try {\r\n                result = script.execute(null, \"abc\");\r\n                if (!safe) {\r\n                    fail(\"should have failed: \" + src);\r\n                } else {\r\n                    assertNull(result, \"non-null result ?!\");\r\n                }\r\n            } catch (final JexlException.Method xmethod) {\r\n                if (safe) {\r\n                    fail(src + \", should not have thrown \" + xmethod);\r\n                } else {\r\n                    assertTrue(xmethod.toString().contains(\"nothing\"), () -> src + \": \" + xmethod.toString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test290b",
  "sourceCode" : "@Test\r\nvoid test290b() {\r\n    Object result;\r\n    JexlScript script;\r\n    final String[] srcs = { \"(x)->{ x?.nothing()?.toString() }\", \"(x)->{ x.toString()?.nothing() }\", \"(x)->{ x?.nothing().nothing() }\" };\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    for (final String src : srcs) {\r\n        script = jexl.createScript(src);\r\n        result = script.execute(null, \"abc\");\r\n        assertNull(result);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test291",
  "sourceCode" : "@Test\r\nvoid test291() {\r\n    final String str = \"{1:'one'}[1]\";\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    JexlExpression e = jexl.createExpression(str);\r\n    Object value = e.evaluate(ctxt);\r\n    assertEquals(\"one\", value);\r\n    final JexlEngine sandboxedJexlEngine = new JexlBuilder().sandbox(// add a whitebox sandbox\r\n    new JexlSandbox(true)).create();\r\n    e = sandboxedJexlEngine.createExpression(str);\r\n    value = e.evaluate(ctxt);\r\n    assertEquals(\"one\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "test298",
  "sourceCode" : "@Test\r\nvoid test298() {\r\n    final Cls298 c298 = new Cls298();\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    String str = \"c.size()\";\r\n    JexlScript e = jexl.createScript(str, \"c\");\r\n    Object value = e.execute(ctxt, c298);\r\n    assertEquals(42, value, str);\r\n    str = \"size c\";\r\n    e = jexl.createScript(str, \"c\");\r\n    value = e.execute(ctxt, c298);\r\n    assertEquals(42, value, str);\r\n    str = \"c.size(127)\";\r\n    e = jexl.createScript(str, \"c\");\r\n    value = e.execute(ctxt, c298);\r\n    assertEquals(169, value, str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "testTemplate6565a",
  "sourceCode" : "@Test\r\nvoid testTemplate6565a() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JxltEngine jexlt = jexl.createJxltEngine();\r\n    final String source = \"$$ var res = '';\\n\" + \"$$ var meta = session.data['METADATA'];\\n\" + \"$$ if (meta) {\\n\" + \"$$   var entry = meta['ID'];\\n\" + \"$$   if (entry) {\\n\" + \"$$     var value = session.data[entry];\\n\" + \"$$     res = value?: '';\\n\" + \"$$   }\\n\" + \"$$ }\\n\" + \"${res}\\n\";\r\n    final JxltEngine.Template script = jexlt.createTemplate(\"$$\", new StringReader(source));\r\n    assertNotNull(script);\r\n    final TemplateDebugger dbg = new TemplateDebugger();\r\n    final String refactored = dbg.debug(script) ? dbg.toString() : \"\";\r\n    assertNotNull(refactored);\r\n    assertEquals(source, refactored);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues200Test.java",
  "methodName" : "testTemplate6565b",
  "sourceCode" : "@Test\r\nvoid testTemplate6565b() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JxltEngine jexlt = jexl.createJxltEngine();\r\n    final String source = \"$$ var res = '';\\n\" + \"$$ var meta = session.data['METADATA'];\\n\" + \"$$ if (meta) {\\n\" + \"$$   var entry = meta['ID'];\\n\" + \"$$   if (entry) {\\n\" + \"$$     var value = session.data[entry];\\n\" + \"$$     res = value?: '';\\n\" + \"${res}\\n\" + \"$$   }\\n\" + \"$$ }\\n\";\r\n    final JxltEngine.Template script = jexlt.createTemplate(\"$$\", new StringReader(source));\r\n    assertNotNull(script);\r\n    final TemplateDebugger dbg = new TemplateDebugger();\r\n    final String refactored = dbg.debug(script) ? dbg.toString() : \"\";\r\n    assertNotNull(refactored);\r\n    assertEquals(source, refactored);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test301a",
  "sourceCode" : "@Test\r\nvoid test301a() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).arithmetic(new JexlArithmetic(false)).create();\r\n    final String[] srcs = { \"var x = null; x.0\", \"var x = null; x[0]\", \"var x = [null,1]; x[0][0]\" };\r\n    for (int i = 0; i < srcs.length; ++i) {\r\n        final String src = srcs[i];\r\n        final JexlScript s = jexl.createScript(src);\r\n        try {\r\n            final Object o = s.execute(null);\r\n            if (i > 0) {\r\n                fail(src + \": Should have failed\");\r\n            }\r\n        } catch (final Exception ex) {\r\n            assertTrue(ex.getMessage().contains(\"x\"));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test302",
  "sourceCode" : "@Test\r\nvoid test302() {\r\n    final JexlContext jc = new MapContext();\r\n    // @formatter:off\r\n    final String[] strs = { \"{if (0) 1 else 2; var x = 4;}\", \"if (0) 1; else 2; \", \"{ if (0) 1; else 2; }\", \"{ if (0) { if (false) 1 else -3 } else 2; }\" };\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    for (final String str : strs) {\r\n        final JexlScript e = jexl.createScript(str);\r\n        final Object o = e.execute(jc);\r\n        final int oo = ((Number) o).intValue() % 2;\r\n        assertEquals(0, oo, () -> \"Block result is wrong \" + str);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test304",
  "sourceCode" : "@Test\r\nvoid test304() {\r\n    final JexlEngine jexlEngine = new JexlBuilder().strict(false).create();\r\n    JexlExpression e304 = jexlEngine.createExpression(\"overview.limit.var\");\r\n    final Map<String, Object> map3 = new HashMap<>();\r\n    map3.put(\"var\", \"4711\");\r\n    final Map<String, Object> map2 = new HashMap<>();\r\n    map2.put(\"limit\", map3);\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"overview\", map2);\r\n    final JexlContext context = new MapContext(map);\r\n    Object value = e304.evaluate(context);\r\n    // fails\r\n    assertEquals(\"4711\", value);\r\n    map.clear();\r\n    map.put(\"overview.limit.var\", 42);\r\n    value = e304.evaluate(context);\r\n    assertEquals(42, value);\r\n    // @formatter:off\r\n    final String[] keywords = { \"if\", \"else\", \"do\", \"while\", \"for\", \"break\", \"continue\", \"function\", \"return\", \"new\", \"size\", \"empty\", \"var\", \"let\", \"const\", \"null\", \"true\", \"false\", \"not\", \"div\", \"mod\", \"and\", \"or\", \"eq\", \"ne\", \"lt\", \"gt\", \"ge\", \"le\" };\r\n    // @formatter:on\r\n    for (final String keyword : keywords) {\r\n        final String pkw = \"e304.\" + keyword;\r\n        map.put(pkw, 42);\r\n        e304 = jexlEngine.createExpression(pkw);\r\n        value = e304.evaluate(context);\r\n        assertEquals(42, value);\r\n    }\r\n    for (int i = 0; i < keywords.length; ++i) {\r\n        final String pkw = \"e304.\" + keywords[i] + \".\" + keywords[keywords.length - 1 - i];\r\n        map.put(pkw, 42);\r\n        e304 = jexlEngine.createExpression(pkw);\r\n        value = e304.evaluate(context);\r\n        assertEquals(42, value);\r\n    }\r\n    final String allkw = \"e304.\" + String.join(\".\", keywords);\r\n    map.put(allkw, 42);\r\n    e304 = jexlEngine.createExpression(allkw);\r\n    value = e304.evaluate(context);\r\n    assertEquals(42, value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test305",
  "sourceCode" : "@Test\r\nvoid test305() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    JexlScript e;\r\n    e = jexl.createScript(\"{while(false) {}; var x = 1;}\");\r\n    final String str0 = e.getParsedText();\r\n    e = jexl.createScript(str0);\r\n    assertNotNull(e);\r\n    final String str1 = e.getParsedText();\r\n    assertEquals(str0, str1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test306",
  "sourceCode" : "@Test\r\nvoid test306() {\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript e = jexl.createScript(\"x.y ?: 2\");\r\n    final Object o1 = e.execute(null);\r\n    assertEquals(2, o1);\r\n    ctxt.set(\"x.y\", null);\r\n    final Object o2 = e.execute(ctxt);\r\n    assertEquals(2, o2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test306a",
  "sourceCode" : "@Test\r\nvoid test306a() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript e = jexl.createScript(\"x.y ?: 2\", \"x\");\r\n    Object o = e.execute(null, new Object());\r\n    assertEquals(2, o);\r\n    o = e.execute(null);\r\n    assertEquals(2, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test306b",
  "sourceCode" : "@Test\r\nvoid test306b() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript e = jexl.createScript(\"x?.y ?: 2\", \"x\");\r\n    final Object o1 = e.execute(null, new Object());\r\n    assertEquals(2, o1);\r\n    final Object o2 = e.execute(null);\r\n    assertEquals(2, o2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test306c",
  "sourceCode" : "@Test\r\nvoid test306c() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript e = jexl.createScript(\"x.y ?: 2\", \"x\");\r\n    Object o = e.execute(null, new Object());\r\n    assertEquals(2, o);\r\n    o = e.execute(null);\r\n    assertEquals(2, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test306d",
  "sourceCode" : "@Test\r\nvoid test306d() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript e = jexl.createScript(\"x.y[z.t] ?: 2\", \"x\");\r\n    Object o = e.execute(null, new Object());\r\n    assertEquals(2, o);\r\n    o = e.execute(null);\r\n    assertEquals(2, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test309a",
  "sourceCode" : "@Test\r\nvoid test309a() {\r\n    // @formatter:off\r\n    final String src = \"<html lang=\\\"en\\\">\\n\" + \"  <body>\\n\" + \"    <h1>Hello World!</h1>\\n\" + \"$$ var i = 12++;\\n\" + \"  </body>\\n\" + \"</html>\";\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    final JexlInfo info = new JexlInfo(\"template\", 1, 1);\r\n    final JexlException.Parsing xerror = assertThrows(JexlException.Parsing.class, () -> jxlt.createTemplate(info, src));\r\n    assertEquals(4, xerror.getInfo().getLine());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test309b",
  "sourceCode" : "@Test\r\nvoid test309b() {\r\n    // @formatter:off\r\n    final String src = \"<html lang=\\\"en\\\">\\n\" + \"  <body>\\n\" + \"    <h1>Hello World!</h1>\\n\" + \"$$ var i = a b c;\\n\" + \"  </body>\\n\" + \"</html>\";\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    final JexlInfo info = new JexlInfo(\"template\", 1, 1);\r\n    final JexlException.Parsing xerror = assertThrows(JexlException.Parsing.class, () -> jxlt.createTemplate(info, src));\r\n    assertEquals(4, xerror.getInfo().getLine());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test309c",
  "sourceCode" : "@Test\r\nvoid test309c() {\r\n    // @formatter:off\r\n    final String src = \"<html lang=\\\"en\\\">\\n\" + \"  <body>\\n\" + \"    <h1>Hello World!</h1>\\n\" + \"$$ var i =12;\\n\" + \"  </body>\\n\" + \"</html>\";\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    final JexlInfo info = new JexlInfo(\"template\", 1, 1);\r\n    final JxltEngine.Template tmplt = jxlt.createTemplate(info, src);\r\n    final String src1 = tmplt.asString();\r\n    final String src2 = tmplt.toString();\r\n    assertEquals(src1, src2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test314",
  "sourceCode" : "@Test\r\nvoid test314() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(false).create();\r\n    final Map<String, Object> vars = new HashMap<>();\r\n    final JexlContext ctxt = new VaContext(vars);\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"cell()\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(0, result);\r\n    script = jexl.createScript(\"x.cell()\", \"x\");\r\n    result = script.execute(ctxt, Arrays.asList(10, 20));\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"cell('1', '2')\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(2, result);\r\n    script = jexl.createScript(\"x.cell('1', '2')\", \"x\");\r\n    result = script.execute(ctxt, Arrays.asList(10, 20));\r\n    assertEquals(44, result);\r\n    vars.put(\"TVALOGAR\", null);\r\n    String jexlExp = \"TVALOGAR==null ?'SIMON':'SIMONAZO'\";\r\n    script = jexl.createScript(jexlExp);\r\n    result = script.execute(ctxt);\r\n    assertEquals(\"SIMON\", result);\r\n    jexlExp = \"TVALOGAR.PEPITO==null ?'SIMON':'SIMONAZO'\";\r\n    script = jexl.createScript(jexlExp);\r\n    final Map<String, Object> tva = new LinkedHashMap<>();\r\n    tva.put(\"PEPITO\", null);\r\n    vars.put(\"TVALOGAR\", tva);\r\n    result = script.execute(ctxt);\r\n    assertEquals(\"SIMON\", result);\r\n    vars.remove(\"TVALOGAR\");\r\n    ctxt.set(\"TVALOGAR.PEPITO\", null);\r\n    result = script.execute(ctxt);\r\n    assertEquals(\"SIMON\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test315",
  "sourceCode" : "@Test\r\nvoid test315() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final Map<String, Object> vars = new HashMap<>();\r\n    final JexlContext ctxt = new VaContext(vars);\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"a?? 42 + 10\", \"a\");\r\n    result = script.execute(ctxt, 32);\r\n    assertEquals(32, result);\r\n    result = script.execute(ctxt, (Object) null);\r\n    assertEquals(52, result);\r\n    script = jexl.createScript(\"- a??42 + +10\", \"a\");\r\n    result = script.execute(ctxt, 32);\r\n    assertEquals(-32, result);\r\n    result = script.execute(ctxt, (Object) null);\r\n    assertEquals(52, result);\r\n    // long version of ternary\r\n    script = jexl.createScript(\"a? a : +42 + 10\", \"a\");\r\n    result = script.execute(ctxt, 32);\r\n    assertEquals(32, result);\r\n    result = script.execute(ctxt, (Object) null);\r\n    assertEquals(52, result);\r\n    // short one, elvis, equivalent\r\n    script = jexl.createScript(\"a ?: +42 + 10\", \"a\");\r\n    result = script.execute(ctxt, 32);\r\n    assertEquals(32, result);\r\n    result = script.execute(ctxt, (Object) null);\r\n    assertEquals(52, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test317",
  "sourceCode" : "@Test\r\nvoid test317() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    JexlScript script;\r\n    Object result;\r\n    JexlInfo info = new JexlInfo(\"test317\", 1, 1);\r\n    // @formatter:off\r\n    script = jexl.createScript(info, \"var f = \" + \"()-> {x + x }; f\", \"x\");\r\n    // @formatter:on\r\n    result = script.execute(ctxt, 21);\r\n    assertInstanceOf(JexlScript.class, result);\r\n    script = (JexlScript) result;\r\n    info = JexlInfo.from(script);\r\n    assertNotNull(info);\r\n    assertEquals(\"test317\", info.getName());\r\n    result = script.execute(ctxt, 21);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test322a",
  "sourceCode" : "@Test\r\nvoid test322a() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    final JexlContext context = new MapContext();\r\n    final String[] ins = { \"${'{'}\", \"${\\\"{\\\"}\", \"${\\\"{}\\\"}\", \"${'{42}'}\", \"${\\\"{\\\\\\\"\\\\\\\"}\\\"}\" };\r\n    final String[] ctls = { \"{\", \"{\", \"{}\", \"{42}\", \"{\\\"\\\"}\" };\r\n    StringWriter strw;\r\n    JxltEngine.Template template;\r\n    String output;\r\n    for (int i = 0; i < ins.length; ++i) {\r\n        final String src = ins[i];\r\n        template = jxlt.createTemplate(\"$$\", new StringReader(src));\r\n        strw = new StringWriter();\r\n        template.evaluate(context, strw);\r\n        output = strw.toString();\r\n        assertEquals(ctls[i], output);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test322b",
  "sourceCode" : "@Test\r\nvoid test322b() {\r\n    final JexlContext ctxt = new MapContext();\r\n    final String src = \"L'utilisateur ${session.user.name} s'est connecte\";\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    StringWriter strw;\r\n    JxltEngine.Template template;\r\n    String output;\r\n    template = jxlt.createTemplate(\"$$\", new StringReader(src));\r\n    ctxt.set(\"session\", new Session322());\r\n    strw = new StringWriter();\r\n    template.evaluate(ctxt, strw);\r\n    output = strw.toString();\r\n    assertEquals(\"L'utilisateur user322 s'est connecte\", output);\r\n    ctxt.set(\"session.user\", new User322());\r\n    strw = new StringWriter();\r\n    template.evaluate(ctxt, strw);\r\n    output = strw.toString();\r\n    assertEquals(\"L'utilisateur user322 s'est connecte\", output);\r\n    ctxt.set(\"session.user.name\", \"user322\");\r\n    strw = new StringWriter();\r\n    template.evaluate(ctxt, strw);\r\n    output = strw.toString();\r\n    assertEquals(\"L'utilisateur user322 s'est connecte\", output);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test323",
  "sourceCode" : "@Test\r\nvoid test323() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    final Map<String, Object> vars = new HashMap<>();\r\n    final JexlContext jc = new MapContext(vars);\r\n    Object result;\r\n    // nothing in context, ex\r\n    final JexlScript script0 = jexl.createScript(\"a.n.t.variable\");\r\n    JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> script0.execute(jc), \"a.n.t.variable is undefined!\");\r\n    assertTrue(xvar.toString().contains(\"a.n.t\"));\r\n    // defined and null\r\n    jc.set(\"a.n.t.variable\", null);\r\n    final JexlScript script = jexl.createScript(\"a.n.t.variable\");\r\n    result = script.execute(jc);\r\n    assertNull(result);\r\n    // defined and null, dereference\r\n    jc.set(\"a.n.t\", null);\r\n    final JexlScript script1 = jexl.createScript(\"a.n.t[0].variable\");\r\n    xvar = assertThrows(JexlException.Variable.class, () -> script1.execute(jc), \"a.n.t is null!\");\r\n    assertTrue(xvar.toString().contains(\"a.n.t\"));\r\n    // undefined, dereference\r\n    vars.remove(\"a.n.t\");\r\n    final JexlScript script2 = jexl.createScript(\"a.n.t[0].variable\");\r\n    xvar = assertThrows(JexlException.Variable.class, () -> script2.execute(jc), \"a.n.t is undefined!\");\r\n    assertTrue(xvar.toString().contains(\"a.n.t\"));\r\n    // defined, derefence undefined property\r\n    final List<Object> inner = new ArrayList<>();\r\n    vars.put(\"a.n.t\", inner);\r\n    final JexlScript script3 = jexl.createScript(\"a.n.t[0].variable\");\r\n    JexlException.Property xprop = assertThrows(JexlException.Property.class, () -> script3.execute(jc), \"a.n.t is null!\");\r\n    assertTrue(xprop.toString().contains(\"0\"));\r\n    // defined, derefence undefined property\r\n    inner.add(42);\r\n    final JexlScript script4 = jexl.createScript(\"a.n.t[0].variable\");\r\n    xprop = assertThrows(JexlException.Property.class, () -> script4.execute(jc), \"a.n.t is null!\");\r\n    assertTrue(xprop.toString().contains(\"variable\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test324",
  "sourceCode" : "@Test\r\nvoid test324() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final String src42 = \"new('java.lang.Integer', 42)\";\r\n    final JexlExpression expr0 = jexl.createExpression(src42);\r\n    assertEquals(42, expr0.evaluate(null));\r\n    final String parsed = expr0.getParsedText();\r\n    assertEquals(src42, parsed);\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createExpression(\"new()\"), \"should not parse\");\r\n    assertTrue(xparse.toString().contains(\")\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test325",
  "sourceCode" : "@Test\r\nvoid test325() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    final Map<String, Object> map = new HashMap<String, Object>() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public Object get(final Object key) {\r\n            return super.get(key == null ? \"\" : key);\r\n        }\r\n\r\n        @Override\r\n        public Object put(final String key, final Object value) {\r\n            return super.put(key == null ? \"\" : key, value);\r\n        }\r\n    };\r\n    map.put(\"42\", 42);\r\n    final JexlContext jc = new MapContext();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"map[null] = 42\", \"map\");\r\n    result = script.execute(jc, map);\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"map[key]\", \"map\", \"key\");\r\n    result = script.execute(jc, map, null);\r\n    assertEquals(42, result);\r\n    result = script.execute(jc, map, \"42\");\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test330",
  "sourceCode" : "@Test\r\nvoid test330() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    // Extended form of: 'literal' + VARIABLE 'literal'\r\n    // missing + operator here ---------------^\r\n    // @formatter:off\r\n    final String longExpression = \"\" + //\r\n    \"'THIS IS A VERY VERY VERY VERY VERY VERY VERY \" + //\r\n    \"VERY VERY LONG STRING CONCATENATION ' + VARIABLE ' <--- \" + //\r\n    \"error: missing + between VARIABLE and literal'\";\r\n    // @formatter:on\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createExpression(longExpression), \"parsing malformed expression did not throw exception\");\r\n    assertTrue(xparse.getMessage().contains(\"VARIABLE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test331",
  "sourceCode" : "@Test\r\nvoid test331() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlContext ctxt = new MapContext();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"a + '\\\\n' + b\", \"a\", \"b\");\r\n    result = script.execute(ctxt, \"hello\", \"world\");\r\n    assertTrue(result.toString().contains(\"\\n\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test347",
  "sourceCode" : "@Test\r\nvoid test347() {\r\n    final String src = \"A.B == 5\";\r\n    JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    Object result = script.execute(null);\r\n    // safe navigation is lenient wrt null\r\n    assertFalse((Boolean) result);\r\n    jexl = new JexlBuilder().strict(true).safe(false).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlScript script1 = jexl.createScript(src);\r\n    // A and A.B undefined\r\n    assertThrows(JexlException.class, () -> script1.execute(ctxt));\r\n    // A is null, A.B is undefined\r\n    ctxt.set(\"A\", null);\r\n    assertThrows(JexlException.class, () -> script1.execute(ctxt), \"should only succeed with safe navigation\");\r\n    // A.B is null\r\n    ctxt.set(\"A.B\", null);\r\n    result = script1.execute(ctxt);\r\n    assertFalse((Boolean) result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test349",
  "sourceCode" : "@Test\r\nvoid test349() {\r\n    final String text = \"(A ? C.D : E)\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlExpression expr = jexl.createExpression(text);\r\n    final JexlScript script = jexl.createScript(text);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test361_33",
  "sourceCode" : "@Test\r\nvoid test361_33() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    assertThrows(JexlException.class, () -> run361c(jexl), \"null arg should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test361a_32",
  "sourceCode" : "@Test\r\nvoid test361a_32() {\r\n    final JexlEngine jexl = new Engine32(new JexlBuilder().safe(false));\r\n    final Object result = run361a(jexl);\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test361a_33",
  "sourceCode" : "@Test\r\nvoid test361a_33() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    assertThrows(JexlException.class, () -> run361a(jexl), \"null arg should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test361b_32",
  "sourceCode" : "@Test\r\nvoid test361b_32() {\r\n    final JexlEngine jexl = new Engine32(new JexlBuilder().safe(false).strict(false));\r\n    final Object result = run361b(jexl);\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test361b_33",
  "sourceCode" : "@Test\r\nvoid test361b_33() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    assertThrows(JexlException.class, () -> run361b(jexl), \"null arg should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test361c_32",
  "sourceCode" : "@Test\r\nvoid test361c_32() {\r\n    final JexlEngine jexl = new Engine32(new JexlBuilder().safe(false).strict(false));\r\n    final String result = run361c(jexl);\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test361d_32",
  "sourceCode" : "@Test\r\nvoid test361d_32() {\r\n    final JexlEngine jexl = new Engine32(new JexlBuilder().lexical(false).lexicalShade(false).safe(false));\r\n    final Object result = run361d(jexl);\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test361d_33",
  "sourceCode" : "@Test\r\nvoid test361d_33() {\r\n    final JexlEngine jexl = new JexlBuilder().lexical(true).lexicalShade(true).safe(false).strict(true).create();\r\n    assertThrows(JexlException.class, () -> run361d(jexl), \"null arg should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test367",
  "sourceCode" : "@Test\r\nvoid test367() {\r\n    final String text = \"var toto; function foo(x) { x }; var tata = 3; foo(3)\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(text);\r\n    final Object result = script.execute(null);\r\n    assertEquals(3, result);\r\n    final String s0 = script.getParsedText();\r\n    final String s1 = script.getSourceText();\r\n    assertNotEquals(s0, s1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test370",
  "sourceCode" : "@Test\r\nvoid test370() {\r\n    final Var370 var370 = new Var370();\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final ObjectContext<Var370> ctxt = new ObjectContext<>(jexl, var370);\r\n    final JexlExpression get = jexl.createExpression(\"name\");\r\n    // not null\r\n    var370.setName(\"John\");\r\n    assertEquals(\"John\", get.evaluate(ctxt));\r\n    assertTrue(ctxt.has(\"name\"));\r\n    // null\r\n    var370.setName(null);\r\n    assertNull(get.evaluate(ctxt));\r\n    assertTrue(ctxt.has(\"name\"));\r\n    // undefined\r\n    final JexlExpression get1 = jexl.createExpression(\"phone\");\r\n    assertFalse(ctxt.has(\"phone\"));\r\n    final JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> get1.evaluate(ctxt), \"phone should be undefined!\");\r\n    assertEquals(\"phone\", xvar.getVariable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test373b",
  "sourceCode" : "@Test\r\nvoid test373b() {\r\n    final String src = \"var i = ++1\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlInfo info = new JexlInfo(\"badscript\", 0, 0);\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(info, src), \"should not parse\");\r\n    assertTrue(xparse.getMessage().contains(\"badscript\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test374",
  "sourceCode" : "@Test\r\nvoid test374() {\r\n    final JexlEngine engine = new JexlBuilder().cache(512).strict(true).silent(false).antish(false).safe(false).create();\r\n    // Create expression to evaluate 'name'\r\n    final JexlExpression expr = engine.createExpression(\"nested.name\");\r\n    // Create an object with getter for name\r\n    final TestObject374 myObject = new TestObject374();\r\n    myObject.setName(\"John\");\r\n    final JexlContext context = new ObjectContext<>(engine, myObject);\r\n    // Expect an exception because nested is null, so we are doing null.name\r\n    assertThrows(JexlException.class, () -> expr.evaluate(context));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test375",
  "sourceCode" : "@Test\r\nvoid test375() {\r\n    final JexlSandbox jexlSandbox = new JexlSandbox(false);\r\n    jexlSandbox.allow(Type375.class.getName());\r\n    final JexlEngine engine = new JexlBuilder().sandbox(jexlSandbox).create();\r\n    final JexlContext context = new MapContext();\r\n    context.set(\"Type\", Type375.class);\r\n    Object result = engine.createScript(\"Type.valueOf('DOMICILE')\").execute(context);\r\n    assertEquals(Type375.DOMICILE, result);\r\n    result = engine.createScript(\"Type.DOMICILE\").execute(context);\r\n    assertEquals(Type375.DOMICILE, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test377",
  "sourceCode" : "@Test\r\nvoid test377() {\r\n    final String text = \"function add(x, y) { x + y } add(a, b)\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(text, \"a\", \"b\");\r\n    final Object result = script.execute(null, 20, 22);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test379a",
  "sourceCode" : "@Test\r\nvoid test379a() {\r\n    // @formatter:off\r\n    final String src = \"#pragma jexl.import java.util\\n\" + \"const map = new LinkedHashMap({0 : 'zero'});\";\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertNotNull(result);\r\n    assertInstanceOf(LinkedHashMap.class, result);\r\n    assertEquals(1, ((Map) result).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test383",
  "sourceCode" : "@Test\r\nvoid test383() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).arithmetic(new Arithmetic383(true)).create();\r\n    final String src0 = \"if (a) 1; else 2;\";\r\n    final String src1 = \"if (!a) 1; else 2;\";\r\n    // local var\r\n    final JexlScript s0 = jexl.createScript(src0, \"a\");\r\n    final JexlScript s1 = jexl.createScript(src1, \"a\");\r\n    assertEquals(2, s0.execute(null, (Object) null));\r\n    assertEquals(1, s1.execute(null, (Object) null));\r\n    // global var undefined\r\n    final JexlScript s2 = jexl.createScript(src0);\r\n    final JexlScript s3 = jexl.createScript(src1);\r\n    JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> s2.execute(null, (Object) null));\r\n    assertEquals(\"a\", xvar.getVariable());\r\n    xvar = assertThrows(JexlException.Variable.class, () -> s3.execute(null, (Object) null));\r\n    assertEquals(\"a\", xvar.getVariable());\r\n    // global var null\r\n    final MapContext ctxt = new MapContext();\r\n    ctxt.set(\"a\", null);\r\n    assertEquals(2, s2.execute(ctxt, (Object) null));\r\n    assertEquals(1, s3.execute(ctxt, (Object) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test384a",
  "sourceCode" : "@Test\r\nvoid test384a() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    // constant\r\n    for (final String src0 : Arrays.asList(\"'ABC' + null\", \"null + 'ABC'\")) {\r\n        final JexlContext ctxt = new MapContext();\r\n        final JexlScript s0 = jexl.createScript(src0);\r\n        final JexlException xvar = assertThrows(JexlException.class, () -> s0.execute(ctxt, (Object) null), \"null argument should throw\");\r\n        assertTrue(xvar.toString().contains(\"+\"));\r\n    }\r\n    // null local a\r\n    for (final String src1 : Arrays.asList(\"'ABC' + a\", \"a + 'ABC'\")) {\r\n        final JexlContext ctxt = new MapContext();\r\n        final JexlScript s1 = jexl.createScript(src1, \"a\");\r\n        JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> s1.execute(ctxt, (Object) null), \"null argument should throw\");\r\n        assertEquals(\"a\", xvar.getVariable());\r\n        // undefined a\r\n        final JexlScript s2 = jexl.createScript(src1);\r\n        xvar = assertThrows(JexlException.Variable.class, () -> s2.execute(ctxt, (Object) null), \"null argument should throw\");\r\n        assertEquals(\"a\", xvar.getVariable());\r\n        assertTrue(xvar.isUndefined());\r\n        // null a\r\n        ctxt.set(\"a\", null);\r\n        xvar = assertThrows(JexlException.Variable.class, () -> s2.execute(ctxt, (Object) null), \"null argument should throw\");\r\n        assertEquals(\"a\", xvar.getVariable());\r\n        assertFalse(xvar.isUndefined());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test384b",
  "sourceCode" : "@Test\r\nvoid test384b() {\r\n    // be explicit about + handling null\r\n    // @formatter:off\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new Arithmetic384(true)).safe(false).strict(true).create();\r\n    // @formatter:on\r\n    // constant\r\n    for (final String src0 : Arrays.asList(\"'ABC' + null\", \"null + 'ABC'\")) {\r\n        final JexlContext ctxt = new MapContext();\r\n        final JexlScript s0 = jexl.createScript(src0);\r\n        assertEquals(\"ABC\", s0.execute(ctxt));\r\n    }\r\n    // null local a\r\n    for (final String src1 : Arrays.asList(\"'ABC' + a\", \"a + 'ABC'\")) {\r\n        final JexlContext ctxt = new MapContext();\r\n        final JexlScript s1 = jexl.createScript(src1, \"a\");\r\n        assertEquals(\"ABC\", s1.execute(ctxt, (Object) null));\r\n        // undefined a\r\n        final JexlScript s2 = jexl.createScript(src1);\r\n        final JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> s2.execute(ctxt, (Object) null), \"null argument should throw\");\r\n        assertEquals(\"a\", xvar.getVariable());\r\n        assertTrue(xvar.isUndefined());\r\n        // null a\r\n        ctxt.set(\"a\", null);\r\n        assertEquals(\"ABC\", s1.execute(ctxt, (Object) null));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test384c",
  "sourceCode" : "@Test\r\nvoid test384c() {\r\n    final Arithmetic384c ja = new Arithmetic384c(true);\r\n    // @formatter:off\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).arithmetic(ja).create();\r\n    // @formatter:on\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"3 < 4\").evaluate(null)));\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"6 <= 8\").evaluate(null)));\r\n    assertFalse(ja.toBoolean(jexl.createExpression(\"6 == 7\").evaluate(null)));\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"4 > 2\").evaluate(null)));\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"8 > 6\").evaluate(null)));\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"7 != 6\").evaluate(null)));\r\n    assertEquals(6, ja.getCmpCalls());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test384d",
  "sourceCode" : "@Test\r\nvoid test384d() {\r\n    final Arithmetic384c ja = new Arithmetic384d(true);\r\n    // @formatter:off\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).arithmetic(ja).create();\r\n    // @formatter:on\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"3 < 4\").evaluate(null)));\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"6 <= 8\").evaluate(null)));\r\n    assertFalse(ja.toBoolean(jexl.createExpression(\"6 == 7\").evaluate(null)));\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"4 > 2\").evaluate(null)));\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"8 > 6\").evaluate(null)));\r\n    assertTrue(ja.toBoolean(jexl.createExpression(\"7 != 6\").evaluate(null)));\r\n    assertEquals(6, ja.getCmpCalls());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test390",
  "sourceCode" : "@Test\r\nvoid test390() throws Exception {\r\n    // @formatter:off\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).debug(true).create();\r\n    // @formatter:on\r\n    JexlScript script = null;\r\n    final String src = \"if (true) #pragma one 42\";\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(src), \"should have failed parsing\");\r\n    assertTrue(xparse.getDetail().contains(\"pragma\"));\r\n    final String src1 = \"if (true) { #pragma one 42 }\";\r\n    script = jexl.createScript(src1);\r\n    final Object result = script.execute(null);\r\n    debuggerCheck(jexl);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "test393",
  "sourceCode" : "@Test\r\nvoid test393() {\r\n    // @formatter:off\r\n    final String src = \"const total = 0;\\n\" + \"if (true) {\\n\" + \"  total = 1;\\n\" + \"}\\n\" + \"total; \";\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    // @formatter:on\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(src), \"should fail on const total assignment\");\r\n    assertTrue(xparse.getMessage().contains(\"total\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testBackslashes",
  "sourceCode" : "@Test\r\nvoid testBackslashes() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    final String src = \"\\\"\\b\\t\\f\\\"\";\r\n    JexlScript s = jexl.createScript(src);\r\n    assertNotNull(s);\r\n    final String ctl = \"\\b\\t\\f\";\r\n    assertEquals(ctl, s.execute(null));\r\n    String parsed = s.getParsedText();\r\n    assertEquals(\"'\\\\b\\\\t\\\\f'\", parsed);\r\n    s = jexl.createScript(src);\r\n    assertNotNull(s);\r\n    assertEquals(ctl, s.execute(null));\r\n    parsed = s.getParsedText();\r\n    assertEquals(\"'\\\\b\\\\t\\\\f'\", parsed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testDow",
  "sourceCode" : "@Test\r\nvoid testDow() {\r\n    // @formatter:off\r\n    final String src = \"(y, m, d)->{\\n\" + \"// will return 0 for Sunday, 6 for Saturday\\n\" + \"const t = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];\\n\" + \"if (m < 3) { --y }\\n\" + \"(y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;\\n\" + \"}\";\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    Object r = script.execute(null, 2023, 3, 1);\r\n    assertInstanceOf(Number.class, r);\r\n    Number dow = (Number) r;\r\n    assertEquals(3, dow.intValue());\r\n    r = script.execute(null, 1969, 7, 20);\r\n    assertInstanceOf(Number.class, r);\r\n    dow = (Number) r;\r\n    assertEquals(0, dow.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testIssue394",
  "sourceCode" : "@Test\r\nvoid testIssue394() {\r\n    final StringBuilder x = new StringBuilder(\"foobar\");\r\n    assertEquals(\"foobar\", x.toString());\r\n    final String src = \"x -> x.setLength(3)\";\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null, x);\r\n    assertEquals(\"foo\", x.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testIssue397",
  "sourceCode" : "@Test\r\nvoid testIssue397() {\r\n    String result;\r\n    final String control = Class397.class.getName();\r\n    final JexlEngine jexl = new JexlBuilder().permissions(RESTRICTED).create();\r\n    final Interface397i instance = new Class397();\r\n    result = (String) jexl.invokeMethod(instance, \"summary\");\r\n    assertEquals(control, result);\r\n    final Interface397i proxy = createProxy(jexl, instance, new Class[] { Interface397i.class });\r\n    result = (String) jexl.invokeMethod(proxy, \"summary\");\r\n    assertEquals(control, result);\r\n    final JexlScript script = jexl.createScript(\"dan.summary()\", \"dan\");\r\n    result = (String) script.execute(null, instance);\r\n    assertEquals(control, result);\r\n    result = (String) script.execute(null, proxy);\r\n    assertEquals(control, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testIssue398a",
  "sourceCode" : "@Test\r\nvoid testIssue398a() {\r\n    // @formatter:off\r\n    final String src = \"let m = {\\n\" + \"  \\\"foo\\\": 1,\\n\" + \"  \\\"bar\\\": 2,\\n\" + \"}\";\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null);\r\n    assertInstanceOf(Map.class, result);\r\n    final Map<?, ?> map = (Map<?, ?>) result;\r\n    assertEquals(2, map.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testIssue398b",
  "sourceCode" : "@Test\r\nvoid testIssue398b() {\r\n    final Map<String, Object> foo = Collections.singletonMap(\"X\", \"x\");\r\n    final Map<String, Object> bar = Collections.singletonMap(\"Y\", \"y\");\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"foo\", foo);\r\n    ctxt.set(\"bar\", bar);\r\n    // @formatter:off\r\n    final String src = \"let m = {\\n\" + \"  foo.X: 1,\\n\" + \"  bar.Y: 2,\\n\" + \"}\";\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    JexlScript script = jexl.createScript(src);\r\n    Object result = script.execute(ctxt);\r\n    assertInstanceOf(Map.class, result);\r\n    Map<?, ?> map = (Map<?, ?>) result;\r\n    assertEquals(2, map.size());\r\n    assertEquals(1, map.get(\"x\"));\r\n    assertEquals(2, map.get(\"y\"));\r\n    script = jexl.createScript(src, \"foo\", \"bar\");\r\n    result = script.execute(null, foo, bar);\r\n    assertInstanceOf(Map.class, result);\r\n    map = (Map<?, ?>) result;\r\n    assertEquals(2, map.size());\r\n    assertEquals(1, map.get(\"x\"));\r\n    assertEquals(2, map.get(\"y\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testIssue398c",
  "sourceCode" : "@Test\r\nvoid testIssue398c() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final Object empty = jexl.createScript(\"[,...]\").execute(null);\r\n    assertNotNull(empty);\r\n    assertTrue(jexl.createScript(\"[1]\").execute(null) instanceof int[]);\r\n    assertTrue(jexl.createScript(\"[1,...]\").execute(null) instanceof ArrayList<?>);\r\n    assertTrue(jexl.createScript(\"{1}\").execute(null) instanceof HashSet<?>);\r\n    assertTrue(jexl.createScript(\"{1,...}\").execute(null) instanceof LinkedHashSet<?>);\r\n    assertTrue(jexl.createScript(\"{'one': 1}\").execute(null) instanceof HashMap<?, ?>);\r\n    assertTrue(jexl.createScript(\"{'one': 1,...}\").execute(null) instanceof LinkedHashMap<?, ?>);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testPropagateOptions",
  "sourceCode" : "@Test\r\nvoid testPropagateOptions() {\r\n    // @formatter:off\r\n    final String src0 = \"`${$options.strict?'+':'-'}strict\" + \" ${$options.cancellable?'+':'-'}cancellable\" + \" ${$options.lexical?'+':'-'}lexical\" + \" ${$options.lexicalShade?'+':'-'}lexicalShade\" + \" ${$options.sharedInstance?'+':'-'}sharedInstance\" + \" ${$options.safe?'+':'-'}safe`\";\r\n    // @formatter:on\r\n    final String text = \"#pragma script.mode pro50\\n\" + \"()->{ ()->{ \" + src0 + \"; } }\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(text);\r\n    JexlContext context = pragmaticContext();\r\n    final JexlScript closure = (JexlScript) script.execute(context);\r\n    final JexlContext opts = new OptionsContext();\r\n    final Object result = closure.execute(opts);\r\n    assertEquals(\"+strict +cancellable +lexical +lexicalShade -sharedInstance -safe\", result);\r\n    final String text0 = \"#pragma script.mode pro50\\n\" + \"()->{ \" + src0 + \"; }\";\r\n    final JexlScript script0 = jexl.createScript(text0);\r\n    context = pragmaticContext();\r\n    final Object result0 = script0.execute(context);\r\n    assertEquals(\"+strict +cancellable +lexical +lexicalShade -sharedInstance -safe\", result0);\r\n    final String text1 = \"#pragma script.mode pro50\\n\" + src0;\r\n    final JexlScript script1 = jexl.createScript(text1);\r\n    context = pragmaticContext();\r\n    final Object result1 = script1.execute(context);\r\n    assertEquals(\"+strict +cancellable +lexical +lexicalShade -sharedInstance -safe\", result1);\r\n    final String text2 = src0;\r\n    final JexlScript script2 = jexl.createScript(text2);\r\n    context = pragmaticContext();\r\n    final Object result2 = script2.execute(context);\r\n    assertEquals(\"-strict -cancellable -lexical -lexicalShade +sharedInstance +safe\", result2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "tests301b",
  "sourceCode" : "@Test\r\nvoid tests301b() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).arithmetic(new JexlArithmetic(false)).create();\r\n    final Object[] xs = { null, null, new Object[] { null, 1 } };\r\n    final String[] srcs = { \"x.0\", \"x[0]\", \"x[0][0]\" };\r\n    final JexlContext ctxt = new MapContext();\r\n    for (int i = 0; i < xs.length; ++i) {\r\n        ctxt.set(\"x\", xs[i]);\r\n        final String src = srcs[i];\r\n        final JexlScript s = jexl.createScript(src);\r\n        assertThrows(JexlException.class, () -> s.execute(null));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testSO20220930",
  "sourceCode" : "@Test\r\nvoid testSO20220930() {\r\n    // fill some drivers in a list\r\n    final List<Driver0930> values = new ArrayList<>();\r\n    for (int i = 0; i < 8; ++i) {\r\n        values.add(new Driver0930(\"drvr\" + Integer.toOctalString(i)));\r\n    }\r\n    for (int i = 0; i < 4; ++i) {\r\n        values.add(new Driver0930(\"favorite\" + Integer.toOctalString(i)));\r\n    }\r\n    // Use a context that can filter and that exposes Collectors\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    final JexlContext context = new Context0930();\r\n    context.set(\"values\", values);\r\n    context.set(\"Collectors\", Collectors.class);\r\n    // The script with a JEXL 3.2 (lambda function) and 3.3 syntax (lambda expression)\r\n    final String src32 = \"values.stream().filter((driver) ->{ driver.attributeName =^ 'favorite' }).collect(Collectors.toList())\";\r\n    final String src33 = \"values.stream().filter(driver -> driver.attributeName =^ 'favorite').collect(Collectors.toList())\";\r\n    for (final String src : Arrays.asList(src32, src33)) {\r\n        final JexlExpression s = jexl.createExpression(src);\r\n        assertNotNull(s);\r\n        final Object r = s.evaluate(context);\r\n        assertNotNull(r);\r\n        // got a filtered list of 4 drivers whose attribute name starts with 'favorite'\r\n        final List<Driver0930> l = (List<Driver0930>) r;\r\n        assertEquals(4, l.size());\r\n        for (final Driver0930 d : l) {\r\n            assertTrue(d.getAttributeName().startsWith(\"favorite\"));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues300Test.java",
  "methodName" : "testUnsolvableMethod",
  "sourceCode" : "@Test\r\nvoid testUnsolvableMethod() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    // @formatter:off\r\n    final JexlScript script = jexl.createScript(\"var myFunction1 = function(object) {\" + \" myNonExistentFunction();\" + \"}\" + \"var myFunction2 = function(object) {\" + \" myFunction1();\" + \"}\" + \"myFunction2();\");\r\n    // @formatter:on\r\n    final JexlException.Method unsolvable = assertThrows(JexlException.Method.class, () -> script.execute(new MapContext()));\r\n    assertEquals(\"myNonExistentFunction\", unsolvable.getMethod());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test402",
  "sourceCode" : "@Test\r\nvoid test402() {\r\n    final JexlContext jc = new MapContext();\r\n    // @formatter:off\r\n    final String[] sources = { \"if (true) { return }\", \"if (true) { 3; return }\", \"(x->{ 3; return })()\" };\r\n    // @formatter:on\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    for (final String source : sources) {\r\n        final JexlScript e = jexl.createScript(source);\r\n        final Object o = e.execute(jc);\r\n        assertNull(o);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test403",
  "sourceCode" : "@Test\r\nvoid test403() {\r\n    // @formatter:off\r\n    final String[] strings = { \"  map1.`${item.a}` = 1;\\n\", \"  map1[`${item.a}`] = 1;\\n\", \"  map1[item.a] = 1;\\n\" };\r\n    // @formatter:on\r\n    for (final String setmap : strings) {\r\n        // @formatter:off\r\n        final String src = \"var a = {'a': 1};\\n\" + \"var list = [a, a];\\n\" + \"let map1 = {:};\\n\" + \"for (let item : list) {\\n\" + setmap + \"}\\n \" + \"map1\";\r\n        // @formatter:on\r\n        final JexlEngine jexl = new JexlBuilder().cache(64).create();\r\n        final JexlScript script = jexl.createScript(src);\r\n        for (int i = 0; i < 2; ++i) {\r\n            final Object result = script.execute(null);\r\n            assertInstanceOf(Map.class, result);\r\n            final Map<?, ?> map = (Map<?, ?>) result;\r\n            assertEquals(1, map.size());\r\n            final Object val = jexl.createScript(\"m -> m[1]\").execute(null, map);\r\n            assertEquals(1, val);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test404a",
  "sourceCode" : "@Test\r\nvoid test404a() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(64).strict(true).safe(false).create();\r\n    Map<String, Object> a = Collections.singletonMap(\"b\", 42);\r\n    // access is constant\r\n    for (final String src : new String[] { \"a.b\", \"a?.b\", \"a['b']\", \"a?['b']\", \"a?.`b`\" }) {\r\n        run404(jexl, src, a);\r\n        run404(jexl, src + \";\", a);\r\n    }\r\n    // access is variable\r\n    for (final String src : new String[] { \"a[b]\", \"a?[b]\", \"a?.`${b}`\" }) {\r\n        run404(jexl, src, a, \"b\");\r\n        run404(jexl, src + \";\", a, \"b\");\r\n    }\r\n    // add a 3rd access\r\n    final Map<String, Object> b = Collections.singletonMap(\"c\", 42);\r\n    a = Collections.singletonMap(\"b\", b);\r\n    for (final String src : new String[] { \"a[b].c\", \"a?[b]?['c']\", \"a?.`${b}`.c\" }) {\r\n        run404(jexl, src, a, \"b\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test404b",
  "sourceCode" : "@Test\r\nvoid test404b() {\r\n    // @formatter:off\r\n    final JexlEngine jexl = new JexlBuilder().cache(64).strict(true).safe(false).create();\r\n    // @formatter:on\r\n    final Map<String, Object> b = Collections.singletonMap(\"c\", 42);\r\n    final Map<String, Object> a = Collections.singletonMap(\"b\", b);\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"a?['B']?['C']\", \"a\");\r\n    result = script.execute(null, a);\r\n    assertEquals(script.getSourceText(), script.getParsedText());\r\n    assertNull(result);\r\n    script = jexl.createScript(\"a?['b']?['C']\", \"a\");\r\n    assertEquals(script.getSourceText(), script.getParsedText());\r\n    result = script.execute(null, a);\r\n    assertNull(result);\r\n    script = jexl.createScript(\"a?['b']?['c']\", \"a\");\r\n    assertEquals(script.getSourceText(), script.getParsedText());\r\n    result = script.execute(null, a);\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"a?['B']?['C']?: 1042\", \"a\");\r\n    assertEquals(script.getSourceText(), script.getParsedText());\r\n    result = script.execute(null, a);\r\n    assertEquals(1042, result);\r\n    // can still do ternary, note the space between ? and [\r\n    script = jexl.createScript(\"a? ['B']:['C']\", \"a\");\r\n    result = script.execute(null, a);\r\n    assertArrayEquals(new String[] { \"B\" }, (String[]) result);\r\n    script = jexl.createScript(\"a?['b'] ?: ['C']\", \"a\");\r\n    result = script.execute(null, a);\r\n    assertEquals(b, result);\r\n    script = jexl.createScript(\"a?['B'] ?: ['C']\", \"a\");\r\n    result = script.execute(null, a);\r\n    assertArrayEquals(new String[] { \"C\" }, (String[]) result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test406a",
  "sourceCode" : "@Test\r\nvoid test406a() {\r\n    // @formatter:off\r\n    final JexlEngine jexl = new JexlBuilder().cache(64).strict(true).safe(false).create();\r\n    // @formatter:on\r\n    final JexlContext context = new XuContext();\r\n    // @formatter:off\r\n    final List<String> list = Arrays.asList(// List<Integer>\r\n    \"[1, 2, 3, 4, ...].join('-')\", // int[]\r\n    \"[1, 2, 3, 4,].join('-')\", // iterable<Integer>\r\n    \"(1 .. 4).join('-')\", \"join([1, 2, 3, 4, ...], '-')\", \"join([1, 2, 3, 4], '-')\", \"join((1 .. 4), '-')\");\r\n    // @formatter:on\r\n    for (final String src : list) {\r\n        final JexlScript script = jexl.createScript(src);\r\n        final Object result = script.execute(context);\r\n        assertEquals(\"1-2-3-4\", result, src);\r\n    }\r\n    final String src0 = \"x.join('*')\";\r\n    final JexlScript script0 = jexl.createScript(src0, \"x\");\r\n    final String src1 = \"join(x, '*')\";\r\n    final JexlScript script1 = jexl.createScript(src1, \"x\");\r\n    for (final Object x : Arrays.asList(Arrays.asList(1, 2, 3, 4), new int[] { 1, 2, 3, 4 })) {\r\n        Object result = script0.execute(context, x);\r\n        assertEquals(\"1*2*3*4\", result, src0);\r\n        result = script1.execute(context, x);\r\n        assertEquals(\"1*2*3*4\", result, src1);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test407",
  "sourceCode" : "@Test\r\nvoid test407() {\r\n    // Java version\r\n    final double r = 99.0d + 7.82d - 99.0d - 7.82d;\r\n    // Not zero, IEEE 754\r\n    assertEquals(0d, r, 8.e-15);\r\n    // jexl\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript script = jexl.createScript(\"a + b - a - b\", \"a\", \"b\");\r\n    // using doubles, same as Java\r\n    Number result = (Number) script.execute(null, 99.0d, 7.82d);\r\n    assertEquals(0d, result.doubleValue(), 8.e-15);\r\n    // using BigdDecimal, more precise, still not zero\r\n    result = (Number) script.execute(null, new BigDecimal(\"99.0\"), new BigDecimal(\"7.82\"));\r\n    assertEquals(0d, result.doubleValue(), 3.e-32);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test412",
  "sourceCode" : "@Test\r\nvoid test412() {\r\n    final Map<Object, Object> ctl = new HashMap<>();\r\n    ctl.put(\"one\", 1);\r\n    ctl.put(\"two\", 2);\r\n    final String fnsrc0 = \"function f(x) { x }\\n\" + \"let one = 'one', two = 'two';\\n\";\r\n    // @formatter:off\r\n    final List<String> list = Arrays.asList(\"{ one : f(1), two:f(2) }\", \"{ one: f(1), two: f(2) }\", \"{ one: f(1), two:f(2) }\", \"{ one :f(1), two:f(2) }\");\r\n    // @formatter:on\r\n    for (final String map0 : list) {\r\n        final String fnsrc = fnsrc0 + map0;\r\n        final JexlContext jc = new MapContext();\r\n        final JexlEngine jexl = new JexlBuilder().create();\r\n        final JexlScript e = jexl.createScript(fnsrc);\r\n        final Object o = e.execute(jc);\r\n        assertInstanceOf(Map.class, o);\r\n        final Map<?, ?> map = (Map<?, ?>) o;\r\n        assertEquals(map, ctl);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test413a",
  "sourceCode" : "@Test\r\nvoid test413a() {\r\n    final JexlBuilder builder = new JexlBuilder();\r\n    final JexlEngine jexl = builder.create();\r\n    final JexlScript script = jexl.createScript(\"var c = 42; var f = y -> c += y; f(z)\", \"z\");\r\n    final Number result = (Number) script.execute(null, 12);\r\n    assertEquals(54, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test413b",
  "sourceCode" : "@Test\r\nvoid test413b() {\r\n    final JexlBuilder builder = new JexlBuilder();\r\n    final JexlOptions options = builder.options();\r\n    options.setConstCapture(true);\r\n    options.setLexical(true);\r\n    final JexlEngine jexl = builder.create();\r\n    final JexlScript script = jexl.createScript(\"var c = 42; var f = y -> c += y; f(z)\", \"z\");\r\n    final JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> script.execute(null, 12), \"c should be const\");\r\n    assertEquals(\"c\", xvar.getVariable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test413c",
  "sourceCode" : "@Test\r\nvoid test413c() {\r\n    final JexlBuilder builder = new JexlBuilder();\r\n    final JexlEngine jexl = builder.create();\r\n    final JexlScript script = jexl.createScript(\"#pragma jexl.options '+constCapture'\\nvar c = 42; var f = y -> c += y; f(z)\", \"z\");\r\n    final JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> script.execute(null, 12), \"c should be const\");\r\n    assertEquals(\"c\", xvar.getVariable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test413d",
  "sourceCode" : "@Test\r\nvoid test413d() {\r\n    final JexlBuilder builder = new JexlBuilder().features(new JexlFeatures().constCapture(true));\r\n    final JexlEngine jexl = builder.create();\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(\"var c = 42; var f = y -> c += y; f(z)\", \"z\"), \"c should be const\");\r\n    assertTrue(xparse.getMessage().contains(\"const\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test415",
  "sourceCode" : "@Test\r\nvoid test415() {\r\n    final JexlBuilder builder = new JexlBuilder().features(new JexlFeatures().constCapture(true));\r\n    final JexlEngine jexl = builder.create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"`#${c}`\", \"c\");\r\n    result = script.execute(null, 42);\r\n    assertEquals(\"#42\", result.toString());\r\n    script = jexl.createScript(\"`$${c}`\", \"c\");\r\n    result = script.execute(null, 42);\r\n    assertEquals(\"$42\", result.toString());\r\n    script = jexl.createScript(\"`$#{c}`\", \"c\");\r\n    result = script.execute(null, 42);\r\n    assertEquals(\"$42\", result.toString());\r\n    script = jexl.createScript(\"`##{c}`\", \"c\");\r\n    result = script.execute(null, 42);\r\n    assertEquals(\"#42\", result.toString());\r\n    script = jexl.createScript(\"`--##{c}`\", \"c\");\r\n    result = script.execute(null, 42);\r\n    assertEquals(\"--#42\", result.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test419",
  "sourceCode" : "@Test\r\nvoid test419() throws NoSuchMethodException {\r\n    // check RESTRICTED permissions denies call to System::currentTimeMillis()\r\n    final Method currentTimeMillis = System.class.getMethod(\"currentTimeMillis\");\r\n    assertFalse(RESTRICTED.allow(currentTimeMillis));\r\n    // compose using a positive class permission to allow just System::currentTimeMillis()\r\n    final JexlPermissions permissions = RESTRICTED.compose(\"java.lang { +System { currentTimeMillis(); } }\");\r\n    // check no side effect on compose\r\n    assertTrue(permissions.allow(currentTimeMillis));\r\n    assertFalse(RESTRICTED.allow(currentTimeMillis));\r\n    // An engine with the System class as namespace and the positive permissions\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(Collections.singletonMap(\"sns\", System.class)).permissions(permissions).create();\r\n    final AtomicLong result = new AtomicLong();\r\n    assertEquals(0, result.get());\r\n    final long now = System.currentTimeMillis();\r\n    // calling System::currentTimeMillis() is allowed and behaves as expected\r\n    jexl.createScript(\"result.set(sns:currentTimeMillis())\", \"result\").execute(null, result);\r\n    assertTrue(result.get() >= now);\r\n    // we still cant call anything else\r\n    final JexlScript script = jexl.createScript(\"sns:gc()\");\r\n    final JexlException.Method method = assertThrows(JexlException.Method.class, () -> script.execute(null));\r\n    assertEquals(\"gc\", method.getMethod());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "testDocBreakContinue",
  "sourceCode" : "@Test\r\nvoid testDocBreakContinue() {\r\n    final JexlBuilder builder = new JexlBuilder().features(new JexlFeatures().constCapture(true));\r\n    final JexlEngine jexl = builder.create();\r\n    JexlScript script;\r\n    Object result;\r\n    // @formatter:off\r\n    final String srcContinue = \"let text = '';\\n\" + \"for (let i : (4..2)) { if (i == 3) continue; text += i; }\\n\" + \"text;\";\r\n    // @formatter:on\r\n    script = jexl.createScript(srcContinue);\r\n    result = script.execute(null);\r\n    assertEquals(\"42\", result);\r\n    // @formatter:off\r\n    final String srcBreak = \"let i = 33;\\n\" + \"while (i < 66) { if (i == 42) { break; } i += 1; }\\n\" + \"i;\";\r\n    // @formatter:on\r\n    script = jexl.createScript(srcBreak);\r\n    result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "testNamespaceVsTernary0",
  "sourceCode" : "@Test\r\nvoid testNamespaceVsTernary0() {\r\n    final VinzContext ctxt = new VinzContext();\r\n    ctxt.set(\"Users\", \"USERS\");\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).silent(false).create();\r\n    // @formatter:off\r\n    JexlScript script = jexl.createScript(\"() -> {\\n\" + \"  var fn = (user) -> {\\n\" + \"     user ? user : member(Users, 'user');\\n\" + \"  }\\n\" + \"}\");\r\n    // @formatter:on\r\n    Object r = script.execute(ctxt);\r\n    assertNotNull(r);\r\n    script = (JexlScript) r;\r\n    r = script.execute(ctxt);\r\n    assertEquals(\"USERS.user\", r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "testNamespaceVsTernary1",
  "sourceCode" : "@Test\r\nvoid testNamespaceVsTernary1() {\r\n    final VinzContext ctxt = new VinzContext();\r\n    ctxt.set(\"Users\", \"USERS\");\r\n    ctxt.set(\"vinz\", new VinzCaller(ctxt));\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).silent(false).create();\r\n    // @formatter:off\r\n    final JexlScript script = jexl.createScript(\"vinz.execute(() -> {\\n\" + \"  var test = 42;\\n\" + \"  var user = useTest ? test : member(Users, 'user');\\n\" + \"})\\n\", \"useTest\");\r\n    // @formatter:on\r\n    Object r = script.execute(ctxt, false);\r\n    assertNotNull(r);\r\n    assertEquals(\"USERS.user\", r);\r\n    r = script.execute(ctxt, true);\r\n    assertNotNull(r);\r\n    assertEquals(42, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test429a",
  "sourceCode" : "@Test\r\nvoid test429a() {\r\n    final MapContext ctxt = new MapContext();\r\n    final JexlFeatures features = JexlFeatures.createDefault();\r\n    final JexlEngine jexl = new JexlBuilder().features(features).safe(false).strict(true).silent(false).create();\r\n    final JexlScript f = jexl.createScript(\"x -> x\");\r\n    ctxt.set(\"f\", f);\r\n    String src = \"#pragma jexl.namespace.b \" + Ns429.class.getName() + \"\\n\" + \"b ? b : f(2);\";\r\n    JexlScript script = jexl.createScript(src, \"b\");\r\n    assertEquals(1, (int) script.execute(ctxt, 1));\r\n    src = \"#pragma jexl.namespace.b \" + Ns429.class.getName() + \"\\n\" + \"b ? b:f(2) : 1;\";\r\n    script = jexl.createScript(src, \"b\");\r\n    assertEquals(20042, (int) script.execute(ctxt, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test429b",
  "sourceCode" : "@Test\r\nvoid test429b() {\r\n    final MapContext ctxt = new MapContext();\r\n    ctxt.set(\"b\", 1);\r\n    final JexlFeatures features = JexlFeatures.createDefault();\r\n    features.namespaceIdentifier(true);\r\n    final JexlEngine jexl = new JexlBuilder().features(features).safe(false).strict(true).silent(false).create();\r\n    final JexlScript f = jexl.createScript(\"x -> x\");\r\n    ctxt.set(\"f\", f);\r\n    String src = \"#pragma jexl.namespace.b \" + Ns429.class.getName() + \"\\n\" + \"b ? b : f(2);\";\r\n    JexlScript script = jexl.createScript(src);\r\n    assertEquals(1, (int) script.execute(ctxt));\r\n    src = \"#pragma jexl.namespace.b \" + Ns429.class.getName() + \"\\n\" + \"b ? b:f(2) : 1;\";\r\n    script = jexl.createScript(src);\r\n    assertEquals(20042, (int) script.execute(ctxt));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test431a",
  "sourceCode" : "@Test\r\nvoid test431a() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final String src = \"let x = 0; try { x += 19 } catch (let error) { return 169 } try { x += 23 } catch (let error) { return 169 }\";\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test431b",
  "sourceCode" : "@Test\r\nvoid test431b() {\r\n    JexlEngine jexl = new JexlBuilder().create();\r\n    final String src = \"let x = 0; try(let error) { x += 19 } catch (let error) { return 169 } try { x += 23 } catch (let error) { return 169 }\";\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test431c",
  "sourceCode" : "@Test\r\nvoid test431c() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final String src = \"let xx = 0; try { xx += 19 } catch (let xx) { return 169 }\";\r\n    try {\r\n        final JexlScript script = jexl.createScript(src);\r\n        fail(\"xx is already defined in scope\");\r\n    } catch (final JexlException.Parsing parsing) {\r\n        assertTrue(parsing.getDetail().contains(\"xx\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test433",
  "sourceCode" : "@Test\r\nvoid test433() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final String src = \"let condition = true; if (condition) { return; }\";\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertNull(result);\r\n    final Debugger debugger = new Debugger();\r\n    assertTrue(debugger.debug(script));\r\n    final String dbgStr = debugger.toString();\r\n    assertTrue(JexlTestCase.equalsIgnoreWhiteSpace(src, dbgStr));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test434",
  "sourceCode" : "@Test\r\nvoid test434() {\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    final String src = \"let foo = null; let value = foo?[bar]\";\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test435",
  "sourceCode" : "@Test\r\nvoid test435() {\r\n    final JexlArithmetic arithmetic = new Arithmetic435(true);\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(arithmetic).create();\r\n    final String src = \"empty('list')\";\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertInstanceOf(List.class, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test436a",
  "sourceCode" : "@Test\r\nvoid test436a() {\r\n    final String[] srcs = { \"let i = null; ++i\", \"let i; ++i;\", \"let i; i--;\", \"let i; i++;\" };\r\n    run436(null, srcs);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test436b",
  "sourceCode" : "@Test\r\nvoid test436b() {\r\n    final String[] srcs = { \"var i = null; ++i\", \"var i; ++i;\", \"var i; i--;\", \"var i; i++;\" };\r\n    run436(null, srcs);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test436c",
  "sourceCode" : "@Test\r\nvoid test436c() {\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"i\", null);\r\n    final String[] srcs = { \"++i\", \"++i;\", \"i--;\", \"i++;\" };\r\n    run436(null, srcs);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test437a",
  "sourceCode" : "@Test\r\nvoid test437a() {\r\n    JexlEngine jexl = new JexlBuilder().create();\r\n    final String src = \"let values = [...]\\n\" + \"function append(const value) {\\n\" + \"  values.add(value)\\n\" + \"}\\n\" + \"\\n\" + \"append(1)\\n\" + \"append(2)\\n\" + \"return values \";\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertInstanceOf(List.class, result);\r\n    List<?> values = (List<?>) result;\r\n    assertEquals(2, values.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test437b",
  "sourceCode" : "@Test\r\nvoid test437b() {\r\n    JexlFeatures features = JexlFeatures.createDefault().ambiguousStatement(true);\r\n    assertTrue(features.supportsAmbiguousStatement());\r\n    JexlEngine jexl = new JexlBuilder().features(features).create();\r\n    final String src = \"let values = [...]\" + \"function append(const value) {\" + \"  values.add(value)\" + \"}\" + \"append(1)\" + \"append(2)\" + \"return values \";\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertInstanceOf(List.class, result);\r\n    List<?> values = (List<?>) result;\r\n    assertEquals(2, values.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "testSQLTranspose",
  "sourceCode" : "@Test\r\nvoid testSQLTranspose() {\r\n    final String[] e = { \"a<>b\", \"a = 2\", \"a.b.c <> '1<>0'\" };\r\n    final String[] j = { \"a!=b\", \"a == 2\", \"a.b.c != '1<>0'\" };\r\n    for (int i = 0; i < e.length; ++i) {\r\n        final String je = transcodeSQLExpr(e[i]);\r\n        Assertions.assertEquals(j[i], je);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "testSQLNoChange",
  "sourceCode" : "@Test\r\nvoid testSQLNoChange() {\r\n    final String[] e = { \"a <= 2\", \"a >= 2\", \"a := 2\", \"a + 3 << 4 > 5\" };\r\n    for (final String element : e) {\r\n        final String je = transcodeSQLExpr(element);\r\n        Assertions.assertEquals(element, je);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "test438",
  "sourceCode" : "@Test\r\nvoid test438() {\r\n    // no local, no lambda, no loops, no-side effects\r\n    final JexlFeatures f = new JexlFeatures().localVar(false).lambda(false).loops(false).sideEffect(false).sideEffectGlobal(false);\r\n    final JexlBuilder builder = new JexlBuilder().parserFactory(SQLParser::new).cache(32).features(f);\r\n    final JexlEngine sqle = builder.create();\r\n    Assertions.assertTrue((boolean) sqle.createScript(\"a <> 25\", \"a\").execute(null, 24));\r\n    Assertions.assertFalse((boolean) sqle.createScript(\"a <> 25\", \"a\").execute(null, 25));\r\n    Assertions.assertFalse((boolean) sqle.createScript(\"a = 25\", \"a\").execute(null, 24));\r\n    Assertions.assertTrue((boolean) sqle.createScript(\"a != 25\", \"a\").execute(null, 24));\r\n    Assertions.assertTrue((boolean) sqle.createScript(\"a = 25\", \"a\").execute(null, 25));\r\n    Assertions.assertFalse((boolean) sqle.createScript(\"a != 25\", \"a\").execute(null, 25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "testIssue441",
  "sourceCode" : "@Test\r\nvoid testIssue441() {\r\n    JexlEngine jexl = new JexlBuilder().create();\r\n    String ctl = \"\\nab\\nc`d\\n\";\r\n    JexlExpression e = jexl.createExpression(\"`\\nab\\nc\\\\`d\\n`\");\r\n    Object o = e.evaluate(null);\r\n    Assertions.assertEquals(ctl, o);\r\n    JexlContext context = new MapContext();\r\n    context.set(\"name\", \"Hello\");\r\n    String code = \"return `${name + '\\\\n' + name}`;\";\r\n    JexlScript script = jexl.createScript(code);\r\n    o = script.execute(context);\r\n    ctl = \"Hello\\nHello\";\r\n    Assertions.assertEquals(ctl, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\Issues400Test.java",
  "methodName" : "testIssue442",
  "sourceCode" : "@Test\r\nvoid testIssue442() {\r\n    JexlEngine jexl = new JexlBuilder().create();\r\n    JexlContext context = new MapContext();\r\n    String code = \"var x = 'hello';\\n\" + \"function test(z) {\\n\" + //\"x + ' ' + z\\n\"+\r\n    \"`${x} ${z}`;\\n\" + \"}\\n\" + \"test('world');\";\r\n    JexlScript script = jexl.createScript(code);\r\n    Object result = script.execute(context);\r\n    Assertions.assertEquals(\"hello world\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test11",
  "sourceCode" : "// JEXL-10/JEXL-11: variable checking, null operand is error\r\n@Test\r\nvoid test11() throws Exception {\r\n    final JexlEngine jexl = createEngine(false);\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    options.setStrict(true);\r\n    ctxt.set(\"a\", null);\r\n    final String[] exprs = { //\"10 + null\",\r\n    //\"a - 10\",\r\n    //\"b * 10\",\r\n    //,\r\n    \"a % b\" //\"1000 / a\"\r\n    };\r\n    for (final String s : exprs) {\r\n        final JexlExpression expr = jexl.createExpression(s);\r\n        assertThrows(JexlException.class, () -> expr.evaluate(ctxt), () -> s + \" : should have failed due to null argument\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test40",
  "sourceCode" : "@Test\r\nvoid test40() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.set(jexl);\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    ctxt.set(\"derived\", new Derived());\r\n    final JexlExpression expr = jexl.createExpression(\"derived.foo()\");\r\n    final Object value = expr.evaluate(ctxt);\r\n    assertTrue((Boolean) value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test42",
  "sourceCode" : "// JEXL-42: NullPointerException evaluating an expression\r\n// fixed in JexlArithmetic by allowing add operator to deal with string, null\r\n@Test\r\nvoid test42() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JxltEngine uel = jexl.createJxltEngine();\r\n    // ensure errors will throw\r\n    //jexl.setSilent(false);\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.set(jexl);\r\n    options.setStrict(false);\r\n    options.setStrictArithmetic(false);\r\n    ctxt.set(\"ax\", \"ok\");\r\n    final JxltEngine.Expression expr = uel.createExpression(\"${ax+(bx)}\");\r\n    final Object value = expr.evaluate(ctxt);\r\n    assertEquals(\"ok\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test44",
  "sourceCode" : "// JEXL-44\r\n@Test\r\nvoid test44() throws Exception {\r\n    final JexlEngine jexl = createEngine(false);\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    JexlScript script;\r\n    script = jexl.createScript(\"'hello world!'//commented\");\r\n    assertEquals(\"hello world!\", script.execute(ctxt));\r\n    script = jexl.createScript(\"'hello world!'; //commented\\n'bye...'\");\r\n    assertEquals(\"bye...\", script.execute(ctxt));\r\n    script = jexl.createScript(\"'hello world!'## commented\");\r\n    assertEquals(\"hello world!\", script.execute(ctxt));\r\n    script = jexl.createScript(\"'hello world!';## commented\\n'bye...'\");\r\n    assertEquals(\"bye...\", script.execute(ctxt));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test47",
  "sourceCode" : "// JEXL-47: C style comments (single & multi line) (fixed in Parser.jjt)\r\n// JEXL-44: comments don't allow double quotes (fixed in Parser.jjt)\r\n@Test\r\nvoid test47() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    JexlExpression expr = jexl.createExpression(\"true//false\\n\");\r\n    Object value = expr.evaluate(ctxt);\r\n    assertTrue((Boolean) value);\r\n    expr = jexl.createExpression(\"/*true*/false\");\r\n    value = expr.evaluate(ctxt);\r\n    assertFalse((Boolean) value);\r\n    expr = jexl.createExpression(\"/*\\\"true\\\"*/false\");\r\n    value = expr.evaluate(ctxt);\r\n    assertFalse((Boolean) value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test48",
  "sourceCode" : "@Test\r\nvoid test48() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setStrict(true);\r\n    options.setSilent(false);\r\n    final String jexlExp = \"(foo.getInner().foo() eq true) and (foo.getInner().goo() = (foo.getInner().goo()+1-1))\";\r\n    jc.set(\"foo\", new Foo());\r\n    assertNotNull(assertThrows(JexlException.Assignment.class, () -> jexl.createExpression(jexlExp)).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test49",
  "sourceCode" : "// JEXL-49: blocks not parsed (fixed)\r\n@Test\r\nvoid test49() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    final Map<String, Object> vars = new HashMap<>();\r\n    final JexlContext ctxt = new MapContext(vars);\r\n    final String stmt = \"a = 'b'; c = 'd';\";\r\n    final JexlScript expr = jexl.createScript(stmt);\r\n    /* Object value = */\r\n    expr.execute(ctxt);\r\n    assertTrue(vars.get(\"a\").equals(\"b\") && vars.get(\"c\").equals(\"d\"), \"JEXL-49 is not fixed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test52base",
  "sourceCode" : "// JEXL-52: can be implemented by deriving Interpreter.{g,s}etAttribute; later\r\n@Test\r\nvoid test52base() throws Exception {\r\n    final Engine jexl = (Engine) createEngine(false);\r\n    final Uberspect uber = (Uberspect) jexl.getUberspect();\r\n    // most likely, call will be in an Interpreter, getUberspect\r\n    String[] names = uber.getMethodNames(Another.class);\r\n    assertTrue(names.length > 0, \"should find methods\");\r\n    int found = 0;\r\n    for (final String name : names) {\r\n        if (\"foo\".equals(name) || \"goo\".equals(name)) {\r\n            found += 1;\r\n        }\r\n    }\r\n    assertEquals(2, found, \"should have foo & goo\");\r\n    names = uber.getFieldNames(Another.class);\r\n    assertTrue(names.length > 0, \"should find fields\");\r\n    found = 0;\r\n    for (final String name : names) {\r\n        if (\"name\".equals(name)) {\r\n            found += 1;\r\n        }\r\n    }\r\n    assertEquals(1, found, \"should have name\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test62",
  "sourceCode" : "// JEXL-62\r\n@Test\r\nvoid test62() throws Exception {\r\n    final JexlEngine jexl = createEngine(false);\r\n    final MapContext vars = new MapContext();\r\n    final JexlEvalContext ctxt = new JexlEvalContext(vars);\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setStrict(true);\r\n    // to avoid throwing JexlException on null method call\r\n    options.setSilent(true);\r\n    JexlScript jscript;\r\n    jscript = jexl.createScript(\"dummy.hashCode()\");\r\n    // OK\r\n    assertNull(jscript.execute(ctxt), jscript::getSourceText);\r\n    ctxt.set(\"dummy\", \"abcd\");\r\n    // OK\r\n    assertEquals(Integer.valueOf(\"abcd\".hashCode()), jscript.execute(ctxt), jscript::getSourceText);\r\n    jscript = jexl.createScript(\"dummy.hashCode\");\r\n    // OK\r\n    assertNull(jscript.execute(ctxt), jscript::getSourceText);\r\n    JexlExpression jexpr;\r\n    vars.clear();\r\n    jexpr = jexl.createExpression(\"dummy.hashCode()\");\r\n    // OK\r\n    assertNull(jexpr.evaluate(ctxt), jexpr::toString);\r\n    ctxt.set(\"dummy\", \"abcd\");\r\n    // OK\r\n    assertEquals(Integer.valueOf(\"abcd\".hashCode()), jexpr.evaluate(ctxt), jexpr::toString);\r\n    jexpr = jexl.createExpression(\"dummy.hashCode\");\r\n    // OK\r\n    assertNull(jexpr.evaluate(ctxt), jexpr::toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test87",
  "sourceCode" : "// JEXL-87\r\n@Test\r\nvoid test87() throws Exception {\r\n    final JexlEngine jexl = createEngine(false);\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    final JexlExpression divide = jexl.createExpression(\"l / r\");\r\n    final JexlExpression modulo = jexl.createExpression(\"l % r\");\r\n    ctxt.set(\"l\", java.math.BigInteger.valueOf(7));\r\n    ctxt.set(\"r\", java.math.BigInteger.valueOf(2));\r\n    assertEquals(java.math.BigInteger.valueOf(3), divide.evaluate(ctxt));\r\n    assertTrue(jexl.getArithmetic().equals(1, modulo.evaluate(ctxt)));\r\n    ctxt.set(\"l\", java.math.BigDecimal.valueOf(7));\r\n    ctxt.set(\"r\", java.math.BigDecimal.valueOf(2));\r\n    assertEquals(java.math.BigDecimal.valueOf(3.5), divide.evaluate(ctxt));\r\n    assertTrue(jexl.getArithmetic().equals(1, modulo.evaluate(ctxt)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test90",
  "sourceCode" : "// JEXL-90\r\n@Test\r\nvoid test90() throws Exception {\r\n    final JexlEngine jexl = createEngine(false);\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    // ';' is necessary between expressions\r\n    // @formatter:off\r\n    final String[] fexprs = { \"a=3 b=4\", \"while(a) while(a)\", \"1 2\", \"if (true) 2; 3 {}\", \"while (x) 1 if (y) 2 3\" };\r\n    // @formatter:on\r\n    for (final String fexpr : fexprs) {\r\n        assertThrows(JexlException.class, () -> jexl.createScript(fexpr));\r\n    }\r\n    // ';' is necessary between expressions and only expressions\r\n    // @formatter:off\r\n    final String[] exprs = { \"if (x) {1} if (y) {2}\", \"if (x) 1 if (y) 2\", \"while (x) 1 if (y) 2 else 3\", \"for(z : [3, 4, 5]) { z } y ? 2 : 1\", \"for(z : [3, 4, 5]) { z } if (y) 2 else 1\" };\r\n    // @formatter:on\r\n    ctxt.set(\"x\", Boolean.FALSE);\r\n    ctxt.set(\"y\", Boolean.TRUE);\r\n    for (final String expr : exprs) {\r\n        final JexlScript s = jexl.createScript(expr);\r\n        assertEquals(Integer.valueOf(2), s.execute(ctxt));\r\n    }\r\n    debuggerCheck(jexl);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test97",
  "sourceCode" : "@Test\r\nvoid test97() throws Exception {\r\n    final JexlEngine jexl = createEngine(false);\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setSilent(false);\r\n    for (char v = 'a'; v <= 'z'; ++v) {\r\n        ctxt.set(Character.toString(v), 10);\r\n    }\r\n    final String input = \"(((((((((((((((((((((((((z+y)/x)*w)-v)*u)/t)-s)*r)/q)+p)-o)*n)-m)+l)*k)+j)/i)+h)*g)+f)/e)+d)-c)/b)+a)\";\r\n    JexlExpression script;\r\n    // Make sure everything is loaded...\r\n    final long start = System.nanoTime();\r\n    script = jexl.createExpression(input);\r\n    final Object value = script.evaluate(ctxt);\r\n    assertEquals(Integer.valueOf(11), value);\r\n    final long end = System.nanoTime();\r\n    final double millisec = (end - start) / 1e6;\r\n    // Allow plenty of slack\r\n    final double limit = 200.0;\r\n    assertTrue(millisec < limit, () -> \"Expected parse to take less than \" + limit + \"ms, actual \" + millisec);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\IssuesTest.java",
  "methodName" : "test98",
  "sourceCode" : "@Test\r\nvoid test98() throws Exception {\r\n    final String[] exprs = { \"fn:replace('DOMAIN\\\\somename', '\\\\\\\\', '\\\\\\\\\\\\\\\\')\", \"fn:replace(\\\"DOMAIN\\\\somename\\\", \\\"\\\\\\\\\\\", \\\"\\\\\\\\\\\\\\\\\\\")\", \"fn:replace('DOMAIN\\\\somename', '\\\\u005c', '\\\\u005c\\\\u005c')\" };\r\n    final Map<String, Object> funcs = new HashMap<>();\r\n    funcs.put(\"fn\", new fn98());\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(funcs).create();\r\n    for (final String expr : exprs) {\r\n        final Object value = jexl.createExpression(expr).evaluate(null);\r\n        assertEquals(\"DOMAIN\\\\\\\\somename\", value, expr);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\jexl342\\OptionalTest.java",
  "methodName" : "test342",
  "sourceCode" : "@Test\r\nvoid test342() {\r\n    final JexlBuilder builder = new JexlBuilder();\r\n    final JexlUberspect uber = builder.create().getUberspect();\r\n    final JexlEngine jexl = builder.uberspect(new ReferenceUberspect(uber)).safe(false).create();\r\n    final JexlInfo info = new JexlInfo(\"test352\", 1, 1);\r\n    final Thing thing = new Thing();\r\n    JexlScript script1;\r\n    script1 = jexl.createScript(info.at(53, 1), \"thing.name.length()\", \"thing\");\r\n    Object result = script1.execute(null, thing);\r\n    assertNull(result);\r\n    thing.name = \"foo\";\r\n    result = script1.execute(null, thing);\r\n    assertEquals(3, result);\r\n    final JexlScript script2 = jexl.createScript(info.at(62, 1), \"thing.name.size()\", \"thing\");\r\n    final JexlException.Method xmethod = assertThrows(JexlException.Method.class, () -> script2.execute(null, thing));\r\n    assertEquals(\"size\", xmethod.getDetail());\r\n    assertEquals(\"test352@62:11 unsolvable function/method 'size'\", xmethod.getMessage());\r\n    final JexlScript script3 = jexl.createScript(info.at(71, 1), \"thing.name?.size()\", \"thing\");\r\n    result = script3.execute(null, thing);\r\n    thing.name = null;\r\n    script1 = jexl.createScript(info, \"thing.names.size()\", \"thing\");\r\n    result = script1.execute(null, thing);\r\n    assertNull(result);\r\n    thing.name = \"froboz\";\r\n    script1 = jexl.createScript(info, \"thing.names\", \"thing\");\r\n    result = script1.execute(null, thing);\r\n    assertNotNull(result);\r\n    script1 = jexl.createScript(info, \"thing.names.size()\", \"thing\");\r\n    result = script1.execute(null, thing);\r\n    assertEquals(1, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\jexl342\\OptionalTest.java",
  "methodName" : "testOptionalArgs",
  "sourceCode" : "@Test\r\nvoid testOptionalArgs() {\r\n    final JexlBuilder builder = new JexlBuilder();\r\n    final JexlArithmetic jexla = new OptionalArithmetic(true);\r\n    final JexlUberspect uber = builder.create().getUberspect();\r\n    final JexlEngine jexl = builder.uberspect(new ReferenceUberspect(uber)).arithmetic(jexla).safe(false).create();\r\n    final JexlInfo info = new JexlInfo(\"testStream\", 1, 1);\r\n    final MapContext context = new StreamContext();\r\n    final String src = \"x + x\";\r\n    final JexlScript script = jexl.createScript(src, \"x\");\r\n    final Optional<Integer> x = Optional.of(21);\r\n    final Object result = script.execute(context, x);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\jexl342\\OptionalTest.java",
  "methodName" : "testStream0",
  "sourceCode" : "@Test\r\nvoid testStream0() {\r\n    final String src = \"$0.map(x -> x * x).reduce((a, x) -> a + x)\";\r\n    final JexlBuilder builder = new JexlBuilder();\r\n    final JexlUberspect uber = builder.create().getUberspect();\r\n    final JexlArithmetic jexla = new OptionalArithmetic(true);\r\n    final JexlEngine jexl = builder.uberspect(new ReferenceUberspect(uber)).arithmetic(jexla).safe(false).create();\r\n    final JexlInfo info = new JexlInfo(\"testStream\", 1, 1);\r\n    final MapContext context = new StreamContext();\r\n    final JexlScript script = jexl.createScript(src, \"$0\");\r\n    final Object result = script.execute(context, Arrays.asList(1, 2, 3));\r\n    assertEquals(14, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\jexl342\\OptionalTest.java",
  "methodName" : "testStream1",
  "sourceCode" : "@Test\r\nvoid testStream1() {\r\n    final String src = \"$0.map(x -> x * x).reduce((a, x) -> a + x)\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(false).create();\r\n    final JexlInfo info = new JexlInfo(\"testStream\", 1, 1);\r\n    final MapContext context = new StreamContext();\r\n    final JexlScript script = jexl.createScript(src, \"$0\");\r\n    final Object result = script.execute(context, Arrays.asList(1, 2d, \"3\"));\r\n    assertEquals(14.0d, (double) result, 0.00001d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testAntPropertiesWithMethods",
  "sourceCode" : "@Test\r\nvoid testAntPropertiesWithMethods() {\r\n    final JexlContext jc = new MapContext();\r\n    final String value = \"Stinky Cheese\";\r\n    jc.set(\"maven.bob.food\", value);\r\n    assertExpression(jc, \"maven.bob.food.length()\", Integer.valueOf(value.length()));\r\n    assertExpression(jc, \"empty(maven.bob.food)\", Boolean.FALSE);\r\n    assertExpression(jc, \"size(maven.bob.food)\", Integer.valueOf(value.length()));\r\n    assertExpression(jc, \"maven.bob.food + ' is good'\", value + \" is good\");\r\n    // DG: Note the following ant properties don't work\r\n    //        String version = \"1.0.3\";\r\n    //        jc.set(\"commons-logging\", version);\r\n    //        assertExpression(jc, \"commons-logging\", version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@SuppressWarnings(\"boxing\")\r\n@Test\r\nvoid testArray() {\r\n    final int[] array = { 100, 101, 102 };\r\n    final JexlEngine jexl = JEXL;\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"array\", array);\r\n    JexlExpression expr;\r\n    Object result;\r\n    expr = jexl.createExpression(\"array.1\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(101, result);\r\n    expr = jexl.createExpression(\"array[1] = 1010\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(1010, result, expr::toString);\r\n    expr = jexl.createExpression(\"array.0\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(100, result, expr::toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testAssignment",
  "sourceCode" : "/**\r\n * Test assignment.\r\n */\r\n@Test\r\nvoid testAssignment() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"aString\", \"Hello\");\r\n    final Foo foo = new Foo();\r\n    jc.set(\"foo\", foo);\r\n    final Parser parser = new Parser(\";\");\r\n    parser.parse(null, new JexlFeatures().register(false), \"aString = 'World';\", null);\r\n    assertExpression(jc, \"hello = 'world'\", \"world\");\r\n    assertEquals(\"world\", jc.get(\"hello\"), \"hello variable not changed\");\r\n    assertExpression(jc, \"result = 1 + 1\", Integer.valueOf(2));\r\n    assertEquals(Integer.valueOf(2), jc.get(\"result\"), \"result variable not changed\");\r\n    assertExpression(jc, \"foo.property1 = '99'\", \"99\");\r\n    assertEquals(\"99\", foo.getProperty1(), \"property not set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testBadParse",
  "sourceCode" : "/**\r\n * Make sure bad syntax throws ParseException\r\n */\r\n@Test\r\nvoid testBadParse() {\r\n    assertThrows(JexlException.class, () -> assertExpression(new MapContext(), \"empty()\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testBlankStrings",
  "sourceCode" : "/**\r\n * test some blank strings\r\n */\r\n@Test\r\nvoid testBlankStrings() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"bar\", \"\");\r\n    assertExpression(jc, \"bar == ''\", Boolean.TRUE);\r\n    assertExpression(jc, \"empty bar\", Boolean.TRUE);\r\n    assertExpression(jc, \"bar.length() == 0\", Boolean.TRUE);\r\n    assertExpression(jc, \"size(bar) == 0\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testBoolean",
  "sourceCode" : "@Test\r\nvoid testBoolean() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", new Foo());\r\n    jc.set(\"a\", Boolean.TRUE);\r\n    jc.set(\"b\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo.convertBoolean(a==b)\", \"Boolean : false\");\r\n    assertExpression(jc, \"foo.convertBoolean(a==true)\", \"Boolean : true\");\r\n    assertExpression(jc, \"foo.convertBoolean(a==false)\", \"Boolean : false\");\r\n    assertExpression(jc, \"foo.convertBoolean(true==false)\", \"Boolean : false\");\r\n    assertExpression(jc, \"true eq false\", Boolean.FALSE);\r\n    assertExpression(jc, \"true ne false\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testBooleanShortCircuitAnd",
  "sourceCode" : "/**\r\n * Test that 'and' only evaluates the second item if needed\r\n */\r\n@Test\r\nvoid testBooleanShortCircuitAnd() {\r\n    // handle false for the left arg of 'and'\r\n    Foo tester = new Foo();\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"first\", Boolean.FALSE);\r\n    jc.set(\"foo\", tester);\r\n    final JexlExpression expr = JEXL.createExpression(\"first and foo.trueAndModify\");\r\n    expr.evaluate(jc);\r\n    assertFalse(tester.getModified(), \"Short circuit failure: rhs evaluated when lhs FALSE\");\r\n    // handle true for the left arg of 'and'\r\n    tester = new Foo();\r\n    jc.set(\"first\", Boolean.TRUE);\r\n    jc.set(\"foo\", tester);\r\n    expr.evaluate(jc);\r\n    assertTrue(tester.getModified(), \"Short circuit failure: rhs not evaluated when lhs TRUE\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testBooleanShortCircuitOr",
  "sourceCode" : "/**\r\n * Test that 'or' only evaluates the second item if needed\r\n */\r\n@Test\r\nvoid testBooleanShortCircuitOr() {\r\n    // handle false for the left arg of 'or'\r\n    Foo tester = new Foo();\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"first\", Boolean.FALSE);\r\n    jc.set(\"foo\", tester);\r\n    final JexlExpression expr = JEXL.createExpression(\"first or foo.trueAndModify\");\r\n    expr.evaluate(jc);\r\n    assertTrue(tester.getModified(), \"Short circuit failure: rhs not evaluated when lhs FALSE\");\r\n    // handle true for the left arg of 'or'\r\n    tester = new Foo();\r\n    jc.set(\"first\", Boolean.TRUE);\r\n    jc.set(\"foo\", tester);\r\n    expr.evaluate(jc);\r\n    assertFalse(tester.getModified(), \"Short circuit failure: rhs evaluated when lhs TRUE\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testCalculations",
  "sourceCode" : "/**\r\n * test some simple mathematical calculations\r\n */\r\n@Test\r\nvoid testCalculations() {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    options.setStrict(false);\r\n    options.setStrictArithmetic(false);\r\n    /*\r\n         * test to ensure new string cat works\r\n         */\r\n    jc.set(\"stringy\", \"thingy\");\r\n    assertExpression(jc, \"stringy + 2\", \"thingy2\");\r\n    /*\r\n         * test new null coercion\r\n         */\r\n    jc.set(\"imanull\", null);\r\n    assertExpression(jc, \"imanull + 2\", Integer.valueOf(2));\r\n    assertExpression(jc, \"imanull + imanull\", Integer.valueOf(0));\r\n    /* test for bugzilla 31577 */\r\n    jc.set(\"n\", Integer.valueOf(0));\r\n    assertExpression(jc, \"n != null && n != 0\", Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testCharAtBug",
  "sourceCode" : "/**\r\n * Attempts to recreate bug <a href=\"https://jira.werken.com/ViewIssue.jspa?key=JELLY-8\">...</a>\r\n */\r\n@Test\r\nvoid testCharAtBug() {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    options.setSilent(true);\r\n    jc.set(\"foo\", \"abcdef\");\r\n    assertExpression(jc, \"foo.substring(2,4)\", \"cd\");\r\n    assertExpression(jc, \"foo.charAt(2)\", Character.valueOf('c'));\r\n    assertExpression(jc, \"foo.charAt(-2)\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testCoercionWithComparisonOperators",
  "sourceCode" : "@Test\r\nvoid testCoercionWithComparisonOperators() {\r\n    final JexlContext jc = new MapContext();\r\n    assertExpression(jc, \"'2' > 1\", Boolean.TRUE);\r\n    assertExpression(jc, \"'2' >= 1\", Boolean.TRUE);\r\n    assertExpression(jc, \"'2' >= 2\", Boolean.TRUE);\r\n    assertExpression(jc, \"'2' < 1\", Boolean.FALSE);\r\n    assertExpression(jc, \"'2' <= 1\", Boolean.FALSE);\r\n    assertExpression(jc, \"'2' <= 2\", Boolean.TRUE);\r\n    assertExpression(jc, \"2 > '1'\", Boolean.TRUE);\r\n    assertExpression(jc, \"2 >= '1'\", Boolean.TRUE);\r\n    assertExpression(jc, \"2 >= '2'\", Boolean.TRUE);\r\n    assertExpression(jc, \"2 < '1'\", Boolean.FALSE);\r\n    assertExpression(jc, \"2 <= '1'\", Boolean.FALSE);\r\n    assertExpression(jc, \"2 <= '2'\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testComment",
  "sourceCode" : "/**\r\n * Test the ## comment in a string\r\n */\r\n@Test\r\nvoid testComment() {\r\n    assertExpression(new MapContext(), \"## double or nothing\\n 1 + 1\", Integer.valueOf(\"2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testComparisons",
  "sourceCode" : "/**\r\n * test some simple conditions\r\n */\r\n@Test\r\nvoid testComparisons() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", \"the quick and lazy fox\");\r\n    assertExpression(jc, \"foo.indexOf('quick') > 0\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo.indexOf('bar') >= 0\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo.indexOf('bar') < 0\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testConditions",
  "sourceCode" : "/**\r\n * test some simple conditions\r\n */\r\n@Test\r\nvoid testConditions() {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    jc.set(\"foo\", Integer.valueOf(2));\r\n    jc.set(\"aFloat\", Float.valueOf(1));\r\n    jc.set(\"aDouble\", Double.valueOf(2));\r\n    jc.set(\"aChar\", Character.valueOf('A'));\r\n    jc.set(\"aBool\", Boolean.TRUE);\r\n    final StringBuilder buffer = new StringBuilder(\"abc\");\r\n    final List<Object> list = new ArrayList<>();\r\n    final List<Object> list2 = new LinkedList<>();\r\n    jc.set(\"aBuffer\", buffer);\r\n    jc.set(\"aList\", list);\r\n    jc.set(\"bList\", list2);\r\n    assertExpression(jc, \"foo == 2\", Boolean.TRUE);\r\n    assertExpression(jc, \"2 == 3\", Boolean.FALSE);\r\n    assertExpression(jc, \"3 == foo\", Boolean.FALSE);\r\n    assertExpression(jc, \"3 != foo\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo != 2\", Boolean.FALSE);\r\n    // test float and double equality\r\n    assertExpression(jc, \"aFloat eq aDouble\", Boolean.FALSE);\r\n    assertExpression(jc, \"aFloat ne aDouble\", Boolean.TRUE);\r\n    assertExpression(jc, \"aFloat == aDouble\", Boolean.FALSE);\r\n    assertExpression(jc, \"aFloat != aDouble\", Boolean.TRUE);\r\n    // test number and character equality\r\n    assertExpression(jc, \"foo == aChar\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo != aChar\", Boolean.TRUE);\r\n    // test string and boolean\r\n    assertExpression(jc, \"aBool == 'true'\", Boolean.TRUE);\r\n    assertExpression(jc, \"aBool == 'false'\", Boolean.FALSE);\r\n    assertExpression(jc, \"aBool != 'false'\", Boolean.TRUE);\r\n    // test null and boolean\r\n    options.setStrict(false);\r\n    assertExpression(jc, \"aBool == notThere\", Boolean.FALSE);\r\n    assertExpression(jc, \"aBool != notThere\", Boolean.TRUE);\r\n    // anything and string as a string comparison\r\n    options.setStrict(true);\r\n    assertExpression(jc, \"aBuffer == 'abc'\", Boolean.TRUE);\r\n    assertExpression(jc, \"aBuffer != 'abc'\", Boolean.FALSE);\r\n    // arbitrary equals\r\n    assertExpression(jc, \"aList == bList\", Boolean.TRUE);\r\n    assertExpression(jc, \"aList != bList\", Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testDuck",
  "sourceCode" : "@SuppressWarnings(\"boxing\")\r\n@Test\r\nvoid testDuck() {\r\n    final JexlEngine jexl = JEXL;\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"duck\", new Duck());\r\n    JexlExpression expr;\r\n    Object result;\r\n    expr = jexl.createExpression(\"duck.zero\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(0, result, expr::toString);\r\n    expr = jexl.createExpression(\"duck.one\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(1, result, expr::toString);\r\n    expr = jexl.createExpression(\"duck.user = 20\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(20, result, expr::toString);\r\n    expr = jexl.createExpression(\"duck.user\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(20, result, expr::toString);\r\n    expr = jexl.createExpression(\"duck.user = 'zero'\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(\"zero\", result, expr::toString);\r\n    expr = jexl.createExpression(\"duck.user\");\r\n    result = expr.evaluate(jc);\r\n    assertEquals(0, result, expr::toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testEmpty",
  "sourceCode" : "@Test\r\nvoid testEmpty() {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    options.setStrict(false);\r\n    jc.set(\"string\", \"\");\r\n    jc.set(\"array\", new Object[0]);\r\n    jc.set(\"map\", new HashMap<>());\r\n    jc.set(\"list\", new ArrayList<>());\r\n    jc.set(\"set\", new HashMap<>().keySet());\r\n    jc.set(\"longstring\", \"thingthing\");\r\n    /*\r\n         *  I can't believe anyone thinks this is a syntax... :)\r\n         */\r\n    assertExpression(jc, \"empty nullthing\", Boolean.TRUE);\r\n    assertExpression(jc, \"empty string\", Boolean.TRUE);\r\n    assertExpression(jc, \"empty array\", Boolean.TRUE);\r\n    assertExpression(jc, \"empty map\", Boolean.TRUE);\r\n    assertExpression(jc, \"empty set\", Boolean.TRUE);\r\n    assertExpression(jc, \"empty list\", Boolean.TRUE);\r\n    assertExpression(jc, \"empty longstring\", Boolean.FALSE);\r\n    assertExpression(jc, \"not empty longstring\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testEmptyDottedVariableName",
  "sourceCode" : "@Test\r\nvoid testEmptyDottedVariableName() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"this.is.a.test\", \"\");\r\n    assertExpression(jc, \"empty(this.is.a.test)\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testEmptySubListOfMap",
  "sourceCode" : "@Test\r\nvoid testEmptySubListOfMap() {\r\n    final JexlContext jc = new MapContext();\r\n    final Map<String, ArrayList<?>> m = new HashMap<>();\r\n    m.put(\"aList\", new ArrayList<>());\r\n    jc.set(\"aMap\", m);\r\n    assertExpression(jc, \"empty( aMap.aList )\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testExpression",
  "sourceCode" : "@Test\r\nvoid testExpression() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", new Foo());\r\n    jc.set(\"a\", Boolean.TRUE);\r\n    jc.set(\"b\", Boolean.FALSE);\r\n    jc.set(\"num\", Integer.valueOf(5));\r\n    jc.set(\"now\", Calendar.getInstance().getTime());\r\n    final GregorianCalendar gc = new GregorianCalendar(5000, Calendar.DECEMBER, 20);\r\n    jc.set(\"now2\", gc.getTime());\r\n    jc.set(\"bdec\", new BigDecimal(\"7\"));\r\n    jc.set(\"bint\", new BigInteger(\"7\"));\r\n    assertExpression(jc, \"a == b\", Boolean.FALSE);\r\n    assertExpression(jc, \"a==true\", Boolean.TRUE);\r\n    assertExpression(jc, \"a==false\", Boolean.FALSE);\r\n    assertExpression(jc, \"true==false\", Boolean.FALSE);\r\n    assertExpression(jc, \"2 < 3\", Boolean.TRUE);\r\n    assertExpression(jc, \"num < 5\", Boolean.FALSE);\r\n    assertExpression(jc, \"num < num\", Boolean.FALSE);\r\n    assertExpression(jc, \"num < null\", Boolean.FALSE);\r\n    assertExpression(jc, \"num < 2.5\", Boolean.FALSE);\r\n    // test comparable\r\n    assertExpression(jc, \"now2 < now\", Boolean.FALSE);\r\n    //\r\n    assertExpression(jc, \"'6' <= '5'\", Boolean.FALSE);\r\n    assertExpression(jc, \"num <= 5\", Boolean.TRUE);\r\n    assertExpression(jc, \"num <= num\", Boolean.TRUE);\r\n    assertExpression(jc, \"num <= null\", Boolean.FALSE);\r\n    assertExpression(jc, \"num <= 2.5\", Boolean.FALSE);\r\n    // test comparable\r\n    assertExpression(jc, \"now2 <= now\", Boolean.FALSE);\r\n    //\r\n    assertExpression(jc, \"'6' >= '5'\", Boolean.TRUE);\r\n    assertExpression(jc, \"num >= 5\", Boolean.TRUE);\r\n    assertExpression(jc, \"num >= num\", Boolean.TRUE);\r\n    assertExpression(jc, \"num >= null\", Boolean.FALSE);\r\n    assertExpression(jc, \"num >= 2.5\", Boolean.TRUE);\r\n    // test comparable\r\n    assertExpression(jc, \"now2 >= now\", Boolean.TRUE);\r\n    assertExpression(jc, \"'6' > '5'\", Boolean.TRUE);\r\n    assertExpression(jc, \"num > 4\", Boolean.TRUE);\r\n    assertExpression(jc, \"num > num\", Boolean.FALSE);\r\n    assertExpression(jc, \"num > null\", Boolean.FALSE);\r\n    assertExpression(jc, \"num > 2.5\", Boolean.TRUE);\r\n    // test comparable\r\n    assertExpression(jc, \"now2 > now\", Boolean.TRUE);\r\n    assertExpression(jc, \"\\\"foo\\\" + \\\"bar\\\" == \\\"foobar\\\"\", Boolean.TRUE);\r\n    assertExpression(jc, \"bdec > num\", Boolean.TRUE);\r\n    assertExpression(jc, \"bdec >= num\", Boolean.TRUE);\r\n    assertExpression(jc, \"num <= bdec\", Boolean.TRUE);\r\n    assertExpression(jc, \"num < bdec\", Boolean.TRUE);\r\n    assertExpression(jc, \"bint > num\", Boolean.TRUE);\r\n    assertExpression(jc, \"bint == bdec\", Boolean.TRUE);\r\n    assertExpression(jc, \"bint >= num\", Boolean.TRUE);\r\n    assertExpression(jc, \"num <= bint\", Boolean.TRUE);\r\n    assertExpression(jc, \"num < bint\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testIntProperty",
  "sourceCode" : "/**\r\n * test the use of an int based property\r\n */\r\n@Test\r\nvoid testIntProperty() {\r\n    final Foo foo = new Foo();\r\n    // let's check the square function first.\r\n    assertEquals(4, foo.square(2));\r\n    assertEquals(4, foo.square(-2));\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", foo);\r\n    assertExpression(jc, \"foo.count\", Integer.valueOf(5));\r\n    assertExpression(jc, \"foo.square(2)\", Integer.valueOf(4));\r\n    assertExpression(jc, \"foo.square(-2)\", Integer.valueOf(4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testLogicExpressions",
  "sourceCode" : "/**\r\n * test some blank strings\r\n */\r\n@Test\r\nvoid testLogicExpressions() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", \"abc\");\r\n    jc.set(\"bar\", \"def\");\r\n    assertExpression(jc, \"foo == 'abc' || bar == 'abc'\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo == 'abc' or bar == 'abc'\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo == 'abc' && bar == 'abc'\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo == 'abc' and bar == 'abc'\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo == 'def' || bar == 'abc'\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo == 'def' or bar == 'abc'\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo == 'abc' && bar == 'def'\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo == 'abc' and bar == 'def'\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testMapDot",
  "sourceCode" : "/**\r\n * test the use of dot notation to lookup map entries\r\n */\r\n@Test\r\nvoid testMapDot() {\r\n    final Map<String, String> foo = new HashMap<>();\r\n    foo.put(\"bar\", \"123\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", foo);\r\n    assertExpression(jc, \"foo.bar\", \"123\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testNegativeIntComparison",
  "sourceCode" : "/**\r\n * test the -1 comparison bug\r\n */\r\n@Test\r\nvoid testNegativeIntComparison() {\r\n    final JexlContext jc = new MapContext();\r\n    final Foo foo = new Foo();\r\n    jc.set(\"foo\", foo);\r\n    assertExpression(jc, \"foo.count != -1\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo.count == 5\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo.count == -1\", Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testNew",
  "sourceCode" : "/**\r\n * Test the new function e.g. constructor invocation.\r\n */\r\n@Test\r\nvoid testNew() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"double\", Double.class);\r\n    jc.set(\"foo\", \"org.apache.commons.jexl3.Foo\");\r\n    JexlExpression expr;\r\n    Object value;\r\n    expr = JEXL.createExpression(\"new(double, 1)\");\r\n    value = expr.evaluate(jc);\r\n    assertEquals(Double.valueOf(1.0), value, expr::toString);\r\n    expr = JEXL.createExpression(\"new('java.lang.Float', 100)\");\r\n    value = expr.evaluate(jc);\r\n    assertEquals(Float.valueOf((float) 100.0), value, expr::toString);\r\n    expr = JEXL.createExpression(\"new(foo).quux\");\r\n    value = expr.evaluate(jc);\r\n    assertEquals(\"String : quux\", value, expr::toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testNewImports",
  "sourceCode" : "@Test\r\nvoid testNewImports() {\r\n    final JexlEngine jexl = new JexlBuilder().imports(\"java.lang\", \"java.util\").create();\r\n    JexlExpression expr;\r\n    Object result;\r\n    expr = jexl.createExpression(\"new LinkedList([1,2,3,...])\");\r\n    result = expr.evaluate(null);\r\n    assertInstanceOf(LinkedList.class, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testNotConditions",
  "sourceCode" : "/**\r\n * test some simple conditions\r\n */\r\n@Test\r\nvoid testNotConditions() {\r\n    final JexlContext jc = new MapContext();\r\n    final Foo foo = new Foo();\r\n    jc.set(\"x\", Boolean.TRUE);\r\n    jc.set(\"foo\", foo);\r\n    jc.set(\"bar\", \"true\");\r\n    assertExpression(jc, \"!x\", Boolean.FALSE);\r\n    assertExpression(jc, \"x\", Boolean.TRUE);\r\n    assertExpression(jc, \"!bar\", Boolean.FALSE);\r\n    assertExpression(jc, \"!foo.isSimple()\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo.isSimple()\", Boolean.TRUE);\r\n    assertExpression(jc, \"!foo.simple\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo.simple\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo.getCheeseList().size() == 3\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo.cheeseList.size() == 3\", Boolean.TRUE);\r\n    jc.set(\"string\", \"\");\r\n    assertExpression(jc, \"not empty string\", Boolean.FALSE);\r\n    assertExpression(jc, \"not(empty string)\", Boolean.FALSE);\r\n    assertExpression(jc, \"not empty(string)\", Boolean.FALSE);\r\n    assertExpression(jc, \"! empty string\", Boolean.FALSE);\r\n    assertExpression(jc, \"!(empty string)\", Boolean.FALSE);\r\n    assertExpression(jc, \"! empty(string)\", Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testNotConditionsWithDots",
  "sourceCode" : "/**\r\n * test some simple conditions\r\n */\r\n@Test\r\nvoid testNotConditionsWithDots() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x.a\", Boolean.TRUE);\r\n    jc.set(\"x.b\", Boolean.FALSE);\r\n    assertExpression(jc, \"x.a\", Boolean.TRUE);\r\n    assertExpression(jc, \"!x.a\", Boolean.FALSE);\r\n    assertExpression(jc, \"!x.b\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testNull",
  "sourceCode" : "/**\r\n * test some null conditions\r\n */\r\n@Test\r\nvoid testNull() {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    options.setStrict(false);\r\n    jc.set(\"bar\", Integer.valueOf(2));\r\n    assertExpression(jc, \"empty foo\", Boolean.TRUE);\r\n    assertExpression(jc, \"bar == null\", Boolean.FALSE);\r\n    assertExpression(jc, \"foo == null\", Boolean.TRUE);\r\n    assertExpression(jc, \"bar != null\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo != null\", Boolean.FALSE);\r\n    assertExpression(jc, \"empty(bar)\", Boolean.FALSE);\r\n    assertExpression(jc, \"empty(foo)\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testProperty",
  "sourceCode" : "/**\r\n * test a simple property expression\r\n */\r\n@Test\r\nvoid testProperty() {\r\n    /*\r\n         *  tests a simple property expression\r\n         */\r\n    final JexlExpression e = JEXL.createExpression(\"foo.bar\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", new Foo());\r\n    final Object o = e.evaluate(jc);\r\n    assertInstanceOf(String.class, o, \"o not instanceof String\");\r\n    assertEquals(GET_METHOD_STRING, o, \"o incorrect\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testSize",
  "sourceCode" : "@Test\r\nvoid testSize() {\r\n    final JexlEvalContext jc = new JexlEvalContext();\r\n    final JexlOptions options = jc.getEngineOptions();\r\n    options.setStrict(false);\r\n    jc.set(\"s\", \"five!\");\r\n    jc.set(\"array\", new Object[5]);\r\n    final Map<String, Integer> map = new HashMap<>();\r\n    map.put(\"1\", Integer.valueOf(1));\r\n    map.put(\"2\", Integer.valueOf(2));\r\n    map.put(\"3\", Integer.valueOf(3));\r\n    map.put(\"4\", Integer.valueOf(4));\r\n    map.put(\"5\", Integer.valueOf(5));\r\n    jc.set(\"map\", map);\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"1\");\r\n    list.add(\"2\");\r\n    list.add(\"3\");\r\n    list.add(\"4\");\r\n    list.add(\"5\");\r\n    jc.set(\"list\", list);\r\n    // 30652 - support for set\r\n    final Set<String> set = new HashSet<>(list);\r\n    set.add(\"1\");\r\n    jc.set(\"set\", set);\r\n    // support generic int size() method\r\n    final BitSet bitset = new BitSet(5);\r\n    jc.set(\"bitset\", bitset);\r\n    assertExpression(jc, \"size(s)\", Integer.valueOf(5));\r\n    assertExpression(jc, \"size(array)\", Integer.valueOf(5));\r\n    assertExpression(jc, \"size(list)\", Integer.valueOf(5));\r\n    assertExpression(jc, \"size(map)\", Integer.valueOf(5));\r\n    assertExpression(jc, \"size(set)\", Integer.valueOf(5));\r\n    assertExpression(jc, \"size(bitset)\", Integer.valueOf(64));\r\n    assertExpression(jc, \"list.size()\", Integer.valueOf(5));\r\n    assertExpression(jc, \"map.size()\", Integer.valueOf(5));\r\n    assertExpression(jc, \"set.size()\", Integer.valueOf(5));\r\n    assertExpression(jc, \"bitset.size()\", Integer.valueOf(64));\r\n    assertExpression(jc, \"list.get(size(list) - 1)\", \"5\");\r\n    assertExpression(jc, \"list[size(list) - 1]\", \"5\");\r\n    assertExpression(jc, \"list.get(list.size() - 1)\", \"5\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testSizeAsProperty",
  "sourceCode" : "@Test\r\nvoid testSizeAsProperty() {\r\n    final JexlContext jc = new MapContext();\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"size\", \"cheese\");\r\n    map.put(\"si & ze\", \"cheese\");\r\n    jc.set(\"map\", map);\r\n    jc.set(\"foo\", new Foo());\r\n    assertExpression(jc, \"map['size']\", \"cheese\");\r\n    assertExpression(jc, \"map['si & ze']\", \"cheese\");\r\n    assertExpression(jc, \"map.'si & ze'\", \"cheese\");\r\n    assertExpression(jc, \"map.size()\", 2);\r\n    assertExpression(jc, \"size(map)\", 2);\r\n    assertExpression(jc, \"foo.getSize()\", 22);\r\n    assertExpression(jc, \"foo.'size'\", 22);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testStringConcatenation",
  "sourceCode" : "/**\r\n * Simple test of '+' as a string concatenation operator.\r\n */\r\n@Test\r\nvoid testStringConcatenation() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"first\", \"Hello\");\r\n    jc.set(\"second\", \"World\");\r\n    assertExpression(jc, \"first + ' ' + second\", \"Hello World\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testStringLit",
  "sourceCode" : "@Test\r\nvoid testStringLit() {\r\n    /*\r\n         *  tests a simple property expression\r\n         */\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", new Foo());\r\n    assertExpression(jc, \"foo.repeat(\\\"woogie\\\")\", \"Repeat : woogie\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testStringLiterals",
  "sourceCode" : "/**\r\n * Tests string literals\r\n */\r\n@Test\r\nvoid testStringLiterals() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", \"bar\");\r\n    assertExpression(jc, \"foo == \\\"bar\\\"\", Boolean.TRUE);\r\n    assertExpression(jc, \"foo == 'bar'\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testStringQuoting",
  "sourceCode" : "/**\r\n * test quoting in strings\r\n */\r\n@Test\r\nvoid testStringQuoting() {\r\n    final JexlContext jc = new MapContext();\r\n    assertExpression(jc, \"'\\\"Hello\\\"'\", \"\\\"Hello\\\"\");\r\n    assertExpression(jc, \"\\\"I'm testing\\\"\", \"I'm testing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final String code = \"abcd\";\r\n    final JexlExpression expr = JEXL.createExpression(code);\r\n    assertEquals(code, expr.toString(), \"Bad expression value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testUnicodeSupport",
  "sourceCode" : "@Test\r\nvoid testUnicodeSupport() {\r\n    final JexlContext jc = new MapContext();\r\n    assertExpression(jc, \"'x' == '\\\\u0032?ytkownik'\", Boolean.FALSE);\r\n    assertExpression(jc, \"'c:\\\\some\\\\windows\\\\path'\", \"c:\\\\some\\\\windows\\\\path\");\r\n    assertExpression(jc, \"'foo\\\\u0020bar'\", \"foo\\u0020bar\");\r\n    assertExpression(jc, \"'foo\\\\u0020\\\\u0020bar'\", \"foo\\u0020\\u0020bar\");\r\n    assertExpression(jc, \"'\\\\u0020foobar\\\\u0020'\", \"\\u0020foobar\\u0020\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JexlTest.java",
  "methodName" : "testVariableNames",
  "sourceCode" : "/**\r\n * test variables with underscore names\r\n */\r\n@Test\r\nvoid testVariableNames() {\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo_bar\", \"123\");\r\n    assertExpression(jc, \"foo_bar\", \"123\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\junit\\AsserterTest.java",
  "methodName" : "testThis",
  "sourceCode" : "@Test\r\nvoid testThis() throws Exception {\r\n    final Asserter asserter = new Asserter(JEXL);\r\n    asserter.setVariable(\"this\", new Foo());\r\n    asserter.assertExpression(\"this.repeat('abc')\", \"Repeat : abc\");\r\n    assertThrows(AssertionError.class, () -> asserter.assertExpression(\"this.count\", \"Wrong Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\junit\\AsserterTest.java",
  "methodName" : "testVariable",
  "sourceCode" : "@Test\r\nvoid testVariable() throws Exception {\r\n    final Asserter asserter = new Asserter(JEXL);\r\n    asserter.setSilent(true);\r\n    asserter.setVariable(\"foo\", new Foo());\r\n    asserter.setVariable(\"person\", \"James\");\r\n    asserter.assertExpression(\"person\", \"James\");\r\n    asserter.assertExpression(\"size(person)\", Integer.valueOf(5));\r\n    asserter.assertExpression(\"foo.getCount()\", Integer.valueOf(5));\r\n    asserter.assertExpression(\"foo.count\", Integer.valueOf(5));\r\n    assertThrows(AssertionError.class, () -> asserter.assertExpression(\"bar.count\", Integer.valueOf(5)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test311a",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test311a(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext ctx = null;\r\n    // @formatter:off\r\n    final String rpt = \"$$((a)->{\\n\" + \"<p>Universe ${a}</p>\\n\" + \"$$})(42)\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(rpt));\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(ctx, strw);\r\n    final String output = strw.toString();\r\n    assertEquals(\"<p>Universe 42</p>\\n\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test311b",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test311b(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext ctx311 = new Context311();\r\n    // @formatter:off\r\n    final String rpt = \"$$ exec('42').execute(()->{\\n\" + \"<p>Universe 42</p>\\n\" + \"$$})\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(rpt));\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(ctx311, strw, 42);\r\n    final String output = strw.toString();\r\n    assertEquals(\"<p>Universe 42</p>\\n\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test311c",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test311c(final JexlBuilder builder) {\r\n    init(builder);\r\n    final Context311 ctx311 = new Context311();\r\n    ctx311.newOptions().setLexical(true);\r\n    // @formatter:off\r\n    final String rpt = \"$$ exec('42').execute((a)->{\" + \"\\n<p>Universe ${a}</p>\" + \"\\n$$})\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(rpt));\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(ctx311, strw, 42);\r\n    final String output = strw.toString();\r\n    assertEquals(\"<p>Universe 42</p>\\n\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test311d",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test311d(final JexlBuilder builder) {\r\n    init(builder);\r\n    final Context311 ctx311 = new Context311();\r\n    ctx311.newOptions().setLexical(true);\r\n    // @formatter:off\r\n    final String rpt = \"$$ exec('4').execute((a, b)->{\" + \"\\n<p>Universe ${a}${b}</p>\" + \"\\n$$}, '2')\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(rpt));\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(ctx311, strw, 42);\r\n    final String output = strw.toString();\r\n    assertEquals(\"<p>Universe 42</p>\\n\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test311e",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test311e(final JexlBuilder builder) {\r\n    init(builder);\r\n    final Context311 ctx311 = new Context311();\r\n    ctx311.newOptions().setLexical(true);\r\n    // @formatter:off\r\n    final String rpt = \"exec('4').execute((a, b)->{\" + \" '<p>Universe ' + a + b + '</p>'\" + \"}, '2')\";\r\n    // @formatter:on\r\n    final JexlScript script = JEXL.createScript(rpt);\r\n    final String output = script.execute(ctx311, 42).toString();\r\n    assertEquals(\"<p>Universe 42</p>\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test311f",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test311f(final JexlBuilder builder) {\r\n    init(builder);\r\n    final Context311 ctx311 = new Context311();\r\n    ctx311.newOptions().setLexical(true);\r\n    // @formatter:off\r\n    final String rpt = \"exec('4').execute((a, b)->{\" + \" `<p>Universe ${a}${b}</p>`\" + \"}, '2')\";\r\n    // @formatter:on\r\n    final JexlScript script = JEXL.createScript(rpt);\r\n    final String output = script.execute(ctx311, 42).toString();\r\n    assertEquals(\"<p>Universe 42</p>\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test311g",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test311g(final JexlBuilder builder) {\r\n    init(builder);\r\n    final Context311 ctx311 = new Context311();\r\n    ctx311.newOptions().setLexical(true);\r\n    // @formatter:off\r\n    final String rpt = \"(a, b)->{\" + \" `<p>Universe ${a}${b}</p>`\" + \"}\";\r\n    // @formatter:on\r\n    final JexlScript script = JEXL.createScript(rpt);\r\n    final String output = script.execute(ctx311, \"4\", \"2\").toString();\r\n    assertEquals(\"<p>Universe 42</p>\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test311h",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test311h(final JexlBuilder builder) {\r\n    init(builder);\r\n    final Context311 ctx311 = new Context311();\r\n    ctx311.newOptions().setLexical(true);\r\n    final String rpt = \" `<p>Universe ${a}${b}</p>`\";\r\n    final JexlScript script = JEXL.createScript(rpt, \"a\", \"b\");\r\n    final String output = script.execute(ctx311, \"4\", \"2\").toString();\r\n    assertEquals(\"<p>Universe 42</p>\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test311i",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test311i(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext ctx311 = new Context311();\r\n    // @formatter:off\r\n    final String rpt = \"$$var u = 'Universe'; exec('4').execute((a, b)->{\" + \"\\n<p>${u} ${a}${b}</p>\" + \"\\n$$}, '2')\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(rpt));\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(ctx311, strw, 42);\r\n    final String output = strw.toString();\r\n    assertEquals(\"<p>Universe 42</p>\\n\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test315",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test315(final JexlBuilder builder) {\r\n    init(builder);\r\n    String s315;\r\n    StringWriter strw;\r\n    JxltEngine.Template t315;\r\n    String output;\r\n    s315 = \"<report/>$\";\r\n    t315 = JXLT.createTemplate(\"$$\", new StringReader(s315));\r\n    strw = new StringWriter();\r\n    t315.evaluate(context, strw);\r\n    output = strw.toString();\r\n    assertEquals(s315, output);\r\n    s315 = \"<foo/>#\";\r\n    t315 = JXLT.createTemplate(\"$$\", new StringReader(s315));\r\n    strw = new StringWriter();\r\n    t315.evaluate(context, strw);\r\n    output = strw.toString();\r\n    assertEquals(s315, output);\r\n    s315 = \"<bar/>\\\\\";\r\n    t315 = JXLT.createTemplate(\"$$\", new StringReader(s315));\r\n    strw = new StringWriter();\r\n    t315.evaluate(context, strw);\r\n    output = strw.toString();\r\n    assertEquals(s315, output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test42",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid test42(final JexlBuilder builder) {\r\n    init(builder);\r\n    // @formatter:off\r\n    final String test42 = \"$$ for (var x : list) {\\n\" + \"$$   if (x == 42) {\\n\" + \"Life, the universe, and everything\\n\" + \"$$   } else if (x > 42) {\\n\" + \"The value ${x} is over fourty-two\\n\" + \"$$   } else {\\n\" + \"The value ${x} is under fourty-two\\n\" + \"$$   }\\n\" + \"$$ }\\n\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(test42), \"list\");\r\n    final StringWriter strw = new StringWriter();\r\n    final int[] list = { 1, 3, 5, 42, 169 };\r\n    t.evaluate(context, strw, list);\r\n    final String output = strw.toString();\r\n    // @formatter:off\r\n    final String out42 = \"The value 1 is under fourty-two\\n\" + \"The value 3 is under fourty-two\\n\" + \"The value 5 is under fourty-two\\n\" + \"Life, the universe, and everything\\n\" + \"The value 169 is over fourty-two\\n\";\r\n    // @formatter:on\r\n    assertEquals(out42, output);\r\n    final String dstr = t.asString();\r\n    assertNotNull(dstr);\r\n    final TemplateDebugger td = new TemplateDebugger();\r\n    final String refactored = refactor(td, t);\r\n    assertNotNull(refactored);\r\n    assertEquals(test42, refactored);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testParseIdentifier",
  "sourceCode" : "@Test\r\nvoid testParseIdentifier() {\r\n    assertNull(JexlArithmetic.parseIdentifier(null));\r\n    assertNull(JexlArithmetic.parseIdentifier(\"\"));\r\n    assertNull(JexlArithmetic.parseIdentifier(\"za\"));\r\n    assertNull(JexlArithmetic.parseIdentifier(\"a\"));\r\n    assertNull(JexlArithmetic.parseIdentifier(\"00\"));\r\n    assertNull(JexlArithmetic.parseIdentifier(\"01\"));\r\n    assertNull(JexlArithmetic.parseIdentifier(\"001\"));\r\n    assertNull(JexlArithmetic.parseIdentifier(\"12345678901\"));\r\n    assertEquals(0, JexlArithmetic.parseIdentifier(\"0\"));\r\n    assertEquals(10, JexlArithmetic.parseIdentifier(\"10\"));\r\n    assertEquals(100, JexlArithmetic.parseIdentifier(\"100\"));\r\n    assertEquals(42, JexlArithmetic.parseIdentifier(\"42\"));\r\n    assertEquals(42000, JexlArithmetic.parseIdentifier(\"42000\"));\r\n    assertEquals(42, JexlArithmetic.parseIdentifier(42));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test425a",
  "sourceCode" : "@Test\r\nvoid test425a() {\r\n    final String S42 = \"fourty-two\";\r\n    final JexlBuilder builder = new JexlBuilder().strictInterpolation(true);\r\n    final JexlEngine jexl = builder.create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"let x = 42; let y = `${x}`; y\");\r\n    result = script.execute(null);\r\n    assertInstanceOf(String.class, result);\r\n    assertEquals(\"42\", result);\r\n    final Map<Object, Object> map = Collections.singletonMap(\"42\", S42);\r\n    script = jexl.createScript(\"let x = 42; map.`${x}`\", \"map\");\r\n    result = script.execute(null, map);\r\n    assertEquals(S42, result);\r\n    final List<String> list = Collections.singletonList(S42);\r\n    final JexlScript finalScript = script;\r\n    assertThrows(JexlException.Property.class, () -> finalScript.execute(null, list));\r\n    script = jexl.createScript(\"let x = 0; list[x]\", \"list\");\r\n    assertEquals(S42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test425b",
  "sourceCode" : "@Test\r\nvoid test425b() {\r\n    final String S42 = \"fourty-two\";\r\n    final JexlEngine jexl = new JexlBuilder().strictInterpolation(false).create();\r\n    run425bc(jexl, false);\r\n    run425bc(jexl, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "test425c",
  "sourceCode" : "@Test\r\nvoid test425c() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(8).arithmetic(new Arithmetic425(true)).strictInterpolation(true).create();\r\n    run425bc(jexl, true);\r\n    run425bc(jexl, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testAssign",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testAssign(final JexlBuilder builder) {\r\n    init(builder);\r\n    final Froboz froboz = new Froboz(32);\r\n    context.set(\"froboz\", froboz);\r\n    final JxltEngine.Expression assign = JXLT.createExpression(\"${froboz.value = 42}\");\r\n    final JxltEngine.Expression check = JXLT.createExpression(\"${froboz.value}\");\r\n    Object o = assign.evaluate(context);\r\n    assertEquals(Integer.valueOf(42), o);\r\n    o = check.evaluate(context);\r\n    assertEquals(Integer.valueOf(42), o);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testBadContextNested",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testBadContextNested(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JxltEngine.Expression expr = JXLT.createExpression(\"#{${hi}+'.world'}\");\r\n    final JexlContext none = null;\r\n    final JxltEngine.Exception xjexl = assertThrows(JxltEngine.Exception.class, () -> expr.evaluate(none), \"should be malformed\");\r\n    LOGGER.debug(xjexl.getMessage());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testCharAtBug",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testCharAtBug(final JexlBuilder builder) {\r\n    init(builder);\r\n    context.set(\"foo\", \"abcdef\");\r\n    final JexlOptions options = context.getEngineOptions();\r\n    JxltEngine.Expression expr = JXLT.createExpression(\"${foo.substring(2,4)/*comment*/}\");\r\n    Object o = expr.evaluate(context);\r\n    assertEquals(\"cd\", o);\r\n    context.set(\"bar\", \"foo\");\r\n    try {\r\n        options.setSilent(true);\r\n        expr = JXLT.createExpression(\"#{${bar}+'.charAt(-2)'}\");\r\n        expr = expr.prepare(context);\r\n        o = expr.evaluate(context);\r\n        assertNull(o);\r\n    } finally {\r\n        options.setSilent(false);\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testCommentedTemplate0",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testCommentedTemplate0(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    JxltEngine.Template tmplt;\r\n    // @formatter:off\r\n    final String src = \"$$/*\\n\" + \"Hello\\n\" + \"$$*/\";\r\n    tmplt = jxlt.createTemplate(src);\r\n    assertNotNull(tmplt);\r\n    final Writer strw = new StringWriter();\r\n    tmplt.evaluate(ctxt, strw);\r\n    assertTrue(strw.toString().isEmpty());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testCommentedTemplate1",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testCommentedTemplate1(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    JxltEngine.Template tmplt;\r\n    // @formatter:off\r\n    final String src = \"$$/*\\n\" + \"one\\n\" + \"$$*/\\n\" + \"42\\n\" + \"$$/*\\n\" + \"three\\n\" + \"$$*/\\n\";\r\n    // @formatter:on\r\n    tmplt = jxlt.createTemplate(src);\r\n    assertNotNull(tmplt);\r\n    final Writer strw = new StringWriter();\r\n    tmplt.evaluate(ctxt, strw);\r\n    assertEquals(\"42\\n\", strw.toString());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testComposite",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testComposite(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String source = \"Dear ${p} ${name};\";\r\n    final JxltEngine.Expression expr = JXLT.createExpression(source);\r\n    context.set(\"p\", \"Mr\");\r\n    context.set(\"name\", \"Doe\");\r\n    assertTrue(expr.isImmediate(), \"expression should be immediate\");\r\n    Object o = expr.evaluate(context);\r\n    assertEquals(\"Dear Mr Doe;\", o);\r\n    context.set(\"p\", \"Ms\");\r\n    context.set(\"name\", \"Jones\");\r\n    o = expr.evaluate(context);\r\n    assertEquals(\"Dear Ms Jones;\", o);\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testConstant0",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testConstant0(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext none = null;\r\n    final String source = \"Hello World!\";\r\n    final JxltEngine.Expression expr = JXLT.createExpression(source);\r\n    assertSame(expr.prepare(none), expr, \"prepare should return same expression\");\r\n    final Object o = expr.evaluate(none);\r\n    assertTrue(expr.isImmediate(), \"expression should be immediate\");\r\n    assertEquals(\"Hello World!\", o);\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testConstant2",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testConstant2(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext none = null;\r\n    final String source = \"${size({'map':123,'map2':456})}\";\r\n    final JxltEngine.Expression expr = JXLT.createExpression(source);\r\n    //assertTrue(\"prepare should return same expression\", expr.prepare(none) == expr);\r\n    final Object o = expr.evaluate(none);\r\n    assertTrue(expr.isImmediate(), \"expression should be immediate\");\r\n    assertEquals(2, o);\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testConstant3",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testConstant3(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext none = null;\r\n    final String source = \"#{size({'map':123,'map2':456})}\";\r\n    final JxltEngine.Expression expr = JXLT.createExpression(source);\r\n    //assertTrue(\"prepare should return same expression\", expr.prepare(none) == expr);\r\n    final Object o = expr.evaluate(none);\r\n    assertTrue(expr.isDeferred(), \"expression should be deferred\");\r\n    assertEquals(2, o);\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testConstant4",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testConstant4(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext none = null;\r\n    final String source = \"#{ ${size({'1':2,'2': 3})} }\";\r\n    final JxltEngine.Expression expr = JXLT.createExpression(source);\r\n    //assertTrue(\"prepare should return same expression\", expr.prepare(none) == expr);\r\n    final Object o = expr.evaluate(none);\r\n    assertTrue(expr.isDeferred(), \"expression should be deferred\");\r\n    assertEquals(2, o);\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testConstantTemplate",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testConstantTemplate(final JexlBuilder builder) {\r\n    init(builder);\r\n    // @formatter:off\r\n    final String src = \"<script>\\n\" + \"      function test(src){\\n\" + \"        var res = src.replace(/\\\\n\\\\t\\\\s/g, '\\\\n');\\n\" + \"      }\\n\" + \"      test();\\n\" + \"    </script>\";\r\n    // @formatter:on\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    JxltEngine.Template tmplt;\r\n    tmplt = jxlt.createTemplate(src);\r\n    assertNotNull(tmplt);\r\n    final Writer strw = new StringWriter();\r\n    tmplt.evaluate(ctxt, strw);\r\n    final String result = strw.toString();\r\n    assertEquals(src, result);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testDbgEscapes",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testDbgEscapes(final JexlBuilder builder) {\r\n    init(builder);\r\n    // @formatter:off\r\n    final String[] srcs = { \"jexl:print('hello\\\\'\\\\nworld')\", \"'hello\\\\tworld'\", \"'hello\\\\nworld'\", \"'hello\\\\fworld'\", \"'hello\\\\rworld'\" };\r\n    // @formatter:on\r\n    for (final String src : srcs) {\r\n        final JexlScript script = ENGINE.createScript(src);\r\n        final Debugger dbg = new Debugger();\r\n        dbg.debug(script);\r\n        final String msrc = dbg.toString();\r\n        assertEquals(src, msrc);\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testDeferred",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testDeferred(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext none = null;\r\n    final String source = \"#{'world'}\";\r\n    final JxltEngine.Expression expr = JXLT.createExpression(source);\r\n    assertTrue(expr.isDeferred(), \"expression should be deferred\");\r\n    final String as = expr.prepare(none).asString();\r\n    assertEquals(\"${'world'}\", as, \"prepare should return immediate version\");\r\n    final Object o = expr.evaluate(none);\r\n    assertEquals(\"world\", o);\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testEscape",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testEscape(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext none = null;\r\n    JxltEngine.Expression expr;\r\n    Object o;\r\n    // $ and # are escapable in TemplateEngine\r\n    expr = JXLT.createExpression(\"\\\\#{'world'}\");\r\n    o = expr.evaluate(none);\r\n    assertEquals(\"#{'world'}\", o);\r\n    expr = JXLT.createExpression(\"\\\\${'world'}\");\r\n    o = expr.evaluate(none);\r\n    assertEquals(\"${'world'}\", o);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testEscapeString",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testEscapeString(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JxltEngine.Expression expr = JXLT.createExpression(\"\\\\\\\"${'world\\\\'s finest'}\\\\\\\"\");\r\n    final JexlContext none = null;\r\n    final Object o = expr.evaluate(none);\r\n    assertEquals(\"\\\"world's finest\\\"\", o);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testImmediate",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testImmediate(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlContext none = null;\r\n    final String source = \"${'Hello ' + 'World!'}\";\r\n    final JxltEngine.Expression expr = JXLT.createExpression(source);\r\n    final JxltEngine.Expression prepared = expr.prepare(none);\r\n    assertEquals(\"Hello World!\", prepared.asString(), \"prepare should return same expression\");\r\n    final Object o = expr.evaluate(none);\r\n    assertTrue(expr.isImmediate(), \"expression should be immediate\");\r\n    assertEquals(\"Hello World!\", o);\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testImmediateTemplate",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testImmediateTemplate(final JexlBuilder builder) {\r\n    init(builder);\r\n    context.set(\"tables\", new String[] { \"table1\", \"table2\" });\r\n    context.set(\"w\", \"x=1\");\r\n    // @formatter:off\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(\"select * from \\n\" + \"$$var comma = false; \\n\" + \"$$for(var c : tables) { \\n\" + \"$$  if (comma) $jexl.write(','); else comma = true;\\n\" + \"${c}\" + \"\\n$$}\\n\" + \"where ${w}\\n\"));\r\n    // @formatter:on\r\n    final StringWriter strw = new StringWriter();\r\n    //vars.clear();\r\n    t.evaluate(context, strw);\r\n    final String output = strw.toString();\r\n    assertTrue(output.contains(\"table1\") && output.contains(\"table2\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testInheritedDebugger",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testInheritedDebugger(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String src = \"if ($A) { $B + 1; } else { $C - 2 }\";\r\n    final JexlEngine jexl = JXLT.getEngine();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Debugger sd = new Debugger();\r\n    final String rscript = sd.debug(script) ? sd.toString() : null;\r\n    assertNotNull(rscript);\r\n    final TemplateDebugger td = new TemplateDebugger();\r\n    final String refactored = td.debug(script) ? td.toString() : null;\r\n    assertNotNull(refactored);\r\n    assertEquals(refactored, rscript);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testInterpolation",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testInterpolation(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String expr = \"`Hello \\n${user}`\";\r\n    final JexlScript script = ENGINE.createScript(expr);\r\n    context.set(\"user\", \"Dimitri\");\r\n    Object value = script.execute(context);\r\n    assertEquals(\"Hello \\nDimitri\", value, expr);\r\n    context.set(\"user\", \"Rahul\");\r\n    value = script.execute(context);\r\n    assertEquals(\"Hello \\nRahul\", value, expr);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testInterpolationGlobal",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testInterpolationGlobal(final JexlBuilder builder) {\r\n    init(builder);\r\n    if (isLexicalShade()) {\r\n        context.set(\"user\", null);\r\n    }\r\n    final String expr = \"user='Dimitri'; `Hello \\n${user}`\";\r\n    final Object value = ENGINE.createScript(expr).execute(context);\r\n    assertEquals(\"Hello \\nDimitri\", value, expr);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testInterpolationLocal",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testInterpolationLocal(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String expr = \"var user='Henrib'; `Hello \\n${user}`\";\r\n    final Object value = ENGINE.createScript(expr).execute(context);\r\n    assertEquals(\"Hello \\nHenrib\", value, expr);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testInterpolationLvsG",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testInterpolationLvsG(final JexlBuilder builder) {\r\n    init(builder);\r\n    if (isLexicalShade()) {\r\n        context.set(\"user\", null);\r\n    }\r\n    final String expr = \"user='Dimitri'; var user='Henrib'; `H\\\\\\\"ello \\n${user}`\";\r\n    final Object value = ENGINE.createScript(expr).execute(context);\r\n    assertEquals(\"H\\\"ello \\nHenrib\", value, expr);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testInterpolationLvsG2",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testInterpolationLvsG2(final JexlBuilder builder) {\r\n    init(builder);\r\n    if (isLexicalShade()) {\r\n        context.set(\"user\", null);\r\n    }\r\n    final String expr = \"user='Dimitri'; var user='Henrib'; `H\\\\`ello \\n${user}`\";\r\n    final Object value = ENGINE.createScript(expr).execute(context);\r\n    assertEquals(\"H`ello \\nHenrib\", value, expr);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testInterpolationParameter",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testInterpolationParameter(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String expr = \"(user)->{`Hello \\n${user}`}\";\r\n    final JexlScript script = ENGINE.createScript(expr);\r\n    Object value = script.execute(context, \"Henrib\");\r\n    assertEquals(\"Hello \\nHenrib\", value, expr);\r\n    value = ENGINE.createScript(expr).execute(context, \"Dimitri\");\r\n    assertEquals(\"Hello \\nDimitri\", value, expr);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testLexicalTemplate",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testLexicalTemplate(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlOptions opts = new JexlOptions();\r\n    final JexlContext ctxt = new PragmaticContext(opts);\r\n    opts.setCancellable(false);\r\n    opts.setStrict(false);\r\n    opts.setSafe(true);\r\n    opts.setLexical(false);\r\n    opts.setLexicalShade(false);\r\n    // @formatter:off\r\n    final String src0 = \"${$options.strict?'+':'-'}strict\" + \" ${$options.cancellable?'+':'-'}cancellable\" + \" ${$options.lexical?'+':'-'}lexical\" + \" ${$options.lexicalShade?'+':'-'}lexicalShade\" + \" ${$options.safe?'+':'-'}safe\";\r\n    // @formatter:on\r\n    final JxltEngine.Template tmplt0 = JXLT.createTemplate(\"$$\", new StringReader(src0));\r\n    final Writer strw0 = new StringWriter();\r\n    tmplt0.evaluate(ctxt, strw0);\r\n    final String output0 = strw0.toString();\r\n    final JexlFeatures features = BUILDER.features();\r\n    if (features != null && features.isLexical() && features.isLexicalShade()) {\r\n        assertEquals(\"-strict -cancellable +lexical +lexicalShade +safe\", output0);\r\n    } else {\r\n        assertEquals(\"-strict -cancellable -lexical -lexicalShade +safe\", output0);\r\n    }\r\n    final String src = \"$$ #pragma script.mode pro50\\n\" + src0;\r\n    final JxltEngine.Template tmplt = JXLT.createTemplate(\"$$\", new StringReader(src));\r\n    final Writer strw = new StringWriter();\r\n    tmplt.evaluate(ctxt, strw);\r\n    final String output = strw.toString();\r\n    assertEquals(\"+strict +cancellable +lexical +lexicalShade -safe\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testMalformed",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testMalformed(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JxltEngine.Exception xjexl = assertThrows(JxltEngine.Exception.class, () -> JXLT.createExpression(\"${'world'\"), \"should be malformed\");\r\n    LOGGER.debug(xjexl.getMessage());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testMalformedNested",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testMalformedNested(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JxltEngine.Exception xjexl = assertThrows(JxltEngine.Exception.class, () -> JXLT.createExpression(\"#{${hi} world}\"), \"should be malformed\");\r\n    LOGGER.debug(xjexl.getMessage());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testMalformedNested2",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testMalformedNested2(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JxltEngine.Exception xjexl = assertThrows(JxltEngine.Exception.class, () -> JXLT.createExpression(\"#{${hi} world}\"), \"should be malformed\");\r\n    LOGGER.debug(xjexl.getMessage());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testNested",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testNested(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String source = \"#{${hi}+'.world'}\";\r\n    final JxltEngine.Expression expr = JXLT.createExpression(source);\r\n    final Set<List<String>> evars = expr.getVariables();\r\n    assertEquals(1, evars.size());\r\n    assertTrue(contains(evars, Collections.singletonList(\"hi\")));\r\n    context.set(\"hi\", \"greeting\");\r\n    context.set(\"greeting.world\", \"Hello World!\");\r\n    assertTrue(expr.isDeferred(), \"expression should be deferred\");\r\n    final Object o = expr.evaluate(context);\r\n    assertEquals(\"Hello World!\", o);\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testNestedTemplate",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testNestedTemplate(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String source = \"#{${hi}+'.world'}\";\r\n    final JxltEngine.Template expr = JXLT.createTemplate(source, \"hi\");\r\n    context.set(\"greeting.world\", \"Hello World!\");\r\n    final StringWriter strw = new StringWriter();\r\n    expr.evaluate(context, strw, \"greeting\");\r\n    final String o = strw.toString();\r\n    assertEquals(\"Hello World!\", o);\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testNonEscapeString",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testNonEscapeString(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JxltEngine.Expression expr = JXLT.createExpression(\"c:\\\\some\\\\windows\\\\path\");\r\n    final JexlContext none = null;\r\n    final Object o = expr.evaluate(none);\r\n    assertEquals(\"c:\\\\some\\\\windows\\\\path\", o);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testOneLiner",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testOneLiner(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(\"fourty-two\"));\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(context, strw);\r\n    final String output = strw.toString();\r\n    assertEquals(\"fourty-two\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testOneLinerVar",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testOneLinerVar(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(\"fourty-${x}\"));\r\n    final StringWriter strw = new StringWriter();\r\n    context.set(\"x\", \"two\");\r\n    t.evaluate(context, strw);\r\n    final String output = strw.toString();\r\n    assertEquals(\"fourty-two\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testPrepareEvaluate",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testPrepareEvaluate(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String source = \"Dear #{p} ${name};\";\r\n    final JxltEngine.Expression expr = JXLT.createExpression(\"Dear #{p} ${name};\");\r\n    assertTrue(expr.isDeferred(), \"expression should be deferred\");\r\n    final Set<List<String>> evars = expr.getVariables();\r\n    assertEquals(1, evars.size());\r\n    assertTrue(contains(evars, Collections.singletonList(\"name\")));\r\n    context.set(\"name\", \"Doe\");\r\n    final JxltEngine.Expression phase1 = expr.prepare(context);\r\n    final String as = phase1.asString();\r\n    assertEquals(\"Dear ${p} Doe;\", as);\r\n    final Set<List<String>> evars1 = phase1.getVariables();\r\n    assertEquals(1, evars1.size());\r\n    assertTrue(contains(evars1, Collections.singletonList(\"p\")));\r\n    vars.clear();\r\n    context.set(\"p\", \"Mr\");\r\n    context.set(\"name\", \"Should not be used in 2nd phase\");\r\n    final Object o = phase1.evaluate(context);\r\n    assertEquals(\"Dear Mr Doe;\", o);\r\n    final String p1 = getSource(phase1.toString());\r\n    assertEquals(source, getSource(phase1.toString()));\r\n    assertEquals(source, getSource(expr.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testPrepareTemplate",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testPrepareTemplate(final JexlBuilder builder) {\r\n    init(builder);\r\n    // @formatter:off\r\n    final String source = \"$$ for(var x : list) {\\n\" + \"${l10n}=#{x}\\n\" + \"$$ }\\n\";\r\n    // @formatter:on\r\n    final int[] args = { 42 };\r\n    final JxltEngine.Template tl10n = JXLT.createTemplate(source, \"list\");\r\n    final String dstr = tl10n.asString();\r\n    assertNotNull(dstr);\r\n    final Set<List<String>> vars = tl10n.getVariables();\r\n    assertFalse(vars.isEmpty());\r\n    context.set(\"l10n\", \"valeur\");\r\n    final JxltEngine.Template tpFR = tl10n.prepare(context);\r\n    context.set(\"l10n\", \"value\");\r\n    final JxltEngine.Template tpEN = tl10n.prepare(context);\r\n    context.set(\"l10n\", null);\r\n    StringWriter strw;\r\n    strw = new StringWriter();\r\n    tpFR.evaluate(context, strw, args);\r\n    final String outFR = strw.toString();\r\n    assertEquals(\"valeur=42\\n\", outFR);\r\n    context.set(\"l10n\", null);\r\n    strw = new StringWriter();\r\n    tpEN.evaluate(context, strw, args);\r\n    final String outEN = strw.toString();\r\n    assertEquals(\"value=42\\n\", outEN);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testReport",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testReport(final JexlBuilder builder) {\r\n    init(builder);\r\n    // @formatter:off\r\n    final String rpt = \"<report>\\n\" + \"\\n\" + \"\\n$$ var a = 1;\" + \"\\n$$ var x = 2;\" + \"\\n\" + \"\\n$$ var y = 9;\" + \"\\n\" + \"\\n        ${x + y}\" + \"\\n</report>\\n\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(rpt));\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(context, strw);\r\n    final String output = strw.toString();\r\n    final String ctl = \"<report>\\n\\n\\n\\n\\n        11\\n</report>\\n\";\r\n    assertEquals(ctl, output);\r\n    final TemplateDebugger td = new TemplateDebugger();\r\n    final String refactored = refactor(td, t);\r\n    assertNotNull(refactored);\r\n    assertEquals(rpt, refactored);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testReport1",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testReport1(final JexlBuilder builder) {\r\n    init(builder);\r\n    // @formatter:off\r\n    final String rpt = \"<report>\\n\" + \"this is ${x}\\n\" + \"${x + 1}\\n\" + \"${x + 2}\\n\" + \"${x + 3}\\n\" + \"</report>\\n\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(rpt));\r\n    final StringWriter strw = new StringWriter();\r\n    context.set(\"x\", 42);\r\n    t.evaluate(context, strw, 42);\r\n    final String output = strw.toString();\r\n    int count = 0;\r\n    for (int i = 0; i < output.length(); ++i) {\r\n        final char c = output.charAt(i);\r\n        if ('\\n' == c) {\r\n            count += 1;\r\n        }\r\n    }\r\n    assertEquals(6, count);\r\n    assertTrue(output.indexOf(\"42\") > 0);\r\n    assertTrue(output.indexOf(\"43\") > 0);\r\n    assertTrue(output.indexOf(\"44\") > 0);\r\n    assertTrue(output.indexOf(\"45\") > 0);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testReport2",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testReport2(final JexlBuilder builder) {\r\n    init(builder);\r\n    // @formatter:off\r\n    final String rpt = \"<report>\\n\" + \"this is ${x}\\n\" + \"${x + 1}\\n\" + \"${x + 2}\\n\" + \"${x + 3}\\n\" + \"</report>\\n\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(rpt), \"x\");\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(context, strw, 42);\r\n    final String output = strw.toString();\r\n    int count = 0;\r\n    for (int i = 0; i < output.length(); ++i) {\r\n        final char c = output.charAt(i);\r\n        if ('\\n' == c) {\r\n            count += 1;\r\n        }\r\n    }\r\n    assertEquals(6, count);\r\n    assertTrue(output.indexOf(\"42\") > 0);\r\n    assertTrue(output.indexOf(\"43\") > 0);\r\n    assertTrue(output.indexOf(\"44\") > 0);\r\n    assertTrue(output.indexOf(\"45\") > 0);\r\n    final TemplateDebugger td = new TemplateDebugger();\r\n    final String xxx = refactor(td, t);\r\n    assertNotNull(xxx);\r\n    assertEquals(rpt, xxx);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testSanboxed311i",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testSanboxed311i(final JexlBuilder builder) {\r\n    init(builder);\r\n    /// this uberspect cannot access jexl3 classes (besides test)\r\n    final Uberspect uberspect = new Uberspect(LogFactory.getLog(JXLTTest.class), null, NOJEXL3);\r\n    final Method method = uberspect.getMethod(TemplateInterpreter.class, \"print\", new Object[] { Integer.TYPE });\r\n    final JexlEngine jexl = new JexlBuilder().uberspect(uberspect).create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    final JexlContext ctx311 = new Context311();\r\n    // @formatter:off\r\n    final String rpt = \"$$var u = 'Universe'; exec('4').execute((a, b)->{\" + \"\\n<p>${u} ${a}${b}</p>\" + \"\\n$$}, '2')\";\r\n    // @formatter:on\r\n    final JxltEngine.Template t = jxlt.createTemplate(\"$$\", new StringReader(rpt));\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(ctx311, strw, 42);\r\n    final String output = strw.toString();\r\n    assertEquals(\"<p>Universe 42</p>\\n\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testSanboxedTemplate",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testSanboxedTemplate(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String src = \"Hello ${user}\";\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"user\", \"Francesco\");\r\n    /// this uberspect cannot access jexl3 classes (besides test)\r\n    final Uberspect uberspect = new Uberspect(LogFactory.getLog(JXLTTest.class), null, NOJEXL3);\r\n    final Method method = uberspect.getMethod(TemplateInterpreter.class, \"print\", new Object[] { Integer.TYPE });\r\n    assertNull(method);\r\n    // ensures JXLT sandboxed still executes\r\n    final JexlEngine jexl = new JexlBuilder().uberspect(uberspect).create();\r\n    final JxltEngine jxlt = jexl.createJxltEngine();\r\n    final JxltEngine.Template tmplt = jxlt.createTemplate(src);\r\n    final Writer strw = new StringWriter();\r\n    tmplt.evaluate(ctxt, strw);\r\n    final String result = strw.toString();\r\n    assertEquals(\"Hello Francesco\", result);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testStatement",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testStatement(final JexlBuilder builder) {\r\n    init(builder);\r\n    final Froboz froboz = new Froboz(32);\r\n    context.set(\"froboz\", froboz);\r\n    final JxltEngine.Expression check = JXLT.createExpression(\"${ froboz.plus10() }\");\r\n    final Object o = check.evaluate(context);\r\n    assertEquals(Integer.valueOf(32), o);\r\n    assertEquals(42, froboz.getValue());\r\n    final Set<List<String>> evars = check.getVariables();\r\n    assertEquals(1, evars.size());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testTemplate0",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testTemplate0(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String source = \"   $$ if(x) {\\nx is ${x}\\n   $$ } else {\\n${'no x'}\\n$$ }\\n\";\r\n    StringWriter strw;\r\n    String output;\r\n    final JxltEngine.Template t = JXLT.createTemplate(source);\r\n    context.set(\"x\", 42);\r\n    strw = new StringWriter();\r\n    t.evaluate(context, strw);\r\n    output = strw.toString();\r\n    assertEquals(\"x is 42\\n\", output);\r\n    strw = new StringWriter();\r\n    context.set(\"x\", \"\");\r\n    t.evaluate(context, strw);\r\n    output = strw.toString();\r\n    assertEquals(\"no x\\n\", output);\r\n    final String dstr = t.toString();\r\n    assertNotNull(dstr);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testTemplate1",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testTemplate1(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String source = \"$$ if(x) {\\nx is ${x}\\n$$ } else {\\n${'no x'}\\n$$ }\\n\";\r\n    StringWriter strw;\r\n    String output;\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(source), \"x\");\r\n    final String dstr = t.asString();\r\n    assertNotNull(dstr);\r\n    strw = new StringWriter();\r\n    t.evaluate(context, strw, 42);\r\n    output = strw.toString();\r\n    assertEquals(\"x is 42\\n\", output);\r\n    strw = new StringWriter();\r\n    t.evaluate(context, strw, \"\");\r\n    output = strw.toString();\r\n    assertEquals(\"no x\\n\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testTemplate10",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testTemplate10(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String source = \"$$(x)->{ if(x) {\\nx is ${x}\\n$$ } else {\\n${'no x'}\\n$$ } }\\n\";\r\n    StringWriter strw;\r\n    String output;\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(source), (String[]) null);\r\n    final String dstr = t.asString();\r\n    assertNotNull(dstr);\r\n    final String[] ps = t.getParameters();\r\n    assertTrue(Arrays.asList(ps).contains(\"x\"));\r\n    strw = new StringWriter();\r\n    t.evaluate(context, strw, 42);\r\n    output = strw.toString();\r\n    assertEquals(\"x is 42\\n\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testTemplate2",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testTemplate2(final JexlBuilder builder) {\r\n    init(builder);\r\n    final String source = \"The answer: ${x}\";\r\n    StringWriter strw;\r\n    String output;\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(source), \"x\");\r\n    final String dstr = t.asString();\r\n    assertNotNull(dstr);\r\n    strw = new StringWriter();\r\n    t.evaluate(context, strw, 42);\r\n    output = strw.toString();\r\n    assertEquals(\"The answer: 42\", output);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testTemplateOutOfScope",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testTemplateOutOfScope(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlOptions opts = new JexlOptions();\r\n    opts.setCancellable(false);\r\n    opts.setStrict(false);\r\n    opts.setLexical(false);\r\n    opts.setLexicalShade(false);\r\n    opts.setSharedInstance(true);\r\n    final JexlContext ctxt = new PragmaticContext(opts);\r\n    final String src = \"$$if (false) { var tab = 42; }\\n\" + \"${tab}\";\r\n    JxltEngine.Template tmplt;\r\n    final JexlFeatures features = BUILDER.features();\r\n    try {\r\n        tmplt = JXLT.createTemplate(\"$$\", new StringReader(src));\r\n    } catch (final JexlException xparse) {\r\n        if (features != null && features.isLexicalShade()) {\r\n            return;\r\n        }\r\n        throw xparse;\r\n    }\r\n    final Writer strw = new StringWriter();\r\n    opts.setSafe(true);\r\n    assertDoesNotThrow(() -> tmplt.evaluate(ctxt, strw), \"safe should prevent local shade\");\r\n    assertTrue(strw.toString().isEmpty());\r\n    opts.setStrict(true);\r\n    opts.setSafe(false);\r\n    final JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> tmplt.evaluate(ctxt, strw));\r\n    assertTrue(\"tab\".equals(xvar.getVariable()));\r\n    assertTrue(xvar.isUndefined());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testTemplatePragmaPro50",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testTemplatePragmaPro50(final JexlBuilder builder) {\r\n    init(builder);\r\n    final JexlOptions opts = new JexlOptions();\r\n    opts.setCancellable(false);\r\n    opts.setStrict(false);\r\n    opts.setSafe(true);\r\n    opts.setLexical(false);\r\n    opts.setLexicalShade(false);\r\n    opts.setSharedInstance(true);\r\n    final JexlContext ctxt = new PragmaticContext(opts);\r\n    // @formatter:off\r\n    final String src = \"$$ #pragma script.mode pro50\\n\" + \"$$ var tab = null;\\n\" + \"$$ tab.dummy();\";\r\n    // @formatter:on\r\n    final JxltEngine.Template tmplt = JXLT.createTemplate(\"$$\", new StringReader(src));\r\n    final Writer strw = new StringWriter();\r\n    final JexlException.Variable xvar = assertThrows(JexlException.Variable.class, () -> tmplt.evaluate(ctxt, strw));\r\n    assertEquals(\"tab\", xvar.getVariable());\r\n    assertFalse(xvar.isUndefined());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\JXLTTest.java",
  "methodName" : "testWriter",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"engines\")\r\nvoid testWriter(final JexlBuilder builder) {\r\n    init(builder);\r\n    final Froboz froboz = new Froboz(42);\r\n    final Writer writer = new FrobozWriter(new StringWriter());\r\n    final JxltEngine.Template t = JXLT.createTemplate(\"$$\", new StringReader(\"$$$jexl.print(froboz)\"), \"froboz\");\r\n    t.evaluate(context, writer, froboz);\r\n    assertEquals(\"froboz{42}\", writer.toString());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "test270",
  "sourceCode" : "@Test\r\nvoid test270() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript base = jexl.createScript(\"(x, y, z)->{ x + y + z }\");\r\n    final String text = base.toString();\r\n    JexlScript script = base.curry(5, 15);\r\n    assertEquals(text, script.toString());\r\n    final JexlContext ctxt = new JexlEvalContext();\r\n    ctxt.set(\"s\", base);\r\n    script = jexl.createScript(\"return s\");\r\n    Object result = script.execute(ctxt);\r\n    assertEquals(text, result.toString());\r\n    script = jexl.createScript(\"return s.curry(1)\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(text, result.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "test271a",
  "sourceCode" : "@Test\r\nvoid test271a() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript base = jexl.createScript(\"var base = 1; var x = (a)->{ var y = (b) -> {base + b}; return base + y(a)}; x(40)\");\r\n    final Object result = base.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "test271b",
  "sourceCode" : "@Test\r\nvoid test271b() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript base = jexl.createScript(\"var base = 2; var sum = (x, y, z)->{ base + x + y + z }; var y = sum.curry(1); y(2,3)\");\r\n    final Object result = base.execute(null);\r\n    assertEquals(8, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "test271c",
  "sourceCode" : "@Test\r\nvoid test271c() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript base = jexl.createScript(\"(x, y, z)->{ 2 + x + y + z };\");\r\n    final JexlScript y = base.curry(1);\r\n    final Object result = y.execute(null, 2, 3);\r\n    assertEquals(8, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "test271d",
  "sourceCode" : "@Test\r\nvoid test271d() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript base = jexl.createScript(\"var base = 2; (x, y, z)->base + x + y + z;\");\r\n    final JexlScript y = ((JexlScript) base.execute(null)).curry(1);\r\n    final Object result = y.execute(null, 2, 3);\r\n    assertEquals(8, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "test271e",
  "sourceCode" : "// Redefining a captured var is not resolved correctly in left-hand side;\r\n// declare the var in local frame, resolved in local frame instead of parent.\r\n@Test\r\nvoid test271e() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript base = jexl.createScript(\"var base = 1000; var f = (x, y)->{ var base = x + y + (base?:-1000); base; }; f(100, 20)\");\r\n    final Object result = base.execute(null);\r\n    assertEquals(1120, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "test405a",
  "sourceCode" : "@Test\r\nvoid test405a() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(4).strict(true).safe(false).create();\r\n    final String libSrc = \"var theFunction = argFn -> { var fn = argFn; fn() }; { 'theFunction' : theFunction }\";\r\n    final String src1 = \"var v0 = 42; var v1 = -42; lib.theFunction(()->{ v1 + v0 }) \";\r\n    final JexlScript libMap = jexl.createScript(libSrc);\r\n    final Object theLib = libMap.execute(null);\r\n    final JexlScript f1 = jexl.createScript(src1, \"lib\");\r\n    final Object result = f1.execute(null, theLib);\r\n    assertEquals(0, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "test405b",
  "sourceCode" : "@Test\r\nvoid test405b() {\r\n    final JexlEngine jexl = new JexlBuilder().cache(4).strict(true).safe(false).create();\r\n    final String libSrc = \"function theFunction(argFn) { var fn = argFn; fn() }; { 'theFunction' : theFunction }\";\r\n    final String src1 = \"var v0 = 42; var v1 = -42; lib.theFunction(()->{ v1 + v0 }) \";\r\n    final JexlScript libMap = jexl.createScript(libSrc);\r\n    final Object theLib = libMap.execute(null);\r\n    final JexlScript f1 = jexl.createScript(src1, \"lib\");\r\n    final Object result = f1.execute(null, theLib);\r\n    assertEquals(0, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testCompareLambdaRecurse",
  "sourceCode" : "@Test\r\nvoid testCompareLambdaRecurse() throws Exception {\r\n    final JexlEngine jexl = createEngine();\r\n    final String factSrc = \"function fact(x) { x < 2? 1 : x * fact(x - 1) }\";\r\n    final JexlScript fact0 = jexl.createScript(factSrc);\r\n    final JexlScript fact1 = jexl.createScript(fact0.toString());\r\n    assertEquals(fact0, fact1);\r\n    final Closure r0 = (Closure) fact0.execute(null);\r\n    final Closure r1 = (Closure) fact1.execute(null);\r\n    assertEquals(720, r0.execute(null, 6));\r\n    assertEquals(720, r1.execute(null, 6));\r\n    assertEquals(r0, r1);\r\n    assertEquals(r1, r0);\r\n    // ensure we did not break anything through equals\r\n    assertEquals(720, r0.execute(null, 6));\r\n    assertEquals(720, r1.execute(null, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testCurry1",
  "sourceCode" : "@Test\r\nvoid testCurry1() {\r\n    final JexlEngine jexl = createEngine();\r\n    JexlScript script;\r\n    Object result;\r\n    String[] parms;\r\n    final JexlScript base = jexl.createScript(\"(x, y, z)->{ x + y + z }\");\r\n    parms = base.getUnboundParameters();\r\n    assertEquals(3, parms.length);\r\n    script = base.curry(5);\r\n    parms = script.getUnboundParameters();\r\n    assertEquals(2, parms.length);\r\n    script = script.curry(15);\r\n    parms = script.getUnboundParameters();\r\n    assertEquals(1, parms.length);\r\n    script = script.curry(22);\r\n    parms = script.getUnboundParameters();\r\n    assertEquals(0, parms.length);\r\n    result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testCurry2",
  "sourceCode" : "@Test\r\nvoid testCurry2() {\r\n    final JexlEngine jexl = createEngine();\r\n    JexlScript script;\r\n    Object result;\r\n    String[] parms;\r\n    final JexlScript base = jexl.createScript(\"(x, y, z)->{ x + y + z }\");\r\n    script = base.curry(5, 15);\r\n    parms = script.getUnboundParameters();\r\n    assertEquals(1, parms.length);\r\n    script = script.curry(22);\r\n    result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testCurry3",
  "sourceCode" : "@Test\r\nvoid testCurry3() {\r\n    final JexlEngine jexl = createEngine();\r\n    JexlScript script;\r\n    Object result;\r\n    final JexlScript base = jexl.createScript(\"(x, y, z)->{ x + y + z }\");\r\n    script = base.curry(5, 15);\r\n    result = script.execute(null, 22);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testCurry4",
  "sourceCode" : "@Test\r\nvoid testCurry4() {\r\n    final JexlEngine jexl = createEngine();\r\n    JexlScript script;\r\n    Object result;\r\n    final JexlScript base = jexl.createScript(\"(x, y, z)->{ x + y + z }\");\r\n    script = base.curry(5);\r\n    result = script.execute(null, 15, 22);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testCurry5",
  "sourceCode" : "@Test\r\nvoid testCurry5() {\r\n    final JexlEngine jexl = createEngine();\r\n    JexlScript script;\r\n    Object result;\r\n    final JexlScript base = jexl.createScript(\"var t = x + y + z; return t\", \"x\", \"y\", \"z\");\r\n    script = base.curry(5);\r\n    result = script.execute(null, 15, 22);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testFailParseFunc",
  "sourceCode" : "@ParameterizedTest\r\n@CsvSource({ \"'if (false) function foo(x) { x + x }; var foo = 1', 'function'\", \"'if (false) let foo = (x) -> { x + x }; var foo = 1', 'let'\", \"'function foo(x) { x + x }; var foo = 42', 'foo'\" })\r\nvoid testFailParseFunc(String src, String expectedKeyword) {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(src));\r\n    assertTrue(xparse.getMessage().contains(expectedKeyword));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testFatFact0",
  "sourceCode" : "@Test\r\nvoid testFatFact0() {\r\n    final JexlFeatures features = new JexlFeatures();\r\n    features.fatArrow(true);\r\n    final String src = \"function (a) { const fact = x =>{ x <= 1? 1 : x * fact(x - 1) }; fact(a) }\";\r\n    final JexlEngine jexl = createEngine(features);\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null, 6);\r\n    assertEquals(720, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testFatFact1",
  "sourceCode" : "@Test\r\nvoid testFatFact1() {\r\n    final String src = \"function (a) { const fact = (x)=> x <= 1? 1 : x * fact(x - 1) ; fact(a) }\";\r\n    final JexlFeatures features = new JexlFeatures();\r\n    features.fatArrow(true);\r\n    final JexlEngine jexl = createEngine(features);\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null, 6);\r\n    assertEquals(720, result);\r\n    features.fatArrow(false);\r\n    final JexlEngine jexl1 = createEngine(features);\r\n    final JexlException.Feature xfeature = assertThrows(JexlException.Feature.class, () -> jexl1.createScript(src));\r\n    assertTrue(xfeature.getMessage().contains(\"fat-arrow\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testHoistLambda",
  "sourceCode" : "@Test\r\nvoid testHoistLambda() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlEvalContext ctx = new JexlEvalContext();\r\n    ctx.getEngineOptions().setLexical(false);\r\n    JexlScript s42;\r\n    Object result;\r\n    JexlScript s15;\r\n    String[] localv;\r\n    Set<List<String>> hvars;\r\n    String strs;\r\n    // hosted variables are NOT local variables\r\n    strs = \"(x)->{ (y)->{ x + y } }\";\r\n    s42 = jexl.createScript(strs);\r\n    result = s42.execute(ctx, 15);\r\n    assertInstanceOf(JexlScript.class, result);\r\n    s15 = (JexlScript) result;\r\n    localv = s15.getLocalVariables();\r\n    assertEquals(0, localv.length);\r\n    hvars = s15.getVariables();\r\n    assertEquals(1, hvars.size());\r\n    // declaring a local that overrides captured\r\n    // in 3.1, such a local was considered local\r\n    // per 3.2, this local is considered captured\r\n    strs = \"(x)->{ (y)->{ var z = 169; var x; x + y } }\";\r\n    s42 = jexl.createScript(strs);\r\n    result = s42.execute(ctx, 15);\r\n    assertInstanceOf(JexlScript.class, result);\r\n    s15 = (JexlScript) result;\r\n    localv = s15.getLocalVariables();\r\n    assertNotNull(localv);\r\n    assertEquals(1, localv.length);\r\n    hvars = s15.getVariables();\r\n    assertEquals(1, hvars.size());\r\n    // evidence this is not (strictly) a local since it inherited a captured value\r\n    result = s15.execute(ctx, 27);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testIdentity",
  "sourceCode" : "@Test\r\nvoid testIdentity() {\r\n    final JexlEngine jexl = createEngine();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(\"(x)->{ x }\");\r\n    assertArrayEquals(new String[] { \"x\" }, script.getParameters());\r\n    result = script.execute(null, 42);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testLambda",
  "sourceCode" : "@Test\r\nvoid testLambda() {\r\n    final JexlEngine jexl = createEngine();\r\n    String strs = \"var s = function(x) { x + x }; s(21)\";\r\n    JexlScript s42 = jexl.createScript(strs);\r\n    Object result = s42.execute(null);\r\n    assertEquals(42, result);\r\n    strs = \"var s = function(x, y) { x + y }; s(15, 27)\";\r\n    s42 = jexl.createScript(strs);\r\n    result = s42.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testLambdaClosure",
  "sourceCode" : "@Test\r\nvoid testLambdaClosure() {\r\n    final JexlEngine jexl = createEngine();\r\n    String strs = \"var t = 20; var s = function(x, y) { x + y + t}; s(15, 7)\";\r\n    JexlScript s42 = jexl.createScript(strs);\r\n    Object result = s42.execute(null);\r\n    assertEquals(42, result);\r\n    strs = \"var t = 19; var s = function(x, y) { var t = 20; x + y + t}; s(15, 7)\";\r\n    s42 = jexl.createScript(strs);\r\n    result = s42.execute(null);\r\n    assertEquals(42, result);\r\n    strs = \"var t = 20; var s = function(x, y) {x + y + t}; t = 54; s(15, 7)\";\r\n    s42 = jexl.createScript(strs);\r\n    result = s42.execute(null);\r\n    assertEquals(42, result);\r\n    strs = \"var t = 19; var s = function(x, y) { var t = 20; x + y + t}; t = 54; s(15, 7)\";\r\n    s42 = jexl.createScript(strs);\r\n    result = s42.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testLambdaExpr0",
  "sourceCode" : "@Test\r\nvoid testLambdaExpr0() {\r\n    final String src = \"(x, y) -> x + y\";\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null, 11, 31);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testLambdaExpr1",
  "sourceCode" : "@Test\r\nvoid testLambdaExpr1() {\r\n    final String src = \"x -> x + x\";\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null, 21);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testLambdaExpr10",
  "sourceCode" : "@Test\r\nvoid testLambdaExpr10() {\r\n    final String src = \"(a)->{ var x = x -> x + x; x(a) }\";\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null, 21);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testLambdaExpr2",
  "sourceCode" : "@Test\r\nvoid testLambdaExpr2() {\r\n    final String src = \"x -> { { x + x } }\";\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null, 21);\r\n    assertInstanceOf(Set.class, result);\r\n    final Set<?> set = (Set<?>) result;\r\n    assertEquals(1, set.size());\r\n    assertTrue(set.contains(42));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testLambdaExpr3",
  "sourceCode" : "@Test\r\nvoid testLambdaExpr3() {\r\n    final String src = \"x -> ( { x + x } )\";\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null, 21);\r\n    assertInstanceOf(Set.class, result);\r\n    final Set<?> set = (Set<?>) result;\r\n    assertEquals(1, set.size());\r\n    assertTrue(set.contains(42));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testLambdaLambda",
  "sourceCode" : "@Test\r\nvoid testLambdaLambda() {\r\n    final JexlEngine jexl = createEngine();\r\n    String strs = \"var t = 19; ( (x, y)->{ var t = 20; x + y + t} )(15, 7);\";\r\n    JexlScript s42 = jexl.createScript(strs);\r\n    Object result = s42.execute(null);\r\n    assertEquals(42, result);\r\n    strs = \"( (x, y)->{ ( (xx, yy)->{xx + yy } )(x, y) } )(15, 27)\";\r\n    s42 = jexl.createScript(strs);\r\n    result = s42.execute(null);\r\n    assertEquals(42, result);\r\n    strs = \"var t = 19; var s = (x, y)->{ var t = 20; x + y + t}; t = 54; s(15, 7)\";\r\n    s42 = jexl.createScript(strs);\r\n    result = s42.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testNamedFunc",
  "sourceCode" : "@Test\r\nvoid testNamedFunc() {\r\n    final String src = \"(let a)->{ function fact(const x) { x <= 1? 1 : x * fact(x - 1); } fact(a); }\";\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript script = jexl.createScript(src);\r\n    final Object result = script.execute(null, 6);\r\n    assertEquals(720, result);\r\n    final String parsed = simpleWhitespace(script.getParsedText());\r\n    assertEquals(simpleWhitespace(src), parsed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testNestLambada",
  "sourceCode" : "@Test\r\nvoid testNestLambada() throws Exception {\r\n    final JexlEngine jexl = createEngine();\r\n    final String strs = \"(x)->{ (y)->{ x + y } }\";\r\n    final JexlScript s42 = jexl.createScript(strs);\r\n    final JexlScript s42b = jexl.createScript(s42.toString());\r\n    assertEquals(s42.hashCode(), s42b.hashCode());\r\n    assertEquals(s42, s42b);\r\n    Object result = s42.execute(null, 15);\r\n    assertInstanceOf(JexlScript.class, result);\r\n    final Object resultb = s42.execute(null, 15);\r\n    assertEquals(result.hashCode(), resultb.hashCode());\r\n    assertEquals(result, resultb);\r\n    assertEquals(result, jexl.createScript(resultb.toString(), \"x\").execute(null, 15));\r\n    final JexlScript s15 = (JexlScript) result;\r\n    final Callable<Object> s15b = s15.callable(null, 27);\r\n    result = s15.execute(null, 27);\r\n    assertEquals(42, result);\r\n    result = s15b.call();\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testNestLambda",
  "sourceCode" : "@Test\r\nvoid testNestLambda() {\r\n    final JexlEngine jexl = createEngine();\r\n    final String strs = \"( (x)->{ (y)->{ x + y } })(15)(27)\";\r\n    final JexlScript s42 = jexl.createScript(strs);\r\n    final Object result = s42.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRecurse",
  "sourceCode" : "@Test\r\nvoid testRecurse() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlContext jc = new MapContext();\r\n    final JexlScript script = jexl.createScript(\"var fact = (x)->{ if (x <= 1) 1; else x * fact(x - 1) }; fact(5)\");\r\n    final int result = (Integer) script.execute(jc);\r\n    assertEquals(120, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRecurse1",
  "sourceCode" : "@Test\r\nvoid testRecurse1() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlContext jc = new MapContext();\r\n    final String src = \"var fact = (x)-> x <= 1? 1 : x * fact(x - 1);\\nfact(5);\\n\";\r\n    final JexlScript script = jexl.createScript(src);\r\n    final int result = (Integer) script.execute(jc);\r\n    assertEquals(120, result);\r\n    final String parsed = script.getParsedText();\r\n    assertEquals(src, parsed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRecurse2",
  "sourceCode" : "@Test\r\nvoid testRecurse2() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlContext jc = new MapContext();\r\n    // adding some captured vars to get it confused\r\n    final JexlScript script = jexl.createScript(\"var y = 1; var z = 1; \" + \"var fact = (x)->{ if (x <= y) z; else x * fact(x - 1) }; fact(6)\");\r\n    final int result = (Integer) script.execute(jc);\r\n    assertEquals(720, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRecurse2b",
  "sourceCode" : "@Test\r\nvoid testRecurse2b() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlContext jc = new MapContext();\r\n    // adding some captured vars to get it confused\r\n    final JexlScript fact = jexl.createScript(\"var y = 1; var z = 1; \" + \"var fact = (x)->{ if (x <= y) z; else x * fact(x - 1) };\" + \"fact\");\r\n    final Script func = (Script) fact.execute(jc);\r\n    final String[] captured = func.getCapturedVariables();\r\n    assertEquals(3, captured.length);\r\n    assertTrue(Arrays.asList(captured).containsAll(Arrays.asList(\"z\", \"y\", \"fact\")));\r\n    final int result = (Integer) func.execute(jc, 6);\r\n    assertEquals(720, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRecurse3",
  "sourceCode" : "@Test\r\nvoid testRecurse3() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlContext jc = new MapContext();\r\n    // adding some captured vars to get it confused\r\n    final JexlScript script = jexl.createScript(\"var y = 1; var z = 1;var foo = (x)->{y + z}; \" + \"var fact = (x)->{ if (x <= y) z; else x * fact(x - 1) }; fact(6)\");\r\n    final int result = (Integer) script.execute(jc);\r\n    assertEquals(720, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testScriptArguments",
  "sourceCode" : "@Test\r\nvoid testScriptArguments() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript s = jexl.createScript(\" x + x \", \"x\");\r\n    final JexlScript s42 = jexl.createScript(\"s(21)\", \"s\");\r\n    final Object result = s42.execute(null, s);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testScriptContext",
  "sourceCode" : "@Test\r\nvoid testScriptContext() {\r\n    final JexlEngine jexl = createEngine();\r\n    final JexlScript s = jexl.createScript(\"function(x) { x + x }\");\r\n    final String fsstr = s.getParsedText(0);\r\n    assertEquals(\"(x)->{ x + x; }\", fsstr);\r\n    assertEquals(42, s.execute(null, 21));\r\n    JexlScript s42 = jexl.createScript(\"s(21)\");\r\n    final JexlContext ctxt = new JexlEvalContext();\r\n    ctxt.set(\"s\", s);\r\n    Object result = s42.execute(ctxt);\r\n    assertEquals(42, result);\r\n    result = s42.execute(ctxt);\r\n    assertEquals(42, result);\r\n    s42 = jexl.createScript(\"x-> { x + x }\");\r\n    result = s42.execute(ctxt, 21);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRefCapture1",
  "sourceCode" : "/**\r\n * see JEXL-426\r\n */\r\n@Test\r\nvoid testRefCapture1() {\r\n    final String src = \"let x = 10;\\n\" + \"let foo = () -> {\\n\" + \"x += 2;\\n\" + \"}\\n\" + \"x = 40;\\n\" + \"foo();\\n\" + \"x\";\r\n    final JexlEngine jexl = new JexlBuilder().features(new JexlFeatures().referenceCapture(true)).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(src);\r\n    result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRefCapture2",
  "sourceCode" : "@Test\r\nvoid testRefCapture2() {\r\n    final String src = \"let x = 10; let f = () -> { x + 2 }; x = 40; f()\";\r\n    final JexlEngine jexl = new JexlBuilder().features(new JexlFeatures().constCapture(true).referenceCapture(true)).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(src);\r\n    result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRefCapture3",
  "sourceCode" : "@Test\r\nvoid testRefCapture3() {\r\n    final String src = \"let x = 10; let f = () -> { x + 2 }; x = 40; f\";\r\n    final JexlEngine jexl = new JexlBuilder().features(new JexlFeatures().constCapture(true).referenceCapture(true)).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(src);\r\n    result = script.execute(null);\r\n    assertInstanceOf(JexlScript.class, result);\r\n    script = jexl.createScript(\"f()\", \"f\");\r\n    result = script.execute(null, result);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRefCapture4",
  "sourceCode" : "@Test\r\nvoid testRefCapture4() {\r\n    final String src = \"let x = 10; let f = () -> { let x = 142; x }; x = 40; f\";\r\n    final JexlEngine jexl = new JexlBuilder().features(new JexlFeatures().referenceCapture(true)).create();\r\n    JexlScript script;\r\n    Object result;\r\n    script = jexl.createScript(src);\r\n    result = script.execute(null);\r\n    assertInstanceOf(JexlScript.class, result);\r\n    script = jexl.createScript(\"f()\", \"f\");\r\n    result = script.execute(null, result);\r\n    assertEquals(142, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRefCapture5",
  "sourceCode" : "@Test\r\nvoid testRefCapture5() {\r\n    final JexlFeatures f426 = new JexlFeatures().referenceCapture(true);\r\n    final JexlEngine jexl = new JexlBuilder().features(f426).create();\r\n    final String src = \"let z = 32; let x = 40; function foo() { x += 2; }; function bar() { let x = -169; foo(); x;}; bar();\";\r\n    final JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    Assertions.assertEquals(-169, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LambdaTest.java",
  "methodName" : "testRefCapture6",
  "sourceCode" : "@Test\r\nvoid testRefCapture6() {\r\n    final JexlFeatures f426 = new JexlFeatures().referenceCapture(true);\r\n    final JexlEngine jexl = new JexlBuilder().features(f426).create();\r\n    final String src = \"let x = 40; function foo() { x += 2; }; function bar() { x = -169; () -> { foo(); }}; bar();\";\r\n    JexlScript script = jexl.createScript(src);\r\n    assertNotNull(script);\r\n    Object result = script.execute(null);\r\n    assertInstanceOf(JexlScript.class, result);\r\n    script = jexl.createScript(\"f()\", \"f\");\r\n    result = script.execute(null, result);\r\n    Assertions.assertEquals(-167, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testAnnotation",
  "sourceCode" : "@Test\r\nvoid testAnnotation() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).features(f).create();\r\n    final JexlScript script = jexl.createScript(\"@scale(13) @test var i = 42\");\r\n    final JexlContext jc = new OptAnnotationContext();\r\n    final Object result = script.execute(jc);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testCaptured0",
  "sourceCode" : "@Test\r\nvoid testCaptured0() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).features(f).create();\r\n    final JexlScript script = jexl.createScript(\"var x = 10; (b->{ x + b })(32)\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object result = script.execute(jc);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testCaptured1",
  "sourceCode" : "@Test\r\nvoid testCaptured1() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).features(f).create();\r\n    final JexlScript script = jexl.createScript(\"{ var x = 10; } (b->{ x + b })(32)\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", 11);\r\n    final Object result = script.execute(jc);\r\n    assertEquals(43, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testConst0a",
  "sourceCode" : "@Test\r\nvoid testConst0a() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final JexlScript script = jexl.createScript(\"{ const x = 10; x + 1 }; { let x = 20; x = 22}\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object result = script.execute(jc);\r\n    assertEquals(22, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testConst0b",
  "sourceCode" : "@Test\r\nvoid testConst0b() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final JexlScript script = jexl.createScript(\"{ const x = 10; }{ const x = 20; }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object result = script.execute(jc);\r\n    assertEquals(20, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testConst1",
  "sourceCode" : "@Test\r\nvoid testConst1() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(\"const foo;  foo\"), \"should fail, const foo must be followed by assign.\");\r\n    assertTrue(xparse.getMessage().contains(\"const\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testConst2a",
  "sourceCode" : "@Test\r\nvoid testConst2a() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    for (final String op : Arrays.asList(\"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"^=\", \"&=\", \"|=\")) {\r\n        final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(\"const foo = 42;  foo \" + op + \" 1;\"), \"should fail, const precludes assignment\");\r\n        assertTrue(xparse.getMessage().contains(\"foo\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testConst2b",
  "sourceCode" : "@Test\r\nvoid testConst2b() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    for (final String op : Arrays.asList(\"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"^=\", \"&=\", \"|=\")) {\r\n        final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(\"const foo = 42;  if (true) { foo \" + op + \" 1; }\"), \"should fail, const precludes assignment\");\r\n        assertTrue(xparse.getMessage().contains(\"foo\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testConst2c",
  "sourceCode" : "@Test\r\nvoid testConst2c() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    for (final String op : Arrays.asList(\"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"^=\", \"&=\", \"|=\")) {\r\n        final JexlScript script = jexl.createScript(\"{ const foo = 42; } { let foo  = 0; foo \" + op + \" 1; }\");\r\n        assertNotNull(script);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testConst3a",
  "sourceCode" : "@Test\r\nvoid testConst3a() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    // @formatter:off\r\n    final List<String> srcs = Arrays.asList(\"const f = ()->{ var foo = 3; foo = 5; }\", \"const y = '42'; const f = (let y)->{ var foo = 3; foo = 5; }\", \"const foo = '34'; const f = ()->{ var foo = 3; foo = 5; };\", \"const bar = '34'; const f = ()->{ var f = 3; f = 5; };\", \"const bar = '34'; const f = ()->{ var bar = 3; z ->{ bar += z; } };\");\r\n    // @formatter:on\r\n    for (final String src : srcs) {\r\n        final JexlScript script = jexl.createScript(src);\r\n        final Object result = script.execute(null);\r\n        assertNotNull(result, src);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testConst3b",
  "sourceCode" : "@Test\r\nvoid testConst3b() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    // @formatter:off\r\n    final List<String> srcs = Arrays.asList(\"const f = ()->{ var foo = 3; f = 5; }\", \"const y = '42'; const f = (let z)->{ y += z; }\", \"const foo = '34'; const f = ()->{ foo = 3; };\", \"const bar = '34'; const f = ()->{  bar = 3; z ->{ bar += z; } };\", \"let bar = '34'; const f = ()->{  const bar = 3; z ->{ bar += z; } };\");\r\n    // @formatter:on\r\n    for (final String src : srcs) {\r\n        final JexlException.Assignment xassign = assertThrows(JexlException.Assignment.class, () -> jexl.createScript(src), src);\r\n        // debug breakpoint\r\n        assertNotNull(xassign, src);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testConstCaptures",
  "sourceCode" : "@Test\r\nvoid testConstCaptures() {\r\n    // @formatter:off\r\n    final List<String> srcsFalse = Arrays.asList(\"const x = 0;  x = 1;\", \"const x = 0; x *= 1;\", \"const x = 0; var x = 1;\", \"const x = 0; if (true) { var x = 1;}\", \"const x = 0; if (true) { x = 1;}\", \"const x = 0; if (true) { var f  = y -> { x = y + 1; x } }\", \"const x = 0; if (true) { var f  = y -> { z -> { x = y + 1; x } } }\", \"const x = 0; if (true) { if (false) { y -> { x = y + 1; x } } }\", \"const x = 0; if (true) { if (false) { y -> { z -> { x = y + 1; x } } }\", \"\");\r\n    // @formatter:on\r\n    checkParse(srcsFalse, false);\r\n    // @formatter:off\r\n    final List<String> srcsTrue = Arrays.asList(\"const x = 0; if (true) { var f  = x -> x + 1;}\", \"const x = 0; if (true) { var f  = y -> { var x = y + 1; x } }\", \"const x = 0; if (true) { var f  = y -> { const x = y + 1; x } }\", \"const x = 0; if (true) { var f  = y -> { z -> { let x = y + 1; x } } }\", \"\");\r\n    // @formatter:on\r\n    checkParse(srcsTrue, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testContextualOptions0",
  "sourceCode" : "@Test\r\nvoid testContextualOptions0() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    final JexlEngine jexl = new JexlBuilder().features(f).strict(true).create();\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setSharedInstance(false);\r\n    options.setLexical(true);\r\n    options.setLexicalShade(true);\r\n    ctxt.set(\"options\", options);\r\n    final JexlScript script = jexl.createScript(\"{var x = 42;} options.lexical = false; options.lexicalShade=false; x\");\r\n    assertThrows(JexlException.class, () -> script.execute(ctxt), \"setting options.lexical should have no effect during execution\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testContextualOptions1",
  "sourceCode" : "@Test\r\nvoid testContextualOptions1() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    final JexlEngine jexl = new JexlBuilder().features(f).strict(true).create();\r\n    final JexlEvalContext ctxt = new TestContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    options.setSharedInstance(true);\r\n    options.setLexical(true);\r\n    options.setLexicalShade(true);\r\n    ctxt.set(\"options\", options);\r\n    // @formatter:off\r\n    final JexlScript runner = jexl.createScript(\"options.lexical = flag; options.lexicalShade = flag;\" + \"tryCatch(test, catcher, 42);\", \"flag\", \"test\", \"catcher\");\r\n    // @formatter:on\r\n    final JexlScript tested = jexl.createScript(\"(y)->{ {var x = y;} x }\");\r\n    final JexlScript catchFn = jexl.createScript(\"(xany)-> { xany }\");\r\n    Object result;\r\n    // run it once, old 3.1 semantics, lexical/shade = false\r\n    result = runner.execute(ctxt, false, tested, catchFn);\r\n    // result 42\r\n    assertEquals(42, result);\r\n    // run it a second time, new 3.2 semantics, lexical/shade = true\r\n    result = runner.execute(ctxt, true, tested, catchFn);\r\n    // result is exception!\r\n    assertInstanceOf(JexlException.Variable.class, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testForVariable0a",
  "sourceCode" : "@Test\r\nvoid testForVariable0a() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    f.lexicalShade(true);\r\n    final JexlEngine jexl = createEngine(f);\r\n    assertThrows(JexlException.class, () -> jexl.createScript(\"for(let x : 1..3) { let c = 0}; return x\", \"Should not have been parsed\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testForVariable0b",
  "sourceCode" : "@Test\r\nvoid testForVariable0b() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    f.lexicalShade(true);\r\n    final JexlEngine jexl = createEngine(f);\r\n    assertThrows(JexlException.class, () -> jexl.createScript(\"for(var x : 1..3) { var c = 0}; return x\", \"Should not have been parsed\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testForVariable1a",
  "sourceCode" : "@Test\r\nvoid testForVariable1a() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    f.lexicalShade(true);\r\n    final JexlEngine jexl = createEngine(f);\r\n    assertThrows(JexlException.class, () -> jexl.createScript(\"for(var x : 1..3) { var c = 0} for(var x : 1..3) { var c = 0}; return x\"), \"Should not have been parsed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testForVariable1b",
  "sourceCode" : "@Test\r\nvoid testForVariable1b() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    f.lexicalShade(true);\r\n    final JexlEngine jexl = createEngine(f);\r\n    assertThrows(JexlException.class, () -> jexl.createScript(\"for(let x : 1..3) { let c = 0} for(let x : 1..3) { var c = 0}; return x\"), \"Should not have been parsed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testInnerAccess0",
  "sourceCode" : "@Test\r\nvoid testInnerAccess0() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).features(f).create();\r\n    // @formatter:off\r\n    final JexlScript script = jexl.createScript(\"var x = 32; (\" + \"()->{ for(var x : null) { var c = 0; {return x; }} })\" + \"();\");\r\n    // @formatter:on\r\n    assertNull(script.execute(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testInnerAccess1a",
  "sourceCode" : "@Test\r\nvoid testInnerAccess1a() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).lexical(true).create();\r\n    final JexlScript script = jexl.createScript(\"var x = 32; (()->{ for(var x : null) { var c = 0; {return x; }} })();\");\r\n    assertNotNull(script);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testInnerAccess1b",
  "sourceCode" : "@Test\r\nvoid testInnerAccess1b() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final JexlScript script = jexl.createScript(\"let x = 32; (()->{ for(let x : null) { let c = 0; { return x; } } } )(); \");\r\n    assertNotNull(script);\r\n    final String dbg = JexlTestCase.toString(script);\r\n    final String src = script.getSourceText();\r\n    assertTrue(JexlTestCase.equalsIgnoreWhiteSpace(src, dbg));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testInternalLexicalFeatures",
  "sourceCode" : "@Test\r\nvoid testInternalLexicalFeatures() {\r\n    final String str = \"42\";\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    f.lexicalShade(true);\r\n    final JexlEngine jexl = new JexlBuilder().features(f).create();\r\n    final JexlScript e = jexl.createScript(str);\r\n    final VarContext vars = new VarContext();\r\n    final JexlOptions opts = vars.getEngineOptions();\r\n    // so we can see the effect of features on options\r\n    opts.setSharedInstance(true);\r\n    final Script script = (Script) e;\r\n    final JexlFeatures features = script.getFeatures();\r\n    assertTrue(features.isLexical());\r\n    assertTrue(features.isLexicalShade());\r\n    final Object result = e.execute(vars);\r\n    assertEquals(42, result);\r\n    assertTrue(opts.isLexical());\r\n    assertTrue(opts.isLexicalShade());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLet0",
  "sourceCode" : "@Test\r\nvoid testLet0() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final JexlScript script = jexl.createScript(\"{ let x = 10; } (b->{ x + b })(32)\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", 11);\r\n    final Object result = script.execute(jc);\r\n    assertEquals(43, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLetFail",
  "sourceCode" : "@Test\r\nvoid testLetFail() {\r\n    final List<String> srcs = Arrays.asList(\"let x = 0; var x = 1;\", \"var x = 0; let x = 1;\", \"let x = 0; let x = 1;\", \"var x = 0; const f = (var x) -> { let x = 1; } f()\", \"var x = 0; const f = (let x) -> { let x = 1; } f()\", \"var x = 0; const f = (let x) -> { var x = 1; } f()\", \"\");\r\n    checkParse(srcs, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLetSucceed",
  "sourceCode" : "@Test\r\nvoid testLetSucceed() {\r\n    final List<String> srcs = Arrays.asList(\"var x = 1; var x = 0;\", \"{ let x = 0; } var x = 1;\", \"var x = 0; var f = () -> { let x = 1; } f()\", //\"let x = 0; function f() { let x = 1; }; f()\" ,\r\n    \"var x = 0; var f = (let x) -> { x = 1; } f()\", \"var x = 0; let f = (let x) -> { x = 1; } f()\", \"var x = 0; const f = (let x) -> { x = 1; } f()\", \"\");\r\n    checkParse(srcs, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical0a",
  "sourceCode" : "@Test\r\nvoid testLexical0a() {\r\n    runLexical0(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical0b",
  "sourceCode" : "@Test\r\nvoid testLexical0b() {\r\n    runLexical0(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical1",
  "sourceCode" : "@Test\r\nvoid testLexical1() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).create();\r\n    final JexlEvalContext ctxt = new JexlEvalContext();\r\n    final JexlOptions options = ctxt.getEngineOptions();\r\n    // ensure errors will throw\r\n    options.setLexical(true);\r\n    Object result;\r\n    final JexlScript script = jexl.createScript(\"var x = 0; for(var y : [1]) { var x = 42; return x; };\");\r\n    JexlException xany = assertThrows(JexlException.Variable.class, () -> script.execute(ctxt));\r\n    assertNotNull(xany.toString());\r\n    final JexlScript script1 = jexl.createScript(\"(x)->{ if (x) { var x = 7 * (x + x); x; } }\");\r\n    xany = assertThrows(JexlException.Variable.class, () -> script.execute(ctxt, 3));\r\n    assertNotNull(xany.toString());\r\n    final JexlScript script3 = jexl.createScript(\"{ var x = 0; } var x = 42; x\");\r\n    result = script3.execute(ctxt, 21);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical1a",
  "sourceCode" : "@Test\r\nvoid testLexical1a() {\r\n    runLexical1(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical1b",
  "sourceCode" : "@Test\r\nvoid testLexical1b() {\r\n    runLexical1(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical2a",
  "sourceCode" : "@Test\r\nvoid testLexical2a() {\r\n    runLexical2(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical2b",
  "sourceCode" : "@Test\r\nvoid testLexical2b() {\r\n    runLexical2(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical3",
  "sourceCode" : "@Test\r\nvoid testLexical3() {\r\n    final String str = \"var s = {}; for (var i : [1]) s.add(i); s\";\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).lexical(true).create();\r\n    JexlScript e = jexl.createScript(str);\r\n    final JexlContext jc = new MapContext();\r\n    Object o = e.execute(jc);\r\n    assertTrue(((Set) o).contains(1));\r\n    e = jexl.createScript(str);\r\n    o = e.execute(jc);\r\n    assertTrue(((Set) o).contains(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical4",
  "sourceCode" : "@Test\r\nvoid testLexical4() {\r\n    final JexlEngine Jexl = new JexlBuilder().silent(false).strict(true).lexical(true).create();\r\n    final JxltEngine Jxlt = Jexl.createJxltEngine();\r\n    final JexlContext ctxt = new MapContext();\r\n    final String rpt = \"<report>\\n\" + \"\\n$$var y = 1; var x = 2;\" + \"\\n${x + y}\" + \"\\n</report>\\n\";\r\n    final JxltEngine.Template t = Jxlt.createTemplate(\"$$\", new StringReader(rpt));\r\n    final StringWriter strw = new StringWriter();\r\n    t.evaluate(ctxt, strw);\r\n    final String output = strw.toString();\r\n    final String ctl = \"<report>\\n\\n3\\n</report>\\n\";\r\n    assertEquals(ctl, output);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical5",
  "sourceCode" : "@Test\r\nvoid testLexical5() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).lexical(true).create();\r\n    final JexlContext ctxt = new DebugContext();\r\n    Object result;\r\n    final JexlScript script = jexl.createScript(\"var x = 42; var y = () -> { {var x = debug(-42); }; return x; }; y()\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical6a",
  "sourceCode" : "@Test\r\nvoid testLexical6a() {\r\n    final String str = \"i = 0; { var i = 32; }; i\";\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).lexical(true).create();\r\n    final JexlScript e = jexl.createScript(str);\r\n    final JexlContext ctxt = new MapContext();\r\n    final Object o = e.execute(ctxt);\r\n    assertEquals(0, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical6a1",
  "sourceCode" : "@Test\r\nvoid testLexical6a1() {\r\n    final String str = \"i = 0; { var i = 32; }; i\";\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    final JexlEngine jexl = createEngine(f);\r\n    final JexlScript e = jexl.createScript(str);\r\n    final JexlContext ctxt = new MapContext();\r\n    final Object o = e.execute(ctxt);\r\n    assertEquals(0, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical6b",
  "sourceCode" : "@Test\r\nvoid testLexical6b() {\r\n    final String str = \"i = 0; { var i = 32; }; i\";\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).lexical(true).lexicalShade(true).create();\r\n    final JexlScript e = jexl.createScript(str);\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlException xany = assertThrows(JexlException.class, () -> e.execute(ctxt), \"i should be shaded\");\r\n    assertNotNull(xany.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical6c",
  "sourceCode" : "@Test\r\nvoid testLexical6c() {\r\n    final String str = \"i = 0; for (var i : [42]) i; i\";\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).lexical(true).lexicalShade(false).create();\r\n    final JexlScript e = jexl.createScript(str);\r\n    final JexlContext ctxt = new MapContext();\r\n    final Object o = e.execute(ctxt);\r\n    assertEquals(0, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testLexical6d",
  "sourceCode" : "@Test\r\nvoid testLexical6d() {\r\n    final String str = \"i = 0; for (var i : [42]) i; i\";\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).lexical(true).lexicalShade(true).create();\r\n    final JexlScript e = jexl.createScript(str);\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlException xany = assertThrows(JexlException.class, () -> e.execute(ctxt), \"i should be shaded\");\r\n    assertNotNull(xany.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testManyConst",
  "sourceCode" : "@Test\r\nvoid testManyConst() {\r\n    final String text = \"const x = 1, y = 41; x + y\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(text);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n    final String s0 = script.getParsedText();\r\n    final String s1 = script.getSourceText();\r\n    assertNotEquals(s0, s1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testManyLet",
  "sourceCode" : "@Test\r\nvoid testManyLet() {\r\n    final String text = \"let x = 1, y = 41, z; x + y\";\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    final JexlScript script = jexl.createScript(text);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n    final String s0 = script.getParsedText();\r\n    final String s1 = script.getSourceText();\r\n    assertNotEquals(s0, s1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testNamed",
  "sourceCode" : "@Test\r\nvoid testNamed() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).features(f).create();\r\n    final JexlScript script = jexl.createScript(\"var i = (x, y, z)->{return x + y + z}; i(22,18,2)\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object result = script.execute(jc);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testOptionsPragma",
  "sourceCode" : "@Test\r\nvoid testOptionsPragma() {\r\n    try {\r\n        JexlOptions.setDefaultFlags(\"+safe\", \"-lexical\", \"-lexicalShade\");\r\n        final VarContext vars = new VarContext();\r\n        final JexlEngine jexl = new JexlBuilder().create();\r\n        int n42;\r\n        JexlOptions o;\r\n        n42 = (Integer) jexl.createScript(\"#pragma jexl.options none\\n-42\").execute(vars);\r\n        assertEquals(-42, n42);\r\n        o = vars.snatchOptions();\r\n        assertNotNull(o);\r\n        assertTrue(o.isStrict());\r\n        assertTrue(o.isSafe());\r\n        assertTrue(o.isCancellable());\r\n        assertFalse(o.isLexical());\r\n        assertFalse(o.isLexicalShade());\r\n        n42 = (Integer) jexl.createScript(\"#pragma jexl.options canonical\\n42\").execute(vars);\r\n        assertEquals(42, n42);\r\n        o = vars.snatchOptions();\r\n        assertNotNull(o);\r\n        assertTrue(o.isStrict());\r\n        assertFalse(o.isSafe());\r\n        assertTrue(o.isCancellable());\r\n        assertTrue(o.isLexical());\r\n        assertTrue(o.isLexicalShade());\r\n        assertFalse(o.isSharedInstance());\r\n    } finally {\r\n        JexlOptions.setDefaultFlags(\"-safe\", \"+lexical\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testParameter0",
  "sourceCode" : "@Test\r\nvoid testParameter0() {\r\n    final String str = \"function(u) {}\";\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    JexlScript e = jexl.createScript(str);\r\n    assertEquals(1, e.getParameters().length);\r\n    e = jexl.createScript(new JexlInfo(\"TestScript\", 1, 1), str);\r\n    assertEquals(1, e.getParameters().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testParameter1",
  "sourceCode" : "@Test\r\nvoid testParameter1() {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).lexical(true).create();\r\n    final JexlContext jc = new MapContext();\r\n    final String strs = \"var s = function(x) { for (var i : 1..3) {if (i > 2) return x}}; s(42)\";\r\n    final JexlScript s42 = jexl.createScript(strs);\r\n    final Object result = s42.execute(jc);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testPragmaNoop",
  "sourceCode" : "@Test\r\nvoid testPragmaNoop() {\r\n    // unknow pragma\r\n    final String str = \"#pragma jexl.options 'no effect'\\ni = -42; for (var i : [42]) i; i\";\r\n    final JexlEngine jexl = new JexlBuilder().lexical(false).strict(true).create();\r\n    final JexlScript e = jexl.createScript(str);\r\n    final JexlContext ctxt = new MapContext();\r\n    final Object result = e.execute(ctxt);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testPragmaOptions",
  "sourceCode" : "@Test\r\nvoid testPragmaOptions() {\r\n    // same as 6d but using a pragma\r\n    final String str = \"#pragma jexl.options '+strict +lexical +lexicalShade -safe'\\n\" + \"i = 0; for (var i : [42]) i; i\";\r\n    final JexlEngine jexl = new JexlBuilder().strict(false).create();\r\n    final JexlScript e = jexl.createScript(str);\r\n    final JexlContext ctxt = new MapContext();\r\n    final JexlException xany = assertThrows(JexlException.class, () -> e.execute(ctxt), \"i should be shaded\");\r\n    assertNotNull(xany.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testScopeFrame",
  "sourceCode" : "@Test\r\nvoid testScopeFrame() {\r\n    final LexicalScope scope = new LexicalScope();\r\n    runTestScope(scope, 0, 128, 2);\r\n    runTestScope(scope, 33, 55, 1);\r\n    runTestScope(scope, 15, 99, 3);\r\n    runTestScope(scope, 3, 123, 5);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testSingleStatementDeclFail",
  "sourceCode" : "@Test\r\nvoid testSingleStatementDeclFail() {\r\n    final List<String> srcs = Arrays.asList(\"if (true) let x ;\", \"if (true) let x = 1;\", \"if (true) var x = 1;\", \"if (true) { 1 } else let x ;\", \"if (true) { 1 } else let x = 1;\", \"if (true) { 1 } else var x = 1;\", \"while (true) let x ;\", \"while (true) let x = 1;\", \"while (true) var x = 1;\", \"do let x ; while (true)\", \"do let x = 1; while (true)\", \"do var x = 1; while (true)\", \"for (let i:ii) let x ;\", \"for (let i:ii) let x = 1;\", \"for (let i:ii) var x = 1;\", \"\");\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true).lexicalShade(true);\r\n    checkParse(f, srcs, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testSingleStatementVarSucceed",
  "sourceCode" : "@Test\r\nvoid testSingleStatementVarSucceed() {\r\n    final List<String> srcs = Arrays.asList(\"if (true) var x = 1;\", \"if (true) { 1 } else var x = 1;\", \"while (true) var x = 1;\", \"do var x = 1 while (true)\", \"for (let i:ii) var x = 1;\", \"\");\r\n    checkParse(srcs, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testUndeclaredVariable",
  "sourceCode" : "@Test\r\nvoid testUndeclaredVariable() {\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true);\r\n    f.lexicalShade(true);\r\n    final JexlEngine jexl = createEngine(f);\r\n    assertThrows(JexlException.class, () -> jexl.createScript(\"{var x = 0}; return x\"), \"Should not have been parsed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testVarFail",
  "sourceCode" : "@Test\r\nvoid testVarFail() {\r\n    final List<String> srcs = Arrays.asList(\"var x = 0; var x = 1;\", \"var x = 0; let x = 1;\", \"let x = 0; var x = 1;\", \"var x = 0; const f = (var x) -> { let x = 1; } f()\", \"var x = 0; const f = (let x) -> { var x = 1; } f()\", \"var x = 0; const f = (var x) -> { var x = 1; } f()\", \"\");\r\n    final JexlFeatures f = new JexlFeatures();\r\n    f.lexical(true).lexicalShade(true);\r\n    checkParse(f, srcs, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\LexicalTest.java",
  "methodName" : "testVarLoop0",
  "sourceCode" : "@Test\r\nvoid testVarLoop0() {\r\n    final String src0 = \"var count = 10;\\n\" + \"for (var i : 0 .. count-1) {\\n\" + \"  $out.add(i);\\n\" + \"}\";\r\n    final String src1 = \"var count = [0,1,2,3,4,5,6,7,8,9];\\n\" + \"for (var i : count) {\\n\" + \"  $out.add(i);\\n\" + \"}\";\r\n    final String src2 = \"var count = 10;\\n\" + \"  var outer = 0;\\n\" + \"for (var i : 0 .. count-1) {\\n\" + \"  $out.add(i);\\n\" + \"  outer = i;\" + \"}\\n\" + \"outer == 9\";\r\n    final JexlFeatures ff0 = runVarLoop(false, src0);\r\n    final JexlFeatures ft0 = runVarLoop(true, src0);\r\n    final JexlFeatures ff1 = runVarLoop(false, src1);\r\n    final JexlFeatures ft1 = runVarLoop(true, src1);\r\n    final JexlFeatures ff2 = runVarLoop(false, src2);\r\n    final JexlFeatures ft2 = runVarLoop(true, src2);\r\n    // and check some features\r\n    assertEquals(ff0, ff1);\r\n    assertEquals(ft0, ft1);\r\n    assertNotEquals(ff0, ft0);\r\n    final String sff0 = ff0.toString();\r\n    final String sff1 = ff1.toString();\r\n    assertEquals(sff0, sff1);\r\n    final String sft1 = ft1.toString();\r\n    assertNotEquals(sff0, sft1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testCallingMethodsOnNewMapLiteral",
  "sourceCode" : "@Test\r\nvoid testCallingMethodsOnNewMapLiteral() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"size({ 'foo' : 'bar' }.values())\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(1), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testEmptyMap",
  "sourceCode" : "@Test\r\nvoid testEmptyMap() throws Exception {\r\n    final JexlScript script = JEXL.createScript(\"map['']\", \"map\");\r\n    final Object result = script.execute(null, Collections.singletonMap(\"\", 42));\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testLiteralWithMultipleEntries",
  "sourceCode" : "@Test\r\nvoid testLiteralWithMultipleEntries() throws Exception {\r\n    final Map<String, String> expected = new HashMap<>();\r\n    expected.put(\"foo\", \"bar\");\r\n    expected.put(\"eat\", \"food\");\r\n    final List<String> sources = Arrays.asList(\"{ 'foo' : 'bar', 'eat' : 'food' }\", \"{ 'foo' : 'bar', 'eat' : 'food', }\");\r\n    for (final String src : sources) {\r\n        final JexlExpression e = JEXL.createExpression(\"{ 'foo' : 'bar', 'eat' : 'food' }\");\r\n        final Object o = e.evaluate(null);\r\n        assertEquals(expected, o);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testLiteralWithNumbers",
  "sourceCode" : "@Test\r\nvoid testLiteralWithNumbers() throws Exception {\r\n    JexlExpression e = JEXL.createExpression(\"{ 5 : 10 }\");\r\n    final JexlContext jc = new MapContext();\r\n    Object o = e.evaluate(jc);\r\n    assertEquals(Collections.singletonMap(Integer.valueOf(5), Integer.valueOf(10)), o);\r\n    e = JEXL.createExpression(\"m = { 3 : 30, 4 : 40, 5 : 'fifty', '7' : 'seven', 7 : 'SEVEN' }\");\r\n    e.evaluate(jc);\r\n    e = JEXL.createExpression(\"m.3\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(30), o);\r\n    e = JEXL.createExpression(\"m[4]\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(40), o);\r\n    jc.set(\"i\", Integer.valueOf(5));\r\n    e = JEXL.createExpression(\"m[i]\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(\"fifty\", o);\r\n    e = JEXL.createExpression(\"m.3 = 'thirty'\");\r\n    e.evaluate(jc);\r\n    e = JEXL.createExpression(\"m.3\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(\"thirty\", o);\r\n    e = JEXL.createExpression(\"m['7']\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(\"seven\", o);\r\n    e = JEXL.createExpression(\"m.7\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(\"SEVEN\", o);\r\n    jc.set(\"k\", Integer.valueOf(7));\r\n    e = JEXL.createExpression(\"m[k]\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(\"SEVEN\", o);\r\n    jc.set(\"k\", \"7\");\r\n    e = JEXL.createExpression(\"m[k]\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(\"seven\", o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testLiteralWithStrings",
  "sourceCode" : "@Test\r\nvoid testLiteralWithStrings() throws Exception {\r\n    final List<String> sources = Arrays.asList(\"{ 'foo' : 'bar' }\", \"{ 'foo' : 'bar', }\");\r\n    for (final String src : sources) {\r\n        final JexlExpression e = JEXL.createExpression(src);\r\n        final Object o = e.evaluate(null);\r\n        assertEquals(Collections.singletonMap(\"foo\", \"bar\"), o);\r\n    }\r\n    assertThrows(JexlException.Parsing.class, () -> JEXL.createExpression(\"{  : , }\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testMapArrayLiteral",
  "sourceCode" : "@Test\r\nvoid testMapArrayLiteral() throws Exception {\r\n    JexlExpression e = JEXL.createExpression(\"{'foo' : [ 'inner' , 'bar' ]}\");\r\n    final JexlContext jc = new MapContext();\r\n    Object o = e.evaluate(jc);\r\n    assertNotNull(o);\r\n    jc.set(\"outer\", o);\r\n    e = JEXL.createExpression(\"outer.foo.1\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(\"bar\", o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testMapMapLiteral",
  "sourceCode" : "@Test\r\nvoid testMapMapLiteral() throws Exception {\r\n    JexlExpression e = JEXL.createExpression(\"{'foo' : { 'inner' : 'bar' }}\");\r\n    final JexlContext jc = new MapContext();\r\n    Object o = e.evaluate(jc);\r\n    assertNotNull(o);\r\n    jc.set(\"outer\", o);\r\n    e = JEXL.createExpression(\"outer.foo.inner\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(\"bar\", o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testNotEmptySimpleMapLiteral",
  "sourceCode" : "@Test\r\nvoid testNotEmptySimpleMapLiteral() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"empty({ 'foo' : 'bar' })\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    assertFalse((Boolean) o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testSizeOfSimpleMapLiteral",
  "sourceCode" : "@Test\r\nvoid testSizeOfSimpleMapLiteral() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"size({ 'foo' : 'bar' })\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(1), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MapLiteralTest.java",
  "methodName" : "testVariableMap",
  "sourceCode" : "@Test\r\nvoid testVariableMap() throws Exception {\r\n    final JexlScript script = JEXL.createScript(\"{ ['1', '2'.toString()] : someValue }\", \"someValue\");\r\n    final Object result = script.execute(null, 42);\r\n    assertInstanceOf(Map.class, result);\r\n    Object key = null;\r\n    Object value = null;\r\n    for (final Map.Entry<?, ?> e : ((Map<?, ?>) result).entrySet()) {\r\n        key = e.getKey();\r\n        value = e.getValue();\r\n        break;\r\n    }\r\n    final Object gg = ((Map) result).get(key);\r\n    assertEquals(42, ((Number) gg).intValue());\r\n    assertEquals(value, ((Number) gg).intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testAmbiguousInvoke",
  "sourceCode" : "@Test\r\nvoid testAmbiguousInvoke() throws Exception {\r\n    // JEXL-299\r\n    final Functor func = new Functor();\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"func\", func);\r\n    Object result;\r\n    // basic call works\r\n    result = JEXL.invokeMethod(func, \"over\", \"foo\", 42);\r\n    assertEquals(\"foo + 42\", result);\r\n    // ambiguous call fails\r\n    JexlException.Method xinvoke = assertThrows(JexlException.Method.class, () -> JEXL.invokeMethod(func, \"over\", \"not null\", null));\r\n    assertEquals(\"over(String, Object)\", xinvoke.getMethodSignature());\r\n    // another ambiguous call fails\r\n    final String[] arg2 = { \"more\", \"than\", \"one\" };\r\n    xinvoke = assertThrows(JexlException.Method.class, () -> JEXL.invokeMethod(func, \"over\", \"not null\", arg2));\r\n    assertEquals(\"over(String, String[])\", xinvoke.getMethodSignature());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testCallJexlVarArgMethod",
  "sourceCode" : "@Test\r\nvoid testCallJexlVarArgMethod() throws Exception {\r\n    final VarArgs test = new VarArgs();\r\n    asserter.setVariable(\"test\", test);\r\n    assertEquals(\"jexl:0\", test.callMixed(\"jexl\"));\r\n    asserter.assertExpression(\"test.callMixed('jexl')\", \"jexl:0\");\r\n    // Java and JEXL equivalent behavior: 'jexl:-1000' expected\r\n    //{\r\n    assertEquals(\"jexl:-1000\", test.callMixed(\"jexl\", (Integer[]) null));\r\n    asserter.assertExpression(\"test.callMixed('jexl', null)\", \"jexl:-1000\");\r\n    //}\r\n    asserter.assertExpression(\"test.callMixed('jexl', 2)\", test.callMixed(\"jexl\", 2));\r\n    asserter.assertExpression(\"test.callMixed('jexl',2,3,4,5)\", test.callMixed(\"jexl\", 2, 3, 4, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testCallMixedVarArgMethod",
  "sourceCode" : "@Test\r\nvoid testCallMixedVarArgMethod() throws Exception {\r\n    final VarArgs test = new VarArgs();\r\n    asserter.setVariable(\"test\", test);\r\n    assertEquals(\"Mixed:1\", test.callMixed(Integer.valueOf(1)));\r\n    asserter.assertExpression(\"test.callMixed(1)\", test.callMixed(1));\r\n    // Java and JEXL equivalent behavior: 'Mixed:-999' expected\r\n    //{\r\n    assertEquals(\"Mixed:-999\", test.callMixed(Integer.valueOf(1), (Integer[]) null));\r\n    asserter.assertExpression(\"test.callMixed(1, null)\", \"Mixed:-999\");\r\n    //}\r\n    asserter.assertExpression(\"test.callMixed(1,2)\", test.callMixed(1, 2));\r\n    asserter.assertExpression(\"test.callMixed(1,2,3,4,5)\", test.callMixed(1, 2, 3, 4, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testCallVarArgMethod",
  "sourceCode" : "@Test\r\nvoid testCallVarArgMethod() throws Exception {\r\n    final VarArgs test = new VarArgs();\r\n    asserter.setVariable(\"test\", test);\r\n    asserter.assertExpression(\"test.callInts()\", test.callInts());\r\n    asserter.assertExpression(\"test.callInts(1)\", test.callInts(1));\r\n    asserter.assertExpression(\"test.callInts(1,2,3,4,5)\", test.callInts(1, 2, 3, 4, 5));\r\n    asserter.assertExpression(\"test.concat(['1', '2', '3'])\", test.concat(new String[] { \"1\", \"2\", \"3\" }));\r\n    asserter.assertExpression(\"test.concat('1', '2', '3')\", test.concat(\"1\", \"2\", \"3\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testFizzCall",
  "sourceCode" : "@Test\r\nvoid testFizzCall() throws Exception {\r\n    final ScriptContext context = new ScriptContext(new HashMap<>());\r\n    JexlScript bar = JEXL.createScript(\"functor:get('drink')\");\r\n    Object o;\r\n    o = bar.execute(context);\r\n    assertEquals(\"champaign\", o, \"Wrong choice\");\r\n    context.set(\"base\", \"gin\");\r\n    o = bar.execute(context);\r\n    assertEquals(\"gin fizz\", o, \"Wrong choice\");\r\n    // despite being called twice, the functor is created only once.\r\n    context.set(\"base\", \"wine\");\r\n    bar = JEXL.createScript(\"var glass = functor:get('drink'); base = 'gin'; functor:get('drink')\");\r\n    o = bar.execute(context);\r\n    assertEquals(\"champaign\", o, \"Wrong choice\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testInvoke",
  "sourceCode" : "@Test\r\nvoid testInvoke() throws Exception {\r\n    final Functor func = new Functor();\r\n    assertEquals(Integer.valueOf(10), JEXL.invokeMethod(func, \"ten\"));\r\n    assertEquals(Integer.valueOf(42), JEXL.invokeMethod(func, \"PLUS20\", Integer.valueOf(22)));\r\n    assertThrows(Exception.class, () -> JEXL.invokeMethod(func, \"nonExistentMethod\"), \"method does not exist!\");\r\n    assertThrows(Exception.class, () -> JEXL.invokeMethod(func, \"NPEIfNull\", (Object[]) null), \"method should have thrown!\");\r\n    Object result = JEXL.invokeMethod(func, \"over\", \"foo\", 42);\r\n    assertEquals(\"foo + 42\", result);\r\n    assertThrows(Exception.class, () -> JEXL.invokeMethod(func, \"over\", null, null));\r\n    final Functor func1 = new FunctorOver();\r\n    result = JEXL.invokeMethod(func1, \"over\", null, null);\r\n    assertEquals(\"null + null\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testMethod",
  "sourceCode" : "/**\r\n * test a simple method expression\r\n */\r\n@Test\r\nvoid testMethod() throws Exception {\r\n    // tests a simple method expression\r\n    asserter.setVariable(\"foo\", new Foo());\r\n    asserter.assertExpression(\"foo.bar()\", METHOD_STRING);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testMulti",
  "sourceCode" : "@Test\r\nvoid testMulti() throws Exception {\r\n    asserter.setVariable(\"foo\", new Foo());\r\n    asserter.assertExpression(\"foo.innerFoo.bar()\", METHOD_STRING);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testNamespaceCall",
  "sourceCode" : "@Test\r\nvoid testNamespaceCall() throws Exception {\r\n    final java.util.Map<String, Object> funcs = new java.util.HashMap<>();\r\n    funcs.put(\"func\", new Functor());\r\n    funcs.put(\"FUNC\", Functor.class);\r\n    JexlExpression e = JEXL.createExpression(\"func:ten()\");\r\n    final JexlEvalContext jc = new EnhancedContext(funcs);\r\n    Object o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n    e = JEXL.createExpression(\"func:plus10(10)\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(20), o);\r\n    e = JEXL.createExpression(\"func:plus10(func:ten())\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(20), o);\r\n    e = JEXL.createExpression(\"FUNC:PLUS20(10)\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(30), o);\r\n    e = JEXL.createExpression(\"FUNC:PLUS20(FUNC:TWENTY())\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(40), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testNamespaceCallEdge",
  "sourceCode" : "@Test\r\nvoid testNamespaceCallEdge() throws Exception {\r\n    final java.util.Map<String, Object> funcs = new java.util.HashMap<>();\r\n    final Edge func = new Edge();\r\n    funcs.put(\"func\", func);\r\n    Object o;\r\n    Object c;\r\n    JexlExpression e;\r\n    final JexlEvalContext jc = new EnhancedContext(funcs);\r\n    for (int i = 0; i < 2; ++i) {\r\n        e = JEXL.createExpression(\"func:exec([1, 2])\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(20, o, \"exec(int[] arg): \" + i);\r\n        e = JEXL.createExpression(\"func:exec(1, 2)\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(4, o, \"exec(Object... args): \" + i);\r\n        e = JEXL.createExpression(\"func:exec([10.0, 20.0])\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(3, o, \"exec(Object args): \" + i);\r\n        e = JEXL.createExpression(\"func:exec('1', 2)\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(4, o, \"exec(Object... args): \" + i);\r\n        // no way to differentiate between a single arg call with an array and a vararg call with same args\r\n        assertEquals(func.exec(\"1\", \"2\"), func.exec(new String[] { \"1\", \"2\" }), \"exec(String... args): \" + i);\r\n        e = JEXL.createExpression(\"func:exec(['1', '2'])\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(func.exec(new String[] { \"1\", \"2\" }), o, \"exec(String... args): \" + i);\r\n        e = JEXL.createExpression(\"func:exec('1', '2')\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(func.exec(\"1\", \"2\"), o, \"exec(String... args): \" + i);\r\n        e = JEXL.createExpression(\"func:exec(true, [1, 2])\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(20, o, \"exec(int[] arg): \" + i);\r\n        e = JEXL.createExpression(\"func:exec(true, 1, 2)\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(4, o, \"exec(Object... args): \" + i);\r\n        e = JEXL.createExpression(\"func:exec(true, ['1', '2'])\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(3, o, \"exec(Object args): \" + i);\r\n        e = JEXL.createExpression(\"func:exec(true, '1', '2')\");\r\n        o = e.evaluate(jc);\r\n        assertEquals(4, o, \"exec(Object... args): \" + i);\r\n        e = JEXL.createExpression(\"func:execute(true, '1', '2')\");\r\n        o = e.evaluate(jc);\r\n        c = func.execute(Boolean.TRUE, \"1\", \"2\");\r\n        assertTrue(eqExecute(o, c), \"execute(Object... args): \" + i);\r\n        e = JEXL.createExpression(\"func:execute([true])\");\r\n        o = e.evaluate(jc);\r\n        c = func.execute(new boolean[] { true });\r\n        assertTrue(eqExecute(o, c), \"execute(Object... args): \" + i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testScriptCall",
  "sourceCode" : "@Test\r\nvoid testScriptCall() throws Exception {\r\n    JexlContext context = new MapContext();\r\n    final JexlScript plus = JEXL.createScript(\"a + b\", new String[] { \"a\", \"b\" });\r\n    context.set(\"plus\", plus);\r\n    JexlScript forty2 = JEXL.createScript(\"plus(4, 2) * plus(4, 3)\");\r\n    Object o = forty2.execute(context);\r\n    assertEquals(Integer.valueOf(42), o);\r\n    final Map<String, Object> foo = new HashMap<>();\r\n    foo.put(\"plus\", plus);\r\n    context.set(\"foo\", foo);\r\n    forty2 = JEXL.createScript(\"foo.plus(4, 2) * foo.plus(4, 3)\");\r\n    o = forty2.execute(context);\r\n    assertEquals(Integer.valueOf(42), o);\r\n    context = new ScriptContext(foo);\r\n    forty2 = JEXL.createScript(\"script:plus(4, 2) * script:plus(4, 3)\");\r\n    o = forty2.execute(context);\r\n    assertEquals(Integer.valueOf(42), o);\r\n    final JexlArithmetic ja = JEXL.getArithmetic();\r\n    final JexlMethod mplus = new JexlMethod() {\r\n\r\n        @Override\r\n        public Class<?> getReturnType() {\r\n            return Object.class;\r\n        }\r\n\r\n        @Override\r\n        public Object invoke(final Object obj, final Object... params) throws Exception {\r\n            if (obj instanceof Map<?, ?>) {\r\n                return ja.add(params[0], params[1]);\r\n            }\r\n            throw new Exception(\"not a script context\");\r\n        }\r\n\r\n        @Override\r\n        public boolean isCacheable() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public boolean tryFailed(final Object rval) {\r\n            // this is the marker for failure\r\n            return rval == this;\r\n        }\r\n\r\n        @Override\r\n        public Object tryInvoke(final String name, final Object obj, final Object... params) {\r\n            try {\r\n                if (\"plus\".equals(name)) {\r\n                    return invoke(obj, params);\r\n                }\r\n            } catch (final Exception xany) {\r\n                // ignore and fail by returning this\r\n            }\r\n            return this;\r\n        }\r\n    };\r\n    foo.put(\"PLUS\", mplus);\r\n    forty2 = JEXL.createScript(\"script:PLUS(4, 2) * script:PLUS(4, 3)\");\r\n    o = forty2.execute(context);\r\n    assertEquals(Integer.valueOf(42), o);\r\n    context.set(\"foo.bar\", foo);\r\n    forty2 = JEXL.createScript(\"foo.'bar'.PLUS(4, 2) * foo.bar.PLUS(4, 3)\");\r\n    o = forty2.execute(context);\r\n    assertEquals(Integer.valueOf(42), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testStaticMethodInvocation",
  "sourceCode" : "/**\r\n * Ensures static methods on objects can be called.\r\n */\r\n@Test\r\nvoid testStaticMethodInvocation() throws Exception {\r\n    asserter.setVariable(\"aBool\", Boolean.FALSE);\r\n    asserter.assertExpression(\"aBool.valueOf('true')\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testStaticMethodInvocationOnClasses",
  "sourceCode" : "@Test\r\nvoid testStaticMethodInvocationOnClasses() throws Exception {\r\n    asserter.setVariable(\"Boolean\", Boolean.class);\r\n    asserter.assertExpression(\"Boolean.valueOf('true')\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testStringMethods",
  "sourceCode" : "/**\r\n * test some String method calls\r\n */\r\n@Test\r\nvoid testStringMethods() throws Exception {\r\n    asserter.setVariable(\"foo\", \"abcdef\");\r\n    asserter.assertExpression(\"foo.substring(3)\", \"def\");\r\n    asserter.assertExpression(\"foo.substring(0,(size(foo)-3))\", \"abc\");\r\n    asserter.assertExpression(\"foo.substring(0,size(foo)-3)\", \"abc\");\r\n    asserter.assertExpression(\"foo.substring(0,foo.length()-3)\", \"abc\");\r\n    asserter.assertExpression(\"foo.substring(0, 1+1)\", \"ab\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testTopLevelCall",
  "sourceCode" : "@Test\r\nvoid testTopLevelCall() throws Exception {\r\n    final java.util.Map<String, Object> funcs = new java.util.HashMap<>();\r\n    funcs.put(null, new Functor());\r\n    funcs.put(\"math\", new MyMath());\r\n    funcs.put(\"cx\", ContextualFunctor.class);\r\n    final EnhancedContext jc = new EnhancedContext(funcs);\r\n    JexlExpression e = JEXL.createExpression(\"ten()\");\r\n    Object o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n    e = JEXL.createExpression(\"plus10(10)\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(20), o);\r\n    e = JEXL.createExpression(\"plus10(ten())\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(20), o);\r\n    jc.set(\"pi\", Double.valueOf(Math.PI));\r\n    e = JEXL.createExpression(\"math:cos(pi)\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Double.valueOf(-1), o);\r\n    e = JEXL.createExpression(\"cx:ratio(10) + cx:ratio(20)\");\r\n    o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(7), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testTryFailed",
  "sourceCode" : "@Test\r\nvoid testTryFailed() throws Exception {\r\n    // JEXL-257\r\n    final Functor func = new Functor();\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"func\", func);\r\n    Object result;\r\n    final JexlUberspect uber = JEXL.getUberspect();\r\n    // tryInvoke\r\n    final JexlMethod method = uber.getMethod(func, \"over\", \"foo\", 42);\r\n    assertNotNull(method);\r\n    // tryInvoke succeeds\r\n    result = method.tryInvoke(\"over\", func, \"foo\", 42);\r\n    assertEquals(\"foo + 42\", result);\r\n    // tryInvoke fails\r\n    func.setKill(true);\r\n    JexlException.TryFailed xfail = assertThrows(JexlException.TryFailed.class, () -> method.tryInvoke(\"over\", func, \"foo\", 42));\r\n    assertEquals(UnsupportedOperationException.class, xfail.getCause().getClass());\r\n    func.setKill(false);\r\n    final JexlPropertySet setter = uber.getPropertySet(func, \"under\", \"42\");\r\n    result = setter.tryInvoke(func, \"under\", \"42\");\r\n    assertFalse(setter.tryFailed(result));\r\n    assertEquals(\"42\", result);\r\n    final JexlPropertyGet getter = uber.getPropertyGet(func, \"under\");\r\n    result = getter.tryInvoke(func, \"under\");\r\n    assertFalse(getter.tryFailed(result));\r\n    assertEquals(\"42\", result);\r\n    func.setKill(true);\r\n    xfail = assertThrows(JexlException.TryFailed.class, () -> setter.tryInvoke(func, \"under\", \"42\"), \"should throw TryFailed\");\r\n    assertEquals(UnsupportedOperationException.class, xfail.getCause().getClass());\r\n    func.setKill(false);\r\n    result = setter.tryInvoke(func, \"under\", \"-42\");\r\n    assertEquals(\"-42\", result);\r\n    func.setKill(true);\r\n    xfail = assertThrows(JexlException.TryFailed.class, () -> getter.tryInvoke(func, \"under\"), \"should throw TryFailed\");\r\n    assertEquals(UnsupportedOperationException.class, xfail.getCause().getClass());\r\n    func.setKill(false);\r\n    result = getter.tryInvoke(func, \"under\");\r\n    assertFalse(getter.tryFailed(result));\r\n    assertEquals(\"-42\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testTryFailedScript",
  "sourceCode" : "@Test\r\nvoid testTryFailedScript() throws Exception {\r\n    // JEXL-257\r\n    final Functor func = new Functor();\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"func\", func);\r\n    Object result;\r\n    final JexlUberspect uber = JEXL.getUberspect();\r\n    final JexlScript method = JEXL.createScript(\"(x, y)->{ func.over(x, y) }\");\r\n    // tryInvoke\r\n    // JexlMethod method = uber.getMethod(func, \"over\", \"foo\", 42);\r\n    assertNotNull(method);\r\n    // tryInvoke succeeds\r\n    result = method.execute(ctxt, \"foo\", 42);\r\n    assertEquals(\"foo + 42\", result);\r\n    // tryInvoke fails\r\n    func.setKill(true);\r\n    JexlException xfail = assertThrows(JexlException.class, () -> method.execute(ctxt, \"foo\", 42), \"should throw TryFailed\");\r\n    assertEquals(UnsupportedOperationException.class, xfail.getCause().getClass());\r\n    func.setKill(false);\r\n    final JexlScript setter = JEXL.createScript(\"(x)->{ func.under = x }\");\r\n    // JexlPropertySet setter = uber.getPropertySet(func, \"under\", \"42\");\r\n    result = setter.execute(ctxt, \"42\");\r\n    assertEquals(\"42\", result);\r\n    final JexlScript getter = JEXL.createScript(\"func.under\");\r\n    assertEquals(\"42\", result);\r\n    func.setKill(true);\r\n    xfail = assertThrows(JexlException.class, () -> setter.execute(ctxt, \"42\"), \"should throw TryFailed\");\r\n    assertEquals(UnsupportedOperationException.class, xfail.getCause().getClass());\r\n    func.setKill(false);\r\n    result = setter.execute(ctxt, \"-42\");\r\n    assertEquals(\"-42\", result);\r\n    func.setKill(true);\r\n    xfail = assertThrows(JexlException.class, () -> getter.execute(ctxt), \"should throw TryFailed\");\r\n    assertEquals(UnsupportedOperationException.class, xfail.getCause().getClass());\r\n    func.setKill(false);\r\n    result = getter.execute(ctxt);\r\n    assertEquals(\"-42\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\MethodTest.java",
  "methodName" : "testVariousFunctionLocation",
  "sourceCode" : "@Test\r\nvoid testVariousFunctionLocation() throws Exception {\r\n    // see JEXL-190\r\n    final Map<String, Object> vars = new HashMap<>();\r\n    final Map<String, Object> funcs = new HashMap<>();\r\n    funcs.put(null, new ZSpace());\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(funcs).arithmetic(new ZArithmetic(true)).create();\r\n    // that implements a z(int x) function\r\n    final JexlContext zjc = new ZContext(vars);\r\n    final String z41 = \"z(41)\";\r\n    final JexlScript callz41 = jexl.createScript(z41);\r\n    Object onovar = callz41.execute(zjc);\r\n    assertEquals(222, onovar);\r\n    // override z() with global var\r\n    final JexlScript z241 = jexl.createScript(\"(x)->{ return x + 241}\");\r\n    vars.put(\"z\", z241);\r\n    final Object oglobal = callz41.execute(zjc);\r\n    assertEquals(282, oglobal);\r\n    // clear global and execute again\r\n    vars.remove(\"z\");\r\n    onovar = callz41.execute(zjc);\r\n    assertEquals(222, onovar);\r\n    // override z() with local var\r\n    final String slocal = \"var z = (x)->{ return x + 141}; z(1)\";\r\n    final JexlScript jlocal = jexl.createScript(slocal);\r\n    final Object olocal = jlocal.execute(zjc);\r\n    assertEquals(142, olocal);\r\n    // and now try the context, the null namespace and the arithmetic\r\n    assertEquals(42, jexl.createScript(\"zz(2)\").execute(zjc));\r\n    assertEquals(42, jexl.createScript(\"zzz(3)\").execute(zjc));\r\n    assertEquals(42, jexl.createScript(\"zzzz(4)\").execute(zjc));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ParseFailuresTest.java",
  "methodName" : "testMalformedExpression1",
  "sourceCode" : "@Test\r\nvoid testMalformedExpression1() throws Exception {\r\n    // this will throw a JexlException\r\n    final String badExpression = \"eq\";\r\n    final JexlException pe = assertThrows(JexlException.class, () -> JEXL.createExpression(badExpression), () -> \"Parsing \\\"\" + badExpression + \"\\\" should result in a JexlException\");\r\n    LOGGER.debug(pe);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ParseFailuresTest.java",
  "methodName" : "testMalformedExpression2",
  "sourceCode" : "@Test\r\nvoid testMalformedExpression2() throws Exception {\r\n    // this will throw a TokenMgrErr, which we rethrow as a JexlException\r\n    final String badExpression = \"?\";\r\n    final JexlException pe = assertThrows(JexlException.class, () -> JEXL.createExpression(badExpression), () -> \"Parsing \\\"\" + badExpression + \"\\\" should result in a JexlException\");\r\n    LOGGER.debug(pe);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ParseFailuresTest.java",
  "methodName" : "testMalformedScript1",
  "sourceCode" : "@Test\r\nvoid testMalformedScript1() throws Exception {\r\n    // this will throw a TokenMgrErr, which we rethrow as a JexlException\r\n    final String badScript = \"eq\";\r\n    final JexlException pe = assertThrows(JexlException.class, () -> JEXL.createExpression(badScript), () -> \"Parsing \\\"\" + badScript + \"\\\" should result in a JexlException\");\r\n    LOGGER.debug(pe);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ParseFailuresTest.java",
  "methodName" : "testMalformedScript2",
  "sourceCode" : "@Test\r\nvoid testMalformedScript2() throws Exception {\r\n    // this will throw a TokenMgrErr, which we rethrow as a JexlException\r\n    final String badScript = \"?\";\r\n    final JexlException pe = assertThrows(JexlException.class, () -> JEXL.createExpression(badScript), () -> \"Parsing \\\"\" + badScript + \"\\\" should result in a JexlException\");\r\n    LOGGER.debug(pe);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ParseFailuresTest.java",
  "methodName" : "testMalformedScript3",
  "sourceCode" : "@Test\r\nvoid testMalformedScript3() throws Exception {\r\n    // this will throw a TokenMgrErr, which we rethrow as a JexlException\r\n    final String badScript = \"foo=1;bar=2;a?b:c:d;\";\r\n    final JexlException pe = assertThrows(JexlException.class, () -> JEXL.createExpression(badScript), () -> \"Parsing \\\"\" + badScript + \"\\\" should result in a JexlException\");\r\n    LOGGER.debug(pe);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\FeatureControllerTest.java",
  "methodName" : "testAnnotationFeatureSwitch",
  "sourceCode" : "@Test\r\nvoid testAnnotationFeatureSwitch() throws Exception {\r\n    final Asserter onAsserter = new Asserter(createEngine(new JexlFeatures().methodCall(true).annotation(true)));\r\n    final Asserter offAsserter = new Asserter(createEngine(new JexlFeatures().methodCall(true).annotation(false)));\r\n    final String expr = \"@silent ''.toString()\";\r\n    onAsserter.assertExpression(expr, \"\");\r\n    offAsserter.failExpression(expr, \"@1:1 annotation error in '@silent'\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\FeatureControllerTest.java",
  "methodName" : "testLoopFeatureSwitch",
  "sourceCode" : "@Test\r\nvoid testLoopFeatureSwitch() throws Exception {\r\n    final Asserter onAsserter = new Asserter(createEngine(new JexlFeatures().loops(true)));\r\n    onAsserter.setVariable(\"cond\", true);\r\n    onAsserter.setVariable(\"i\", 0);\r\n    final Asserter offAsserter = new Asserter(createEngine(new JexlFeatures().loops(false)));\r\n    offAsserter.setVariable(\"cond\", true);\r\n    offAsserter.setVariable(\"i\", 0);\r\n    String matchException = \"@1:1 loop error in 'while (...) ...'\";\r\n    final String whileExpr = \"while (cond) { i++;  cond = false; }; i;\";\r\n    onAsserter.assertExpression(whileExpr, 1);\r\n    offAsserter.failExpression(whileExpr, matchException, String::equals);\r\n    matchException = \"@1:1 loop error in 'do ... while (...)'\";\r\n    onAsserter.setVariable(\"i\", 0);\r\n    offAsserter.setVariable(\"i\", 0);\r\n    final String doWhileExpr = \"do { i++; } while(false); i;\";\r\n    onAsserter.assertExpression(doWhileExpr, 1);\r\n    offAsserter.failExpression(doWhileExpr, matchException, String::equals);\r\n    matchException = \"@1:1 loop error in 'for (... : ...) ...'\";\r\n    onAsserter.setVariable(\"i\", 0);\r\n    offAsserter.setVariable(\"i\", 0);\r\n    String forExpr = \"for (let j : [1, 2]) { i = i + j; }; i;\";\r\n    onAsserter.assertExpression(forExpr, 3);\r\n    offAsserter.failExpression(forExpr, matchException, String::equals);\r\n    final int[] a = { 1, 2 };\r\n    onAsserter.setVariable(\"a\", a);\r\n    offAsserter.setVariable(\"a\", a);\r\n    onAsserter.setVariable(\"i\", 0);\r\n    offAsserter.setVariable(\"i\", 0);\r\n    forExpr = \"for (let j = 0; j < 2; ++j) { i = i + a[j]; } i;\";\r\n    onAsserter.assertExpression(forExpr, 3);\r\n    offAsserter.failExpression(forExpr, matchException, String::equals);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\FeatureControllerTest.java",
  "methodName" : "testMethodCallFeatureSwitch",
  "sourceCode" : "@Test\r\nvoid testMethodCallFeatureSwitch() throws Exception {\r\n    final Asserter onAsserter = new Asserter(createEngine(new JexlFeatures().methodCall(true)));\r\n    final Asserter offAsserter = new Asserter(createEngine(new JexlFeatures().methodCall(false)));\r\n    final String expr = \"'jexl'.toUpperCase()\";\r\n    onAsserter.assertExpression(expr, \"JEXL\");\r\n    offAsserter.failExpression(expr, \"@1:7 method call error in '.toUpperCase(...)'\", String::equals);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\FeatureControllerTest.java",
  "methodName" : "testNewInstanceFeatureSwitch",
  "sourceCode" : "@Test\r\nvoid testNewInstanceFeatureSwitch() throws Exception {\r\n    final Asserter onAsserter = new Asserter(createEngine(new JexlFeatures().newInstance(true)));\r\n    final Asserter offAsserter = new Asserter(createEngine(new JexlFeatures().newInstance(false)));\r\n    String expr = \"new('java.lang.String', 'JEXL')\";\r\n    onAsserter.assertExpression(expr, \"JEXL\");\r\n    offAsserter.failExpression(expr, \"@1:1 create instance error in 'new(..., ...)'\", String::equals);\r\n    expr = \"new String('JEXL')\";\r\n    onAsserter.assertExpression(expr, \"JEXL\");\r\n    offAsserter.failExpression(expr, \"@1:1 create instance error in 'new ...(...)'\", String::equals);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\FeatureControllerTest.java",
  "methodName" : "testSideEffectDisabled",
  "sourceCode" : "@Test\r\nvoid testSideEffectDisabled() throws Exception {\r\n    final Asserter asserter = new Asserter(createEngine(new JexlFeatures().sideEffect(false)));\r\n    asserter.setVariable(\"i\", 1);\r\n    String matchException = \"@1:1 assign/modify error in 'i'\";\r\n    asserter.failExpression(\"i = 1\", matchException);\r\n    asserter.failExpression(\"i = i + 1\", matchException);\r\n    asserter.failExpression(\"i = i - 1\", matchException);\r\n    asserter.failExpression(\"i = i * 2\", matchException);\r\n    asserter.failExpression(\"i = i / 2\", matchException);\r\n    asserter.failExpression(\"i = i % 2\", matchException);\r\n    asserter.failExpression(\"i = i ^ 0\", matchException);\r\n    asserter.failExpression(\"i = i << 1\", matchException);\r\n    asserter.failExpression(\"i = i >> 1\", matchException);\r\n    asserter.failExpression(\"i = i >>> 1\", matchException);\r\n    asserter.failExpression(\"i += 1\", matchException);\r\n    asserter.failExpression(\"i -= 1\", matchException);\r\n    asserter.failExpression(\"i *= 2\", matchException);\r\n    asserter.failExpression(\"i /= 2\", matchException);\r\n    asserter.failExpression(\"i %= 2\", matchException);\r\n    asserter.failExpression(\"i ^= 0\", matchException);\r\n    asserter.failExpression(\"i <<= 1\", matchException);\r\n    asserter.failExpression(\"i >>= 1\", matchException);\r\n    asserter.failExpression(\"i >>>= 1\", matchException);\r\n    asserter.failExpression(\"i++\", matchException);\r\n    asserter.failExpression(\"i--\", matchException);\r\n    matchException = \"@1:3 assign/modify error in 'i'\";\r\n    asserter.failExpression(\"++i\", matchException);\r\n    asserter.failExpression(\"--i\", matchException);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\FeatureControllerTest.java",
  "methodName" : "testSideEffectEnabled",
  "sourceCode" : "@Test\r\nvoid testSideEffectEnabled() throws Exception {\r\n    final Asserter asserter = new Asserter(createEngine(new JexlFeatures().sideEffect(true)));\r\n    // 1\r\n    asserter.assertExpression(\"i = 1\", 1);\r\n    // 1 + 1 = 2\r\n    asserter.assertExpression(\"i = i + 1\", 2);\r\n    // 2 - 1 = 1\r\n    asserter.assertExpression(\"i = i - 1\", 1);\r\n    // 1 * 2 = 2\r\n    asserter.assertExpression(\"i = i * 2\", 2);\r\n    // 2 / 2 = 1\r\n    asserter.assertExpression(\"i = i / 2\", 1);\r\n    // 1 % 1 = 1\r\n    asserter.assertExpression(\"i = i % 2\", 1);\r\n    // 1 ^ 0 = 1\r\n    asserter.assertExpression(\"i = i ^ 0\", 1L);\r\n    // 1 << 1 = 2\r\n    asserter.assertExpression(\"i = i << 1\", 2L);\r\n    // 1 >> 1 = 1\r\n    asserter.assertExpression(\"i = i >> 1\", 1L);\r\n    // 1 >>> 1 = 0\r\n    asserter.assertExpression(\"i = i >>> 1\", 0L);\r\n    // reset\r\n    asserter.assertExpression(\"i = 1\", 1);\r\n    asserter.assertExpression(\"i += 1\", 2);\r\n    asserter.assertExpression(\"i -= 1\", 1);\r\n    asserter.assertExpression(\"i *= 2\", 2);\r\n    asserter.assertExpression(\"i /= 2\", 1);\r\n    asserter.assertExpression(\"i %= 2\", 1);\r\n    asserter.assertExpression(\"i ^= 0\", 1L);\r\n    asserter.assertExpression(\"i <<= 1\", 2L);\r\n    asserter.assertExpression(\"i >>= 1\", 1L);\r\n    asserter.assertExpression(\"i >>>= 1\", 0L);\r\n    // reset\r\n    asserter.assertExpression(\"i = 1\", 1);\r\n    asserter.assertExpression(\"++i\", 2);\r\n    asserter.assertExpression(\"--i\", 1);\r\n    asserter.assertExpression(\"i++\", 1);\r\n    asserter.assertExpression(\"i--\", 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\FeatureControllerTest.java",
  "methodName" : "testStructuredLiteralFeatureSwitch",
  "sourceCode" : "@Test\r\nvoid testStructuredLiteralFeatureSwitch() throws Exception {\r\n    final Asserter onAsserter = new Asserter(createEngine(new JexlFeatures().structuredLiteral(true)));\r\n    final Asserter offAsserter = new Asserter(createEngine(new JexlFeatures().structuredLiteral(false)));\r\n    final String arrayLitExpr = \"[1, 2, 3, 4][3]\";\r\n    onAsserter.assertExpression(arrayLitExpr, 4);\r\n    offAsserter.failExpression(arrayLitExpr, \"@1:1 set/map/array literal error in '[ ... ]'\", String::equals);\r\n    final String mapLitExpr = \"{'A' : 1, 'B' : 2}['B']\";\r\n    onAsserter.assertExpression(mapLitExpr, 2);\r\n    offAsserter.failExpression(mapLitExpr, \"@1:1 set/map/array literal error in '{ ... }'\", String::equals);\r\n    final String setLitExpr = \"{'A', 'B'}.size()\";\r\n    onAsserter.assertExpression(setLitExpr, 2);\r\n    offAsserter.failExpression(setLitExpr, \"@1:1 set/map/array literal error in '{ ... }'\", String::equals);\r\n    final String rangeLitExpr = \"(0..3).size()\";\r\n    onAsserter.assertExpression(rangeLitExpr, 4);\r\n    offAsserter.failExpression(rangeLitExpr, \"@1:5 set/map/array literal error in '( .. )'\", String::equals);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\ParserTest.java",
  "methodName" : "testControlCharacters",
  "sourceCode" : "/**\r\n * Test the escaped control characters.\r\n */\r\n@Test\r\nvoid testControlCharacters() {\r\n    // Both '' and \"\" are valid JEXL string\r\n    // The array of tuples where the first element is an expected result and the second element is a test string.\r\n    final String[][] strings = { // we still honor the actual characters\r\n    new String[] { \"a\\nb\\tc\", \"'a\\nb\\tc'\" }, new String[] { \"a\\nb\\tc\", \"'a\\\\nb\\\\tc'\" }, new String[] { \"a\\nb\\tc\", \"\\\"a\\\\nb\\\\tc\\\"\" }, new String[] { \"\\b\\t\\n\\f\\r\", \"'\\\\b\\\\t\\\\n\\\\f\\\\r'\" }, new String[] { \"'hi'\", \"'\\\\'hi\\\\''\" }, new String[] { \"\\\"hi\\\"\", \"'\\\"hi\\\"'\" }, new String[] { \"\\\"hi\\\"\", \"'\\\"hi\\\"'\" } };\r\n    for (final String[] pair : strings) {\r\n        final String output = StringParser.buildString(pair[1], true);\r\n        assertEquals(pair[0], output);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\ParserTest.java",
  "methodName" : "testErrorAmbiguous",
  "sourceCode" : "@Test\r\nvoid testErrorAmbiguous() throws Exception {\r\n    final Parser parser = new Parser(\";\");\r\n    assertThrows(JexlException.Ambiguous.class, () -> parser.parse(null, FEATURES, \"x = 1 y = 5\", null), \"should have failed on ambiguous statement\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\ParserTest.java",
  "methodName" : "testErrorAssign",
  "sourceCode" : "@Test\r\nvoid testErrorAssign() throws Exception {\r\n    final String[] ops = { \"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"^=\", \"&=\", \"|=\" };\r\n    for (final String op : ops) {\r\n        final Parser parser = new Parser(\";\");\r\n        final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> parser.parse(null, FEATURES, \"foo() \" + op + \" 1;\", null), () -> \"should have failed on invalid assignment \" + op);\r\n        assertNotNull(xparse.getDetail());\r\n        assertNotNull(xparse.toString());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\ParserTest.java",
  "methodName" : "testIdentifierEscape",
  "sourceCode" : "@Test\r\nvoid testIdentifierEscape() {\r\n    final String[] ids = { \"a\\\\ b\", \"a\\\\ b\\\\ c\", \"a\\\\'b\\\\\\\"c\", \"a\\\\ \\\\ c\" };\r\n    for (final String id : ids) {\r\n        final String esc0 = StringParser.unescapeIdentifier(id);\r\n        assertFalse(esc0.contains(\"\\\\\"));\r\n        final String esc1 = StringParser.escapeIdentifier(esc0);\r\n        assertEquals(id, esc1);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\parser\\ParserTest.java",
  "methodName" : "testParse",
  "sourceCode" : "/**\r\n * See if we can parse simple scripts\r\n */\r\n@Test\r\nvoid testParse() throws Exception {\r\n    final Parser parser = new Parser(\";\");\r\n    JexlNode sn;\r\n    sn = parser.parse(null, FEATURES, \"foo = 1;\", null);\r\n    assertNotNull(sn, \"parsed node is null\");\r\n    sn = parser.parse(null, FEATURES, \"foo = \\\"bar\\\";\", null);\r\n    assertNotNull(sn, \"parsed node is null\");\r\n    sn = parser.parse(null, FEATURES, \"foo = 'bar';\", null);\r\n    assertNotNull(sn, \"parsed node is null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "test354",
  "sourceCode" : "@Test\r\nvoid test354() {\r\n    final Map<String, Number> values = new TreeMap<>();\r\n    values.put(\"1\", 1);\r\n    values.put(\"+1\", 1);\r\n    values.put(\"-1\", -1);\r\n    values.put(\"1l\", 1L);\r\n    values.put(\"+1l\", 1L);\r\n    values.put(\"-1l\", -1L);\r\n    values.put(\"10h\", BigInteger.valueOf(10));\r\n    values.put(\"-11h\", BigInteger.valueOf(-11));\r\n    values.put(\"+12h\", BigInteger.valueOf(12));\r\n    values.put(\"0xa\", 0xa);\r\n    values.put(\"+0xa\", 0xa);\r\n    values.put(\"-0xa\", -0xa);\r\n    values.put(\"0xacl\", 0xacL);\r\n    values.put(\"+0xadl\", 0xadL);\r\n    values.put(\"-0xafl\", -0xafL);\r\n    values.put(\"1d\", 1d);\r\n    values.put(\"-1d\", -1d);\r\n    values.put(\"+1d\", 1d);\r\n    values.put(\"1f\", 1f);\r\n    values.put(\"-1f\", -1f);\r\n    values.put(\"+1f\", 1f);\r\n    values.put(\"1B\", new BigDecimal(1));\r\n    values.put(\"-1B\", new BigDecimal(-1));\r\n    values.put(\"+1B\", new BigDecimal(1));\r\n    values.put(\"-42424242424242424242424242424242\", new BigInteger(\"-42424242424242424242424242424242\"));\r\n    values.put(\"+42424242424242424242424242424242\", new BigInteger(\"+42424242424242424242424242424242\"));\r\n    values.put(\"42424242424242424242424242424242\", new BigInteger(\"42424242424242424242424242424242\"));\r\n    final JexlEngine jexl = new JexlBuilder().safe(true).create();\r\n    for (final Map.Entry<String, Number> e : values.entrySet()) {\r\n        final String text = \"#pragma number \" + e.getKey();\r\n        final JexlScript script = jexl.createScript(text);\r\n        assertNotNull(script);\r\n        final Map<String, Object> pragmas = script.getPragmas();\r\n        assertNotNull(pragmas);\r\n        assertEquals(e.getValue(), pragmas.get(\"number\"), e::getKey);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testImportPragmaDisabled",
  "sourceCode" : "@Test\r\nvoid testImportPragmaDisabled() {\r\n    final String src = \"#pragma jexl.import java.util\\n\" + \"#pragma jexl.import java.io\\n\" + \"#pragma jexl.import java.net\\n\" + \"42\";\r\n    final JexlFeatures features = new JexlFeatures();\r\n    features.importPragma(false);\r\n    final JexlEngine jexl = new JexlBuilder().features(features).create();\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(src));\r\n    assertTrue(xparse.getMessage().contains(\"import pragma\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testImportPragmaValueSet",
  "sourceCode" : "@Test\r\nvoid testImportPragmaValueSet() {\r\n    final String src = \"#pragma jexl.import java.util\\n\" + \"#pragma jexl.import java.io\\n\" + \"#pragma jexl.import java.net\\n\" + \"42\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    final Map<String, Object> pragmas = script.getPragmas();\r\n    final Object importz = pragmas.get(\"jexl.import\");\r\n    assertInstanceOf(Set.class, importz);\r\n    final Set<String> importzz = (Set<String>) importz;\r\n    assertTrue(importzz.contains(\"java.util\"));\r\n    assertTrue(importzz.contains(\"java.io\"));\r\n    assertTrue(importzz.contains(\"java.net\"));\r\n    assertEquals(3, importzz.size());\r\n    final String parsed = script.getParsedText();\r\n    assertEquals(src, parsed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testIssue416",
  "sourceCode" : "@Test\r\nvoid testIssue416() {\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlScript script = jexl.createScript(\"#pragma myNull null\\n\");\r\n    final Map<String, Object> pragmas = script.getPragmas();\r\n    assertTrue(pragmas.containsKey(\"myNull\"), \"pragma key present?\");\r\n    assertNull(pragmas.get(\"myNull\"), \"expected null value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testJxltPragmas",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"AssertEqualsBetweenInconvertibleTypes\")\r\nvoid testJxltPragmas() {\r\n    final JxltEngine engine = new JexlBuilder().create().createJxltEngine();\r\n    final JxltEngine.Template tscript = engine.createTemplate(\"$$ #pragma one 1\\n$$ #pragma the.very.hard 'truth'\\n2;\");\r\n    assertNotNull(tscript);\r\n    final Map<String, Object> pragmas = tscript.getPragmas();\r\n    assertEquals(2, pragmas.size());\r\n    assertEquals(1, pragmas.get(\"one\"));\r\n    assertEquals(\"truth\", pragmas.get(\"the.very.hard\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testNamespacePragma",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"AssertEqualsBetweenInconvertibleTypes\")\r\nvoid testNamespacePragma() {\r\n    final JexlContext jc = new SafeContext();\r\n    final String src = \"#pragma jexl.namespace.sleeper \" + Sleeper.class.getName() + \"\\n\" + \"sleeper:sleep(100);\\n\" + \"42;\\n\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    final Object result = script.execute(jc);\r\n    assertEquals(42, result);\r\n    final String parsed = script.getParsedText();\r\n    assertEquals(src, parsed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testNamespacePragmaCtl",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"AssertEqualsBetweenInconvertibleTypes\")\r\nvoid testNamespacePragmaCtl() {\r\n    final Map<String, Object> ns = Collections.singletonMap(\"sleeper\", Sleeper.class.getName());\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(ns).create();\r\n    final JexlContext jc = new SafeContext();\r\n    final JexlScript script = jexl.createScript(\"sleeper:sleep(100);\" + \"42\");\r\n    final Object result = script.execute(jc);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testNamespacePragmaDisabled",
  "sourceCode" : "@Test\r\nvoid testNamespacePragmaDisabled() {\r\n    final JexlFeatures features = new JexlFeatures();\r\n    features.namespacePragma(false);\r\n    final JexlEngine jexl = new JexlBuilder().features(features).create();\r\n    // @formatter:off\r\n    final JexlException.Parsing xparse = assertThrows(JexlException.Parsing.class, () -> jexl.createScript(\"#pragma jexl.namespace.sleeper \" + StaticSleeper.class.getName() + \"\\n\" + \"sleeper:sleep(100);\" + \"42\"));\r\n    // @formatter:on\r\n    assertTrue(xparse.getMessage().contains(\"namespace pragma\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testPragmaModuleCache",
  "sourceCode" : "@Test\r\nvoid testPragmaModuleCache() {\r\n    final CachingModuleContext ctxt = new CachingModuleContext();\r\n    runPragmaModule(ctxt, ctxt);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testPragmaModuleNoCache",
  "sourceCode" : "@Test\r\nvoid testPragmaModuleNoCache() {\r\n    final ModuleContext ctxt = new ModuleContext();\r\n    runPragmaModule(ctxt, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testPragmaOptions1",
  "sourceCode" : "@Test\r\nvoid testPragmaOptions1() {\r\n    final String str = \"i; #pragma jexl.options '-strict'\\n\";\r\n    // @formatter:off\r\n    final JexlEngine jexl = new JexlBuilder().features(new JexlFeatures().pragmaAnywhere(false)).strict(true).create();\r\n    // @formatter:on\r\n    assertThrows(JexlException.class, () -> jexl.createScript(str), \"i should not be resolved\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testPragmas",
  "sourceCode" : "/**\r\n * Test creating a script from a string.\r\n */\r\n@Test\r\n@SuppressWarnings(\"AssertEqualsBetweenInconvertibleTypes\")\r\nvoid testPragmas() {\r\n    final JexlScript script = JEXL.createScript(\"#pragma one 1\\n#pragma the.very.hard 'truth'\\n2;\");\r\n    assertNotNull(script);\r\n    final Map<String, Object> pragmas = script.getPragmas();\r\n    assertEquals(2, pragmas.size());\r\n    assertEquals(1, pragmas.get(\"one\"));\r\n    assertEquals(\"truth\", pragmas.get(\"the.very.hard\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testSafePragma",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"AssertEqualsBetweenInconvertibleTypes\")\r\nvoid testSafePragma() {\r\n    final SafeContext jc = new SafeContext();\r\n    jc.set(\"foo\", null);\r\n    final JexlScript script = JEXL.createScript(\"#pragma jexl.safe true\\nfoo.bar;\");\r\n    assertNotNull(script);\r\n    jc.processPragmas(script.getPragmas());\r\n    final Object result = script.execute(jc);\r\n    assertNull(result);\r\n    final SafeContext jc1 = new SafeContext();\r\n    jc1.set(\"foo\", null);\r\n    assertThrows(JexlException.class, () -> script.execute(jc1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testStaticNamespacePragma",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"AssertEqualsBetweenInconvertibleTypes\")\r\nvoid testStaticNamespacePragma() {\r\n    final JexlContext jc = new SafeContext();\r\n    final JexlScript script = JEXL.createScript(\"#pragma jexl.namespace.sleeper \" + StaticSleeper.class.getName() + \"\\n\" + \"sleeper:sleep(100);\" + \"42\");\r\n    final Object result = script.execute(jc);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PragmaTest.java",
  "methodName" : "testStatictNamespacePragmaCtl",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"AssertEqualsBetweenInconvertibleTypes\")\r\nvoid testStatictNamespacePragmaCtl() {\r\n    final Map<String, Object> ns = Collections.singletonMap(\"sleeper\", StaticSleeper.class.getName());\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(ns).create();\r\n    final JexlContext jc = new SafeContext();\r\n    final JexlScript script = jexl.createScript(\"sleeper:sleep(100);\" + \"42\");\r\n    final Object result = script.execute(jc);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PropertyAccessTest.java",
  "methodName" : "test250",
  "sourceCode" : "@Test\r\nvoid test250() throws Exception {\r\n    final MapContext ctx = new MapContext();\r\n    final HashMap<Object, Object> x = new HashMap<>();\r\n    x.put(2, \"123456789\");\r\n    ctx.set(\"x\", x);\r\n    // @formatter:off\r\n    final JexlEngine engine = new JexlBuilder().uberspect(new Uberspect(null, null, JexlPermissions.UNRESTRICTED)).strict(true).silent(false).create();\r\n    // @formatter:on\r\n    String stmt = \"x.2.class.name\";\r\n    JexlScript script = engine.createScript(stmt);\r\n    Object result = script.execute(ctx);\r\n    assertEquals(\"java.lang.String\", result);\r\n    stmt = \"x.3?.class.name\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx);\r\n    assertNull(result);\r\n    stmt = \"x?.3.class.name\";\r\n    final JexlScript script1 = engine.createScript(stmt);\r\n    assertThrows(JexlException.class, () -> script1.execute(ctx));\r\n    stmt = \"x?.3?.class.name\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx);\r\n    assertNull(result);\r\n    stmt = \"y?.3.class.name\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx);\r\n    assertNull(result);\r\n    stmt = \"x?.y?.z\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx);\r\n    assertNull(result);\r\n    stmt = \"x? (x.y? (x.y.z ?: null) :null) : null\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx);\r\n    assertNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PropertyAccessTest.java",
  "methodName" : "test275a",
  "sourceCode" : "@Test\r\nvoid test275a() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(false).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    Object result = null;\r\n    final Prompt p0 = new Prompt();\r\n    p0.set(\"stuff\", 42);\r\n    ctxt.set(\"$in\", p0);\r\n    // unprotected navigation\r\n    final JexlScript script0 = jexl.createScript(\"$in[p].intValue()\", \"p\");\r\n    assertThrows(JexlException.Property.class, () -> script0.execute(ctxt, \"fail\"));\r\n    assertNull(result);\r\n    result = script0.execute(ctxt, \"stuff\");\r\n    assertEquals(42, result);\r\n    // protected navigation\r\n    JexlScript script = jexl.createScript(\"$in[p]?.intValue()\", \"p\");\r\n    result = script.execute(ctxt, \"fail\");\r\n    assertNull(result);\r\n    result = script.execute(ctxt, \"stuff\");\r\n    assertEquals(42, result);\r\n    // unprotected navigation\r\n    final JexlScript script1 = jexl.createScript(\"$in.`${p}`.intValue()\", \"p\");\r\n    assertThrows(JexlException.Property.class, () -> script1.execute(ctxt, \"fail\"));\r\n    result = script.execute(ctxt, \"stuff\");\r\n    assertEquals(42, result);\r\n    // protected navigation\r\n    script = jexl.createScript(\"$in.`${p}`?.intValue()\", \"p\");\r\n    result = script.execute(ctxt, \"fail\");\r\n    assertNull(result);\r\n    result = script.execute(ctxt, \"stuff\");\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PropertyAccessTest.java",
  "methodName" : "test275b",
  "sourceCode" : "@Test\r\nvoid test275b() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).safe(true).create();\r\n    final JexlContext ctxt = new MapContext();\r\n    JexlScript script;\r\n    final Prompt p0 = new Prompt();\r\n    p0.set(\"stuff\", 42);\r\n    ctxt.set(\"$in\", p0);\r\n    // unprotected navigation\r\n    script = jexl.createScript(\"$in[p].intValue()\", \"p\");\r\n    Object result = script.execute(ctxt, \"fail\");\r\n    assertNull(result);\r\n    result = script.execute(ctxt, \"stuff\");\r\n    assertEquals(42, result);\r\n    // unprotected navigation\r\n    script = jexl.createScript(\"$in.`${p}`.intValue()\", \"p\");\r\n    result = script.execute(ctxt, \"fail\");\r\n    assertNull(result);\r\n    result = script.execute(ctxt, \"stuff\");\r\n    assertEquals(42, result);\r\n    // protected navigation\r\n    script = jexl.createScript(\"$in.`${p}`?.intValue()\", \"p\");\r\n    result = script.execute(ctxt, \"fail\");\r\n    assertNull(result);\r\n    result = script.execute(ctxt, \"stuff\");\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PropertyAccessTest.java",
  "methodName" : "testErroneousIdentifier",
  "sourceCode" : "@Test\r\nvoid testErroneousIdentifier() throws Exception {\r\n    final MapContext ctx = new MapContext();\r\n    final JexlEngine engine = new JexlBuilder().strict(true).silent(false).create();\r\n    // base succeeds\r\n    String stmt = \"(x)->{ x?.class ?? 'oops' }\";\r\n    JexlScript script = engine.createScript(stmt);\r\n    Object result = script.execute(ctx, \"querty\");\r\n    assertEquals(\"querty\".getClass(), result);\r\n    // fail with unknown property\r\n    stmt = \"(x)->{ x.class1 ?? 'oops' }\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx, \"querty\");\r\n    assertEquals(\"oops\", result);\r\n    // succeeds with jxlt & strict navigation\r\n    ctx.set(\"al\", \"la\");\r\n    stmt = \"(x)->{ x.`c${al}ss` ?? 'oops' }\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx, \"querty\");\r\n    assertEquals(\"querty\".getClass(), result);\r\n    // succeeds with jxlt & lenient navigation\r\n    stmt = \"(x)->{ x?.`c${al}ss` ?? 'oops' }\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx, \"querty\");\r\n    assertEquals(\"querty\".getClass(), result);\r\n    // fails with jxlt & lenient navigation\r\n    stmt = \"(x)->{ x?.`c${la}ss` ?? 'oops' }\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx, \"querty\");\r\n    assertEquals(\"oops\", result);\r\n    // fails with jxlt & strict navigation\r\n    stmt = \"(x)->{ x.`c${la}ss` ?? 'oops' }\";\r\n    script = engine.createScript(stmt);\r\n    result = script.execute(ctx, \"querty\");\r\n    assertEquals(\"oops\", result);\r\n    // parsing fails with jxlt & lenient navigation\r\n    stmt = \"(x)->{ x?.`c${la--ss` ?? 'oops' }\";\r\n    try {\r\n        script = engine.createScript(stmt);\r\n        result = script.execute(ctx, \"querty\");\r\n    } catch (final JexlException xany) {\r\n        assertNotNull(xany.getMessage());\r\n        assertTrue(xany.getMessage().contains(\"c${la--ss\"));\r\n    }\r\n    // parsing fails with jxlt & strict navigation\r\n    stmt = \"(x)->{ x.`c${la--ss` ?? 'oops' }\";\r\n    try {\r\n        script = engine.createScript(stmt);\r\n        result = script.execute(ctx, \"querty\");\r\n    } catch (final JexlException xany) {\r\n        assertNotNull(xany.getMessage());\r\n        assertTrue(xany.getMessage().contains(\"c${la--ss\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PropertyAccessTest.java",
  "methodName" : "testInnerProperty",
  "sourceCode" : "@Test\r\nvoid testInnerProperty() throws Exception {\r\n    final PropertyArithmetic pa = new PropertyArithmetic(true);\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(pa).debug(true).strict(true).cache(32).create();\r\n    final Container quux = new Container(\"quux\", 42);\r\n    final JexlScript get;\r\n    Object result;\r\n    final int calls = pa.getCalls();\r\n    final JexlScript getName = JEXL.createScript(\"foo.property.name\", \"foo\");\r\n    result = getName.execute(null, quux);\r\n    assertEquals(\"quux\", result);\r\n    final JexlScript get0 = JEXL.createScript(\"foo.property.0\", \"foo\");\r\n    result = get0.execute(null, quux);\r\n    assertEquals(\"quux\", result);\r\n    final JexlScript getNumber = JEXL.createScript(\"foo.property.number\", \"foo\");\r\n    result = getNumber.execute(null, quux);\r\n    assertEquals(42, result);\r\n    final JexlScript get1 = JEXL.createScript(\"foo.property.1\", \"foo\");\r\n    result = get1.execute(null, quux);\r\n    assertEquals(42, result);\r\n    final JexlScript setName = JEXL.createScript(\"foo.property.name = $0\", \"foo\", \"$0\");\r\n    setName.execute(null, quux, \"QUUX\");\r\n    result = getName.execute(null, quux);\r\n    assertEquals(\"QUUX\", result);\r\n    result = get0.execute(null, quux);\r\n    assertEquals(\"QUUX\", result);\r\n    final JexlScript set0 = JEXL.createScript(\"foo.property.0 = $0\", \"foo\", \"$0\");\r\n    set0.execute(null, quux, \"BAR\");\r\n    result = getName.execute(null, quux);\r\n    assertEquals(\"BAR\", result);\r\n    result = get0.execute(null, quux);\r\n    assertEquals(\"BAR\", result);\r\n    final JexlScript setNumber = JEXL.createScript(\"foo.property.number = $0\", \"foo\", \"$0\");\r\n    setNumber.execute(null, quux, -42);\r\n    result = getNumber.execute(null, quux);\r\n    assertEquals(-42, result);\r\n    result = get1.execute(null, quux);\r\n    assertEquals(-42, result);\r\n    final JexlScript set1 = JEXL.createScript(\"foo.property.1 = $0\", \"foo\", \"$0\");\r\n    set1.execute(null, quux, 24);\r\n    result = getNumber.execute(null, quux);\r\n    assertEquals(24, result);\r\n    result = get1.execute(null, quux);\r\n    assertEquals(24, result);\r\n    assertEquals(calls, pa.getCalls());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PropertyAccessTest.java",
  "methodName" : "testInnerViaArithmetic",
  "sourceCode" : "@Test\r\nvoid testInnerViaArithmetic() throws Exception {\r\n    final PropertyArithmetic pa = new PropertyArithmetic(true);\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(pa).debug(true).strict(true).cache(32).create();\r\n    final PropertyContainer quux = new PropertyContainer(\"bar\", 169);\r\n    Object result;\r\n    final JexlScript getName = jexl.createScript(\"foo.property.name\", \"foo\");\r\n    result = getName.execute(null, quux);\r\n    assertEquals(\"bar\", result);\r\n    final int calls = pa.getCalls();\r\n    final JexlScript setName = jexl.createScript(\"foo.property.name = $0\", \"foo\", \"$0\");\r\n    setName.execute(null, quux, 123);\r\n    result = getName.execute(null, quux);\r\n    assertEquals(\"123\", result);\r\n    setName.execute(null, quux, 456);\r\n    result = getName.execute(null, quux);\r\n    assertEquals(\"456\", result);\r\n    assertEquals(calls + 2, pa.getCalls());\r\n    setName.execute(null, quux, \"quux\");\r\n    result = getName.execute(null, quux);\r\n    assertEquals(\"QUUX\", result);\r\n    assertEquals(calls + 2, pa.getCalls());\r\n    final JexlScript getNumber = jexl.createScript(\"foo.property.number\", \"foo\");\r\n    result = getNumber.execute(null, quux);\r\n    assertEquals(169, result);\r\n    final JexlScript setNumber = jexl.createScript(\"foo.property.number = $0\", \"foo\", \"$0\");\r\n    setNumber.execute(null, quux, 42);\r\n    result = getNumber.execute(null, quux);\r\n    assertEquals(1042, result);\r\n    setNumber.execute(null, quux, 24);\r\n    result = getNumber.execute(null, quux);\r\n    assertEquals(1024, result);\r\n    assertEquals(calls + 4, pa.getCalls());\r\n    setNumber.execute(null, quux, \"42\");\r\n    result = getNumber.execute(null, quux);\r\n    assertEquals(1042, result);\r\n    assertEquals(calls + 4, pa.getCalls());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PropertyAccessTest.java",
  "methodName" : "testPropertyProperty",
  "sourceCode" : "@Test\r\nvoid testPropertyProperty() throws Exception {\r\n    final Integer i42 = Integer.valueOf(42);\r\n    final Integer i43 = Integer.valueOf(43);\r\n    final String s42 = \"fourty-two\";\r\n    final Object[] foo = new Object[3];\r\n    foo[0] = foo;\r\n    foo[1] = i42;\r\n    foo[2] = s42;\r\n    asserter.setVariable(\"foo\", foo);\r\n    asserter.setVariable(\"zero\", Integer.valueOf(0));\r\n    asserter.setVariable(\"one\", Integer.valueOf(1));\r\n    asserter.setVariable(\"two\", Integer.valueOf(2));\r\n    for (int l = 0; l < 2; ++l) {\r\n        asserter.assertExpression(\"foo.0\", foo);\r\n        asserter.assertExpression(\"foo.0.'0'\", foo);\r\n        asserter.assertExpression(\"foo.'1'\", foo[1]);\r\n        asserter.assertExpression(\"foo.0.'1'\", foo[1]);\r\n        asserter.assertExpression(\"foo.0.'1' = 43\", i43);\r\n        asserter.assertExpression(\"foo.0.'1'\", i43);\r\n        asserter.assertExpression(\"foo.0.'1' = 42\", i42);\r\n        //\r\n        asserter.assertExpression(\"foo?.0.'1'\", i42);\r\n        asserter.assertExpression(\"foo?.0\", foo);\r\n        asserter.assertExpression(\"foo?.0.'0'\", foo);\r\n        asserter.assertExpression(\"foo?.'1'\", foo[1]);\r\n        asserter.assertExpression(\"foo.0?.'1'\", foo[1]);\r\n        asserter.assertExpression(\"foo?.0.'1' = 43\", i43);\r\n        asserter.assertExpression(\"foo?.0?.'1'\", i43);\r\n        asserter.assertExpression(\"foo?.0.'1' = 42\", i42);\r\n        asserter.assertExpression(\"foo?.0.'1'\", i42);\r\n        //\r\n        asserter.assertExpression(\"foo?.0.`1`\", i42);\r\n        asserter.assertExpression(\"foo?.0\", foo);\r\n        asserter.assertExpression(\"foo?.0.'0'\", foo);\r\n        asserter.assertExpression(\"foo?.`1`\", foo[1]);\r\n        asserter.assertExpression(\"foo?.0.`1`\", foo[1]);\r\n        asserter.assertExpression(\"foo?.0.`${one}` = 43\", i43);\r\n        asserter.assertExpression(\"foo.0?.`${one}`\", i43);\r\n        asserter.assertExpression(\"foo.0.`${one}` = 42\", i42);\r\n        asserter.assertExpression(\"foo?.0?.`${one}`\", i42);\r\n        //\r\n        asserter.assertExpression(\"foo?[0].'1'\", i42);\r\n        asserter.assertExpression(\"foo?[0]\", foo);\r\n        asserter.assertExpression(\"foo?[0].'0'\", foo);\r\n        asserter.assertExpression(\"foo?[1]\", foo[1]);\r\n        asserter.assertExpression(\"foo[0]?.'1'\", foo[1]);\r\n        asserter.assertExpression(\"foo?[0].'1' = 43\", i43);\r\n        asserter.assertExpression(\"foo?[0]?.'1'\", i43);\r\n        asserter.assertExpression(\"foo?[0].'1' = 42\", i42);\r\n        asserter.assertExpression(\"foo?[0].'1'\", i42);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PropertyAccessTest.java",
  "methodName" : "testStringIdentifier",
  "sourceCode" : "@Test\r\nvoid testStringIdentifier() throws Exception {\r\n    final Map<String, String> foo = new HashMap<>();\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"foo\", foo);\r\n    foo.put(\"q u u x\", \"456\");\r\n    JexlExpression e = JEXL.createExpression(\"foo.\\\"q u u x\\\"\");\r\n    Object result = e.evaluate(jc);\r\n    assertEquals(\"456\", result);\r\n    e = JEXL.createExpression(\"foo.'q u u x'\");\r\n    result = e.evaluate(jc);\r\n    assertEquals(\"456\", result);\r\n    JexlScript s = JEXL.createScript(\"foo.\\\"q u u x\\\"\");\r\n    result = s.execute(jc);\r\n    assertEquals(\"456\", result);\r\n    s = JEXL.createScript(\"foo.'q u u x'\");\r\n    result = s.execute(jc);\r\n    assertEquals(\"456\", result);\r\n    final Debugger dbg = new Debugger();\r\n    dbg.debug(e);\r\n    final String dbgdata = dbg.toString();\r\n    assertEquals(\"foo.'q u u x'\", dbgdata);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PublicFieldsTest.java",
  "methodName" : "testGetEnum",
  "sourceCode" : "@Test\r\nvoid testGetEnum() throws Exception {\r\n    ctxt.set(\"com.jexl.gender\", Gender.class);\r\n    final String src = \"x = com.jexl.gender.FEMALE\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    final Object result = script.execute(ctxt);\r\n    assertEquals(Gender.FEMALE, result);\r\n    assertEquals(Gender.FEMALE, ctxt.get(\"x\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PublicFieldsTest.java",
  "methodName" : "testGetInnerDouble",
  "sourceCode" : "@Test\r\nvoid testGetInnerDouble() throws Exception {\r\n    final JexlExpression get = JEXL.createExpression(\"pub.inner.aDouble\");\r\n    assertEquals(42.0, get.evaluate(ctxt));\r\n    JEXL.setProperty(pub, \"inner.aDouble\", -42);\r\n    assertEquals(-42.0, get.evaluate(ctxt));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PublicFieldsTest.java",
  "methodName" : "testGetInt",
  "sourceCode" : "@Test\r\nvoid testGetInt() throws Exception {\r\n    final JexlExpression get = JEXL.createExpression(\"pub.anInt\");\r\n    assertEquals(42, get.evaluate(ctxt));\r\n    JEXL.setProperty(pub, \"anInt\", -42);\r\n    assertEquals(-42, get.evaluate(ctxt));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PublicFieldsTest.java",
  "methodName" : "testGetStaticField",
  "sourceCode" : "@Test\r\nvoid testGetStaticField() throws Exception {\r\n    ctxt.set(\"com.jexl\", Inner.class);\r\n    final String src = \"x = com.jexl.NOT42\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    final Object result = script.execute(ctxt);\r\n    assertEquals(Inner.NOT42, result);\r\n    assertEquals(Inner.NOT42, ctxt.get(\"x\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PublicFieldsTest.java",
  "methodName" : "testGetString",
  "sourceCode" : "@Test\r\nvoid testGetString() throws Exception {\r\n    final JexlExpression get = JEXL.createExpression(\"pub.aString\");\r\n    assertEquals(LOWER42, get.evaluate(ctxt));\r\n    JEXL.setProperty(pub, \"aString\", UPPER42);\r\n    assertEquals(UPPER42, get.evaluate(ctxt));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PublicFieldsTest.java",
  "methodName" : "testSetInnerDouble",
  "sourceCode" : "@Test\r\nvoid testSetInnerDouble() throws Exception {\r\n    final JexlExpression set = JEXL.createExpression(\"pub.inner.aDouble = value\");\r\n    ctxt.set(\"value\", -42.0);\r\n    assertEquals(-42.0, set.evaluate(ctxt));\r\n    assertEquals(-42.0, JEXL.getProperty(pub, \"inner.aDouble\"));\r\n    ctxt.set(\"value\", 42.0);\r\n    assertEquals(42.0, set.evaluate(ctxt));\r\n    assertEquals(42.0, JEXL.getProperty(pub, \"inner.aDouble\"));\r\n    assertThrows(JexlException.class, () -> {\r\n        ctxt.set(\"value\", UPPER42);\r\n        assertNull(set.evaluate(ctxt));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PublicFieldsTest.java",
  "methodName" : "testSetInt",
  "sourceCode" : "@Test\r\nvoid testSetInt() throws Exception {\r\n    final JexlExpression set = JEXL.createExpression(\"pub.anInt = value\");\r\n    ctxt.set(\"value\", -42);\r\n    assertEquals(-42, set.evaluate(ctxt));\r\n    assertEquals(-42, JEXL.getProperty(pub, \"anInt\"));\r\n    ctxt.set(\"value\", 42);\r\n    assertEquals(42, set.evaluate(ctxt));\r\n    assertEquals(42, JEXL.getProperty(pub, \"anInt\"));\r\n    assertThrows(JexlException.class, () -> {\r\n        ctxt.set(\"value\", UPPER42);\r\n        assertNull(set.evaluate(ctxt));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\PublicFieldsTest.java",
  "methodName" : "testSetString",
  "sourceCode" : "@Test\r\nvoid testSetString() throws Exception {\r\n    final JexlExpression set = JEXL.createExpression(\"pub.aString = value\");\r\n    ctxt.set(\"value\", UPPER42);\r\n    assertEquals(UPPER42, set.evaluate(ctxt));\r\n    assertEquals(UPPER42, JEXL.getProperty(pub, \"aString\"));\r\n    ctxt.set(\"value\", LOWER42);\r\n    assertEquals(LOWER42, set.evaluate(ctxt));\r\n    assertEquals(LOWER42, JEXL.getProperty(pub, \"aString\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\RangeTest.java",
  "methodName" : "testIntegerContains",
  "sourceCode" : "@Test\r\nvoid testIntegerContains() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"(x)->{ x =~ (1..10) }\");\r\n    final JexlContext jc = new MapContext();\r\n    Object o = e.execute(jc, 5);\r\n    assertEquals(Boolean.TRUE, o);\r\n    o = e.execute(jc, 0);\r\n    assertEquals(Boolean.FALSE, o);\r\n    o = e.execute(jc, 100);\r\n    assertEquals(Boolean.FALSE, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\RangeTest.java",
  "methodName" : "testIntegerRange",
  "sourceCode" : "@Test\r\nvoid testIntegerRange() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"(1..32)\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o0 = e.evaluate(jc);\r\n    final Object o = e.evaluate(jc);\r\n    assertInstanceOf(Collection.class, o);\r\n    final Collection<?> c = (Collection<?>) o;\r\n    assertEquals(32, c.size());\r\n    assertNotSame(o0, o);\r\n    assertEquals(o0.hashCode(), o.hashCode());\r\n    assertEquals(o0, o);\r\n    int i = 0;\r\n    for (final Object v : c) {\r\n        i += 1;\r\n        assertEquals(i, ((Number) v).intValue());\r\n    }\r\n    assertEquals(32, i);\r\n    Integer[] aa = c.<Integer>toArray(new Integer[32]);\r\n    assertEquals(32, aa.length);\r\n    for (int l = 0; l < 32; ++l) {\r\n        assertEquals((int) aa[l], l + 1);\r\n    }\r\n    aa = c.<Integer>toArray(new Integer[2]);\r\n    assertEquals(32, aa.length);\r\n    for (int l = 0; l < 32; ++l) {\r\n        assertEquals((int) aa[l], l + 1);\r\n    }\r\n    aa = c.<Integer>toArray(new Integer[34]);\r\n    assertEquals(34, aa.length);\r\n    for (int l = 0; l < 32; ++l) {\r\n        assertEquals((int) aa[l], l + 1);\r\n    }\r\n    final Object[] oaa = c.toArray();\r\n    assertEquals(32, oaa.length);\r\n    for (int l = 0; l < 32; ++l) {\r\n        assertEquals(oaa[l], l + 1);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\RangeTest.java",
  "methodName" : "testIntegerRangeOne",
  "sourceCode" : "@Test\r\nvoid testIntegerRangeOne() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"(1..1)\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    assertInstanceOf(Collection.class, o);\r\n    final Collection<?> c = (Collection<?>) o;\r\n    assertEquals(1, c.size());\r\n    final Object[] a = c.toArray();\r\n    assertEquals(1, a.length);\r\n    assertEquals(1, ((Number) a[0]).intValue());\r\n    assertFalse((Boolean) JEXL.createScript(\"empty x\", \"x\").execute(null, e));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\RangeTest.java",
  "methodName" : "testIntegerSum",
  "sourceCode" : "@Test\r\nvoid testIntegerSum() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var s = 0; for(var i : (1..5)) { s = s + i; }; s\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(15, ((Number) o).intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\RangeTest.java",
  "methodName" : "testLongContains",
  "sourceCode" : "@Test\r\nvoid testLongContains() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"(x)->{ x =~ (90000000001L..90000000010L) }\");\r\n    final JexlContext jc = new MapContext();\r\n    Object o = e.execute(jc, 90000000005L);\r\n    assertEquals(Boolean.TRUE, o);\r\n    o = e.execute(jc, 0);\r\n    assertEquals(Boolean.FALSE, o);\r\n    o = e.execute(jc, 90000000011L);\r\n    assertEquals(Boolean.FALSE, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\RangeTest.java",
  "methodName" : "testLongRange",
  "sourceCode" : "@Test\r\nvoid testLongRange() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"(6789000001L..6789000032L)\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o0 = e.evaluate(jc);\r\n    final Object o = e.evaluate(jc);\r\n    assertInstanceOf(Collection.class, o);\r\n    final Collection<?> c = (Collection<?>) o;\r\n    assertEquals(32, c.size());\r\n    assertFalse((Boolean) JEXL.createScript(\"empty x\", \"x\").execute(null, e));\r\n    assertNotSame(o0, o);\r\n    assertEquals(o0.hashCode(), o.hashCode());\r\n    assertEquals(o0, o);\r\n    long i = 6789000000L;\r\n    for (final Object v : c) {\r\n        i += 1;\r\n        assertEquals(i, ((Number) v).longValue());\r\n    }\r\n    assertEquals(6789000032L, i);\r\n    Long[] aa = c.<Long>toArray(new Long[32]);\r\n    assertEquals(32, aa.length);\r\n    for (int l = 0; l < 32; ++l) {\r\n        assertEquals((long) aa[l], 6789000001L + l);\r\n    }\r\n    aa = c.<Long>toArray(new Long[2]);\r\n    assertEquals(32, aa.length);\r\n    for (int l = 0; l < 32; ++l) {\r\n        assertEquals((long) aa[l], 6789000001L + l);\r\n    }\r\n    aa = c.<Long>toArray(new Long[34]);\r\n    assertEquals(34, aa.length);\r\n    for (int l = 0; l < 32; ++l) {\r\n        assertEquals((long) aa[l], 6789000001L + l);\r\n    }\r\n    final Object[] oaa = c.toArray();\r\n    assertEquals(32, oaa.length);\r\n    for (int l = 0; l < 32; ++l) {\r\n        assertEquals(oaa[l], 6789000001L + l);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\RangeTest.java",
  "methodName" : "testLongSum",
  "sourceCode" : "@Test\r\nvoid testLongSum() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var s = 0; for(var i : (6789000001L..6789000001L)) { s = s + i; }; s\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertEquals(6789000001L, ((Number) o).longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testCallableCancel",
  "sourceCode" : "@Test\r\nvoid testCallableCancel() throws Exception {\r\n    final Semaphore latch = new Semaphore(0);\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"latch\", latch);\r\n    final JexlScript e = JEXL.createScript(\"latch.release(); while(true);\");\r\n    final Script.Callable c = (Script.Callable) e.callable(ctxt);\r\n    final Callable<Object> kc = () -> {\r\n        latch.acquire();\r\n        return c.cancel();\r\n    };\r\n    final List<Runnable> list;\r\n    final ExecutorService executor = Executors.newFixedThreadPool(2);\r\n    try {\r\n        final Future<?> future = executor.submit(c);\r\n        final Future<?> kfc = executor.submit(kc);\r\n        assertTrue((Boolean) kfc.get());\r\n        final ExecutionException xexec = assertThrows(ExecutionException.class, future::get);\r\n        assertTrue(xexec.getCause() instanceof JexlException.Cancel);\r\n    } finally {\r\n        list = executor.shutdownNow();\r\n    }\r\n    assertTrue(c.isCancelled());\r\n    assertTrue(list == null || list.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testCallableCancellation",
  "sourceCode" : "/**\r\n * Tests JEXL-317.\r\n */\r\n@Test\r\nvoid testCallableCancellation() throws Exception {\r\n    final Semaphore latch = new Semaphore(0);\r\n    final AtomicBoolean cancel = new AtomicBoolean();\r\n    final JexlContext ctxt = new CancellationContext(cancel);\r\n    ctxt.set(\"latch\", latch);\r\n    final JexlScript e = JEXL.createScript(\"latch.release(); while(true);\");\r\n    final Script.Callable c = (Script.Callable) e.callable(ctxt);\r\n    final Callable<Object> kc = () -> {\r\n        latch.acquire();\r\n        return cancel.compareAndSet(false, true);\r\n    };\r\n    final List<Runnable> list;\r\n    final ExecutorService executor = Executors.newFixedThreadPool(2);\r\n    try {\r\n        final Future<?> future = executor.submit(c);\r\n        final Future<?> kfc = executor.submit(kc);\r\n        assertTrue((Boolean) kfc.get());\r\n        final ExecutionException xexec = assertThrows(ExecutionException.class, future::get);\r\n        assertTrue(xexec.getCause() instanceof JexlException.Cancel);\r\n    } finally {\r\n        list = executor.shutdownNow();\r\n    }\r\n    assertTrue(c.isCancelled());\r\n    assertTrue(list == null || list.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testCallableClosure",
  "sourceCode" : "@Test\r\nvoid testCallableClosure() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"function(t) {while(t);}\");\r\n    final Callable<Object> c = e.callable(null, Boolean.TRUE);\r\n    final List<Runnable> list;\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    final Future<?> future;\r\n    try {\r\n        future = executor.submit(c);\r\n        assertThrows(TimeoutException.class, () -> future.get(100, TimeUnit.MILLISECONDS));\r\n        future.cancel(true);\r\n    } finally {\r\n        list = executor.shutdownNow();\r\n    }\r\n    assertTrue(future.isCancelled());\r\n    assertTrue(list.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testCallableTimeout",
  "sourceCode" : "@Test\r\nvoid testCallableTimeout() throws Exception {\r\n    final Semaphore latch = new Semaphore(0);\r\n    final JexlContext ctxt = new MapContext();\r\n    ctxt.set(\"latch\", latch);\r\n    final JexlScript e = JEXL.createScript(\"latch.release(); while(true);\");\r\n    final Callable<Object> c = e.callable(ctxt);\r\n    final List<Runnable> list;\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    final Future<?> future;\r\n    try {\r\n        future = executor.submit(c);\r\n        latch.acquire();\r\n        assertThrows(TimeoutException.class, () -> future.get(100, TimeUnit.MILLISECONDS));\r\n        future.cancel(true);\r\n    } finally {\r\n        list = executor.shutdownNow();\r\n    }\r\n    assertTrue(future.isCancelled());\r\n    assertTrue(list.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testCancelForever",
  "sourceCode" : "@Test\r\nvoid testCancelForever() throws Exception {\r\n    final Semaphore latch = new Semaphore(0);\r\n    final JexlContext ctxt = new TestContext();\r\n    ctxt.set(\"latch\", latch);\r\n    final JexlScript e = JEXL.createScript(\"latch.release(); runForever()\");\r\n    final Callable<Object> c = e.callable(ctxt);\r\n    final List<Runnable> list;\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    final Future<?> future;\r\n    try {\r\n        future = executor.submit(c);\r\n        assertThrows(TimeoutException.class, () -> future.get(100, TimeUnit.MILLISECONDS));\r\n        future.cancel(true);\r\n    } finally {\r\n        list = executor.shutdownNow();\r\n    }\r\n    assertTrue(future.isCancelled());\r\n    assertTrue(list.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testCancelLoopWait",
  "sourceCode" : "@Test\r\nvoid testCancelLoopWait() throws Exception {\r\n    final List<Runnable> list;\r\n    final JexlScript e = JEXL.createScript(\"while (true) { wait(10) }\");\r\n    final Callable<Object> c = e.callable(new TestContext());\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    final Future<?> future;\r\n    try {\r\n        future = executor.submit(c);\r\n        assertThrows(TimeoutException.class, () -> future.get(100, TimeUnit.MILLISECONDS));\r\n        future.cancel(true);\r\n    } finally {\r\n        list = executor.shutdownNow();\r\n    }\r\n    assertTrue(future.isCancelled());\r\n    assertTrue(list.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testCancelWait",
  "sourceCode" : "@Test\r\nvoid testCancelWait() throws Exception {\r\n    final List<Runnable> list;\r\n    final JexlScript e = JEXL.createScript(\"wait(10)\");\r\n    final Callable<Object> c = e.callable(new TestContext());\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    try {\r\n        final Future<?> future = executor.submit(c);\r\n        assertThrows(TimeoutException.class, () -> future.get(100, TimeUnit.MILLISECONDS));\r\n        future.cancel(true);\r\n        assertTrue(future.isCancelled());\r\n    } finally {\r\n        list = executor.shutdownNow();\r\n    }\r\n    assertTrue(list.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testCancelWaitInterrupt",
  "sourceCode" : "@Test\r\nvoid testCancelWaitInterrupt() throws Exception {\r\n    final List<Runnable> list;\r\n    final JexlScript e = JEXL.createScript(\"waitInterrupt(42)\");\r\n    final Callable<Object> c = e.callable(new TestContext());\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    final Future<?> future;\r\n    try {\r\n        future = executor.submit(c);\r\n        assertThrows(TimeoutException.class, () -> future.get(100, TimeUnit.MILLISECONDS));\r\n        future.cancel(true);\r\n    } finally {\r\n        list = executor.shutdownNow();\r\n    }\r\n    assertTrue(future.isCancelled());\r\n    assertTrue(list.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testFuture",
  "sourceCode" : "@Test\r\nvoid testFuture() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"while(true);\");\r\n    final FutureTask<Object> future = new FutureTask<>(e.callable(null));\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    try {\r\n        executor.submit(future);\r\n        assertThrows(TimeoutException.class, () -> future.get(100, TimeUnit.MILLISECONDS));\r\n        future.cancel(true);\r\n    } finally {\r\n        executor.shutdown();\r\n    }\r\n    assertTrue(future.isCancelled());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testHangs",
  "sourceCode" : "@Test\r\nvoid testHangs() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"hangs()\");\r\n    final Callable<Object> c = e.callable(new TestContext());\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    try {\r\n        final Future<?> future = executor.submit(c);\r\n        final ExecutionException xexec = assertThrows(ExecutionException.class, () -> future.get(1, TimeUnit.SECONDS));\r\n        assertTrue(xexec.getCause() instanceof JexlException.Method);\r\n    } finally {\r\n        executor.shutdown();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testInterruptCancellable",
  "sourceCode" : "@Test\r\nvoid testInterruptCancellable() throws Exception {\r\n    runInterrupt(new JexlBuilder().silent(true).strict(true).cancellable(true).create());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testInterruptSilentLenient",
  "sourceCode" : "@Test\r\nvoid testInterruptSilentLenient() throws Exception {\r\n    runInterrupt(new JexlBuilder().silent(true).strict(false).create());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testInterruptSilentStrict",
  "sourceCode" : "@Test\r\nvoid testInterruptSilentStrict() throws Exception {\r\n    runInterrupt(new JexlBuilder().silent(true).strict(true).create());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testInterruptVerboseLenient",
  "sourceCode" : "@Test\r\nvoid testInterruptVerboseLenient() throws Exception {\r\n    runInterrupt(new JexlBuilder().silent(false).strict(false).create());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testInterruptVerboseStrict",
  "sourceCode" : "@Test\r\nvoid testInterruptVerboseStrict() throws Exception {\r\n    runInterrupt(new JexlBuilder().silent(false).strict(true).create());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testNoWait",
  "sourceCode" : "@Test\r\nvoid testNoWait() throws Exception {\r\n    List<Runnable> lr = null;\r\n    final JexlScript e = JEXL.createScript(\"wait(0)\");\r\n    final Callable<Object> c = e.callable(new TestContext());\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    try {\r\n        final Future<?> future = executor.submit(c);\r\n        final Object t = future.get(2, TimeUnit.SECONDS);\r\n        assertTrue(future.isDone());\r\n        assertEquals(0, t);\r\n    } finally {\r\n        lr = executor.shutdownNow();\r\n    }\r\n    assertTrue(lr.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testTimeout",
  "sourceCode" : "@Test\r\nvoid testTimeout() throws Exception {\r\n    JexlScript script = JEXL.createScript(\"(flag)->{ @timeout(100) { while(flag); return 42 }; 'cancelled' }\");\r\n    final JexlContext ctxt = new AnnotationContext();\r\n    Object result = script.execute(ctxt, true);\r\n    assertEquals(\"cancelled\", result);\r\n    result = script.execute(ctxt, false);\r\n    assertEquals(42, result);\r\n    script = JEXL.createScript(\"(flag)->{ @timeout(100, 'cancelled') { while(flag); 42; } }\");\r\n    result = script.execute(ctxt, true);\r\n    assertEquals(\"cancelled\", result);\r\n    result = script.execute(ctxt, false);\r\n    assertEquals(42, result);\r\n    script = JEXL.createScript(\"@timeout(100) {sleep(1000); 42; } -42;\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(-42, result);\r\n    script = JEXL.createScript(\"@timeout(100) {sleep(1000); return 42; } return -42;\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(-42, result);\r\n    script = JEXL.createScript(\"@timeout(1000) {sleep(100); return 42; } return -42;\");\r\n    result = script.execute(ctxt);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptCallableTest.java",
  "methodName" : "testWait",
  "sourceCode" : "@Test\r\nvoid testWait() throws Exception {\r\n    List<Runnable> lr = null;\r\n    final JexlScript e = JEXL.createScript(\"wait(1)\");\r\n    final Callable<Object> c = e.callable(new TestContext());\r\n    final ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    try {\r\n        final Future<?> future = executor.submit(c);\r\n        final Object t = future.get(2, TimeUnit.SECONDS);\r\n        assertEquals(1, t);\r\n    } finally {\r\n        lr = executor.shutdownNow();\r\n    }\r\n    assertTrue(lr.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineOptionalTest.java",
  "methodName" : "testCompilable",
  "sourceCode" : "@Test\r\nvoid testCompilable() throws Exception {\r\n    assertInstanceOf(Compilable.class, engine, \"Engine should implement Compilable\");\r\n    final Compilable cengine = (Compilable) engine;\r\n    final CompiledScript script = cengine.compile(\"40 + 2\");\r\n    assertEquals(42, script.eval());\r\n    assertEquals(42, script.eval());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineOptionalTest.java",
  "methodName" : "testError",
  "sourceCode" : "@Test\r\nvoid testError() throws Exception {\r\n    final String error = \"JEXL.err.print('ERROR')\";\r\n    // redirect error to capture evaluation result\r\n    final StringWriter outContent = new StringWriter();\r\n    engine.getContext().setErrorWriter(outContent);\r\n    engine.eval(error);\r\n    assertEquals(\"ERROR\", outContent.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineOptionalTest.java",
  "methodName" : "testOutput",
  "sourceCode" : "@Test\r\nvoid testOutput() throws Exception {\r\n    final String output = factory.getOutputStatement(\"foo\\u00a9bar\");\r\n    assertEquals(\"JEXL.out.print('foo\\\\u00a9bar')\", output);\r\n    // redirect output to capture evaluation result\r\n    final StringWriter outContent = new StringWriter();\r\n    engine.getContext().setWriter(outContent);\r\n    engine.eval(output);\r\n    assertEquals(\"foo\\u00a9bar\", outContent.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testCompile",
  "sourceCode" : "@Test\r\nvoid testCompile() throws Exception {\r\n    final ScriptEngineManager manager = new ScriptEngineManager();\r\n    final JexlScriptEngine engine = (JexlScriptEngine) manager.getEngineByName(\"JEXL\");\r\n    final ScriptContext ctxt = engine.getContext();\r\n    final String str = null;\r\n    final Reader reader = null;\r\n    assertThrows(NullPointerException.class, () -> engine.compile(str));\r\n    assertThrows(NullPointerException.class, () -> engine.compile(reader));\r\n    final CompiledScript script0 = engine.compile(new StringReader(\"3 + 4\"));\r\n    assertEquals(engine, script0.getEngine());\r\n    Object result = script0.eval();\r\n    assertEquals(7, result);\r\n    result = script0.eval();\r\n    assertEquals(7, result);\r\n    result = engine.eval(new StringReader(\"38 + 4\"));\r\n    assertEquals(42, result);\r\n    result = engine.eval(\"38 + 4\");\r\n    assertEquals(42, result);\r\n    // next test\r\n    final CompiledScript script1 = engine.compile(\"3 + 4\");\r\n    assertEquals(engine, script1.getEngine());\r\n    Object result1 = script1.eval();\r\n    assertEquals(7, result1);\r\n    result1 = script1.eval();\r\n    assertEquals(7, result1);\r\n    // next test\r\n    ctxt.setAttribute(\"x\", 20, ScriptContext.ENGINE_SCOPE);\r\n    ctxt.setAttribute(\"y\", 22, ScriptContext.ENGINE_SCOPE);\r\n    final CompiledScript script2 = engine.compile(\"x + y\");\r\n    Object result2 = script2.eval();\r\n    assertEquals(42, result2);\r\n    ctxt.setAttribute(\"x\", -20, ScriptContext.ENGINE_SCOPE);\r\n    ctxt.setAttribute(\"y\", -22, ScriptContext.ENGINE_SCOPE);\r\n    result2 = script2.eval();\r\n    assertEquals(-42, result2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testDirectNew",
  "sourceCode" : "@Test\r\nvoid testDirectNew() throws Exception {\r\n    final ScriptEngine engine = new JexlScriptEngine();\r\n    final Integer initialValue = 123;\r\n    assertEquals(initialValue, engine.eval(\"123\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testDottedNames",
  "sourceCode" : "@Test\r\nvoid testDottedNames() throws Exception {\r\n    final ScriptEngineManager manager = new ScriptEngineManager();\r\n    assertNotNull(manager, \"Manager should not be null\");\r\n    final ScriptEngine engine = manager.getEngineByName(\"JEXL\");\r\n    assertNotNull(engine, \"Engine should not be null (JEXL)\");\r\n    engine.eval(\"this.is.a.test=null\");\r\n    assertNull(engine.get(\"this.is.a.test\"));\r\n    assertEquals(Boolean.TRUE, engine.eval(\"empty(this.is.a.test)\"));\r\n    final Object mymap = engine.eval(\"testmap={ 'key1' : 'value1', 'key2' : 'value2' }\");\r\n    assertInstanceOf(Map.class, mymap);\r\n    assertEquals(2, ((Map<?, ?>) mymap).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testErrors",
  "sourceCode" : "@Test\r\nvoid testErrors() throws Exception {\r\n    final ScriptEngineManager manager = new ScriptEngineManager();\r\n    final JexlScriptEngine engine = (JexlScriptEngine) manager.getEngineByName(\"JEXL\");\r\n    engine.put(\"errors\", new Errors());\r\n    assertInstanceOf(NullPointerException.class, assertThrows(ScriptException.class, () -> engine.eval(\"errors.npe()\")).getCause());\r\n    assertInstanceOf(IllegalArgumentException.class, assertThrows(ScriptException.class, () -> engine.eval(\"errors.illegal()\")).getCause());\r\n    final CompiledScript script0 = engine.compile(\"errors.npe()\");\r\n    assertInstanceOf(NullPointerException.class, assertThrows(ScriptException.class, script0::eval).getCause());\r\n    final CompiledScript script1 = engine.compile(\"errors.illegal()\");\r\n    assertInstanceOf(IllegalArgumentException.class, assertThrows(ScriptException.class, script1::eval).getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testNulls",
  "sourceCode" : "@Test\r\nvoid testNulls() {\r\n    final ScriptEngineManager manager = new ScriptEngineManager();\r\n    assertNotNull(manager, \"Manager should not be null\");\r\n    final ScriptEngine engine = manager.getEngineByName(\"jexl3\");\r\n    assertNotNull(engine, \"Engine should not be null (name)\");\r\n    assertNotNull(engine.getFactory());\r\n    assertThrows(NullPointerException.class, () -> engine.eval((String) null));\r\n    assertThrows(NullPointerException.class, () -> engine.eval((Reader) null));\r\n    final ScriptContext ctxt = null;\r\n    assertThrows(NullPointerException.class, () -> engine.eval((String) null, ctxt));\r\n    assertThrows(NullPointerException.class, () -> engine.eval((Reader) null, ctxt));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testScopes",
  "sourceCode" : "@Test\r\nvoid testScopes() throws Exception {\r\n    final ScriptEngineManager manager = new ScriptEngineManager();\r\n    assertNotNull(manager, \"Manager should not be null\");\r\n    final ScriptEngine engine = manager.getEngineByName(\"jexl3\");\r\n    assertNotNull(engine, \"Engine should not be null (name)\");\r\n    manager.put(\"global\", 1);\r\n    engine.put(\"local\", 10);\r\n    manager.put(\"both\", 7);\r\n    engine.put(\"both\", 7);\r\n    engine.eval(\"local=local+1\");\r\n    engine.eval(\"global=global+1\");\r\n    // should update engine value only\r\n    engine.eval(\"both=both+1\");\r\n    engine.eval(\"newvar=42;\");\r\n    assertEquals(2, manager.get(\"global\"));\r\n    assertEquals(11, engine.get(\"local\"));\r\n    assertEquals(7, manager.get(\"both\"));\r\n    assertEquals(8, engine.get(\"both\"));\r\n    assertEquals(42, engine.get(\"newvar\"));\r\n    assertNull(manager.get(\"newvar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testScriptEngineFactory",
  "sourceCode" : "@Test\r\nvoid testScriptEngineFactory() {\r\n    final JexlScriptEngineFactory factory = new JexlScriptEngineFactory();\r\n    assertEquals(\"JEXL Engine\", factory.getParameter(ScriptEngine.ENGINE));\r\n    assertEquals(\"3.6\", factory.getParameter(ScriptEngine.ENGINE_VERSION));\r\n    assertEquals(\"JEXL\", factory.getParameter(ScriptEngine.LANGUAGE));\r\n    assertEquals(\"3.6\", factory.getParameter(ScriptEngine.LANGUAGE_VERSION));\r\n    assertNull(factory.getParameter(\"THREADING\"));\r\n    assertEquals(NAMES, factory.getParameter(ScriptEngine.NAME));\r\n    assertEquals(EXTENSIONS, factory.getExtensions());\r\n    assertEquals(MIMES, factory.getMimeTypes());\r\n    assertEquals(\"42;\", factory.getProgram(\"42\"));\r\n    assertEquals(\"str.substring(3,4)\", factory.getMethodCallSyntax(\"str\", \"substring\", \"3\", \"4\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testScripting",
  "sourceCode" : "@Test\r\nvoid testScripting() throws Exception {\r\n    final ScriptEngineManager manager = new ScriptEngineManager();\r\n    assertNotNull(manager, \"Manager should not be null\");\r\n    final ScriptEngine engine = manager.getEngineByName(\"jexl3\");\r\n    final Integer initialValue = 123;\r\n    assertEquals(initialValue, engine.eval(\"123\"));\r\n    // multiple statements\r\n    assertEquals(initialValue, engine.eval(\"0;123\"));\r\n    final ScriptException xscript = assertThrows(ScriptException.class, () -> engine.eval(\"sys=context.class.forName(\\\"java.lang.System\\\");now=sys.currentTimeMillis();\"));\r\n    final JexlException.Method xjexl = (JexlException.Method) xscript.getCause();\r\n    assertEquals(\"forName\", xjexl.getMethod());\r\n    engine.put(\"value\", initialValue);\r\n    assertEquals(initialValue, engine.get(\"value\"));\r\n    final Integer newValue = 124;\r\n    assertEquals(newValue, engine.eval(\"old=value;value=value+1\"));\r\n    assertEquals(initialValue, engine.get(\"old\"));\r\n    assertEquals(newValue, engine.get(\"value\"));\r\n    assertEquals(engine.getContext(), engine.get(JexlScriptEngine.CONTEXT_KEY));\r\n    // Check behavior of JEXL object\r\n    assertEquals(engine.getContext().getReader(), engine.eval(\"JEXL.in\"));\r\n    assertEquals(engine.getContext().getWriter(), engine.eval(\"JEXL.out\"));\r\n    assertEquals(engine.getContext().getErrorWriter(), engine.eval(\"JEXL.err\"));\r\n    assertEquals(System.class, engine.eval(\"JEXL.System\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testScriptingGetBy",
  "sourceCode" : "@Test\r\nvoid testScriptingGetBy() {\r\n    final ScriptEngineManager manager = new ScriptEngineManager();\r\n    assertNotNull(manager, \"Manager should not be null\");\r\n    for (final String name : NAMES) {\r\n        final ScriptEngine engine = manager.getEngineByName(name);\r\n        assertNotNull(engine, \"Engine should not be null (name)\");\r\n    }\r\n    for (final String extension : EXTENSIONS) {\r\n        final ScriptEngine engine = manager.getEngineByExtension(extension);\r\n        assertNotNull(engine, \"Engine should not be null (extension)\");\r\n    }\r\n    for (final String mime : MIMES) {\r\n        final ScriptEngine engine = manager.getEngineByMimeType(mime);\r\n        assertNotNull(engine, \"Engine should not be null (mime)\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testScriptingInstance0",
  "sourceCode" : "@Test\r\nvoid testScriptingInstance0() throws Exception {\r\n    JexlScriptEngine.setPermissions(JexlPermissions.UNRESTRICTED);\r\n    final ScriptEngineManager manager = new ScriptEngineManager();\r\n    final ScriptEngine engine = manager.getEngineByName(\"jexl3\");\r\n    final Long time2 = (Long) engine.eval(\"sys=context.class.forName(\\\"java.lang.System\\\");\" + \"now=sys.currentTimeMillis();\");\r\n    assertTrue(time2 <= System.currentTimeMillis());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testScriptingPermissions1",
  "sourceCode" : "@Test\r\nvoid testScriptingPermissions1() throws Exception {\r\n    JexlBuilder.setDefaultPermissions(JexlPermissions.UNRESTRICTED);\r\n    JexlScriptEngine.setPermissions(null);\r\n    final ScriptEngineManager manager = new ScriptEngineManager();\r\n    final ScriptEngine engine = manager.getEngineByName(\"jexl3\");\r\n    final Long time2 = (Long) engine.eval(\"sys=context.class.forName(\\\"java.lang.System\\\");\" + \"now=sys.currentTimeMillis();\");\r\n    assertTrue(time2 <= System.currentTimeMillis());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testMain0",
  "sourceCode" : "@Test\r\nvoid testMain0() throws Exception {\r\n    final StringWriter strw = new StringWriter();\r\n    final StringReader strr = new StringReader(\"a=20\\nb=22\\na+b\\n//q!\\n\");\r\n    Main.run(new BufferedReader(strr), new PrintWriter(strw), null);\r\n    final String ctl = \"> >> 20\" + LF + \"> >> 22\" + LF + \"> >> 42\" + LF + \"> \";\r\n    Assertions.assertEquals(ctl, strw.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testMain1",
  "sourceCode" : "@Test\r\nvoid testMain1() throws Exception {\r\n    final StringWriter strw = new StringWriter();\r\n    final StringReader strr = new StringReader(\"args[0]+args[1]\");\r\n    Main.run(new BufferedReader(strr), new PrintWriter(strw), new Object[] { 20, 22 });\r\n    final String ctl = \">>: 42\" + LF;\r\n    Assertions.assertEquals(ctl, strw.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\scripting\\JexlScriptEngineTest.java",
  "methodName" : "testMain2",
  "sourceCode" : "@Test\r\nvoid testMain2() throws Exception {\r\n    final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\r\n    final PrintStream originalOut = System.out;\r\n    Path file = null;\r\n    try {\r\n        System.setOut(new PrintStream(outContent));\r\n        file = Files.createTempFile(\"test-jsr233\", \".jexl\");\r\n        final BufferedWriter writer = new BufferedWriter(new FileWriter(file.toFile()));\r\n        writer.write(\"a=20;\\nb=22;\\na+b\\n\");\r\n        writer.close();\r\n        final String ctl = \">>: 42\" + LF;\r\n        Main.main(new String[] { file.toString() });\r\n        Assertions.assertEquals(ctl, outContent.toString());\r\n    } finally {\r\n        System.setOut(originalOut);\r\n        if (file != null) {\r\n            Files.delete(file);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptTest.java",
  "methodName" : "testArgScriptFromFile",
  "sourceCode" : "@Test\r\nvoid testArgScriptFromFile() {\r\n    final File testScript = new File(TEST_ADD);\r\n    final JexlScript s = JEXL.createScript(testScript, \"x\", \"y\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"out\", System.out);\r\n    final Object result = s.execute(jc, 13, 29);\r\n    assertNotNull(result, \"No result\");\r\n    assertEquals(42, result, \"Wrong result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptTest.java",
  "methodName" : "testArgScriptFromURL",
  "sourceCode" : "@Test\r\nvoid testArgScriptFromURL() throws Exception {\r\n    final URL testUrl = new File(TEST_ADD).toURI().toURL();\r\n    final JexlScript s = JEXL.createScript(testUrl, \"x\", \"y\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"out\", System.out);\r\n    final Object result = s.execute(jc, 13, 29);\r\n    assertNotNull(result, \"No result\");\r\n    assertEquals(42, result, \"Wrong result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptTest.java",
  "methodName" : "testScriptFromFile",
  "sourceCode" : "@Test\r\nvoid testScriptFromFile() {\r\n    final File testScript = new File(TEST1);\r\n    final JexlScript s = JEXL.createScript(testScript);\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"out\", System.out);\r\n    final Object result = s.execute(jc);\r\n    assertNotNull(result, \"No result\");\r\n    assertEquals(7, result, \"Wrong result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptTest.java",
  "methodName" : "testScriptFromURL",
  "sourceCode" : "@Test\r\nvoid testScriptFromURL() throws Exception {\r\n    final URL testUrl = new File(TEST1).toURI().toURL();\r\n    final JexlScript s = JEXL.createScript(testUrl);\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"out\", System.out);\r\n    final Object result = s.execute(jc);\r\n    assertNotNull(result, \"No result\");\r\n    assertEquals(7, result, \"Wrong result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptTest.java",
  "methodName" : "testScriptJsonFromFileJava",
  "sourceCode" : "@Test\r\nvoid testScriptJsonFromFileJava() throws IOException {\r\n    HttpServer server = null;\r\n    try {\r\n        final String response = \"{  \\\"id\\\": 101}\";\r\n        server = createJsonServer(h -> response);\r\n        final String url = \"http:/\" + server.getAddress().toString() + \"/test\";\r\n        final String testScript = \"httpr.execute('\" + url + \"', null)\";\r\n        final JexlScript s = JEXL.createScript(testScript);\r\n        final JexlContext jc = new MapContext();\r\n        jc.set(\"httpr\", new HttpPostRequest());\r\n        final Object result = s.execute(jc);\r\n        assertNotNull(result);\r\n        assertEquals(response, result);\r\n    } finally {\r\n        if (server != null) {\r\n            server.stop(0);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptTest.java",
  "methodName" : "testScriptJsonFromFileJexl",
  "sourceCode" : "@Test\r\nvoid testScriptJsonFromFileJexl() throws IOException {\r\n    HttpServer server = null;\r\n    try {\r\n        final String response = \"{  \\\"id\\\": 101}\";\r\n        server = createJsonServer(h -> response);\r\n        final File httprFile = new File(TEST_JSON);\r\n        final JexlScript httprScript = JEXL.createScript(httprFile);\r\n        final JexlContext jc = new MapContext();\r\n        final Object httpr = httprScript.execute(jc);\r\n        final JexlScript s = JEXL.createScript(\"(httpr,url)->httpr.execute(url, null)\");\r\n        // jc.set(\"httpr\", new HttpPostRequest());\r\n        final String url = \"http:/\" + server.getAddress().toString() + \"/test\";\r\n        final Object result = s.execute(jc, httpr, url);\r\n        assertNotNull(result);\r\n        assertEquals(response, result);\r\n    } finally {\r\n        if (server != null) {\r\n            server.stop(0);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptTest.java",
  "methodName" : "testScriptUpdatesContext",
  "sourceCode" : "@Test\r\nvoid testScriptUpdatesContext() {\r\n    final String jexlCode = \"resultat.setCode('OK')\";\r\n    final JexlExpression e = JEXL.createExpression(jexlCode);\r\n    final JexlScript s = JEXL.createScript(jexlCode);\r\n    final Tester resultatJexl = new Tester();\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"resultat\", resultatJexl);\r\n    resultatJexl.setCode(\"\");\r\n    e.evaluate(jc);\r\n    assertEquals(\"OK\", resultatJexl.getCode());\r\n    resultatJexl.setCode(\"\");\r\n    s.execute(jc);\r\n    assertEquals(\"OK\", resultatJexl.getCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptTest.java",
  "methodName" : "testSimpleScript",
  "sourceCode" : "/**\r\n * Test creating a script from a string.\r\n */\r\n@Test\r\nvoid testSimpleScript() {\r\n    final String code = \"while (x < 10) x = x + 1;\";\r\n    final JexlScript s = JEXL.createScript(code);\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", 1);\r\n    final Object o = s.execute(jc);\r\n    assertEquals(10, o, \"Result is wrong\");\r\n    assertEquals(code, s.getSourceText(), \"getText is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ScriptTest.java",
  "methodName" : "testSpacesScript",
  "sourceCode" : "/**\r\n * Test creating a script from spaces.\r\n */\r\n@Test\r\nvoid testSpacesScript() {\r\n    final String code = \" \";\r\n    final JexlScript s = JEXL.createScript(code);\r\n    assertNotNull(s);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testLiteralWithOneEntry",
  "sourceCode" : "@Test\r\nvoid testLiteralWithOneEntry() throws Exception {\r\n    final List<String> sources = Arrays.asList(\"{ 'foo' }\", \"{ 'foo', }\");\r\n    for (final String src : sources) {\r\n        final JexlExpression e = JEXL.createExpression(src);\r\n        final JexlContext jc = new MapContext();\r\n        final Object o = e.evaluate(jc);\r\n        final Set<?> check = createSet(\"foo\");\r\n        assertEquals(check, o);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testNotEmptySimpleSetLiteral",
  "sourceCode" : "@Test\r\nvoid testNotEmptySimpleSetLiteral() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"empty({ 'foo' , 'bar' })\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    assertFalse((Boolean) o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testSetLiteralWithNulls",
  "sourceCode" : "@Test\r\nvoid testSetLiteralWithNulls() throws Exception {\r\n    final String[] exprs = { \"{  }\", \"{ 10 }\", \"{ 10 , null }\", \"{ 10 , null , 20}\", \"{ '10' , null }\", \"{ null, '10' , 20 }\" };\r\n    final Set<?>[] checks = { Collections.emptySet(), createSet(Integer.valueOf(10)), createSet(Integer.valueOf(10), null), createSet(Integer.valueOf(10), null, Integer.valueOf(20)), createSet(\"10\", null), createSet(null, \"10\", Integer.valueOf(20)) };\r\n    final JexlContext jc = new MapContext();\r\n    for (int t = 0; t < exprs.length; ++t) {\r\n        final JexlScript e = JEXL.createScript(exprs[t]);\r\n        final Object o = e.execute(jc);\r\n        assertEquals(checks[t], o, exprs[t]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testSetLiteralWithNumbers",
  "sourceCode" : "@Test\r\nvoid testSetLiteralWithNumbers() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"{ 5.0 , 10 }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    final Set<?> check = createSet(Double.valueOf(5.0), Integer.valueOf(10));\r\n    assertEquals(check, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testSetLiteralWithOneEntryBlock",
  "sourceCode" : "@Test\r\nvoid testSetLiteralWithOneEntryBlock() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"{ { 'foo' }; }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    final Set<?> check = createSet(\"foo\");\r\n    assertEquals(check, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testSetLiteralWithOneEntryScript",
  "sourceCode" : "@Test\r\nvoid testSetLiteralWithOneEntryScript() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"{ 'foo' }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    final Set<?> check = createSet(\"foo\");\r\n    assertEquals(check, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testSetLiteralWithOneNestedSet",
  "sourceCode" : "@Test\r\nvoid testSetLiteralWithOneNestedSet() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"{ { 'foo' } }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    final Set<?> check = createSet(createSet(\"foo\"));\r\n    assertEquals(check, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testSetLiteralWithStrings",
  "sourceCode" : "@Test\r\nvoid testSetLiteralWithStrings() throws Exception {\r\n    final List<String> sources = Arrays.asList(\"{ 'foo', 'bar' }\", \"{ 'foo', 'bar', ... }\", \"{ 'foo', 'bar', }\");\r\n    for (final String src : sources) {\r\n        final JexlExpression e = JEXL.createExpression(src);\r\n        final JexlContext jc = new MapContext();\r\n        final Object o = e.evaluate(jc);\r\n        final Set<?> check = createSet(\"foo\", \"bar\");\r\n        assertEquals(check, o);\r\n    }\r\n    assertThrows(JexlException.Parsing.class, () -> JEXL.createExpression(\"{ , }\"), \"syntax\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testSetLiteralWithStringsScript",
  "sourceCode" : "@Test\r\nvoid testSetLiteralWithStringsScript() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"{ 'foo' , 'bar' }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    final Set<?> check = createSet(\"foo\", \"bar\");\r\n    assertEquals(check, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SetLiteralTest.java",
  "methodName" : "testSizeOfSimpleSetLiteral",
  "sourceCode" : "@Test\r\nvoid testSizeOfSimpleSetLiteral() throws Exception {\r\n    final JexlExpression e = JEXL.createExpression(\"size({ 'foo' , 'bar'})\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.evaluate(jc);\r\n    assertEquals(Integer.valueOf(2), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ShiftOperatorsTest.java",
  "methodName" : "testLeftShiftIntValue",
  "sourceCode" : "@Test\r\nvoid testLeftShiftIntValue() throws Exception {\r\n    final String expr = \"(x, y)-> x << y\";\r\n    asserter.assertExpression(expr, 1L << 2, 1L, 2);\r\n    asserter.assertExpression(expr, 1L << -2, 1L, -2);\r\n    asserter.assertExpression(expr, -1L << 2, -1L, 2);\r\n    asserter.assertExpression(expr, -1L << -2, -1L, -2);\r\n    a360.assertExpression(expr, 1L << 2, 1L, 2);\r\n    a360.assertExpression(expr, 1L << -2, 1L, -2);\r\n    a360.assertExpression(expr, -1L << 2, -1L, 2);\r\n    a360.assertExpression(expr, -1L << -2, -1L, -2);\r\n    a360.assertExpression(expr, 1 << 2, 1, 2);\r\n    a360.assertExpression(expr, 1 << -2, 1, -2);\r\n    a360.assertExpression(expr, -1 << 2, -1, 2);\r\n    a360.assertExpression(expr, -1 << -2, -1, -2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ShiftOperatorsTest.java",
  "methodName" : "testLeftShiftLongValue",
  "sourceCode" : "@Test\r\nvoid testLeftShiftLongValue() throws Exception {\r\n    a360.assertExpression(\"2147483648 << 2\", 2147483648L << 2);\r\n    a360.assertExpression(\"2147483648 << -2\", 2147483648L << -2);\r\n    a360.assertExpression(\"-2147483649 << 2\", -2147483649L << 2);\r\n    a360.assertExpression(\"-2147483649 << -2\", -2147483649L << -2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ShiftOperatorsTest.java",
  "methodName" : "testOverloadedShift",
  "sourceCode" : "@Test\r\nvoid testOverloadedShift() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new ShiftArithmetic(true)).create();\r\n    StringBuilder x;\r\n    JexlScript e;\r\n    Object o;\r\n    x = new StringBuilder(\"1\");\r\n    e = jexl.createScript(\"x << 'Left'\", \"x\");\r\n    o = e.execute(null, x);\r\n    assertEquals(\"1Left\", o.toString(), e::getSourceText);\r\n    e = jexl.createScript(\"'Right' >> x\", \"x\");\r\n    x = new StringBuilder(\"1\");\r\n    o = e.execute(null, x);\r\n    assertEquals(\"1Right\", x.toString(), e::getSourceText);\r\n    e = jexl.createScript(\"'Right' >>> x\", \"x\");\r\n    x = new StringBuilder(\"1\");\r\n    o = e.execute(null, x);\r\n    assertEquals(\"1right\", x.toString(), e::getSourceText);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ShiftOperatorsTest.java",
  "methodName" : "testPrecedence",
  "sourceCode" : "@Test\r\nvoid testPrecedence() throws Exception {\r\n    a360.assertExpression(\"40 + 2 << 1 + 1\", 40 + 2 << 1 + 1);\r\n    a360.assertExpression(\"40 + (2 << 1) + 1\", 40 + (2 << 1) + 1);\r\n    a360.assertExpression(\"(40 + 2) << (1 + 1)\", 40 + 2 << 1 + 1);\r\n    a360.assertExpression(\"40 + 2L << 1 + 1\", 40 + 2L << 1 + 1);\r\n    a360.assertExpression(\"40 + (2L << 1) + 1\", 40 + (2L << 1) + 1);\r\n    a360.assertExpression(\"(40 + 2L) << (1 + 1)\", 40 + 2L << 1 + 1);\r\n    a360.assertExpression(\"40L + 2 << 1 + 1\", 40L + 2L << 1 + 1);\r\n    a360.assertExpression(\"40L + (2 << 1) + 1\", 40L + (2L << 1) + 1);\r\n    a360.assertExpression(\"(40L + 2) << (1 + 1)\", 40L + 2L << 1 + 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ShiftOperatorsTest.java",
  "methodName" : "testRightShiftBigValue",
  "sourceCode" : "@Test\r\nvoid testRightShiftBigValue() throws Exception {\r\n    a360.assertExpression(\"9223372036854775808 >> 2\", new BigInteger(\"9223372036854775808\").shiftRight(2));\r\n    a360.assertExpression(\"9223372036854775808 >> -2\", new BigInteger(\"9223372036854775808\").shiftRight(-2));\r\n    a360.assertExpression(\"-9223372036854775809 >> 2\", new BigInteger(\"-9223372036854775809\").shiftRight(2));\r\n    a360.assertExpression(\"-9223372036854775809 >> -2\", new BigInteger(\"-9223372036854775809\").shiftRight(-2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ShiftOperatorsTest.java",
  "methodName" : "testRightShiftIntValue",
  "sourceCode" : "@Test\r\nvoid testRightShiftIntValue() throws Exception {\r\n    final String expr = \"(x, y)-> x >> y\";\r\n    asserter.assertExpression(expr, 42L >> 2, 42L, 2);\r\n    asserter.assertExpression(expr, 42L >> -2, 42L, -2);\r\n    asserter.assertExpression(expr, -42L >> 2, -42L, 2);\r\n    asserter.assertExpression(expr, -42L >> -2, -42L, -2);\r\n    a360.assertExpression(expr, 42L >> 2, 42L, 2);\r\n    a360.assertExpression(expr, 42L >> -2, 42L, -2);\r\n    a360.assertExpression(expr, -42L >> 2, -42L, 2);\r\n    a360.assertExpression(expr, -42L >> -2, -42L, -2);\r\n    a360.assertExpression(expr, 42 >> 2, 42, 2);\r\n    a360.assertExpression(expr, 42 >> -2, 42, -2);\r\n    a360.assertExpression(expr, -42 >> 2, -42, 2);\r\n    a360.assertExpression(expr, -42 >> -2, -42, -2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ShiftOperatorsTest.java",
  "methodName" : "testRightShiftLongValue",
  "sourceCode" : "@Test\r\nvoid testRightShiftLongValue() throws Exception {\r\n    a360.assertExpression(\"8589934592 >> 2\", 8589934592L >> 2);\r\n    a360.assertExpression(\"8589934592 >> -2\", 8589934592L >> -2);\r\n    a360.assertExpression(\"-8589934592 >> 2\", -8589934592L >> 2);\r\n    a360.assertExpression(\"-8589934592 >> -2\", -8589934592L >> -2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ShiftOperatorsTest.java",
  "methodName" : "testRightShiftUnsignedBigValue",
  "sourceCode" : "@Test\r\nvoid testRightShiftUnsignedBigValue() throws Exception {\r\n    a360.assertExpression(\"9223372036854775808 >>> 2\", shiftRightUnsigned(\"9223372036854775808\", 2));\r\n    a360.assertExpression(\"9223372036854775808 >>> -2\", shiftRightUnsigned(\"9223372036854775808\", -2));\r\n    a360.assertExpression(\"-9223372036854775809 >>> 2\", shiftRightUnsigned(\"-9223372036854775809\", 2));\r\n    a360.assertExpression(\"-9223372036854775809 >>> -2\", shiftRightUnsigned(\"-9223372036854775809\", -2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\ShiftOperatorsTest.java",
  "methodName" : "testRightShiftUnsignedIntValue",
  "sourceCode" : "@Test\r\nvoid testRightShiftUnsignedIntValue() throws Exception {\r\n    final String expr = \"(x, y)-> x >>> y\";\r\n    asserter.assertExpression(expr, 42L >>> 2, 42L, 2);\r\n    asserter.assertExpression(expr, 42L >>> -2, 42L, -2);\r\n    asserter.assertExpression(expr, -42L >>> 2, -42L, 2);\r\n    asserter.assertExpression(expr, -42L >>> -2, -42L, -2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "test246",
  "sourceCode" : "@Test\r\nvoid test246() throws Exception {\r\n    run246(new Arithmetic246(true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "test246b",
  "sourceCode" : "@Test\r\nvoid test246b() throws Exception {\r\n    run246(new Arithmetic246b(true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "test248",
  "sourceCode" : "@Test\r\nvoid test248() throws Exception {\r\n    final MapContext ctx = new MapContext();\r\n    final List<Object> foo = new ArrayList<>(Arrays.asList(10, 20, 30, 40));\r\n    ctx.set(\"foo\", foo);\r\n    final JexlEngine engine = new JexlBuilder().arithmetic(new Arithmetic248(true)).create();\r\n    final JexlScript foo12 = engine.createScript(\"foo[1..2]\");\r\n    Object r = foo12.execute(ctx);\r\n    assertEquals(Arrays.asList(20, 30), r);\r\n    final JexlScript foo12assign = engine.createScript(\"foo[1..2] = x\", \"x\");\r\n    r = foo12assign.execute(ctx, 25);\r\n    assertEquals(25, r);\r\n    assertEquals(Arrays.asList(10, 25, 25, 40), foo);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testArithmeticSelf",
  "sourceCode" : "@Test\r\nvoid testArithmeticSelf() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().cache(64).arithmetic(new SelfArithmetic(false)).create();\r\n    final JexlContext jc = null;\r\n    runSelfOverload(jexl, jc);\r\n    runSelfOverload(jexl, jc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testArithmeticSelfNoCache",
  "sourceCode" : "@Test\r\nvoid testArithmeticSelfNoCache() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().cache(0).arithmetic(new SelfArithmetic(false)).create();\r\n    final JexlContext jc = null;\r\n    runSelfOverload(jexl, jc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testIncrementSelf",
  "sourceCode" : "@Test\r\nvoid testIncrementSelf() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().cache(64).arithmetic(new SelfArithmetic(false)).create();\r\n    final JexlContext jc = null;\r\n    runSelfIncrement(jexl, jc);\r\n    runSelfIncrement(jexl, jc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testIncrementSelfNoCache",
  "sourceCode" : "@Test\r\nvoid testIncrementSelfNoCache() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().cache(0).arithmetic(new SelfArithmetic(false)).create();\r\n    final JexlContext jc = null;\r\n    runSelfIncrement(jexl, jc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testOverrideGetSet",
  "sourceCode" : "@Test\r\nvoid testOverrideGetSet() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().cache(64).arithmetic(new SelfArithmetic(false)).create();\r\n    final JexlContext jc = null;\r\n    JexlScript script;\r\n    Object result;\r\n    final Var v0 = new Var(3115);\r\n    script = jexl.createScript(\"(x)->{ x.value}\");\r\n    result = script.execute(jc, v0);\r\n    assertEquals(3115, result);\r\n    script = jexl.createScript(\"(x)->{ x['VALUE']}\");\r\n    result = script.execute(jc, v0);\r\n    assertEquals(3115, result);\r\n    script = jexl.createScript(\"(x,y)->{ x.value = y}\");\r\n    result = script.execute(jc, v0, 42);\r\n    assertEquals(42, result);\r\n    script = jexl.createScript(\"(x,y)->{ x['VALUE'] = y}\");\r\n    result = script.execute(jc, v0, 169);\r\n    assertEquals(169, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testSideEffectAntishArray",
  "sourceCode" : "@Test\r\nvoid testSideEffectAntishArray() throws Exception {\r\n    final Integer i41 = Integer.valueOf(4141);\r\n    final Integer i42 = Integer.valueOf(42);\r\n    final Integer i43 = Integer.valueOf(43);\r\n    final Object[] foo = new Object[3];\r\n    foo[1] = i42;\r\n    foo[2] = i43;\r\n    asserter.setVariable(\"foo.bar\", foo);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.bar[0] += 2\", i41 + 2);\r\n    assertEquals(foo[0], i41 + 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.bar[0] -= 2\", i41 - 2);\r\n    assertEquals(foo[0], i41 - 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.bar[0] *= 2\", i41 * 2);\r\n    assertEquals(foo[0], i41 * 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.bar[0] /= 2\", i41 / 2);\r\n    assertEquals(foo[0], i41 / 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.bar[0] %= 2\", i41 % 2);\r\n    assertEquals(foo[0], i41 % 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.bar[0] &= 3\", (long) (i41 & 3));\r\n    assertEquals(foo[0], (long) (i41 & 3));\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.bar[0] |= 2\", (long) (i41 | 2));\r\n    assertEquals(foo[0], (long) (i41 | 2));\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.bar[0] ^= 2\", (long) (i41 ^ 2));\r\n    assertEquals(foo[0], (long) (i41 ^ 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testSideEffectArray",
  "sourceCode" : "@Test\r\nvoid testSideEffectArray() throws Exception {\r\n    final Integer i41 = Integer.valueOf(4141);\r\n    final Integer i42 = Integer.valueOf(42);\r\n    final Integer i43 = Integer.valueOf(43);\r\n    final String s42 = \"fourty-two\";\r\n    final String s43 = \"fourty-three\";\r\n    final Object[] foo = new Object[3];\r\n    foo[1] = i42;\r\n    foo[2] = i43;\r\n    asserter.setVariable(\"foo\", foo);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo[0] += 2\", i41 + 2);\r\n    assertEquals(foo[0], i41 + 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo[0] -= 2\", i41 - 2);\r\n    assertEquals(foo[0], i41 - 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo[0] *= 2\", i41 * 2);\r\n    assertEquals(foo[0], i41 * 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo[0] /= 2\", i41 / 2);\r\n    assertEquals(foo[0], i41 / 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo[0] %= 2\", i41 % 2);\r\n    assertEquals(foo[0], i41 % 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo[0] &= 3\", (long) (i41 & 3));\r\n    assertEquals(foo[0], (long) (i41 & 3));\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo[0] |= 2\", (long) (i41 | 2));\r\n    assertEquals(foo[0], (long) (i41 | 2));\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo[0] ^= 2\", (long) (i41 ^ 2));\r\n    assertEquals(foo[0], (long) (i41 ^ 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testSideEffectBean",
  "sourceCode" : "@Test\r\nvoid testSideEffectBean() throws Exception {\r\n    final Integer i41 = Integer.valueOf(4141);\r\n    final Foo foo = new Foo(0);\r\n    asserter.setVariable(\"foo\", foo);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.value += 2\", i41 + 2);\r\n    assertEquals(foo.value, i41 + 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.value -= 2\", i41 - 2);\r\n    assertEquals(foo.value, i41 - 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.value *= 2\", i41 * 2);\r\n    assertEquals(foo.value, i41 * 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.value /= 2\", i41 / 2);\r\n    assertEquals(foo.value, i41 / 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.value %= 2\", i41 % 2);\r\n    assertEquals(foo.value, i41 % 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.value &= 3\", (long) (i41 & 3));\r\n    assertEquals(foo.value, i41 & 3);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.value |= 2\", (long) (i41 | 2));\r\n    assertEquals(foo.value, i41 | 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.value ^= 2\", (long) (i41 ^ 2));\r\n    assertEquals(foo.value, i41 ^ 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testSideEffectBeanContainer",
  "sourceCode" : "@Test\r\nvoid testSideEffectBeanContainer() throws Exception {\r\n    final Integer i41 = Integer.valueOf(4141);\r\n    final Foo foo = new Foo(0);\r\n    asserter.setVariable(\"foo\", foo);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.bar[0] += 2\", i41 + 2);\r\n    assertEquals(foo.value, i41 + 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.bar[1] += 2\", i41 + 3);\r\n    assertEquals(foo.value, i41 + 4);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.bar[0] -= 2\", i41 - 2);\r\n    assertEquals(foo.value, i41 - 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.bar[0] *= 2\", i41 * 2);\r\n    assertEquals(foo.value, i41 * 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.bar[0] /= 2\", i41 / 2);\r\n    assertEquals(foo.value, i41 / 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.bar[0] %= 2\", i41 % 2);\r\n    assertEquals(foo.value, i41 % 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.bar[0] &= 3\", (long) (i41 & 3));\r\n    assertEquals(foo.value, i41 & 3);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.bar[0] |= 2\", (long) (i41 | 2));\r\n    assertEquals(foo.value, i41 | 2);\r\n    foo.value = i41;\r\n    asserter.assertExpression(\"foo.bar[0] ^= 2\", (long) (i41 ^ 2));\r\n    assertEquals(foo.value, i41 ^ 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testSideEffectDotArray",
  "sourceCode" : "@Test\r\nvoid testSideEffectDotArray() throws Exception {\r\n    final Integer i41 = Integer.valueOf(4141);\r\n    final Integer i42 = Integer.valueOf(42);\r\n    final Integer i43 = Integer.valueOf(43);\r\n    final String s42 = \"fourty-two\";\r\n    final String s43 = \"fourty-three\";\r\n    final Object[] foo = new Object[3];\r\n    foo[1] = i42;\r\n    foo[2] = i43;\r\n    asserter.setVariable(\"foo\", foo);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.0 += 2\", i41 + 2);\r\n    assertEquals(foo[0], i41 + 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.0 -= 2\", i41 - 2);\r\n    assertEquals(foo[0], i41 - 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.0 *= 2\", i41 * 2);\r\n    assertEquals(foo[0], i41 * 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.0 /= 2\", i41 / 2);\r\n    assertEquals(foo[0], i41 / 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.0 %= 2\", i41 % 2);\r\n    assertEquals(foo[0], i41 % 2);\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.0 &= 3\", (long) (i41 & 3));\r\n    assertEquals(foo[0], (long) (i41 & 3));\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.0 |= 2\", (long) (i41 | 2));\r\n    assertEquals(foo[0], (long) (i41 | 2));\r\n    foo[0] = i41;\r\n    asserter.assertExpression(\"foo.0 ^= 2\", (long) (i41 ^ 2));\r\n    assertEquals(foo[0], (long) (i41 ^ 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testSideEffectVar",
  "sourceCode" : "@Test\r\nvoid testSideEffectVar() throws Exception {\r\n    final Map<String, Object> context = asserter.getVariables();\r\n    final Integer i41 = Integer.valueOf(4141);\r\n    final Object foo = i41;\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo += 2\", i41 + 2);\r\n    assertEquals(context.get(\"foo\"), i41 + 2);\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo -= 2\", i41 - 2);\r\n    assertEquals(context.get(\"foo\"), i41 - 2);\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo *= 2\", i41 * 2);\r\n    assertEquals(context.get(\"foo\"), i41 * 2);\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo /= 2\", i41 / 2);\r\n    assertEquals(context.get(\"foo\"), i41 / 2);\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo %= 2\", i41 % 2);\r\n    assertEquals(context.get(\"foo\"), i41 % 2);\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo &= 3\", (long) (i41 & 3));\r\n    assertEquals(context.get(\"foo\"), (long) (i41 & 3));\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo |= 2\", (long) (i41 | 2));\r\n    assertEquals(context.get(\"foo\"), (long) (i41 | 2));\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo ^= 2\", (long) (i41 ^ 2));\r\n    assertEquals(context.get(\"foo\"), (long) (i41 ^ 2));\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo <<= 2\", (long) (i41 << 2));\r\n    assertEquals(context.get(\"foo\"), (long) (i41 << 2));\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo >>= 2\", (long) (i41 >> 2));\r\n    assertEquals(context.get(\"foo\"), (long) (i41 >> 2));\r\n    context.put(\"foo\", foo);\r\n    asserter.assertExpression(\"foo >>>= 2\", (long) (i41 >>> 2));\r\n    assertEquals(context.get(\"foo\"), (long) (i41 >>> 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SideEffectTest.java",
  "methodName" : "testSideEffectVarDots",
  "sourceCode" : "@Test\r\nvoid testSideEffectVarDots() throws Exception {\r\n    final Map<String, Object> context = asserter.getVariables();\r\n    final Integer i41 = Integer.valueOf(4141);\r\n    final Object foo = i41;\r\n    context.put(\"foo.bar.quux\", foo);\r\n    asserter.assertExpression(\"foo.bar.quux += 2\", i41 + 2);\r\n    assertEquals(context.get(\"foo.bar.quux\"), i41 + 2);\r\n    context.put(\"foo.bar.quux\", foo);\r\n    asserter.assertExpression(\"foo.bar.quux -= 2\", i41 - 2);\r\n    assertEquals(context.get(\"foo.bar.quux\"), i41 - 2);\r\n    context.put(\"foo.bar.quux\", foo);\r\n    asserter.assertExpression(\"foo.bar.quux *= 2\", i41 * 2);\r\n    assertEquals(context.get(\"foo.bar.quux\"), i41 * 2);\r\n    context.put(\"foo.bar.quux\", foo);\r\n    asserter.assertExpression(\"foo.bar.quux /= 2\", i41 / 2);\r\n    assertEquals(context.get(\"foo.bar.quux\"), i41 / 2);\r\n    context.put(\"foo.bar.quux\", foo);\r\n    asserter.assertExpression(\"foo.bar.quux %= 2\", i41 % 2);\r\n    assertEquals(context.get(\"foo.bar.quux\"), i41 % 2);\r\n    context.put(\"foo.bar.quux\", foo);\r\n    asserter.assertExpression(\"foo.bar.quux &= 3\", (long) (i41 & 3));\r\n    assertEquals(context.get(\"foo.bar.quux\"), (long) (i41 & 3));\r\n    context.put(\"foo.bar.quux\", foo);\r\n    asserter.assertExpression(\"foo.bar.quux |= 2\", (long) (i41 | 2));\r\n    assertEquals(context.get(\"foo.bar.quux\"), (long) (i41 | 2));\r\n    context.put(\"foo.bar.quux\", foo);\r\n    asserter.assertExpression(\"foo.bar.quux ^= 2\", (long) (i41 ^ 2));\r\n    assertEquals(context.get(\"foo.bar.quux\"), (long) (i41 ^ 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\StrategyTest.java",
  "methodName" : "testJexlStrategy",
  "sourceCode" : "@Test\r\nvoid testJexlStrategy() throws Exception {\r\n    final JexlEngine jexl = new Engine();\r\n    run171(jexl, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\StrategyTest.java",
  "methodName" : "testMapStrategy",
  "sourceCode" : "@Test\r\nvoid testMapStrategy() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().strategy(JexlUberspect.MAP_STRATEGY).create();\r\n    run171(jexl, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\StrategyTest.java",
  "methodName" : "testMyMapStrategy",
  "sourceCode" : "@Test\r\nvoid testMyMapStrategy() throws Exception {\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new MapArithmetic(true)).create();\r\n    run171(jexl, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\StrategyTest.java",
  "methodName" : "testRawResolvers",
  "sourceCode" : "@Test\r\nvoid testRawResolvers() throws Exception {\r\n    final Object map = new HashMap<String, Object>();\r\n    final JexlEngine jexl = new JexlBuilder().create();\r\n    final JexlUberspect uberspect = jexl.getUberspect();\r\n    final JexlUberspect.PropertyResolver rfieldp = JexlUberspect.JexlResolver.FIELD;\r\n    final JexlPropertyGet fget = rfieldp.getPropertyGet(uberspect, map, \"key\");\r\n    assertNull(fget);\r\n    final JexlPropertySet fset = rfieldp.getPropertySet(uberspect, map, \"key\", \"value\");\r\n    assertNull(fset);\r\n    final JexlUberspect.PropertyResolver rmap = JexlUberspect.JexlResolver.MAP;\r\n    final JexlPropertyGet mget = rmap.getPropertyGet(uberspect, map, \"key\");\r\n    assertNotNull(mget);\r\n    final JexlPropertySet mset = rmap.getPropertySet(uberspect, map, \"key\", \"value\");\r\n    assertNotNull(mset);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SwitchTest.java",
  "methodName" : "testSwitchExpression",
  "sourceCode" : "@Test\r\nvoid testSwitchExpression() {\r\n    JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    final JexlScript e = jexl.createScript(\"var j = switch(i) { case 1 -> 2; case 2 -> 3; default -> 4; }; j\", \"i\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc, 1);\r\n    assertEquals(2, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SwitchTest.java",
  "methodName" : "testBrokenSwitchExpression0",
  "sourceCode" : "@Test\r\nvoid testBrokenSwitchExpression0() {\r\n    JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    try {\r\n        final JexlScript e = jexl.createScript(\"var j = switch(i) { case 1 -> return 2;  }; j\", \"i\");\r\n        fail(\"should not be able to create script with return in switch expression\");\r\n    } catch (JexlException.Parsing xparse) {\r\n        assertTrue(xparse.getMessage().contains(\"return\"));\r\n    }\r\n    try {\r\n        final JexlScript e = jexl.createScript(\"var j = switch(i) { case 1 -> break; }; j\", \"i\");\r\n        fail(\"should not be able to create script with break in switch expression\");\r\n    } catch (JexlException.Parsing xparse) {\r\n        assertTrue(xparse.getMessage().contains(\"break\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SwitchTest.java",
  "methodName" : "testSwitchStatement",
  "sourceCode" : "@Test\r\nvoid testSwitchStatement() {\r\n    JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    final JexlScript e = jexl.createScript(\"switch(i) { case 1: i += 2; case 2: i += 3; default: i += 4; }; i + 33\", \"i\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc, 2);\r\n    assertEquals(42, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SwitchTest.java",
  "methodName" : "test440a",
  "sourceCode" : "@Test\r\nvoid test440a() {\r\n    JexlFeatures f = JexlFeatures.createDefault().ambiguousStatement(true);\r\n    JexlEngine jexl = new JexlBuilder().features(f).safe(false).strict(true).create();\r\n    String src = \"let y = switch (x) { case 10,11 -> 3 case 20, 21 -> 4\\n\" + \"default -> { let z = 4; z + x } } y\";\r\n    JexlScript script = jexl.createScript(src, \"x\");\r\n    assertNotNull(script);\r\n    String dbgStr = script.getParsedText();\r\n    assertNotNull(dbgStr);\r\n    Object result = script.execute(null, 10);\r\n    Assertions.assertEquals(3, result);\r\n    result = script.execute(null, 11);\r\n    Assertions.assertEquals(3, result);\r\n    result = script.execute(null, 20);\r\n    Assertions.assertEquals(4, result);\r\n    result = script.execute(null, 21);\r\n    Assertions.assertEquals(4, result);\r\n    result = script.execute(null, 38);\r\n    Assertions.assertEquals(42, result);\r\n    src = \"let y = switch (x) { case 10,11 -> break; case 20, 21 -> 4; } y\";\r\n    try {\r\n        script = jexl.createScript(src, \"x\");\r\n        fail(\"should not be able to create script with break in switch\");\r\n    } catch (JexlException.Parsing xparse) {\r\n        assertTrue(xparse.getMessage().contains(\"break\"));\r\n    }\r\n    assertNotNull(script);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SwitchTest.java",
  "methodName" : "test440b",
  "sourceCode" : "@Test\r\nvoid test440b() {\r\n    JexlEngine jexl = new JexlBuilder().safe(false).strict(true).create();\r\n    final String src = \"switch (x) { case 10 : return 3; case 20 : case 21 : return 4; case 32: break; default : return x + 4; } 169\";\r\n    final JexlScript script = jexl.createScript(src, \"x\");\r\n    assertNotNull(script);\r\n    String dbgStr = script.getParsedText();\r\n    assertNotNull(dbgStr);\r\n    Object result = script.execute(null, 10);\r\n    Assertions.assertEquals(3, result);\r\n    result = script.execute(null, 20);\r\n    Assertions.assertEquals(4, result);\r\n    result = script.execute(null, 21);\r\n    Assertions.assertEquals(4, result);\r\n    result = script.execute(null, 32);\r\n    Assertions.assertEquals(169, result);\r\n    result = script.execute(null, 38);\r\n    Assertions.assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SwitchTest.java",
  "methodName" : "test440c",
  "sourceCode" : "@Test\r\nvoid test440c() {\r\n    JexlEngine jexl = new JexlBuilder().loader(getClass().getClassLoader()).imports(this.getClass().getName()).create();\r\n    final String src = \"let s = switch (x) { case Scope440.UNDEFINED -> 'undefined'; case Scope440.THIS -> 'this'; default -> 'OTHER'; } s\";\r\n    final JexlScript script = jexl.createScript(src, \"x\");\r\n    assertNotNull(script);\r\n    String dbgStr = script.getParsedText();\r\n    assertNotNull(dbgStr);\r\n    Object result = script.execute(null, Scope440.UNDEFINED);\r\n    Assertions.assertEquals(\"undefined\", result);\r\n    result = script.execute(null, Scope440.THIS);\r\n    Assertions.assertEquals(\"this\", result);\r\n    result = script.execute(null, 21);\r\n    Assertions.assertEquals(\"OTHER\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SwitchTest.java",
  "methodName" : "test440d",
  "sourceCode" : "@Test\r\nvoid test440d() {\r\n    JexlEngine jexl = new JexlBuilder().loader(getClass().getClassLoader()).imports(this.getClass().getName()).create();\r\n    final String src = \"let s = switch (x) { case Scope440.UNDEFINED -> 'undefined'; } s\";\r\n    final JexlScript script = jexl.createScript(src, \"x\");\r\n    try {\r\n        script.execute(null, Scope440.THIS);\r\n        fail(\"should not be able to execute script with switch expression with no default\");\r\n    } catch (JexlException xjexl) {\r\n        assertTrue(xjexl.getMessage().contains(\"switch\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SwitchTest.java",
  "methodName" : "test440e",
  "sourceCode" : "@Test\r\nvoid test440e() {\r\n    JexlEngine jexl = new JexlBuilder().loader(getClass().getClassLoader()).imports(this.getClass().getName()).create();\r\n    final String src = \"function f(x) { switch (x) { case Scope440.UNDEFINED : return 'undefined'; } } f(x)\";\r\n    final JexlScript script = jexl.createScript(src, \"x\");\r\n    Object result = script.execute(null, Scope440.UNDEFINED);\r\n    Assertions.assertEquals(\"undefined\", result);\r\n    try {\r\n        script.execute(null, Scope440.THIS);\r\n        fail(\"should not be able to execute script with switch expression with no default\");\r\n    } catch (JexlException xjexl) {\r\n        assertTrue(xjexl.getMessage().contains(\"switch\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SynchronizedOverloadsTest.java",
  "methodName" : "testSynchronized",
  "sourceCode" : "@Test\r\nvoid testSynchronized() throws Exception {\r\n    final Map<String, Object> ns = new TreeMap<>();\r\n    final JexlContext jc = new SynchronizedContext(new MapContext());\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(ns).create();\r\n    final JexlScript js0 = jexl.createScript(\"@synchronized(y) {return y.size(); }\", \"y\");\r\n    final Object size = js0.execute(jc, \"foobar\");\r\n    assertEquals(6, size);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SynchronizedOverloadsTest.java",
  "methodName" : "testSynchronizer",
  "sourceCode" : "@Test\r\nvoid testSynchronizer() throws Exception {\r\n    final Map<String, Object> ns = new TreeMap<>();\r\n    ns.put(\"synchronized\", SynchronizedContext.class);\r\n    final JexlContext jc = new MapContext();\r\n    final JexlEngine jexl = new JexlBuilder().namespaces(ns).create();\r\n    final JexlScript js0 = jexl.createScript(\"synchronized:call(x, (y)->{y.size()})\", \"x\");\r\n    final Object size = js0.execute(jc, \"foobar\");\r\n    assertEquals(6, size);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\SynchronizedOverloadsTest.java",
  "methodName" : "testUnsafeMonitor",
  "sourceCode" : "@Test\r\nvoid testUnsafeMonitor() throws Exception {\r\n    final SynchronizedArithmetic.AbstractMonitor abstractMonitor = new SynchronizedArithmetic.SafeMonitor();\r\n    final Map<String, Object> foo = new TreeMap<>();\r\n    foo.put(\"one\", 1);\r\n    foo.put(\"two\", 2);\r\n    foo.put(\"three\", 3);\r\n    final JexlContext jc = new SynchronizedContext(new MapContext());\r\n    final JexlEngine jexl = new JexlBuilder().arithmetic(new SynchronizedArithmetic(abstractMonitor, true)).create();\r\n    final JexlScript js0 = jexl.createScript(\"x['four'] = 4; var t = 0.0; for(var z: x) { t += z; }; call(t, (y)->{return y});\", \"x\");\r\n    Object t = js0.execute(jc, foo);\r\n    assertEquals(10.0d, t);\r\n    assertTrue(abstractMonitor.isBalanced());\r\n    assertEquals(2, abstractMonitor.getCount());\r\n    t = js0.execute(jc, foo);\r\n    assertEquals(10.0d, t);\r\n    assertTrue(abstractMonitor.isBalanced());\r\n    assertEquals(4, abstractMonitor.getCount());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testCloseable0x2b",
  "sourceCode" : "@Test\r\nvoid testCloseable0x2b() {\r\n    final String src = \"try(let x = c) { c.isOpened()? 42 : -42; } finally { 169; }\";\r\n    final JexlScript script = JEXL.createScript(src, \"c\");\r\n    final Circuit circuit = new Circuit();\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null, circuit);\r\n    assertEquals(42, result);\r\n    assertFalse(circuit.isOpened());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testCloseable0x3b",
  "sourceCode" : "@Test\r\nvoid testCloseable0x3b() {\r\n    final String src = \"try(let x = c) { c.raiseError(); -42; } catch(const y) { 42; } finally { 169; }\";\r\n    final JexlScript script = JEXL.createScript(src, \"c\");\r\n    final Circuit circuit = new Circuit();\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null, circuit);\r\n    assertEquals(42, result);\r\n    assertFalse(circuit.isOpened());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testExceptionType",
  "sourceCode" : "@Test\r\nvoid testExceptionType() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"try { 'asb'.getBytes('NoSuchCharacterSet'); } catch (let ex) { ex }\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertInstanceOf(UnsupportedEncodingException.class, o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testForm0x2a",
  "sourceCode" : "@Test\r\nvoid testForm0x2a() {\r\n    final String src = \"try(let x = 42) { x; } finally { 169; }\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testForm0x2b",
  "sourceCode" : "@Test\r\nvoid testForm0x2b() {\r\n    final String src = \"try(let x = 19, y = 23) { x + y; } finally { 169; }\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testForm0x2c",
  "sourceCode" : "@Test\r\nvoid testForm0x2c() {\r\n    final String src = \"try(const x = 19; let y = 23; ) { x + y; } finally { 169; }\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testForm0x2d",
  "sourceCode" : "@Test\r\nvoid testForm0x2d() {\r\n    final String src = \"try(var x = 19; const y = 23;) { x + y; } finally { 169; }\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testRedefinition0",
  "sourceCode" : "@Test\r\nvoid testRedefinition0() {\r\n    final String src = \"try(let x = c) { let x = 3; -42; }\";\r\n    final JexlException.Parsing xvar = assertThrows(JexlException.Parsing.class, () -> JEXL.createScript(src, \"c\"));\r\n    assertTrue(xvar.getMessage().contains(\"x: variable is already declared\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testRedefinition1",
  "sourceCode" : "@Test\r\nvoid testRedefinition1() {\r\n    final String src = \"const x = 33; try(let x = c) { 169; }\";\r\n    final JexlException.Parsing xvar = assertThrows(JexlException.Parsing.class, () -> JEXL.createScript(src, \"c\"));\r\n    assertTrue(xvar.getMessage().contains(\"x: variable is already declared\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testStandard0x2",
  "sourceCode" : "@Test\r\nvoid testStandard0x2() {\r\n    final String src = \"try { 42; } finally { 169; }\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testThrow0x2a",
  "sourceCode" : "@Test\r\nvoid testThrow0x2a() {\r\n    final String src = \"try(let x = 42) { throw x } finally { 169; }\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final JexlException.Throw xthrow = assertThrows(JexlException.Throw.class, () -> script.execute(null));\r\n    assertEquals(42, xthrow.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testThrow0x2b",
  "sourceCode" : "@Test\r\nvoid testThrow0x2b() {\r\n    final String src = \"try(let x = 42) { throw x } finally { throw 169 }\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final JexlException.Throw xthrow = assertThrows(JexlException.Throw.class, () -> script.execute(null));\r\n    assertEquals(169, xthrow.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testThrowCatchBreakFinallyContinue",
  "sourceCode" : "@Test\r\nvoid testThrowCatchBreakFinallyContinue() {\r\n    final String src = \"let r = 0; for(let i : 37..42) { try(let x = 169) { r = i; throw -x } catch(const y) { break } finally { continue } } r\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testThrowCatchContinueFinallyBreak",
  "sourceCode" : "@Test\r\nvoid testThrowCatchContinueFinallyBreak() {\r\n    final String src = \"let r = 0; for(let i : 42..37) { try(let x = 169) { r = i; throw -x } catch(const y) { continue } finally { break } } r\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testThrowCatchThrow",
  "sourceCode" : "@Test\r\nvoid testThrowCatchThrow() {\r\n    final String src = \"try(let x = 42) { throw x } catch(const y) { throw -(y.value) } \";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final JexlException.Throw xthrow = assertThrows(JexlException.Throw.class, () -> script.execute(null));\r\n    assertEquals(-42, xthrow.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testThrowCatchThrowFinallyThrow",
  "sourceCode" : "@Test\r\nvoid testThrowCatchThrowFinallyThrow() {\r\n    final String src = \"try(let x = 42) { throw x } catch(const y) { throw -(y.value) } finally { throw 169 }\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final JexlException.Throw xthrow = assertThrows(JexlException.Throw.class, () -> script.execute(null));\r\n    assertEquals(169, xthrow.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testThrowRecurse",
  "sourceCode" : "@Test\r\nvoid testThrowRecurse() {\r\n    final String src = \"function fact(x, f) { if (x == 1) throw f; fact(x - 1, f * x); } fact(7, 1);\";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final JexlException.Throw xthrow = assertThrows(JexlException.Throw.class, () -> script.execute(null));\r\n    assertEquals(5040, xthrow.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testTryReturn",
  "sourceCode" : "@Test\r\nvoid testTryReturn() {\r\n    final String src = \"try(let x = 42) { return x } catch(const y) { throw -(y.value) } \";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(42, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\TryCatchFinallyTest.java",
  "methodName" : "testTryReturnFinallyReturn",
  "sourceCode" : "@Test\r\nvoid testTryReturnFinallyReturn() {\r\n    final String src = \"try(let x = 42) { return x } finally { return 169 } \";\r\n    final JexlScript script = JEXL.createScript(src);\r\n    assertNotNull(script);\r\n    final Object result = script.execute(null);\r\n    assertEquals(169, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testLiteral",
  "sourceCode" : "@Test\r\nvoid testLiteral() throws Exception {\r\n    JexlBuilder builder = new JexlBuilder().collectMode(2);\r\n    assertEquals(2, builder.collectMode());\r\n    assertTrue(builder.collectAll());\r\n    JexlEngine jexld = builder.create();\r\n    JexlScript e = jexld.createScript(\"x.y[['z', 't']]\");\r\n    Set<List<String>> vars = e.getVariables();\r\n    assertEquals(1, vars.size());\r\n    assertTrue(eq(mkref(new String[][] { { \"x\", \"y\", \"[ 'z', 't' ]\" } }), vars));\r\n    e = jexld.createScript(\"x.y[{'z': 't'}]\");\r\n    vars = e.getVariables();\r\n    assertEquals(1, vars.size());\r\n    assertTrue(eq(mkref(new String[][] { { \"x\", \"y\", \"{ 'z' : 't' }\" } }), vars));\r\n    e = jexld.createScript(\"x.y.'{ \\\\'z\\\\' : \\\\'t\\\\' }'\");\r\n    vars = e.getVariables();\r\n    assertEquals(1, vars.size());\r\n    assertTrue(eq(mkref(new String[][] { { \"x\", \"y\", \"{ 'z' : 't' }\" } }), vars));\r\n    // only string or number literals\r\n    builder = builder.collectAll(true);\r\n    assertEquals(1, builder.collectMode());\r\n    assertTrue(builder.collectAll());\r\n    jexld = builder.create();\r\n    e = jexld.createScript(\"x.y[{'z': 't'}]\");\r\n    vars = e.getVariables();\r\n    assertEquals(1, vars.size());\r\n    assertTrue(eq(mkref(new String[][] { { \"x\", \"y\" } }), vars));\r\n    e = jexld.createScript(\"x.y[['z', 't']]\");\r\n    vars = e.getVariables();\r\n    assertEquals(1, vars.size());\r\n    assertTrue(eq(mkref(new String[][] { { \"x\", \"y\" } }), vars));\r\n    e = jexld.createScript(\"x.y['z']\");\r\n    vars = e.getVariables();\r\n    assertEquals(1, vars.size());\r\n    assertTrue(eq(mkref(new String[][] { { \"x\", \"y\", \"z\" } }), vars));\r\n    e = jexld.createScript(\"x.y[42]\");\r\n    vars = e.getVariables();\r\n    assertEquals(1, vars.size());\r\n    assertTrue(eq(mkref(new String[][] { { \"x\", \"y\", \"42\" } }), vars));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testLocalBasic",
  "sourceCode" : "@Test\r\nvoid testLocalBasic() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var x; x = 42\");\r\n    final Object o = e.execute(null);\r\n    assertEquals(Integer.valueOf(42), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testLocalFor",
  "sourceCode" : "@Test\r\nvoid testLocalFor() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var y  = 0; for(var x : [5, 17, 20]) { y = y + x; } y;\");\r\n    final Object o = e.execute(null);\r\n    assertEquals(Integer.valueOf(42), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testLocalForFunc",
  "sourceCode" : "@Test\r\nvoid testLocalForFunc() throws Exception {\r\n    final JexlContext jc = new NumbersContext();\r\n    final JexlScript e = JEXL.createScript(\"var y  = 0; for(var x : numbers()) { y = y + x; } y;\");\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(42), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testLocalForFuncReturn",
  "sourceCode" : "@Test\r\nvoid testLocalForFuncReturn() throws Exception {\r\n    final JexlContext jc = new NumbersContext();\r\n    final JexlScript e = JEXL.createScript(\"var y  = 42; for(var x : numbers()) { if (x > 10) return x } y;\");\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(17), o);\r\n    assertTrue(e.getVariables().isEmpty(), () -> toString(e.getVariables()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testLocalSimple",
  "sourceCode" : "@Test\r\nvoid testLocalSimple() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"var x = 21; x + x\");\r\n    final Object o = e.execute(null);\r\n    assertEquals(Integer.valueOf(42), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testMix",
  "sourceCode" : "@Test\r\nvoid testMix() throws Exception {\r\n    JexlScript e;\r\n    // x is a parameter, y a context variable, z a local variable\r\n    e = JEXL.createScript(\"if (x) { y } else { var z = 2 * x}\", \"x\");\r\n    final Set<List<String>> vars = e.getVariables();\r\n    final String[] parms = e.getParameters();\r\n    final String[] locals = e.getLocalVariables();\r\n    assertTrue(eq(mkref(new String[][] { { \"y\" } }), vars));\r\n    assertEquals(1, parms.length);\r\n    assertEquals(\"x\", parms[0]);\r\n    assertEquals(1, locals.length);\r\n    assertEquals(\"z\", locals[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testObjectContext",
  "sourceCode" : "@Test\r\nvoid testObjectContext() throws Exception {\r\n    final TheVarContext vars = new TheVarContext();\r\n    final JexlContext jc = new ObjectContext<>(JEXL, vars);\r\n    try {\r\n        JexlScript script;\r\n        Object result;\r\n        script = JEXL.createScript(\"x = 3\");\r\n        result = script.execute(jc);\r\n        assertEquals(3, vars.getX());\r\n        assertEquals(3, result);\r\n        script = JEXL.createScript(\"x == 3\");\r\n        result = script.execute(jc);\r\n        assertTrue((Boolean) result);\r\n        assertTrue(jc.has(\"x\"));\r\n        script = JEXL.createScript(\"color = 'blue'\");\r\n        result = script.execute(jc);\r\n        assertEquals(\"blue\", vars.getColor());\r\n        assertEquals(\"blue\", result);\r\n        script = JEXL.createScript(\"color == 'blue'\");\r\n        result = script.execute(jc);\r\n        assertTrue((Boolean) result);\r\n        assertTrue(jc.has(\"color\"));\r\n    } catch (final JexlException.Method ambiguous) {\r\n        fail(\"total() is solvable\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testReferenceLiteral",
  "sourceCode" : "@Test\r\nvoid testReferenceLiteral() throws Exception {\r\n    final JexlEngine jexld = new JexlBuilder().collectMode(2).create();\r\n    JexlScript script;\r\n    List<String> result;\r\n    Set<List<String>> vars;\r\n    // in collectAll mode, the collector grabs all syntactic variations of\r\n    // constant variable references including map/arry/set literals\r\n    final JexlContext ctxt = new MapContext();\r\n    //d.yyyy = 1969; d.MM = 7; d.dd = 20\r\n    ctxt.set(\"moon.landing\", new VarDate(\"1969-07-20\"));\r\n    script = jexld.createScript(\"moon.landing[['yyyy', 'MM', 'dd']]\");\r\n    result = (List<String>) script.execute(ctxt);\r\n    assertEquals(Arrays.asList(\"1969\", \"7\", \"20\"), result);\r\n    vars = script.getVariables();\r\n    assertEquals(1, vars.size());\r\n    List<String> var = vars.iterator().next();\r\n    assertEquals(\"moon\", var.get(0));\r\n    assertEquals(\"landing\", var.get(1));\r\n    assertArrayEquals(new String[] { \"yyyy\", \"MM\", \"dd\" }, readIdentifiers(var.get(2)));\r\n    script = jexld.createScript(\"moon.landing[ { 'yyyy' : 'year', 'MM' : 'month', 'dd' : 'day' } ]\");\r\n    final Map<String, String> mapr = (Map<String, String>) script.execute(ctxt);\r\n    assertEquals(3, mapr.size());\r\n    assertEquals(\"1969\", mapr.get(\"year\"));\r\n    assertEquals(\"7\", mapr.get(\"month\"));\r\n    assertEquals(\"20\", mapr.get(\"day\"));\r\n    vars = script.getVariables();\r\n    assertEquals(1, vars.size());\r\n    var = vars.iterator().next();\r\n    assertEquals(\"moon\", var.get(0));\r\n    assertEquals(\"landing\", var.get(1));\r\n    assertArrayEquals(new String[] { \"yyyy\", \"MM\", \"dd\" }, readIdentifiers(var.get(2)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testRefs",
  "sourceCode" : "@Test\r\nvoid testRefs() throws Exception {\r\n    JexlScript e;\r\n    Set<List<String>> vars;\r\n    Set<List<String>> expect;\r\n    e = JEXL.createScript(\"a[b]['c']\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\" }, { \"b\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"a.'b + c'\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\", \"b + c\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"e[f]\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"e\" }, { \"f\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"e[f][g]\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"e\" }, { \"f\" }, { \"g\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"e['f'].goo\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"e\", \"f\", \"goo\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"e['f']\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"e\", \"f\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"e[f]['g']\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"e\" }, { \"f\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"e['f']['g']\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"e\", \"f\", \"g\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"a['b'].c['d'].e\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\", \"b\", \"c\", \"d\", \"e\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"a + b.c + b.c.d + e['f']\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\" }, { \"b\", \"c\" }, { \"b\", \"c\", \"d\" }, { \"e\", \"f\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"D[E[F]]\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"D\" }, { \"E\" }, { \"F\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"D[E[F[G[H]]]]\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"D\" }, { \"E\" }, { \"F\" }, { \"G\" }, { \"H\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\" A + B[C] + D[E[F]] + x[y[z]] \");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"A\" }, { \"B\" }, { \"C\" }, { \"D\" }, { \"E\" }, { \"F\" }, { \"x\" }, { \"y\" }, { \"z\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\" A + B[C] + D.E['F'] + x[y.z] \");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"A\" }, { \"B\" }, { \"C\" }, { \"D\", \"E\", \"F\" }, { \"x\" }, { \"y\", \"z\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"(A)\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"A\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"not(A)\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"A\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"not((A))\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"A\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"a[b]['c']\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\" }, { \"b\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"a['b'][c]\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\", \"b\" }, { \"c\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"a[b].c\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\" }, { \"b\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"a[b].c[d]\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\" }, { \"b\" }, { \"d\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = JEXL.createScript(\"a[b][e].c[d][f]\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\" }, { \"b\" }, { \"d\" }, { \"e\" }, { \"f\" } });\r\n    assertTrue(eq(expect, vars));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testStrict",
  "sourceCode" : "@Test\r\nvoid testStrict() throws Exception {\r\n    final JexlEvalContext env = new JexlEvalContext();\r\n    final JexlOptions options = env.getEngineOptions();\r\n    final JexlContext ctxt = new ReadonlyContext(env, options);\r\n    options.setStrict(true);\r\n    options.setSilent(false);\r\n    options.setSafe(false);\r\n    final JexlScript e0 = JEXL.createScript(\"x\");\r\n    assertThrows(JexlException.class, () -> e0.execute(ctxt), \"should have thrown an unknown var exception\");\r\n    final JexlScript e1 = JEXL.createScript(\"x = 42\");\r\n    assertThrows(JexlException.class, () -> e1.execute(ctxt), \"should have thrown a readonly context exception\");\r\n    env.set(\"x\", \"fourty-two\");\r\n    final JexlScript e2 = JEXL.createScript(\"x.theAnswerToEverything()\");\r\n    assertThrows(JexlException.class, () -> e2.execute(ctxt), \"should have thrown an unknown method exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testSyntacticVariations",
  "sourceCode" : "@Test\r\nvoid testSyntacticVariations() throws Exception {\r\n    final JexlScript script = JEXL.createScript(\"sum(TOTAL) - partial.sum() + partial['sub'].avg() - sum(partial.sub)\");\r\n    final Set<List<String>> vars = script.getVariables();\r\n    assertEquals(3, vars.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\VarTest.java",
  "methodName" : "testVarCollectNotAll",
  "sourceCode" : "@Test\r\nvoid testVarCollectNotAll() throws Exception {\r\n    JexlScript e;\r\n    Set<List<String>> vars;\r\n    Set<List<String>> expect;\r\n    final JexlEngine jexl = new JexlBuilder().strict(true).silent(false).cache(32).collectAll(false).create();\r\n    e = jexl.createScript(\"a['b'][c]\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\" }, { \"c\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = jexl.createScript(\" A + B[C] + D[E[F]] + x[y[z]] \");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"A\" }, { \"B\" }, { \"C\" }, { \"D\" }, { \"E\" }, { \"F\" }, { \"x\" }, { \"y\" }, { \"z\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = jexl.createScript(\"e['f']['g']\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"e\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = jexl.createScript(\"a[b][e].c[d][f]\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\" }, { \"b\" }, { \"d\" }, { \"e\" }, { \"f\" } });\r\n    assertTrue(eq(expect, vars));\r\n    e = jexl.createScript(\"a + b.c + b.c.d + e['f']\");\r\n    vars = e.getVariables();\r\n    expect = mkref(new String[][] { { \"a\" }, { \"b\", \"c\" }, { \"b\", \"c\", \"d\" }, { \"e\" } });\r\n    assertTrue(eq(expect, vars));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\WhileTest.java",
  "methodName" : "testSimpleWhileFalse",
  "sourceCode" : "@Test\r\nvoid testSimpleWhileFalse() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"while (false) ;\");\r\n    final JexlContext jc = new MapContext();\r\n    final Object o = e.execute(jc);\r\n    assertNull(o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\WhileTest.java",
  "methodName" : "testWhileExecutesExpressionWhenLooping",
  "sourceCode" : "@Test\r\nvoid testWhileExecutesExpressionWhenLooping() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"while (x < 10) x = x + 1;\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", Integer.valueOf(1));\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(10), o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\apache\\commons\\jexl3\\WhileTest.java",
  "methodName" : "testWhileWithBlock",
  "sourceCode" : "@Test\r\nvoid testWhileWithBlock() throws Exception {\r\n    final JexlScript e = JEXL.createScript(\"while (x < 10) { x = x + 1; y = y * 2; }\");\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"x\", Integer.valueOf(1));\r\n    jc.set(\"y\", Integer.valueOf(1));\r\n    final Object o = e.execute(jc);\r\n    assertEquals(Integer.valueOf(512), o);\r\n    assertEquals(Integer.valueOf(10), jc.get(\"x\"), \"x is wrong\");\r\n    assertEquals(Integer.valueOf(512), jc.get(\"y\"), \"y is wrong\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\example\\SomeTest.java",
  "methodName" : "test406b",
  "sourceCode" : "@Test\r\nvoid test406b() {\r\n    final JexlEngine jexl = new JexlBuilder() {\r\n\r\n        @Override\r\n        public JexlEngine create() {\r\n            return new Engine406(this);\r\n        }\r\n    }.cache(64).strict(true).safe(false).create();\r\n    final String src = \"`Call ${x}`\";\r\n    final JexlScript script = jexl.createScript(src, \"x\");\r\n    Object result = script.execute(null, 406);\r\n    assertEquals(\"Call 406\", result);\r\n    assertEquals(1, CALL406.get());\r\n    result = script.execute(null, 42);\r\n    assertEquals(\"Call 42\", result);\r\n    assertEquals(2, CALL406.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-jexl\\src\\test\\java\\org\\example\\SomeTest.java",
  "methodName" : "testCustomFunctionPermissions",
  "sourceCode" : "/**\r\n * User namespace needs to be allowed through permissions.\r\n */\r\n@Test\r\nvoid testCustomFunctionPermissions() {\r\n    final Map<String, Object> funcs = new HashMap<>();\r\n    funcs.put(\"math\", new MyMath());\r\n    final JexlPermissions permissions = JexlPermissions.parse(\"org.example.*\");\r\n    final JexlEngine jexl = new JexlBuilder().permissions(permissions).namespaces(funcs).create();\r\n    final JexlContext jc = new MapContext();\r\n    jc.set(\"pi\", Math.PI);\r\n    final JexlExpression e = jexl.createExpression(\"math:cos(pi)\");\r\n    final Number result = (Number) e.evaluate(jc);\r\n    assertEquals(-1, result.intValue());\r\n}",
  "annotations" : [ "Test" ]
} ]