[ {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\AbstractNumberTest.java",
  "methodName" : "testNumber",
  "sourceCode" : "/**\r\n * Tests the number validation.\r\n */\r\n@Test\r\nvoid testNumber() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"0\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\AbstractNumberTest.java",
  "methodName" : "testNumberFailure",
  "sourceCode" : "/**\r\n * Tests the float validation failure.\r\n */\r\n@Test\r\nvoid testNumberFailure() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ByteTest.java",
  "methodName" : "testByte",
  "sourceCode" : "/**\r\n * Tests the byte validation.\r\n */\r\n@Test\r\nvoid testByte() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"0\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ByteTest.java",
  "methodName" : "testByteBeyondMax",
  "sourceCode" : "/**\r\n * Tests the byte validation failure.\r\n */\r\n@Test\r\nvoid testByteBeyondMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Byte.MAX_VALUE + \"1\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ByteTest.java",
  "methodName" : "testByteBeyondMin",
  "sourceCode" : "/**\r\n * Tests the byte validation failure.\r\n */\r\n@Test\r\nvoid testByteBeyondMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Byte.MIN_VALUE + \"1\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ByteTest.java",
  "methodName" : "testByteFailure",
  "sourceCode" : "/**\r\n * Tests the byte validation failure.\r\n */\r\n@Test\r\nvoid testByteFailure() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ByteTest.java",
  "methodName" : "testByteMax",
  "sourceCode" : "/**\r\n * Tests the byte validation.\r\n */\r\n@Test\r\nvoid testByteMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Byte.toString(Byte.MAX_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ByteTest.java",
  "methodName" : "testByteMin",
  "sourceCode" : "/**\r\n * Tests the byte validation.\r\n */\r\n@Test\r\nvoid testByteMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Byte.toString(Byte.MIN_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\CreditCardValidatorTest.java",
  "methodName" : "testAddAllowedCardType",
  "sourceCode" : "@Test\r\nvoid testAddAllowedCardType() {\r\n    final CreditCardValidator ccv = new CreditCardValidator(CreditCardValidator.NONE);\r\n    // Turned off all cards so even valid numbers should fail\r\n    assertFalse(ccv.isValid(VALID_VISA));\r\n    assertFalse(ccv.isValid(VALID_AMEX));\r\n    assertFalse(ccv.isValid(VALID_MASTERCARD));\r\n    assertFalse(ccv.isValid(VALID_DISCOVER));\r\n    // test our custom type\r\n    ccv.addAllowedCardType(new DinersClub());\r\n    assertTrue(ccv.isValid(VALID_DINERS));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\CreditCardValidatorTest.java",
  "methodName" : "testIsValid",
  "sourceCode" : "@Test\r\nvoid testIsValid() {\r\n    CreditCardValidator ccv = new CreditCardValidator();\r\n    assertFalse(ccv.isValid(null));\r\n    assertFalse(ccv.isValid(\"\"));\r\n    // too short\r\n    assertFalse(ccv.isValid(\"123456789012\"));\r\n    // too long\r\n    assertFalse(ccv.isValid(\"12345678901234567890\"));\r\n    assertFalse(ccv.isValid(\"4417123456789112\"));\r\n    assertFalse(ccv.isValid(\"4417q23456w89113\"));\r\n    assertTrue(ccv.isValid(VALID_VISA));\r\n    assertTrue(ccv.isValid(VALID_SHORT_VISA));\r\n    assertTrue(ccv.isValid(VALID_AMEX));\r\n    assertTrue(ccv.isValid(VALID_MASTERCARD));\r\n    assertTrue(ccv.isValid(VALID_DISCOVER));\r\n    // disallow Visa so it should fail even with good number\r\n    ccv = new CreditCardValidator(CreditCardValidator.AMEX);\r\n    assertFalse(ccv.isValid(\"4417123456789113\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\CustomValidatorResourcesTest.java",
  "methodName" : "testCustomResources",
  "sourceCode" : "/**\r\n * Test creating a custom validator resources.\r\n */\r\n@Test\r\nvoid testCustomResources() {\r\n    // Load resources\r\n    InputStream in = null;\r\n    try {\r\n        in = this.getClass().getResourceAsStream(\"TestNumber-config.xml\");\r\n    } catch (final Exception e) {\r\n        fail(\"Error loading resources: \" + e);\r\n    } finally {\r\n        try {\r\n            if (in != null) {\r\n                in.close();\r\n            }\r\n        } catch (final Exception ignore) {\r\n            // ignore\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\DateTest.java",
  "methodName" : "testInvalidDate",
  "sourceCode" : "/**\r\n * Tests the date validation.\r\n */\r\n@Test\r\nvoid testInvalidDate() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"12/01as/2005\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\DateTest.java",
  "methodName" : "testValidDate",
  "sourceCode" : "/**\r\n * Tests the date validation.\r\n */\r\n@Test\r\nvoid testValidDate() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"12/01/2005\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\DoubleTest.java",
  "methodName" : "testDouble",
  "sourceCode" : "/**\r\n * Tests the double validation.\r\n */\r\n@Test\r\nvoid testDouble() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"0\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\DoubleTest.java",
  "methodName" : "testDoubleFailure",
  "sourceCode" : "/**\r\n * Tests the double validation failure.\r\n */\r\n@Test\r\nvoid testDoubleFailure() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\DoubleTest.java",
  "methodName" : "testDoubleMax",
  "sourceCode" : "/**\r\n * Tests the double validation.\r\n */\r\n@Test\r\nvoid testDoubleMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Double.toString(Double.MAX_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\DoubleTest.java",
  "methodName" : "testDoubleMin",
  "sourceCode" : "/**\r\n * Tests the double validation.\r\n */\r\n@Test\r\nvoid testDoubleMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Double.toString(Double.MIN_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmail",
  "sourceCode" : "/**\r\n * Tests the e-mail validation.\r\n */\r\n@Test\r\nvoid testEmail() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"jsmith@apache.org\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailAtTLD",
  "sourceCode" : "/**\r\n * Tests the e-mail validation with a user at a TLD\r\n */\r\n@Test\r\nvoid testEmailAtTLD() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"m@de\");\r\n    valueTest(info, false);\r\n    final org.apache.commons.validator.routines.EmailValidator validator = org.apache.commons.validator.routines.EmailValidator.getInstance(true, true);\r\n    final boolean result = validator.isValid(\"m@de\");\r\n    assertTrue(result, \"Result should have been true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailExtension",
  "sourceCode" : "/**\r\n * Tests the e-mail validation.\r\n */\r\n@Test\r\nvoid testEmailExtension() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"jsmith@apache.org\");\r\n    valueTest(info, true);\r\n    info.setValue(\"jsmith@apache.com\");\r\n    valueTest(info, true);\r\n    info.setValue(\"jsmith@apache.net\");\r\n    valueTest(info, true);\r\n    info.setValue(\"jsmith@apache.info\");\r\n    valueTest(info, true);\r\n    info.setValue(\"jsmith@apache.\");\r\n    valueTest(info, false);\r\n    info.setValue(\"jsmith@apache.c\");\r\n    valueTest(info, false);\r\n    info.setValue(\"someone@yahoo.museum\");\r\n    valueTest(info, true);\r\n    info.setValue(\"someone@yahoo.mu-seum\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailLocalhost",
  "sourceCode" : "/**\r\n * Test that @localhost and @localhost.localdomain addresses aren't declared valid by default\r\n */\r\n@Test\r\nvoid testEmailLocalhost() throws ValidatorException {\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"joe@localhost\");\r\n    valueTest(info, false);\r\n    info.setValue(\"joe@localhost.localdomain\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailWithBogusCharacter",
  "sourceCode" : "/**\r\n * Tests the e-mail validation with an RCS-non-compliant character in the address.\r\n */\r\n@Test\r\nvoid testEmailWithBogusCharacter() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"andy.noble@\\u008fdata-workshop.com\");\r\n    valueTest(info, false);\r\n    // The ' character is valid in an email username.\r\n    info.setValue(\"andy.o'reilly@data-workshop.com\");\r\n    valueTest(info, true);\r\n    // But not in the domain name.\r\n    info.setValue(\"andy@o'reilly.data-workshop.com\");\r\n    valueTest(info, false);\r\n    info.setValue(\"foo+bar@i.am.not.in.us.example.com\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailWithCommas",
  "sourceCode" : "/**\r\n * Tests the email validation with commas.\r\n */\r\n@Test\r\nvoid testEmailWithCommas() throws ValidatorException {\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"joeblow@apa,che.org\");\r\n    valueTest(info, false);\r\n    info.setValue(\"joeblow@apache.o,rg\");\r\n    valueTest(info, false);\r\n    info.setValue(\"joeblow@apache,org\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailWithControlChars",
  "sourceCode" : "/**\r\n * Tests the email validation with ASCII control characters. (i.e. ASCII chars 0 - 31 and 127)\r\n */\r\n@Test\r\nvoid testEmailWithControlChars() {\r\n    final EmailValidator validator = new EmailValidator();\r\n    for (char c = 0; c < 32; c++) {\r\n        assertFalse(validator.isValid(\"foo\" + c + \"bar@domain.com\"), \"Test control char \" + (int) c);\r\n    }\r\n    assertFalse(validator.isValid(\"foo\" + (char) 127 + \"bar@domain.com\"), \"Test control char 127\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailWithDash",
  "sourceCode" : "/**\r\n * <p>\r\n * Tests the e-mail validation with a dash in the address.\r\n * </p>\r\n */\r\n@Test\r\nvoid testEmailWithDash() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"andy.noble@data-workshop.com\");\r\n    valueTest(info, true);\r\n    info.setValue(\"andy-noble@data-workshop.-com\");\r\n    valueTest(info, false);\r\n    info.setValue(\"andy-noble@data-workshop.c-om\");\r\n    valueTest(info, false);\r\n    info.setValue(\"andy-noble@data-workshop.co-m\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailWithDotEnd",
  "sourceCode" : "/**\r\n * Tests the e-mail validation with a dot at the end of the address.\r\n */\r\n@Test\r\nvoid testEmailWithDotEnd() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"andy.noble@data-workshop.com.\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailWithNumericAddress",
  "sourceCode" : "/**\r\n * Tests the email validation with numeric domains.\r\n */\r\n@Test\r\nvoid testEmailWithNumericAddress() throws ValidatorException {\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"someone@[216.109.118.76]\");\r\n    valueTest(info, true);\r\n    info.setValue(\"someone@yahoo.com\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EmailTest.java",
  "methodName" : "testEmailWithSpaces",
  "sourceCode" : "/**\r\n * Tests the email validation with spaces.\r\n */\r\n@Test\r\nvoid testEmailWithSpaces() throws ValidatorException {\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"joeblow @apache.org\");\r\n    valueTest(info, false);\r\n    info.setValue(\"joeblow@ apache.org\");\r\n    valueTest(info, false);\r\n    info.setValue(\" joeblow@apache.org\");\r\n    valueTest(info, false);\r\n    info.setValue(\"joeblow@apache.org \");\r\n    valueTest(info, false);\r\n    info.setValue(\"joe blow@apache.org \");\r\n    valueTest(info, false);\r\n    info.setValue(\"joeblow@apa che.org \");\r\n    valueTest(info, false);\r\n    info.setValue(\"\\\"joe blow\\\"@apache.org\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EntityImportTest.java",
  "methodName" : "testEntityImport",
  "sourceCode" : "/**\r\n * Tests the entity import loading the {@code byteForm} form.\r\n */\r\n@Test\r\nvoid testEntityImport() throws Exception {\r\n    final URL url = getClass().getResource(\"EntityImportTest-config.xml\");\r\n    final ValidatorResources resources = new ValidatorResources(url.toExternalForm());\r\n    assertNotNull(resources.getForm(Locale.getDefault(), \"byteForm\"), \"Form should be found\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\EntityImportTest.java",
  "methodName" : "testParseURL",
  "sourceCode" : "/**\r\n * Tests loading ValidatorResources from a URL\r\n */\r\n@Test\r\nvoid testParseURL() throws Exception {\r\n    final URL url = getClass().getResource(\"EntityImportTest-config.xml\");\r\n    final ValidatorResources resources = new ValidatorResources(url);\r\n    assertNotNull(resources.getForm(Locale.getDefault(), \"byteForm\"), \"Form should be found\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ExceptionTest.java",
  "methodName" : "testValidatorException",
  "sourceCode" : "/**\r\n * Tests handling of checked exceptions - should become ValidatorExceptions.\r\n */\r\n@Test\r\nvoid testValidatorException() {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"VALIDATOR\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, info);\r\n    // Get results of the validation which can throw ValidatorException\r\n    final Exception expected = assertThrows(ValidatorException.class, validator::validate);\r\n    assertEquals(\"VALIDATOR-EXCEPTION\", expected.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ExtensionTest.java",
  "methodName" : "testOrder",
  "sourceCode" : "/**\r\n * Tests if the order is maintained when extending a form. Parent form fields should preceed self form fields, except if we override the rules.\r\n */\r\n@Test\r\nvoid testOrder() {\r\n    final Form form = resources.getForm(ValidatorResources.defaultLocale, FORM_KEY);\r\n    final Form form2 = resources.getForm(ValidatorResources.defaultLocale, FORM_KEY2);\r\n    assertNotNull(form, FORM_KEY + \" is null.\");\r\n    assertEquals(2, form.getFields().size(), \"There should only be 2 fields in \" + FORM_KEY);\r\n    assertNotNull(form2, FORM_KEY2 + \" is null.\");\r\n    assertEquals(2, form2.getFields().size(), \"There should only be 2 fields in \" + FORM_KEY2);\r\n    // get the first field\r\n    Field fieldFirstName = form.getFields().get(0);\r\n    // get the second field\r\n    Field fieldLastName = form.getFields().get(1);\r\n    assertEquals(\"firstName\", fieldFirstName.getKey(), \"firstName in \" + FORM_KEY + \" should be the first in the list\");\r\n    assertEquals(\"lastName\", fieldLastName.getKey(), \"lastName in \" + FORM_KEY + \" should be the first in the list\");\r\n    //     get the second field\r\n    fieldLastName = form2.getFields().get(0);\r\n    // get the first field\r\n    fieldFirstName = form2.getFields().get(1);\r\n    assertEquals(\"firstName\", fieldFirstName.getKey(), \"firstName in \" + FORM_KEY2 + \" should be the first in the list\");\r\n    assertEquals(\"lastName\", fieldLastName.getKey(), \"lastName in \" + FORM_KEY2 + \" should be the first in the list\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ExtensionTest.java",
  "methodName" : "testOverrideRule",
  "sourceCode" : "/**\r\n * Tests if we can override a rule. We \"can\" override a rule if the message shown when the firstName required test fails and the lastName test is null.\r\n */\r\n@Test\r\nvoid testOverrideRule() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setLastName(\"Smith\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY2);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertEquals(CHECK_MSG_KEY, firstNameResult.field.getArg(0).getKey(), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have '\" + CHECK_MSG_KEY + \" as a key.\");\r\n    assertNull(lastNameResult, \"Last Name ValidatorResult should be null.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ExtensionTest.java",
  "methodName" : "testRequired",
  "sourceCode" : "/**\r\n * Tests the required validation failure.\r\n */\r\n@Test\r\nvoid testRequired() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    // throws ValidatorException,\r\n    // but we aren't catching for testing\r\n    // since no validation methods we use\r\n    // throw this\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ExtensionTest.java",
  "methodName" : "testRequiredFirstName",
  "sourceCode" : "/**\r\n * Tests the required validation for first name.\r\n */\r\n@Test\r\nvoid testRequiredFirstName() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Joe\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ExtensionTest.java",
  "methodName" : "testRequiredFirstNameBlank",
  "sourceCode" : "/**\r\n * Tests the required validation for first name if it is blank.\r\n */\r\n@Test\r\nvoid testRequiredFirstNameBlank() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ExtensionTest.java",
  "methodName" : "testRequiredLastName",
  "sourceCode" : "/**\r\n * Tests the required validation for last name.\r\n */\r\n@Test\r\nvoid testRequiredLastName() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setLastName(\"Smith\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ExtensionTest.java",
  "methodName" : "testRequiredLastNameBlank",
  "sourceCode" : "/**\r\n * Tests the required validation for last name if it is blank.\r\n */\r\n@Test\r\nvoid testRequiredLastNameBlank() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setLastName(\"\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ExtensionTest.java",
  "methodName" : "testRequiredName",
  "sourceCode" : "/**\r\n * Tests the required validation for first and last name.\r\n */\r\n@Test\r\nvoid testRequiredName() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Joe\");\r\n    name.setLastName(\"Smith\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FieldTest.java",
  "methodName" : "testDefaultOnePosition",
  "sourceCode" : "/**\r\n * test Field with only 'default' arguments, position specified for one argument\r\n */\r\n@Test\r\nvoid testDefaultOnePosition() {\r\n    field.addArg(createArg(\"default-position-0\"));\r\n    field.addArg(createArg(\"default-position-2\", 2));\r\n    field.addArg(createArg(\"default-position-3\"));\r\n    assertEquals(4, field.getArgs(\"required\").length, \"testDefaultOnePosition(1) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testDefaultOnePosition(2) \");\r\n    assertNull(field.getArg(\"required\", 1), \"testDefaultOnePosition(3) \");\r\n    assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testDefaultOnePosition(4) \");\r\n    assertEquals(\"default-position-3\", field.getArg(\"required\", 3).getKey(), \"testDefaultOnePosition(5) \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FieldTest.java",
  "methodName" : "testDefaultPositionImplied",
  "sourceCode" : "/**\r\n * test Field with only 'default' arguments, no positions specified.\r\n */\r\n@Test\r\nvoid testDefaultPositionImplied() {\r\n    field.addArg(createArg(\"default-position-0\"));\r\n    field.addArg(createArg(\"default-position-1\"));\r\n    field.addArg(createArg(\"default-position-2\"));\r\n    assertEquals(3, field.getArgs(\"required\").length, \"testDefaultPositionImplied(1) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testDefaultPositionImplied(2) \");\r\n    assertEquals(\"default-position-1\", field.getArg(\"required\", 1).getKey(), \"testDefaultPositionImplied(3) \");\r\n    assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testDefaultPositionImplied(4) \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FieldTest.java",
  "methodName" : "testDefaultSomePositions",
  "sourceCode" : "/**\r\n * test Field with only 'default' arguments, some position specified.\r\n */\r\n@Test\r\nvoid testDefaultSomePositions() {\r\n    field.addArg(createArg(\"default-position-0\"));\r\n    field.addArg(createArg(\"default-position-2\", 2));\r\n    field.addArg(createArg(\"default-position-3\"));\r\n    field.addArg(createArg(\"default-position-1\", 1));\r\n    assertEquals(4, field.getArgs(\"required\").length, \"testDefaultSomePositions(1) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testDefaultSomePositions(2) \");\r\n    assertEquals(\"default-position-1\", field.getArg(\"required\", 1).getKey(), \"testDefaultSomePositions(3) \");\r\n    assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testDefaultSomePositions(4) \");\r\n    assertEquals(\"default-position-3\", field.getArg(\"required\", 3).getKey(), \"testDefaultSomePositions(5) \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FieldTest.java",
  "methodName" : "testDefaultUsingPositions",
  "sourceCode" : "/**\r\n * test Field with only 'default' arguments, positions specified.\r\n */\r\n@Test\r\nvoid testDefaultUsingPositions() {\r\n    field.addArg(createArg(\"default-position-1\", 1));\r\n    field.addArg(createArg(\"default-position-0\", 0));\r\n    field.addArg(createArg(\"default-position-2\", 2));\r\n    assertEquals(3, field.getArgs(\"required\").length, \"testDefaultUsingPositions(1) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testDefaultUsingPositions(2) \");\r\n    assertEquals(\"default-position-1\", field.getArg(\"required\", 1).getKey(), \"testDefaultUsingPositions(3) \");\r\n    assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testDefaultUsingPositions(4) \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FieldTest.java",
  "methodName" : "testEmptyArgs",
  "sourceCode" : "/**\r\n * test Field with no arguments\r\n */\r\n@Test\r\nvoid testEmptyArgs() {\r\n    assertEquals(0, field.getArgs(\"required\").length, \"Empty Args(1) \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FieldTest.java",
  "methodName" : "testOverridePositionImplied",
  "sourceCode" : "/**\r\n * test Field with a 'default' argument overridden without positions specified.\r\n */\r\n@Test\r\nvoid testOverridePositionImplied() {\r\n    field.addArg(createArg(\"default-position-0\"));\r\n    field.addArg(createArg(\"required-position-1\", \"required\"));\r\n    field.addArg(createArg(\"required-position-2\", \"required\"));\r\n    field.addArg(createArg(\"mask-position-1\", \"mask\"));\r\n    // use 'required' as name\r\n    assertEquals(3, field.getArgs(\"required\").length, \"testOverridePositionImplied(1) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testOverridePositionImplied(2) \");\r\n    assertEquals(\"required-position-1\", field.getArg(\"required\", 1).getKey(), \"testOverridePositionImplied(3) \");\r\n    assertEquals(\"required-position-2\", field.getArg(\"required\", 2).getKey(), \"testOverridePositionImplied(4) \");\r\n    // use 'mask' as name\r\n    assertEquals(3, field.getArgs(\"mask\").length, \"testOverridePositionImplied(5) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"mask\", 0).getKey(), \"testOverridePositionImplied(6) \");\r\n    assertEquals(\"mask-position-1\", field.getArg(\"mask\", 1).getKey(), \"testOverridePositionImplied(7) \");\r\n    assertNull(field.getArg(\"mask\", 2), \"testOverridePositionImplied(8) \");\r\n    // Get Defaults\r\n    assertEquals(\"default-position-0\", field.getArg(0).getKey(), \"testOverridePositionImplied(9) \");\r\n    assertNull(field.getArg(1), \"testOverridePositionImplied(10) \");\r\n    assertNull(field.getArg(2), \"testOverridePositionImplied(11) \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FieldTest.java",
  "methodName" : "testOverrideSomePosition",
  "sourceCode" : "/**\r\n * test Field with a 'default' argument overridden with some positions specified\r\n */\r\n@Test\r\nvoid testOverrideSomePosition() {\r\n    field.addArg(createArg(\"default-position-0\"));\r\n    field.addArg(createArg(\"default-position-1\"));\r\n    field.addArg(createArg(\"default-position-2\"));\r\n    field.addArg(createArg(\"required-position-1\", \"required\", 1));\r\n    field.addArg(createArg(\"required-position-2\", \"required\"));\r\n    field.addArg(createArg(\"mask-position-3\", \"mask\"));\r\n    // use 'required' as name\r\n    assertEquals(4, field.getArgs(\"required\").length, \"testOverrideSomePosition(1) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testOverrideSomePosition(2) \");\r\n    assertEquals(\"required-position-1\", field.getArg(\"required\", 1).getKey(), \"testOverrideSomePosition(3) \");\r\n    assertEquals(\"required-position-2\", field.getArg(\"required\", 2).getKey(), \"testOverrideSomePosition(4) \");\r\n    assertNull(field.getArg(\"required\", 3), \"testOverrideSomePosition(5) \");\r\n    // use 'mask' as name\r\n    assertEquals(4, field.getArgs(\"mask\").length, \"testOverrideSomePosition(6) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"mask\", 0).getKey(), \"testOverrideSomePosition(7) \");\r\n    assertEquals(\"default-position-1\", field.getArg(\"mask\", 1).getKey(), \"testOverrideSomePosition(8) \");\r\n    assertEquals(\"default-position-2\", field.getArg(\"mask\", 2).getKey(), \"testOverrideSomePosition(9) \");\r\n    assertEquals(\"mask-position-3\", field.getArg(\"mask\", 3).getKey(), \"testOverrideSomePosition(10) \");\r\n    // Get Defaults\r\n    assertEquals(\"default-position-0\", field.getArg(0).getKey(), \"testOverrideSomePosition(11) \");\r\n    assertEquals(\"default-position-1\", field.getArg(1).getKey(), \"testOverrideSomePosition(12) \");\r\n    assertEquals(\"default-position-2\", field.getArg(2).getKey(), \"testOverrideSomePosition(13) \");\r\n    assertNull(field.getArg(3), \"testOverrideSomePosition(14) \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FieldTest.java",
  "methodName" : "testOverrideUsingPositionA",
  "sourceCode" : "/**\r\n * test Field with a 'default' argument overridden using 'position' property\r\n */\r\n@Test\r\nvoid testOverrideUsingPositionA() {\r\n    field.addArg(createArg(\"default-position-0\"));\r\n    field.addArg(createArg(\"default-position-1\"));\r\n    field.addArg(createArg(\"default-position-2\"));\r\n    field.addArg(createArg(\"required-position-1\", \"required\", 1));\r\n    // use 'required' as name\r\n    assertEquals(3, field.getArgs(\"required\").length, \"testOverrideUsingPositionA(1) \");\r\n    assertEquals(\"required-position-1\", field.getArg(\"required\", 1).getKey(), \"testOverrideUsingPositionA(2) \");\r\n    // use 'mask' as name\r\n    assertEquals(3, field.getArgs(\"mask\").length, \"testOverrideUsingPositionA(3) \");\r\n    assertEquals(\"default-position-1\", field.getArg(\"mask\", 1).getKey(), \"testOverrideUsingPositionA(4) \");\r\n    // Get Default\r\n    assertEquals(\"default-position-1\", field.getArg(1).getKey(), \"testOverrideUsingPositionA(5) \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FieldTest.java",
  "methodName" : "testOverrideUsingPositionB",
  "sourceCode" : "/**\r\n * test Field with a 'default' argument overridden using 'position' property\r\n */\r\n@Test\r\nvoid testOverrideUsingPositionB() {\r\n    field.addArg(createArg(\"required-position-3\", \"required\", 3));\r\n    field.addArg(createArg(\"required-position-1\", \"required\", 1));\r\n    field.addArg(createArg(\"default-position-0\"));\r\n    field.addArg(createArg(\"default-position-1\"));\r\n    field.addArg(createArg(\"default-position-2\"));\r\n    // use 'required' as name\r\n    assertEquals(4, field.getArgs(\"required\").length, \"testOverrideUsingPositionB(1) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testOverrideUsingPositionB(2) \");\r\n    assertEquals(\"required-position-1\", field.getArg(\"required\", 1).getKey(), \"testOverrideUsingPositionB(3) \");\r\n    assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testOverrideUsingPositionB(4) \");\r\n    assertEquals(\"required-position-3\", field.getArg(\"required\", 3).getKey(), \"testOverrideUsingPositionB(5) \");\r\n    // use 'mask' as name\r\n    assertEquals(4, field.getArgs(\"mask\").length, \"testOverrideUsingPositionB(6) \");\r\n    assertEquals(\"default-position-0\", field.getArg(\"mask\", 0).getKey(), \"testOverrideUsingPositionB(6) \");\r\n    assertEquals(\"default-position-1\", field.getArg(\"mask\", 1).getKey(), \"testOverrideUsingPositionB(7) \");\r\n    assertEquals(\"default-position-2\", field.getArg(\"mask\", 2).getKey(), \"testOverrideUsingPositionB(8) \");\r\n    assertNull(field.getArg(\"mask\", 3), \"testOverrideUsingPositionB(9) \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FloatTest.java",
  "methodName" : "testFloat",
  "sourceCode" : "/**\r\n * Tests the float validation.\r\n */\r\n@Test\r\nvoid testFloat() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"0\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FloatTest.java",
  "methodName" : "testFloatFailure",
  "sourceCode" : "/**\r\n * Tests the float validation failure.\r\n */\r\n@Test\r\nvoid testFloatFailure() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FloatTest.java",
  "methodName" : "testFloatMax",
  "sourceCode" : "/**\r\n * Tests the float validation.\r\n */\r\n@Test\r\nvoid testFloatMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Float.toString(Float.MAX_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\FloatTest.java",
  "methodName" : "testFloatMin",
  "sourceCode" : "/**\r\n * Tests the float validation.\r\n */\r\n@Test\r\nvoid testFloatMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Float.toString(Float.MIN_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\GenericTypeValidatorTest.java",
  "methodName" : "testFRLocale",
  "sourceCode" : "/**\r\n * Tests the fr locale.\r\n */\r\n@Test\r\nvoid testFRLocale() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final TypeBean info = new TypeBean();\r\n    info.setByte(\"12\");\r\n    info.setShort(\"-129\");\r\n    info.setInteger(\"1443\");\r\n    info.setLong(\"88000\");\r\n    info.setFloat(\"12,1555\");\r\n    info.setDouble(\"129,1551511111\");\r\n    info.setDate(\"21/12/2010\");\r\n    final Map<String, ?> map = localeTest(info, Locale.FRENCH);\r\n    assertEquals(12, ((Float) map.get(\"float\")).intValue(), \"float value not correct\");\r\n    assertEquals(129, ((Double) map.get(\"double\")).intValue(), \"double value not correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\GenericTypeValidatorTest.java",
  "methodName" : "testType",
  "sourceCode" : "/**\r\n * Tests the byte validation.\r\n */\r\n@Test\r\nvoid testType() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final TypeBean info = new TypeBean();\r\n    info.setByte(\"12\");\r\n    info.setShort(\"129\");\r\n    info.setInteger(\"-144\");\r\n    info.setLong(\"88000\");\r\n    info.setFloat(\"12.1555f\");\r\n    info.setDouble(\"129.1551511111d\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, info);\r\n    // Get results of the validation.\r\n    // throws ValidatorException,\r\n    // but we aren't catching for testing\r\n    // since no validation methods we use\r\n    // throw this\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final Map<String, ?> hResultValues = results.getResultValueMap();\r\n    assertInstanceOf(Byte.class, hResultValues.get(\"byte\"), \"Expecting byte result to be an instance of Byte.\");\r\n    assertInstanceOf(Short.class, hResultValues.get(\"short\"), \"Expecting short result to be an instance of Short.\");\r\n    assertInstanceOf(Integer.class, hResultValues.get(\"integer\"), \"Expecting integer result to be an instance of Integer.\");\r\n    assertInstanceOf(Long.class, hResultValues.get(\"long\"), \"Expecting long result to be an instance of Long.\");\r\n    assertInstanceOf(Float.class, hResultValues.get(\"float\"), \"Expecting float result to be an instance of Float.\");\r\n    assertInstanceOf(Double.class, hResultValues.get(\"double\"), \"Expecting double result to be an instance of Double.\");\r\n    for (final String key : hResultValues.keySet()) {\r\n        final Object value = hResultValues.get(key);\r\n        assertNotNull(value, \"value ValidatorResults.getResultValueMap() should not be null.\");\r\n    }\r\n    // ValidatorResult result = results.getValidatorResult(\"value\");\r\n    // assertNotNull(ACTION + \" value ValidatorResult should not be null.\", result);\r\n    // assertTrue(ACTION + \" value ValidatorResult should contain the '\" + ACTION +\"' action.\", result.containsAction(ACTION));\r\n    // assertTrue(ACTION + \" value ValidatorResult for the '\" + ACTION +\"' action should have \" + (passed ? \"passed\" : \"failed\") + \".\", (passed ?\r\n    // result.isValid(ACTION) : !result.isValid(ACTION)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\GenericTypeValidatorTest.java",
  "methodName" : "testUSLocale",
  "sourceCode" : "/**\r\n * Tests the us locale\r\n */\r\n@Test\r\nvoid testUSLocale() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final TypeBean info = new TypeBean();\r\n    info.setByte(\"12\");\r\n    info.setShort(\"129\");\r\n    info.setInteger(\"-144\");\r\n    info.setLong(\"88000\");\r\n    info.setFloat(\"12.1555\");\r\n    info.setDouble(\"129.1551511111\");\r\n    info.setDate(\"12/21/2010\");\r\n    localeTest(info, Locale.US);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\GenericValidatorTest.java",
  "methodName" : "testMaxLength",
  "sourceCode" : "@Test\r\nvoid testMaxLength() {\r\n    // Use 0 for line end length\r\n    assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 4, 0), \"Max=4 End=0\");\r\n    assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 5, 0), \"Max=5 End=0\");\r\n    assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 6, 0), \"Max=6 End=0\");\r\n    assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 7, 0), \"Max=7 End=0\");\r\n    // Use 1 for line end length\r\n    assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 4, 1), \"Max=4 End=1\");\r\n    assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 5, 1), \"Max=5 End=1\");\r\n    assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 6, 1), \"Max=6 End=1\");\r\n    assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 7, 1), \"Max=7 End=1\");\r\n    // Use 2 for line end length\r\n    assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 4, 2), \"Max=4 End=2\");\r\n    assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 5, 2), \"Max=5 End=2\");\r\n    assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 6, 2), \"Max=6 End=2\");\r\n    assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 7, 2), \"Max=7 End=2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\GenericValidatorTest.java",
  "methodName" : "testMinLength",
  "sourceCode" : "@Test\r\nvoid testMinLength() {\r\n    // Use 0 for line end length\r\n    assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 5, 0), \"Min=5 End=0\");\r\n    assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 6, 0), \"Min=6 End=0\");\r\n    assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 7, 0), \"Min=7 End=0\");\r\n    assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 8, 0), \"Min=8 End=0\");\r\n    // Use 1 for line end length\r\n    assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 5, 1), \"Min=5 End=1\");\r\n    assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 6, 1), \"Min=6 End=1\");\r\n    assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 7, 1), \"Min=7 End=1\");\r\n    assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 8, 1), \"Min=8 End=1\");\r\n    // Use 2 for line end length\r\n    assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 5, 2), \"Min=5 End=2\");\r\n    assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 6, 2), \"Min=6 End=2\");\r\n    assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 7, 2), \"Min=7 End=2\");\r\n    assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 8, 2), \"Min=8 End=2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\IntegerTest.java",
  "methodName" : "testInt",
  "sourceCode" : "/**\r\n * Tests the int validation.\r\n */\r\n@Test\r\nvoid testInt() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"0\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\IntegerTest.java",
  "methodName" : "testIntBeyondMax",
  "sourceCode" : "/**\r\n * Tests the int validation failure.\r\n */\r\n@Test\r\nvoid testIntBeyondMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Integer.MAX_VALUE + \"1\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\IntegerTest.java",
  "methodName" : "testIntBeyondMin",
  "sourceCode" : "/**\r\n * Tests the int validation failure.\r\n */\r\n@Test\r\nvoid testIntBeyondMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Integer.MIN_VALUE + \"1\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\IntegerTest.java",
  "methodName" : "testIntegerMax",
  "sourceCode" : "/**\r\n * Tests the int validation.\r\n */\r\n@Test\r\nvoid testIntegerMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Integer.toString(Integer.MAX_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\IntegerTest.java",
  "methodName" : "testIntFailure",
  "sourceCode" : "/**\r\n * Tests the int validation failure.\r\n */\r\n@Test\r\nvoid testIntFailure() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\IntegerTest.java",
  "methodName" : "testIntMin",
  "sourceCode" : "/**\r\n * Tests the int validation.\r\n */\r\n@Test\r\nvoid testIntMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Integer.toString(Integer.MIN_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ISBNValidatorTest.java",
  "methodName" : "testIsValid",
  "sourceCode" : "@Test\r\nvoid testIsValid() throws Exception {\r\n    final ISBNValidator validator = new ISBNValidator();\r\n    assertFalse(validator.isValid(null));\r\n    assertFalse(validator.isValid(\"\"));\r\n    assertFalse(validator.isValid(\"1\"));\r\n    assertFalse(validator.isValid(\"12345678901234\"));\r\n    assertFalse(validator.isValid(\"dsasdsadsads\"));\r\n    assertFalse(validator.isValid(\"535365\"));\r\n    assertFalse(validator.isValid(\"I love sparrows!\"));\r\n    assertFalse(validator.isValid(\"--1 930110 99 5\"));\r\n    assertFalse(validator.isValid(\"1 930110 99 5--\"));\r\n    assertFalse(validator.isValid(\"1 930110-99 5-\"));\r\n    assertTrue(validator.isValid(VALID_ISBN_RAW));\r\n    assertTrue(validator.isValid(VALID_ISBN_DASHES));\r\n    assertTrue(validator.isValid(VALID_ISBN_SPACES));\r\n    assertTrue(validator.isValid(VALID_ISBN_X));\r\n    assertFalse(validator.isValid(INVALID_ISBN));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LocaleTest.java",
  "methodName" : "testLocale1",
  "sourceCode" : "/**\r\n * See what happens when we try to validate with a Locale, Country and variant. Also check if the added locale validation field is getting used.\r\n *\r\n * @throws ValidatorException If something goes wrong\r\n */\r\n@Test\r\nvoid testLocale1() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    name.setLastName(\"\");\r\n    valueTest(name, new Locale(\"en\", \"US\", \"TEST1\"), false, false, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LocaleTest.java",
  "methodName" : "testLocale2",
  "sourceCode" : "/**\r\n * See what happens when we try to validate with a Locale, Country and variant\r\n *\r\n * @throws ValidatorException If something goes wrong\r\n */\r\n@Test\r\nvoid testLocale2() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    name.setLastName(\"\");\r\n    valueTest(name, new Locale(\"en\", \"US\", \"TEST2\"), true, false, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LocaleTest.java",
  "methodName" : "testLocale3",
  "sourceCode" : "/**\r\n * See what happens when we try to validate with a Locale, Country and variant\r\n *\r\n * @throws ValidatorException If something goes wrong\r\n */\r\n@Test\r\nvoid testLocale3() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    name.setLastName(\"\");\r\n    valueTest(name, new Locale(\"en\", \"UK\"), false, true, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LocaleTest.java",
  "methodName" : "testLocale4",
  "sourceCode" : "/**\r\n * See if a locale of en_UK_TEST falls back to en_UK instead of default form set. Bug #16920 states that this isn't happening, even though it is passing\r\n * this test. see #16920.\r\n *\r\n * @throws ValidatorException If something goes wrong\r\n */\r\n@Test\r\nvoid testLocale4() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    name.setLastName(\"\");\r\n    valueTest(name, new Locale(\"en\", \"UK\", \"TEST\"), false, true, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LocaleTest.java",
  "methodName" : "testLocale5",
  "sourceCode" : "/**\r\n * See if a locale of language=en falls back to default form set.\r\n *\r\n * @throws ValidatorException If something goes wrong\r\n */\r\n@Test\r\nvoid testLocale5() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    name.setLastName(\"\");\r\n    valueTest(name, new Locale(\"en\", \"\"), false, false, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LongTest.java",
  "methodName" : "testLong",
  "sourceCode" : "/**\r\n * Tests the long validation.\r\n */\r\n@Test\r\nvoid testLong() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(\"0\");\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LongTest.java",
  "methodName" : "testLongBeyondMax",
  "sourceCode" : "/**\r\n * Tests the long validation failure.\r\n */\r\n@Test\r\nvoid testLongBeyondMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Long.MAX_VALUE + \"1\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LongTest.java",
  "methodName" : "testLongBeyondMin",
  "sourceCode" : "/**\r\n * Tests the long validation failure.\r\n */\r\n@Test\r\nvoid testLongBeyondMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Long.MIN_VALUE + \"1\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LongTest.java",
  "methodName" : "testLongFailure",
  "sourceCode" : "/**\r\n * Tests the long validation failure.\r\n */\r\n@Test\r\nvoid testLongFailure() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LongTest.java",
  "methodName" : "testLongMax",
  "sourceCode" : "/**\r\n * Tests the long validation.\r\n */\r\n@Test\r\nvoid testLongMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Long.toString(Long.MAX_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\LongTest.java",
  "methodName" : "testLongMin",
  "sourceCode" : "/**\r\n * Tests the long validation.\r\n */\r\n@Test\r\nvoid testLongMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Long.toString(Long.MIN_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleConfigFilesTest.java",
  "methodName" : "testBothBlank",
  "sourceCode" : "/**\r\n * With nothing provided, we should fail both because both are required.\r\n */\r\n@Test\r\nvoid testBothBlank() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    // throws ValidatorException,\r\n    // but we aren't catching for testing\r\n    // since no validation methods we use\r\n    // throw this\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult);\r\n    assertTrue(firstNameResult.containsAction(ACTION));\r\n    assertFalse(firstNameResult.isValid(ACTION));\r\n    assertNotNull(lastNameResult);\r\n    assertTrue(lastNameResult.containsAction(ACTION));\r\n    assertFalse(lastNameResult.isValid(ACTION));\r\n    assertFalse(lastNameResult.containsAction(\"int\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleConfigFilesTest.java",
  "methodName" : "testMergedConfig",
  "sourceCode" : "/**\r\n * Check the forms and constants from different config files have been merged into the same FormSet.\r\n */\r\n@Test\r\nvoid testMergedConfig() {\r\n    // *********** Default Locale *******************\r\n    // Check the form from the first config file exists\r\n    final Form form1 = resources.getForm(\"\", \"\", \"\", \"testForm1\");\r\n    assertNotNull(form1, \"Form 'testForm1' not found\");\r\n    // Check the form from the second config file exists\r\n    final Form form2 = resources.getForm(\"\", \"\", \"\", \"testForm2\");\r\n    assertNotNull(form2, \"Form 'testForm2' not found\");\r\n    // Check the Constants for the form from the first config file\r\n    final Field field1 = form1.getField(\"testProperty1\");\r\n    assertEquals(\"testConstValue1\", field1.getVarValue(\"var11\"), \"testProperty1 - const 1\");\r\n    assertEquals(\"testConstValue2\", field1.getVarValue(\"var12\"), \"testProperty1 - const 2\");\r\n    // Check the Constants for the form from the second config file\r\n    final Field field2 = form2.getField(\"testProperty2\");\r\n    assertEquals(\"testConstValue1\", field2.getVarValue(\"var21\"), \"testProperty2 - const 1\");\r\n    assertEquals(\"testConstValue2\", field2.getVarValue(\"var22\"), \"testProperty2 - const 2\");\r\n    // *********** 'fr' locale *******************\r\n    // Check the form from the first config file exists\r\n    final Form form1Fr = resources.getForm(\"fr\", \"\", \"\", \"testForm1_fr\");\r\n    assertNotNull(form1Fr, \"Form 'testForm1_fr' not found\");\r\n    // Check the form from the second config file exists\r\n    final Form form2Fr = resources.getForm(\"fr\", \"\", \"\", \"testForm2_fr\");\r\n    assertNotNull(form2Fr, \"Form 'testForm2_fr' not found\");\r\n    // Check the Constants for the form from the first config file\r\n    final Field field1Fr = form1Fr.getField(\"testProperty1_fr\");\r\n    assertEquals(\"testConstValue1_fr\", field1Fr.getVarValue(\"var11_fr\"), \"testProperty1_fr - const 1\");\r\n    assertEquals(\"testConstValue2_fr\", field1Fr.getVarValue(\"var12_fr\"), \"testProperty1_fr - const 2\");\r\n    // Check the Constants for the form from the second config file\r\n    final Field field2Fr = form2Fr.getField(\"testProperty2_fr\");\r\n    assertEquals(\"testConstValue1_fr\", field2Fr.getVarValue(\"var21_fr\"), \"testProperty2_fr - const 1\");\r\n    assertEquals(\"testConstValue2_fr\", field2Fr.getVarValue(\"var22_fr\"), \"testProperty2_fr - const 2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleConfigFilesTest.java",
  "methodName" : "testRequiredFirstNameBlankLastNameShort",
  "sourceCode" : "/**\r\n * If the first name fails required, and the second test fails int, we should get two errors.\r\n */\r\n@Test\r\nvoid testRequiredFirstNameBlankLastNameShort() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    name.setLastName(\"Test\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult);\r\n    assertTrue(firstNameResult.containsAction(ACTION));\r\n    assertFalse(firstNameResult.isValid(ACTION));\r\n    assertNotNull(lastNameResult);\r\n    assertTrue(lastNameResult.containsAction(\"int\"));\r\n    assertFalse(lastNameResult.isValid(\"int\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleConfigFilesTest.java",
  "methodName" : "testRequiredLastNameLong",
  "sourceCode" : "/**\r\n * If first name is ok and last name is ok and is an int, no errors.\r\n */\r\n@Test\r\nvoid testRequiredLastNameLong() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Joe\");\r\n    name.setLastName(\"12345678\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult);\r\n    assertTrue(firstNameResult.containsAction(ACTION));\r\n    assertTrue(firstNameResult.isValid(ACTION));\r\n    assertNotNull(lastNameResult);\r\n    assertTrue(lastNameResult.containsAction(\"int\"));\r\n    assertTrue(lastNameResult.isValid(\"int\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleConfigFilesTest.java",
  "methodName" : "testRequiredLastNameShort",
  "sourceCode" : "/**\r\n * If the first name is there, and the last name fails int, we should get one error.\r\n */\r\n@Test\r\nvoid testRequiredLastNameShort() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Test\");\r\n    name.setLastName(\"Test\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult);\r\n    assertTrue(firstNameResult.containsAction(ACTION));\r\n    assertTrue(firstNameResult.isValid(ACTION));\r\n    assertNotNull(lastNameResult);\r\n    assertTrue(lastNameResult.containsAction(\"int\"));\r\n    assertFalse(lastNameResult.isValid(\"int\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleTest.java",
  "methodName" : "testBothBlank",
  "sourceCode" : "/**\r\n * With nothing provided, we should fail both because both are required.\r\n */\r\n@Test\r\nvoid testBothBlank() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    // throws ValidatorException,\r\n    // but we aren't catching for testing\r\n    // since no validation methods we use\r\n    // throw this\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertFalse(lastNameResult.containsAction(\"int\"), \"Last Name ValidatorResults should not contain the 'int' action.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleTest.java",
  "methodName" : "testFailingFirstDependentValidator",
  "sourceCode" : "/**\r\n * If middle name is not there, then the required dependent test should fail. No other tests should run\r\n *\r\n * @throws ValidatorException\r\n */\r\n@Test\r\nvoid testFailingFirstDependentValidator() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult middleNameResult = results.getValidatorResult(\"middleName\");\r\n    assertNotNull(middleNameResult, \"Middle Name ValidatorResult should not be null.\");\r\n    assertTrue(middleNameResult.containsAction(\"required\"), \"Middle Name ValidatorResult should contain the 'required' action.\");\r\n    assertFalse(middleNameResult.isValid(\"required\"), \"Middle Name ValidatorResult for the 'required' action should have failed\");\r\n    assertFalse(middleNameResult.containsAction(\"int\"), \"Middle Name ValidatorResult should not contain the 'int' action.\");\r\n    assertFalse(middleNameResult.containsAction(\"positive\"), \"Middle Name ValidatorResult should not contain the 'positive' action.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleTest.java",
  "methodName" : "testFailingNextDependentValidator",
  "sourceCode" : "/**\r\n * If middle name is there but not int, then the required dependent test should pass, but the int dependent test should fail. No other tests should run.\r\n *\r\n * @throws ValidatorException\r\n */\r\n@Test\r\nvoid testFailingNextDependentValidator() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setMiddleName(\"TEST\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult middleNameResult = results.getValidatorResult(\"middleName\");\r\n    assertNotNull(middleNameResult, \"Middle Name ValidatorResult should not be null.\");\r\n    assertTrue(middleNameResult.containsAction(\"required\"), \"Middle Name ValidatorResult should contain the 'required' action.\");\r\n    assertTrue(middleNameResult.isValid(\"required\"), \"Middle Name ValidatorResult for the 'required' action should have passed\");\r\n    assertTrue(middleNameResult.containsAction(\"int\"), \"Middle Name ValidatorResult should contain the 'int' action.\");\r\n    assertFalse(middleNameResult.isValid(\"int\"), \"Middle Name ValidatorResult for the 'int' action should have failed\");\r\n    assertFalse(middleNameResult.containsAction(\"positive\"), \"Middle Name ValidatorResult should not contain the 'positive' action.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleTest.java",
  "methodName" : "testPassingDependentsFailingMain",
  "sourceCode" : "/**\r\n * If middle name is there and a negative int, then the required and int dependent tests should pass, but the positive test should fail.\r\n *\r\n * @throws ValidatorException\r\n */\r\n@Test\r\nvoid testPassingDependentsFailingMain() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setMiddleName(\"-2534\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult middleNameResult = results.getValidatorResult(\"middleName\");\r\n    assertNotNull(middleNameResult, \"Middle Name ValidatorResult should not be null.\");\r\n    assertTrue(middleNameResult.containsAction(\"required\"), \"Middle Name ValidatorResult should contain the 'required' action.\");\r\n    assertTrue(middleNameResult.isValid(\"required\"), \"Middle Name ValidatorResult for the 'required' action should have passed\");\r\n    assertTrue(middleNameResult.containsAction(\"int\"), \"Middle Name ValidatorResult should contain the 'int' action.\");\r\n    assertTrue(middleNameResult.isValid(\"int\"), \"Middle Name ValidatorResult for the 'int' action should have passed\");\r\n    assertTrue(middleNameResult.containsAction(\"positive\"), \"Middle Name ValidatorResult should contain the 'positive' action.\");\r\n    assertFalse(middleNameResult.isValid(\"positive\"), \"Middle Name ValidatorResult for the 'positive' action should have failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleTest.java",
  "methodName" : "testPassingDependentsPassingMain",
  "sourceCode" : "/**\r\n * If middle name is there and a positive int, then the required and int dependent tests should pass, and the positive test should pass.\r\n *\r\n * @throws ValidatorException\r\n */\r\n@Test\r\nvoid testPassingDependentsPassingMain() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setMiddleName(\"2534\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult middleNameResult = results.getValidatorResult(\"middleName\");\r\n    assertNotNull(middleNameResult, \"Middle Name ValidatorResult should not be null.\");\r\n    assertTrue(middleNameResult.containsAction(\"required\"), \"Middle Name ValidatorResult should contain the 'required' action.\");\r\n    assertTrue(middleNameResult.isValid(\"required\"), \"Middle Name ValidatorResult for the 'required' action should have passed\");\r\n    assertTrue(middleNameResult.containsAction(\"int\"), \"Middle Name ValidatorResult should contain the 'int' action.\");\r\n    assertTrue(middleNameResult.isValid(\"int\"), \"Middle Name ValidatorResult for the 'int' action should have passed\");\r\n    assertTrue(middleNameResult.containsAction(\"positive\"), \"Middle Name ValidatorResult should contain the 'positive' action.\");\r\n    assertTrue(middleNameResult.isValid(\"positive\"), \"Middle Name ValidatorResult for the 'positive' action should have passed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleTest.java",
  "methodName" : "testRequiredFirstNameBlankLastNameShort",
  "sourceCode" : "/**\r\n * If the first name fails required, and the second test fails int, we should get two errors.\r\n */\r\n@Test\r\nvoid testRequiredFirstNameBlankLastNameShort() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    name.setLastName(\"Test\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(\"int\"), \"Last Name ValidatorResult should contain the 'int' action.\");\r\n    assertFalse(lastNameResult.isValid(\"int\"), \"Last Name ValidatorResult for the 'int' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleTest.java",
  "methodName" : "testRequiredLastNameLong",
  "sourceCode" : "/**\r\n * If first name is ok and last name is ok and is an int, no errors.\r\n */\r\n@Test\r\nvoid testRequiredLastNameLong() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Joe\");\r\n    name.setLastName(\"12345678\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(\"int\"), \"Last Name ValidatorResult should contain the 'int' action.\");\r\n    assertTrue(lastNameResult.isValid(\"int\"), \"Last Name ValidatorResult for the 'int' action should have passed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\MultipleTest.java",
  "methodName" : "testRequiredLastNameShort",
  "sourceCode" : "/**\r\n * If the first name is there, and the last name fails int, we should get one error.\r\n */\r\n@Test\r\nvoid testRequiredLastNameShort() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Test\");\r\n    name.setLastName(\"Test\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(\"int\"), \"Last Name ValidatorResult should contain the 'int' action.\");\r\n    assertFalse(lastNameResult.isValid(\"int\"), \"Last Name ValidatorResult for the 'int' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ParameterTest.java",
  "methodName" : "testAllValid",
  "sourceCode" : "/**\r\n * Test all validations ran and passed.\r\n */\r\n@Test\r\nvoid testAllValid() {\r\n    // Create bean to run test on.\r\n    final NameBean bean = createNameBean();\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, bean);\r\n    validator.setParameter(Validator.LOCALE_PARAM, Locale.getDefault());\r\n    // Get results of the validation.\r\n    try {\r\n        validator.validate();\r\n    } catch (final Exception e) {\r\n        fail(\"Validator.validate() threw \" + e);\r\n    }\r\n    assertParameterValue(validator, Validator.BEAN_PARAM, Object.class);\r\n    assertParameterValue(validator, Validator.FIELD_PARAM, Field.class);\r\n    assertParameterValue(validator, Validator.FORM_PARAM, Form.class);\r\n    assertParameterValue(validator, Validator.LOCALE_PARAM, Locale.class);\r\n    assertParameterValue(validator, Validator.VALIDATOR_ACTION_PARAM, ValidatorAction.class);\r\n    assertParameterValue(validator, Validator.VALIDATOR_PARAM, Validator.class);\r\n    assertParameterValue(validator, Validator.VALIDATOR_RESULTS_PARAM, ValidatorResults.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredIfTest.java",
  "methodName" : "testRequired",
  "sourceCode" : "/**\r\n * With nothing provided, we should pass since the fields only fail on null if the other field is non-blank.\r\n */\r\n@Test\r\nvoid testRequired() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    // throws ValidatorException,\r\n    // but we aren't catching for testing\r\n    // since no validation methods we use\r\n    // throw this\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredIfTest.java",
  "methodName" : "testRequiredFirstName",
  "sourceCode" : "/**\r\n * Tests the required validation for last name.\r\n */\r\n@Test\r\nvoid testRequiredFirstName() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Test\");\r\n    name.setLastName(\"Test\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredIfTest.java",
  "methodName" : "testRequiredFirstNameBlank",
  "sourceCode" : "/**\r\n * Tests the required validation for first name if it is blank.\r\n */\r\n@Test\r\nvoid testRequiredFirstNameBlank() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    name.setLastName(\"Test\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredIfTest.java",
  "methodName" : "testRequiredLastName",
  "sourceCode" : "/**\r\n * Tests the required validation for last name.\r\n */\r\n@Test\r\nvoid testRequiredLastName() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Joe\");\r\n    name.setLastName(\"Smith\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredIfTest.java",
  "methodName" : "testRequiredLastNameBlank",
  "sourceCode" : "/**\r\n * Tests the required validation for last name if it is blank.\r\n */\r\n@Test\r\nvoid testRequiredLastNameBlank() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Joe\");\r\n    name.setLastName(\"\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredNameTest.java",
  "methodName" : "testRequired",
  "sourceCode" : "/**\r\n * Tests the required validation failure.\r\n */\r\n@Test\r\nvoid testRequired() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    // throws ValidatorException,\r\n    // but we aren't catching for testing\r\n    // since no validation methods we use\r\n    // throw this\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredNameTest.java",
  "methodName" : "testRequiredFirstName",
  "sourceCode" : "/**\r\n * Tests the required validation for first name.\r\n */\r\n@Test\r\nvoid testRequiredFirstName() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Joe\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredNameTest.java",
  "methodName" : "testRequiredFirstNameBlank",
  "sourceCode" : "/**\r\n * Tests the required validation for first name if it is blank.\r\n */\r\n@Test\r\nvoid testRequiredFirstNameBlank() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredNameTest.java",
  "methodName" : "testRequiredLastName",
  "sourceCode" : "/**\r\n * Tests the required validation for last name.\r\n */\r\n@Test\r\nvoid testRequiredLastName() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setLastName(\"Smith\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredNameTest.java",
  "methodName" : "testRequiredLastNameBlank",
  "sourceCode" : "/**\r\n * Tests the required validation for last name if it is blank.\r\n */\r\n@Test\r\nvoid testRequiredLastNameBlank() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setLastName(\"\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertFalse(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RequiredNameTest.java",
  "methodName" : "testRequiredName",
  "sourceCode" : "/**\r\n * Tests the required validation for first and last name.\r\n */\r\n@Test\r\nvoid testRequiredName() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean name = new NameBean();\r\n    name.setFirstName(\"Joe\");\r\n    name.setLastName(\"Smith\");\r\n    // Construct validator based on the loaded resources\r\n    // and the form key\r\n    final Validator validator = new Validator(resources, FORM_KEY);\r\n    // add the name bean to the validator as a resource\r\n    // for the validations to be performed on.\r\n    validator.setParameter(Validator.BEAN_PARAM, name);\r\n    // Get results of the validation.\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results, \"Results are null.\");\r\n    final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\r\n    final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\r\n    assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n    assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\r\n    assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\r\n    assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RetrieveFormTest.java",
  "methodName" : "testDefaultForm",
  "sourceCode" : "/**\r\n * Test a form defined only in the \"default\" formset.\r\n */\r\n@Test\r\nvoid testDefaultForm() {\r\n    final String formKey = FORM_PREFIX + \"default\";\r\n    // *** US locale ***\r\n    checkForm(Locale.US, formKey, \"default\");\r\n    // *** French locale ***\r\n    checkForm(Locale.FRENCH, formKey, \"default\");\r\n    // *** France locale ***\r\n    checkForm(Locale.FRANCE, formKey, \"default\");\r\n    // *** Canadian (English) locale ***\r\n    checkForm(Locale.CANADA, formKey, \"default\");\r\n    // *** Canadian French locale ***\r\n    checkForm(Locale.CANADA_FRENCH, formKey, \"default\");\r\n    // *** Canadian French Variant locale ***\r\n    checkForm(CANADA_FRENCH_XXX, formKey, \"default\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RetrieveFormTest.java",
  "methodName" : "testFormNotFound",
  "sourceCode" : "/**\r\n * Test a form not defined\r\n */\r\n@Test\r\nvoid testFormNotFound() {\r\n    final String formKey = \"INVALID_NAME\";\r\n    // *** US locale ***\r\n    checkFormNotFound(Locale.US, formKey);\r\n    // *** French locale ***\r\n    checkFormNotFound(Locale.FRENCH, formKey);\r\n    // *** France locale ***\r\n    checkFormNotFound(Locale.FRANCE, formKey);\r\n    // *** Canadian (English) locale ***\r\n    checkFormNotFound(Locale.CANADA, formKey);\r\n    // *** Canadian French locale ***\r\n    checkFormNotFound(Locale.CANADA_FRENCH, formKey);\r\n    // *** Canadian French Variant locale ***\r\n    checkFormNotFound(CANADA_FRENCH_XXX, formKey);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RetrieveFormTest.java",
  "methodName" : "testLanguageCountryForm",
  "sourceCode" : "/**\r\n * Test a form defined in the \"default\" formset, formsets where just the \"language\" is specified and formset where the language and country are specified.\r\n */\r\n@Test\r\nvoid testLanguageCountryForm() {\r\n    final String formKey = FORM_PREFIX + \"language_country\";\r\n    // *** US locale ***\r\n    checkForm(Locale.US, formKey, \"default\");\r\n    // *** French locale ***\r\n    checkForm(Locale.FRENCH, formKey, \"fr\");\r\n    // *** France locale ***\r\n    checkForm(Locale.FRANCE, formKey, \"fr_FR\");\r\n    // *** Canadian (English) locale ***\r\n    checkForm(Locale.CANADA, formKey, \"default\");\r\n    // *** Canadian French locale ***\r\n    checkForm(Locale.CANADA_FRENCH, formKey, \"fr_CA\");\r\n    // *** Canadian French Variant locale ***\r\n    checkForm(CANADA_FRENCH_XXX, formKey, \"fr_CA\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RetrieveFormTest.java",
  "methodName" : "testLanguageCountryVariantForm",
  "sourceCode" : "/**\r\n * Test a form defined in all the formsets\r\n */\r\n@Test\r\nvoid testLanguageCountryVariantForm() {\r\n    final String formKey = FORM_PREFIX + \"language_country_variant\";\r\n    // *** US locale ***\r\n    checkForm(Locale.US, formKey, \"default\");\r\n    // *** French locale ***\r\n    checkForm(Locale.FRENCH, formKey, \"fr\");\r\n    // *** France locale ***\r\n    checkForm(Locale.FRANCE, formKey, \"fr_FR\");\r\n    // *** Canadian (English) locale ***\r\n    checkForm(Locale.CANADA, formKey, \"default\");\r\n    // *** Canadian French locale ***\r\n    checkForm(Locale.CANADA_FRENCH, formKey, \"fr_CA\");\r\n    // *** Canadian French Variant locale ***\r\n    checkForm(CANADA_FRENCH_XXX, formKey, \"fr_CA_XXX\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\RetrieveFormTest.java",
  "methodName" : "testLanguageForm",
  "sourceCode" : "/**\r\n * Test a form defined in the \"default\" formset and formsets where just the \"language\" is specified.\r\n */\r\n@Test\r\nvoid testLanguageForm() {\r\n    final String formKey = FORM_PREFIX + \"language\";\r\n    // *** US locale ***\r\n    checkForm(Locale.US, formKey, \"default\");\r\n    // *** French locale ***\r\n    checkForm(Locale.FRENCH, formKey, \"fr\");\r\n    // *** France locale ***\r\n    checkForm(Locale.FRANCE, formKey, \"fr\");\r\n    // *** Canadian (English) locale ***\r\n    checkForm(Locale.CANADA, formKey, \"default\");\r\n    // *** Canadian French locale ***\r\n    checkForm(Locale.CANADA_FRENCH, formKey, \"fr\");\r\n    // *** Canadian French Variant locale ***\r\n    checkForm(CANADA_FRENCH_XXX, formKey, \"fr\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractCalendarValidatorTest.java",
  "methodName" : "testFormat",
  "sourceCode" : "/**\r\n * Test Invalid Dates with \"locale\" validation\r\n */\r\n@Test\r\nvoid testFormat() {\r\n    // Create a Date or Calendar\r\n    final Object test = validator.parse(\"2005-11-28\", \"yyyy-MM-dd\", null, null);\r\n    assertNotNull(test, \"Test Date\");\r\n    assertEquals(\"28.11.05\", validator.format(test, \"dd.MM.yy\"), \"Format pattern\");\r\n    assertEquals(\"11/28/05\", validator.format(test, Locale.US), \"Format locale\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractCalendarValidatorTest.java",
  "methodName" : "testLocaleInvalid",
  "sourceCode" : "/**\r\n * Test Invalid Dates with \"locale\" validation\r\n */\r\n@Test\r\nvoid testLocaleInvalid() {\r\n    for (int i = 0; i < localeInvalid.length; i++) {\r\n        final String text = i + \" value=[\" + localeInvalid[i] + \"] passed \";\r\n        final Object date = validator.parse(localeInvalid[i], null, Locale.US, null);\r\n        assertNull(date, \"validateObj() \" + text + date);\r\n        assertFalse(validator.isValid(localeInvalid[i], Locale.US), \"isValid() \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractCalendarValidatorTest.java",
  "methodName" : "testLocaleValid",
  "sourceCode" : "/**\r\n * Test Valid Dates with \"locale\" validation\r\n */\r\n@Test\r\nvoid testLocaleValid() {\r\n    for (int i = 0; i < localeValid.length; i++) {\r\n        final String text = i + \" value=[\" + localeValid[i] + \"] failed \";\r\n        Object date = validator.parse(localeValid[i], null, Locale.US, null);\r\n        assertNotNull(date, \"validateObj() \" + text + date);\r\n        assertTrue(validator.isValid(localeValid[i], Locale.US), \"isValid() \" + text);\r\n        if (date instanceof Calendar) {\r\n            date = ((Calendar) date).getTime();\r\n        }\r\n        assertEquals(patternExpect[i], date, \"compare \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractCalendarValidatorTest.java",
  "methodName" : "testPatternInvalid",
  "sourceCode" : "/**\r\n * Test Invalid Dates with \"pattern\" validation\r\n */\r\n@Test\r\nvoid testPatternInvalid() {\r\n    for (int i = 0; i < patternInvalid.length; i++) {\r\n        final String text = i + \" value=[\" + patternInvalid[i] + \"] passed \";\r\n        final Object date = validator.parse(patternInvalid[i], \"yy-MM-dd\", null, null);\r\n        assertNull(date, \"validateObj() \" + text + date);\r\n        assertFalse(validator.isValid(patternInvalid[i], \"yy-MM-dd\"), \"isValid() \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractCalendarValidatorTest.java",
  "methodName" : "testPatternValid",
  "sourceCode" : "/**\r\n * Test Valid Dates with \"pattern\" validation\r\n */\r\n@Test\r\nvoid testPatternValid() {\r\n    for (int i = 0; i < patternValid.length; i++) {\r\n        final String text = i + \" value=[\" + patternValid[i] + \"] failed \";\r\n        Object date = validator.parse(patternValid[i], \"yy-MM-dd\", null, null);\r\n        assertNotNull(date, \"validateObj() \" + text + date);\r\n        assertTrue(validator.isValid(patternValid[i], \"yy-MM-dd\"), \"isValid() \" + text);\r\n        if (date instanceof Calendar) {\r\n            date = ((Calendar) date).getTime();\r\n        }\r\n        assertEquals(patternExpect[i], date, \"compare \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractCalendarValidatorTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "/**\r\n * Test validator serialization.\r\n */\r\n@Test\r\nvoid testSerialization() {\r\n    // Serialize the check digit routine\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\r\n        oos.writeObject(validator);\r\n        oos.flush();\r\n    } catch (final Exception e) {\r\n        fail(validator.getClass().getName() + \" error during serialization: \" + e);\r\n    }\r\n    // Deserialize the test object\r\n    Object result = null;\r\n    try (ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())) {\r\n        final ObjectInputStream ois = new ObjectInputStream(bais);\r\n        result = ois.readObject();\r\n    } catch (final Exception e) {\r\n        fail(validator.getClass().getName() + \" error during deserialization: \" + e);\r\n    }\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testFormat",
  "sourceCode" : "/**\r\n * Test format() methods\r\n */\r\n@Test\r\nvoid testFormat() {\r\n    final Number number = new BigDecimal(\"1234.5\");\r\n    assertEquals(\"1,234.5\", strictValidator.format(number, Locale.US), \"US Locale, US Format\");\r\n    assertEquals(\"1.234,5\", strictValidator.format(number, Locale.GERMAN), \"DE Locale, DE Format\");\r\n    assertEquals(\"12,34.50\", strictValidator.format(number, \"#,#0.00\"), \"Pattern #,#0.00\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testFormatType",
  "sourceCode" : "/**\r\n * Test Format Type\r\n */\r\n@Test\r\nvoid testFormatType() {\r\n    assertEquals(0, validator.getFormatType(), \"Format Type A\");\r\n    assertEquals(AbstractNumberValidator.STANDARD_FORMAT, validator.getFormatType(), \"Format Type B\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testInvalidNotStrict",
  "sourceCode" : "/**\r\n * Test Invalid, strict=false\r\n */\r\n@Test\r\nvoid testInvalidNotStrict() {\r\n    for (int i = 0; i < invalid.length; i++) {\r\n        final String text = \"idx=[\" + i + \"] value=[\" + invalid[i] + \"]\";\r\n        assertNull(validator.parse(invalid[i], null, Locale.US), \"(A) \" + text);\r\n        assertFalse(validator.isValid(invalid[i], null, Locale.US), \"(B) \" + text);\r\n        assertNull(validator.parse(invalid[i], testPattern, null), \"(C) \" + text);\r\n        assertFalse(validator.isValid(invalid[i], testPattern, null), \"(D) \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testInvalidStrict",
  "sourceCode" : "/**\r\n * Test Invalid, strict=true\r\n */\r\n@Test\r\nvoid testInvalidStrict() {\r\n    for (int i = 0; i < invalidStrict.length; i++) {\r\n        final String text = \"idx=[\" + i + \"] value=[\" + invalidStrict[i] + \"]\";\r\n        assertNull(strictValidator.parse(invalidStrict[i], null, Locale.US), \"(A) \" + text);\r\n        assertFalse(strictValidator.isValid(invalidStrict[i], null, Locale.US), \"(B) \" + text);\r\n        assertNull(strictValidator.parse(invalidStrict[i], testPattern, null), \"(C) \" + text);\r\n        assertFalse(strictValidator.isValid(invalidStrict[i], testPattern, null), \"(D) \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testRangeMinMax",
  "sourceCode" : "/**\r\n * Test Range/Min/Max\r\n */\r\n@Test\r\nvoid testRangeMinMax() {\r\n    final Number number9 = Integer.valueOf(9);\r\n    final Number number10 = Integer.valueOf(10);\r\n    final Number number11 = Integer.valueOf(11);\r\n    final Number number19 = Integer.valueOf(19);\r\n    final Number number20 = Integer.valueOf(20);\r\n    final Number number21 = Integer.valueOf(21);\r\n    // Test isInRange()\r\n    assertFalse(strictValidator.isInRange(number9, number10, number20), \"isInRange() < min\");\r\n    assertTrue(strictValidator.isInRange(number10, number10, number20), \"isInRange() = min\");\r\n    assertTrue(strictValidator.isInRange(number11, number10, number20), \"isInRange() in range\");\r\n    assertTrue(strictValidator.isInRange(number20, number10, number20), \"isInRange() = max\");\r\n    assertFalse(strictValidator.isInRange(number21, number10, number20), \"isInRange() > max\");\r\n    // Test minValue()\r\n    assertFalse(strictValidator.minValue(number9, number10), \"minValue() < min\");\r\n    assertTrue(strictValidator.minValue(number10, number10), \"minValue() = min\");\r\n    assertTrue(strictValidator.minValue(number11, number10), \"minValue() > min\");\r\n    // Test minValue()\r\n    assertTrue(strictValidator.maxValue(number19, number20), \"maxValue() < max\");\r\n    assertTrue(strictValidator.maxValue(number20, number20), \"maxValue() = max\");\r\n    assertFalse(strictValidator.maxValue(number21, number20), \"maxValue() > max\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "/**\r\n * Test validator serialization.\r\n */\r\n@Test\r\nvoid testSerialization() {\r\n    // Serialize the check digit routine\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\r\n        oos.writeObject(validator);\r\n        oos.flush();\r\n    } catch (final Exception e) {\r\n        fail(validator.getClass().getName() + \" error during serialization: \" + e);\r\n    }\r\n    // Deserialize the test object\r\n    Object result = null;\r\n    try (ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())) {\r\n        final ObjectInputStream ois = new ObjectInputStream(bais);\r\n        result = ois.readObject();\r\n    } catch (final Exception e) {\r\n        fail(validator.getClass().getName() + \" error during deserialization: \" + e);\r\n    }\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testValidateLocale",
  "sourceCode" : "/**\r\n * Test different Locale\r\n */\r\n@Test\r\nvoid testValidateLocale() {\r\n    assertEquals(testNumber, strictValidator.parse(testStringUS, null, Locale.US), \"US Locale, US Format\");\r\n    assertNull(strictValidator.parse(testStringDE, null, Locale.US), \"US Locale, DE Format\");\r\n    // Default German Locale\r\n    assertEquals(testNumber, strictValidator.parse(testStringDE, null, Locale.GERMAN), \"DE Locale, DE Format\");\r\n    assertNull(strictValidator.parse(testStringUS, null, Locale.GERMAN), \"DE Locale, US Format\");\r\n    // Default Locale has been set to Locale.US in setup()\r\n    assertEquals(testNumber, strictValidator.parse(testStringUS, null, null), \"Default Locale, US Format\");\r\n    assertNull(strictValidator.parse(testStringDE, null, null), \"Default Locale, DE Format\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testValidateMinMax",
  "sourceCode" : "/**\r\n * Test Min/Max values allowed\r\n */\r\n@Test\r\nvoid testValidateMinMax() {\r\n    final DecimalFormat fmt = new DecimalFormat(\"#\");\r\n    if (max != null) {\r\n        assertEquals(max, validator.parse(fmt.format(max), \"#\", null), \"Test Max\");\r\n        assertNull(validator.parse(fmt.format(maxPlusOne), \"#\", null), \"Test Max + 1\");\r\n        assertEquals(min, validator.parse(fmt.format(min), \"#\", null), \"Test Min\");\r\n        assertNull(validator.parse(fmt.format(minMinusOne), \"#\", null), \"Test min - 1\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testValidNotStrict",
  "sourceCode" : "/**\r\n * Test Valid, strict=false\r\n */\r\n@Test\r\nvoid testValidNotStrict() {\r\n    for (int i = 0; i < valid.length; i++) {\r\n        final String text = \"idx=[\" + i + \"] value=[\" + validCompare[i] + \"]\";\r\n        assertEquals(validCompare[i], validator.parse(valid[i], null, Locale.US), \"(A) \" + text);\r\n        assertTrue(validator.isValid(valid[i], null, Locale.US), \"(B) \" + text);\r\n        assertEquals(validCompare[i], validator.parse(valid[i], testPattern, null), \"(C) \" + text);\r\n        assertTrue(validator.isValid(valid[i], testPattern, null), \"(D) \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\AbstractNumberValidatorTest.java",
  "methodName" : "testValidStrict",
  "sourceCode" : "/**\r\n * Test Valid, strict=true\r\n */\r\n@Test\r\nvoid testValidStrict() {\r\n    for (int i = 0; i < validStrict.length; i++) {\r\n        final String text = \"idx=[\" + i + \"] value=[\" + validStrictCompare[i] + \"]\";\r\n        assertEquals(validStrictCompare[i], strictValidator.parse(validStrict[i], null, Locale.US), \"(A) \" + text);\r\n        assertTrue(strictValidator.isValid(validStrict[i], null, Locale.US), \"(B) \" + text);\r\n        assertEquals(validStrictCompare[i], strictValidator.parse(validStrict[i], testPattern, null), \"(C) \" + text);\r\n        assertTrue(strictValidator.isValid(validStrict[i], testPattern, null), \"(D) \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\BigDecimalValidatorTest.java",
  "methodName" : "testBigDecimalRangeMinMax",
  "sourceCode" : "/**\r\n * Test BigDecimal Range/Min/Max\r\n */\r\n@Test\r\nvoid testBigDecimalRangeMinMax() {\r\n    final BigDecimalValidator validator = new BigDecimalValidator(true, AbstractNumberValidator.STANDARD_FORMAT, true);\r\n    final BigDecimal number9 = new BigDecimal(\"9\");\r\n    final BigDecimal number10 = new BigDecimal(\"10\");\r\n    final BigDecimal number11 = new BigDecimal(\"11\");\r\n    final BigDecimal number19 = new BigDecimal(\"19\");\r\n    final BigDecimal number20 = new BigDecimal(\"20\");\r\n    final BigDecimal number21 = new BigDecimal(\"21\");\r\n    final float min = 10;\r\n    final float max = 20;\r\n    // Test isInRange()\r\n    assertFalse(validator.isInRange(number9, min, max), \"isInRange(A) < min\");\r\n    assertTrue(validator.isInRange(number10, min, max), \"isInRange(A) = min\");\r\n    assertTrue(validator.isInRange(number11, min, max), \"isInRange(A) in range\");\r\n    assertTrue(validator.isInRange(number20, min, max), \"isInRange(A) = max\");\r\n    assertFalse(validator.isInRange(number21, min, max), \"isInRange(A) > max\");\r\n    // Test minValue()\r\n    assertFalse(validator.minValue(number9, min), \"minValue(A) < min\");\r\n    assertTrue(validator.minValue(number10, min), \"minValue(A) = min\");\r\n    assertTrue(validator.minValue(number11, min), \"minValue(A) > min\");\r\n    // Test minValue()\r\n    assertTrue(validator.maxValue(number19, max), \"maxValue(A) < max\");\r\n    assertTrue(validator.maxValue(number20, max), \"maxValue(A) = max\");\r\n    assertFalse(validator.maxValue(number21, max), \"maxValue(A) > max\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\BigDecimalValidatorTest.java",
  "methodName" : "testBigDecimalValidatorMethods",
  "sourceCode" : "/**\r\n * Test BigDecimalValidator validate Methods\r\n */\r\n@Test\r\nvoid testBigDecimalValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"0,00,00\";\r\n    final String patternVal = \"1,23,45\";\r\n    final String germanPatternVal = \"1.23.45\";\r\n    final String localeVal = \"12.345\";\r\n    final String defaultVal = \"12,345\";\r\n    final String xxxx = \"XXXX\";\r\n    final BigDecimal expected = new BigDecimal(12345);\r\n    assertEquals(expected, BigDecimalValidator.getInstance().validate(defaultVal), \"validate(A) default\");\r\n    assertEquals(expected, BigDecimalValidator.getInstance().validate(localeVal, locale), \"validate(A) locale \");\r\n    assertEquals(expected, BigDecimalValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\r\n    assertEquals(expected, BigDecimalValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\r\n    assertTrue(BigDecimalValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(BigDecimalValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\r\n    assertTrue(BigDecimalValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(BigDecimalValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(BigDecimalValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(BigDecimalValidator.getInstance().validate(xxxx, locale), \"validate(B) locale\");\r\n    assertNull(BigDecimalValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(BigDecimalValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(BigDecimalValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(BigDecimalValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\r\n    assertFalse(BigDecimalValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(BigDecimalValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\BigIntegerValidatorTest.java",
  "methodName" : "testBigIntegerRangeMinMax",
  "sourceCode" : "/**\r\n * Test BigInteger Range/Min/Max\r\n */\r\n@Test\r\nvoid testBigIntegerRangeMinMax() {\r\n    final BigIntegerValidator validator = (BigIntegerValidator) strictValidator;\r\n    final BigInteger number9 = validator.validate(\"9\", \"#\");\r\n    final BigInteger number10 = validator.validate(\"10\", \"#\");\r\n    final BigInteger number11 = validator.validate(\"11\", \"#\");\r\n    final BigInteger number19 = validator.validate(\"19\", \"#\");\r\n    final BigInteger number20 = validator.validate(\"20\", \"#\");\r\n    final BigInteger number21 = validator.validate(\"21\", \"#\");\r\n    // Test isInRange()\r\n    assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\r\n    assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\r\n    assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\r\n    assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\r\n    assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\r\n    // Test minValue()\r\n    assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\r\n    assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\r\n    assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\r\n    // Test minValue()\r\n    assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\r\n    assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\r\n    assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\BigIntegerValidatorTest.java",
  "methodName" : "testBigIntegerValidatorMethods",
  "sourceCode" : "/**\r\n * Test BigIntegerValidator validate Methods\r\n */\r\n@Test\r\nvoid testBigIntegerValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"0,00,00\";\r\n    final String patternVal = \"1,23,45\";\r\n    final String germanPatternVal = \"1.23.45\";\r\n    final String localeVal = \"12.345\";\r\n    final String defaultVal = \"12,345\";\r\n    final String xxxx = \"XXXX\";\r\n    final BigInteger expected = new BigInteger(\"12345\");\r\n    assertEquals(expected, BigIntegerValidator.getInstance().validate(defaultVal), \"validate(A) default\");\r\n    assertEquals(expected, BigIntegerValidator.getInstance().validate(localeVal, locale), \"validate(A) locale \");\r\n    assertEquals(expected, BigIntegerValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\r\n    assertEquals(expected, BigIntegerValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\r\n    assertTrue(BigIntegerValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(BigIntegerValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\r\n    assertTrue(BigIntegerValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(BigIntegerValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(BigIntegerValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(BigIntegerValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\r\n    assertNull(BigIntegerValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(BigIntegerValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(BigIntegerValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(BigIntegerValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale \");\r\n    assertFalse(BigIntegerValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(BigIntegerValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ByteValidatorTest.java",
  "methodName" : "testByteRangeMinMax",
  "sourceCode" : "/**\r\n * Test Byte Range/Min/Max\r\n */\r\n@Test\r\nvoid testByteRangeMinMax() {\r\n    final ByteValidator validator = (ByteValidator) strictValidator;\r\n    final Byte number9 = validator.validate(\"9\", \"#\");\r\n    final Byte number10 = validator.validate(\"10\", \"#\");\r\n    final Byte number11 = validator.validate(\"11\", \"#\");\r\n    final Byte number19 = validator.validate(\"19\", \"#\");\r\n    final Byte number20 = validator.validate(\"20\", \"#\");\r\n    final Byte number21 = validator.validate(\"21\", \"#\");\r\n    final byte min = (byte) 10;\r\n    final byte max = (byte) 20;\r\n    // Test isInRange()\r\n    assertFalse(validator.isInRange(number9, min, max), \"isInRange() < min\");\r\n    assertTrue(validator.isInRange(number10, min, max), \"isInRange() = min\");\r\n    assertTrue(validator.isInRange(number11, min, max), \"isInRange() in range\");\r\n    assertTrue(validator.isInRange(number20, min, max), \"isInRange() = max\");\r\n    assertFalse(validator.isInRange(number21, min, max), \"isInRange() > max\");\r\n    // Test minValue()\r\n    assertFalse(validator.minValue(number9, min), \"minValue() < min\");\r\n    assertTrue(validator.minValue(number10, min), \"minValue() = min\");\r\n    assertTrue(validator.minValue(number11, min), \"minValue() > min\");\r\n    // Test minValue()\r\n    assertTrue(validator.maxValue(number19, max), \"maxValue() < max\");\r\n    assertTrue(validator.maxValue(number20, max), \"maxValue() = max\");\r\n    assertFalse(validator.maxValue(number21, max), \"maxValue() > max\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ByteValidatorTest.java",
  "methodName" : "testByteValidatorMethods",
  "sourceCode" : "/**\r\n * Test ByteValidator validate Methods\r\n */\r\n@Test\r\nvoid testByteValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"0,00\";\r\n    final String patternVal = \"1,23\";\r\n    final String germanPatternVal = \"1.23\";\r\n    final String localeVal = \".123\";\r\n    final String defaultVal = \",123\";\r\n    final String xxxx = \"XXXX\";\r\n    final Byte expected = Byte.valueOf((byte) 123);\r\n    assertEquals(expected, ByteValidator.getInstance().validate(defaultVal), \"validate(A) default\");\r\n    assertEquals(expected, ByteValidator.getInstance().validate(localeVal, locale), \"validate(A) locale \");\r\n    assertEquals(expected, ByteValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\r\n    assertEquals(expected, ByteValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\r\n    assertTrue(ByteValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(ByteValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\r\n    assertTrue(ByteValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(ByteValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(ByteValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(ByteValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\r\n    assertNull(ByteValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(ByteValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(ByteValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(ByteValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale \");\r\n    assertFalse(ByteValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(ByteValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CalendarValidatorTest.java",
  "methodName" : "testAdjustToTimeZone",
  "sourceCode" : "/**\r\n * Test adjustToTimeZone() method\r\n */\r\n@Test\r\nvoid testAdjustToTimeZone() {\r\n    final Calendar calEST = createCalendar(TestTimeZones.EST, DATE_2005_11_23, TIME_12_03_45);\r\n    final Date dateEST = calEST.getTime();\r\n    final Calendar calGMT = createCalendar(TimeZones.GMT, DATE_2005_11_23, TIME_12_03_45);\r\n    final Date dateGMT = calGMT.getTime();\r\n    final Calendar calCET = createCalendar(TestTimeZones.EET, DATE_2005_11_23, TIME_12_03_45);\r\n    final Date dateCET = calCET.getTime();\r\n    // Check the dates don't match\r\n    assertNotEquals(dateGMT.getTime(), dateCET.getTime(), \"Check GMT != CET\");\r\n    assertNotEquals(dateGMT.getTime(), dateEST.getTime(), \"Check GMT != EST\");\r\n    assertNotEquals(dateCET.getTime(), dateEST.getTime(), \"Check CET != EST\");\r\n    // EST to GMT and back\r\n    CalendarValidator.adjustToTimeZone(calEST, TimeZones.GMT);\r\n    assertEquals(dateGMT, calEST.getTime(), \"EST to GMT\");\r\n    assertNotSame(dateEST, calEST.getTime(), \"Check EST = GMT\");\r\n    CalendarValidator.adjustToTimeZone(calEST, TestTimeZones.EST);\r\n    assertEquals(dateEST, calEST.getTime(), \"back to EST\");\r\n    assertNotSame(dateGMT, calEST.getTime(), \"Check EST != GMT\");\r\n    // CET to GMT and back\r\n    CalendarValidator.adjustToTimeZone(calCET, TimeZones.GMT);\r\n    assertEquals(dateGMT, calCET.getTime(), \"CET to GMT\");\r\n    assertNotSame(dateCET, calCET.getTime(), \"Check CET = GMT\");\r\n    CalendarValidator.adjustToTimeZone(calCET, TestTimeZones.EET);\r\n    assertEquals(dateCET, calCET.getTime(), \"back to CET\");\r\n    assertNotSame(dateGMT, calCET.getTime(), \"Check CET != GMT\");\r\n    // Adjust to TimeZone with Same rules\r\n    final Calendar calUTC = createCalendar(TestTimeZones.UTC, DATE_2005_11_23, TIME_12_03_45);\r\n    assertTrue(TestTimeZones.UTC.hasSameRules(TimeZones.GMT), \"SAME: UTC = GMT\");\r\n    assertEquals(calUTC.getTime(), calGMT.getTime(), \"SAME: Check time (A)\");\r\n    assertNotEquals(TimeZones.GMT, calUTC.getTimeZone(), \"SAME: Check GMT(A)\");\r\n    assertEquals(TestTimeZones.UTC, calUTC.getTimeZone(), \"SAME: Check UTC(A)\");\r\n    CalendarValidator.adjustToTimeZone(calUTC, TimeZones.GMT);\r\n    assertEquals(calUTC.getTime(), calGMT.getTime(), \"SAME: Check time (B)\");\r\n    assertEquals(TimeZones.GMT, calUTC.getTimeZone(), \"SAME: Check GMT(B)\");\r\n    assertNotEquals(TestTimeZones.UTC, calUTC.getTimeZone(), \"SAME: Check UTC(B)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CalendarValidatorTest.java",
  "methodName" : "testCalendarValidatorMethods",
  "sourceCode" : "/**\r\n * Test CalendarValidator validate Methods\r\n */\r\n@Test\r\n@DefaultLocale(country = \"US\", language = \"en\")\r\nvoid testCalendarValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"yyyy-MM-dd\";\r\n    final String patternVal = \"2005-12-31\";\r\n    final String germanPattern = \"dd MMM yyyy\";\r\n    // Don't rely on specific German format - it varies between JVMs\r\n    final DateFormat df = new SimpleDateFormat(germanPattern, locale);\r\n    final Calendar cal = Calendar.getInstance(Locale.US);\r\n    cal.set(2005, Calendar.DECEMBER, 31);\r\n    final String germanVal = df.format(cal.getTime());\r\n    final String localeVal = \"31.12.2005\";\r\n    final String defaultVal = \"12/31/05\";\r\n    final String xxxx = \"XXXX\";\r\n    final Date expected = createCalendar(null, 20051231, 0).getTime();\r\n    assertEquals(expected, CalendarValidator.getInstance().validate(defaultVal).getTime(), \"validate(A) default\");\r\n    assertEquals(expected, CalendarValidator.getInstance().validate(localeVal, locale).getTime(), \"validate(A) locale \");\r\n    assertEquals(expected, CalendarValidator.getInstance().validate(patternVal, pattern).getTime(), \"validate(A) pattern\");\r\n    assertEquals(expected, CalendarValidator.getInstance().validate(germanVal, germanPattern, Locale.GERMAN).getTime(), \"validate(A) both\");\r\n    assertTrue(CalendarValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(CalendarValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\r\n    assertTrue(CalendarValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(CalendarValidator.getInstance().isValid(germanVal, germanPattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(CalendarValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(CalendarValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\r\n    assertNull(CalendarValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(CalendarValidator.getInstance().validate(\"31 Dec 2005\", germanPattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(CalendarValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(CalendarValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale \");\r\n    assertFalse(CalendarValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(CalendarValidator.getInstance().isValid(\"31 Dec 2005\", germanPattern, Locale.GERMAN), \"isValid(B) both\");\r\n    // Test Time Zone\r\n    final TimeZone zone = TimeZone.getDefault().getRawOffset() == TestTimeZones.EET.getRawOffset() ? TestTimeZones.EST : TestTimeZones.EET;\r\n    final Date expectedZone = createCalendar(zone, 20051231, 0).getTime();\r\n    assertNotEquals(expected.getTime(), expectedZone.getTime(), \"default/EET same \");\r\n    assertEquals(expectedZone, CalendarValidator.getInstance().validate(defaultVal, zone).getTime(), \"validate(C) default\");\r\n    assertEquals(expectedZone, CalendarValidator.getInstance().validate(localeVal, locale, zone).getTime(), \"validate(C) locale \");\r\n    assertEquals(expectedZone, CalendarValidator.getInstance().validate(patternVal, pattern, zone).getTime(), \"validate(C) pattern\");\r\n    assertEquals(expectedZone, CalendarValidator.getInstance().validate(germanVal, germanPattern, Locale.GERMAN, zone).getTime(), \"validate(C) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CalendarValidatorTest.java",
  "methodName" : "testCompare",
  "sourceCode" : "/**\r\n * Test compare date methods\r\n */\r\n@Test\r\nvoid testCompare() {\r\n    final int sameTime = 124522;\r\n    final int testDate = 20050823;\r\n    // same date, different time\r\n    final Calendar diffHour = createCalendar(TimeZones.GMT, testDate, 115922);\r\n    // same date, different time\r\n    final Calendar diffMin = createCalendar(TimeZones.GMT, testDate, 124422);\r\n    // same date, different time\r\n    final Calendar diffSec = createCalendar(TimeZones.GMT, testDate, 124521);\r\n    // test value\r\n    final Calendar value = createCalendar(TimeZones.GMT, testDate, sameTime);\r\n    // +1 day\r\n    final Calendar cal20050824 = createCalendar(TimeZones.GMT, 20050824, sameTime);\r\n    // -1 day\r\n    final Calendar cal20050822 = createCalendar(TimeZones.GMT, 20050822, sameTime);\r\n    // +1 week\r\n    final Calendar cal20050830 = createCalendar(TimeZones.GMT, 20050830, sameTime);\r\n    // -1 week\r\n    final Calendar cal20050816 = createCalendar(TimeZones.GMT, 20050816, sameTime);\r\n    // +1 month\r\n    final Calendar cal20050901 = createCalendar(TimeZones.GMT, 20050901, sameTime);\r\n    // same month\r\n    final Calendar cal20050801 = createCalendar(TimeZones.GMT, 20050801, sameTime);\r\n    // -1 month\r\n    final Calendar cal20050731 = createCalendar(TimeZones.GMT, 20050731, sameTime);\r\n    // +1 quarter (Feb Start)\r\n    final Calendar cal20051101 = createCalendar(TimeZones.GMT, 20051101, sameTime);\r\n    // +1 quarter\r\n    final Calendar cal20051001 = createCalendar(TimeZones.GMT, 20051001, sameTime);\r\n    // same quarter\r\n    final Calendar cal20050701 = createCalendar(TimeZones.GMT, 20050701, sameTime);\r\n    // -1 quarter\r\n    final Calendar cal20050630 = createCalendar(TimeZones.GMT, 20050630, sameTime);\r\n    // +1 year\r\n    final Calendar cal20060101 = createCalendar(TimeZones.GMT, 20060101, sameTime);\r\n    // same year\r\n    final Calendar cal20050101 = createCalendar(TimeZones.GMT, 20050101, sameTime);\r\n    // -1 year\r\n    final Calendar cal20041231 = createCalendar(TimeZones.GMT, 20041231, sameTime);\r\n    assertEquals(1, calValidator.compare(value, diffHour, Calendar.HOUR_OF_DAY), \"hour GT\");\r\n    assertEquals(0, calValidator.compare(value, diffMin, Calendar.HOUR_OF_DAY), \"hour EQ\");\r\n    assertEquals(1, calValidator.compare(value, diffMin, Calendar.MINUTE), \"mins GT\");\r\n    assertEquals(0, calValidator.compare(value, diffSec, Calendar.MINUTE), \"mins EQ\");\r\n    assertEquals(1, calValidator.compare(value, diffSec, Calendar.SECOND), \"secs GT\");\r\n    // +1 day\r\n    assertEquals(-1, calValidator.compareDates(value, cal20050824), \"date LT\");\r\n    // same day, diff hour\r\n    assertEquals(0, calValidator.compareDates(value, diffHour), \"date EQ\");\r\n    // same day, diff hour\r\n    assertEquals(0, calValidator.compare(value, diffHour, Calendar.DAY_OF_YEAR), \"date(B)\");\r\n    // -1 day\r\n    assertEquals(1, calValidator.compareDates(value, cal20050822), \"date GT\");\r\n    // +1 week\r\n    assertEquals(-1, calValidator.compareWeeks(value, cal20050830), \"week LT\");\r\n    // +1 day\r\n    assertEquals(0, calValidator.compareWeeks(value, cal20050824), \"week =1\");\r\n    // same week\r\n    assertEquals(0, calValidator.compareWeeks(value, cal20050822), \"week =2\");\r\n    // same week\r\n    assertEquals(0, calValidator.compare(value, cal20050822, Calendar.WEEK_OF_MONTH), \"week =3\");\r\n    // -1 day\r\n    assertEquals(0, calValidator.compareWeeks(value, cal20050822), \"week =4\");\r\n    // -1 week\r\n    assertEquals(1, calValidator.compareWeeks(value, cal20050816), \"week GT\");\r\n    // +1 month\r\n    assertEquals(-1, calValidator.compareMonths(value, cal20050901), \"mnth LT\");\r\n    // +1 week\r\n    assertEquals(0, calValidator.compareMonths(value, cal20050830), \"mnth =1\");\r\n    // same month\r\n    assertEquals(0, calValidator.compareMonths(value, cal20050801), \"mnth =2\");\r\n    // -1 week\r\n    assertEquals(0, calValidator.compareMonths(value, cal20050816), \"mnth =3\");\r\n    // -1 month\r\n    assertEquals(1, calValidator.compareMonths(value, cal20050731), \"mnth GT\");\r\n    // +1 quarter (Feb)\r\n    assertEquals(-1, calValidator.compareQuarters(value, cal20051101), \"qtrA <1\");\r\n    // +1 quarter\r\n    assertEquals(-1, calValidator.compareQuarters(value, cal20051001), \"qtrA <2\");\r\n    // +1 month\r\n    assertEquals(0, calValidator.compareQuarters(value, cal20050901), \"qtrA =1\");\r\n    // same quarter\r\n    assertEquals(0, calValidator.compareQuarters(value, cal20050701), \"qtrA =2\");\r\n    // -1 month\r\n    assertEquals(0, calValidator.compareQuarters(value, cal20050731), \"qtrA =3\");\r\n    // -1 quarter\r\n    assertEquals(1, calValidator.compareQuarters(value, cal20050630), \"qtrA GT\");\r\n    // Change quarter 1 to start in Feb\r\n    // +1 quarter (Feb)\r\n    assertEquals(-1, calValidator.compareQuarters(value, cal20051101, 2), \"qtrB LT\");\r\n    // same quarter\r\n    assertEquals(0, calValidator.compareQuarters(value, cal20051001, 2), \"qtrB =1\");\r\n    // +1 month\r\n    assertEquals(0, calValidator.compareQuarters(value, cal20050901, 2), \"qtrB =2\");\r\n    // same quarter\r\n    assertEquals(1, calValidator.compareQuarters(value, cal20050701, 2), \"qtrB =3\");\r\n    // -1 month\r\n    assertEquals(1, calValidator.compareQuarters(value, cal20050731, 2), \"qtrB =4\");\r\n    // -1 quarter\r\n    assertEquals(1, calValidator.compareQuarters(value, cal20050630, 2), \"qtrB GT\");\r\n    // +1 year\r\n    assertEquals(-1, calValidator.compareYears(value, cal20060101), \"year LT\");\r\n    // same year\r\n    assertEquals(0, calValidator.compareYears(value, cal20050101), \"year EQ\");\r\n    // -1 year\r\n    assertEquals(1, calValidator.compareYears(value, cal20041231), \"year GT\");\r\n    // invalid compare\r\n    final Exception e = assertThrows(IllegalArgumentException.class, () -> calValidator.compare(value, value, -1), \"Invalid Compare field\");\r\n    assertEquals(\"Invalid field: -1\", e.getMessage(), \"check message\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CalendarValidatorTest.java",
  "methodName" : "testDateTimeStyle",
  "sourceCode" : "/**\r\n * Test Date/Time style Validator (there isn't an implementation for this)\r\n */\r\n@Test\r\n@DefaultLocale(country = \"UK\", language = \"en\")\r\nvoid testDateTimeStyle() {\r\n    // Formats vary between JVMs, so create the test strings using the current JVM\r\n    final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2005, Calendar.DECEMBER, 31, 14, 23);\r\n    final String val = df.format(cal.getTime());\r\n    final DateFormat usdf = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, Locale.US);\r\n    final Calendar uscal = Calendar.getInstance(Locale.US);\r\n    uscal.set(2005, Calendar.DECEMBER, 31, 14, 23);\r\n    final String usval = usdf.format(uscal.getTime());\r\n    final AbstractCalendarValidator dateTimeValidator = new AbstractCalendarValidator(true, DateFormat.SHORT, DateFormat.SHORT) {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        protected Object processParsedValue(final Object value, final Format formatter) {\r\n            return value;\r\n        }\r\n    };\r\n    assertTrue(dateTimeValidator.isValid(val), \"validate(A) default\");\r\n    assertTrue(dateTimeValidator.isValid(usval, Locale.US), \"validate(A) locale \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CalendarValidatorTest.java",
  "methodName" : "testFormat",
  "sourceCode" : "/**\r\n * Test format methods\r\n */\r\n@Override\r\n@Test\r\n@DefaultLocale(country = \"UK\", language = \"en\")\r\n@DefaultTimeZone(\"GMT\")\r\nvoid testFormat() {\r\n    final Calendar cal20051231 = createCalendar(TimeZones.GMT, 20051231, 11500);\r\n    // validator defaults to SHORT, but the format varies between JVMs\r\n    final DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\r\n    final String val = df.format(cal20051231.getTime());\r\n    final DateFormat dfus = DateFormat.getDateInstance(DateFormat.SHORT, Locale.US);\r\n    final String usval = dfus.format(cal20051231.getTime());\r\n    final String germanPattern = \"dd MMM yyyy\";\r\n    final DateFormat dedf = new SimpleDateFormat(germanPattern, Locale.GERMAN);\r\n    final String deval = dedf.format(cal20051231.getTime());\r\n    assertNull(calValidator.format(null), \"null\");\r\n    assertEquals(val, calValidator.format(cal20051231), \"default\");\r\n    assertEquals(usval, calValidator.format(cal20051231, Locale.US), \"locale\");\r\n    assertEquals(\"2005-12-31 01:15\", calValidator.format(cal20051231, \"yyyy-MM-dd HH:mm\"), \"patternA\");\r\n    assertEquals(\"2005-12-31 GMT\", calValidator.format(cal20051231, \"yyyy-MM-dd z\"), \"patternB\");\r\n    assertEquals(deval, calValidator.format(cal20051231, germanPattern, Locale.GERMAN), \"both\");\r\n    // EST Time Zone\r\n    final DateFormat dfest = DateFormat.getDateInstance(DateFormat.SHORT);\r\n    dfest.setTimeZone(TestTimeZones.EST);\r\n    final String valest = dfest.format(cal20051231.getTime());\r\n    final DateFormat dfusest = DateFormat.getDateInstance(DateFormat.SHORT, Locale.US);\r\n    dfusest.setTimeZone(TestTimeZones.EST);\r\n    final String valusest = dfusest.format(cal20051231.getTime());\r\n    final DateFormat dedfest = new SimpleDateFormat(germanPattern, Locale.GERMAN);\r\n    dedfest.setTimeZone(TestTimeZones.EST);\r\n    final String devalest = dedfest.format(cal20051231.getTime());\r\n    assertEquals(valest, calValidator.format(cal20051231, TestTimeZones.EST), \"EST default\");\r\n    assertEquals(valusest, calValidator.format(cal20051231, Locale.US, TestTimeZones.EST), \"EST locale\");\r\n    final String patternA = \"yyyy-MM-dd HH:mm\";\r\n    final DateFormat dfA = new SimpleDateFormat(patternA);\r\n    dfA.setTimeZone(TestTimeZones.EST);\r\n    final String valA = dfA.format(cal20051231.getTime());\r\n    assertEquals(valA, calValidator.format(cal20051231, patternA, TestTimeZones.EST), \"EST patternA\");\r\n    final String patternB = \"yyyy-MM-dd z\";\r\n    final DateFormat dfB = new SimpleDateFormat(patternB);\r\n    dfB.setTimeZone(TestTimeZones.EST);\r\n    final String valB = dfB.format(cal20051231.getTime());\r\n    assertEquals(valB, calValidator.format(cal20051231, patternB, TestTimeZones.EST), \"EST patternB\");\r\n    assertEquals(devalest, calValidator.format(cal20051231, germanPattern, Locale.GERMAN, TestTimeZones.EST), \"EST both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\AbstractCheckDigitTest.java",
  "methodName" : "testCalculateInvalid",
  "sourceCode" : "/**\r\n * Test calculate() for invalid values.\r\n */\r\n@Test\r\nvoid testCalculateInvalid() {\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"testCalculateInvalid() for \" + routine.getClass().getName());\r\n    }\r\n    // test invalid code values\r\n    for (int i = 0; i < invalid.length; i++) {\r\n        try {\r\n            final String code = invalid[i];\r\n            if (log.isDebugEnabled()) {\r\n                log.debug(\"   \" + i + \" Testing Invalid Check Digit, Code=[\" + code + \"]\");\r\n            }\r\n            final String expected = checkDigit(code);\r\n            final String codeWithNoCheckDigit = removeCheckDigit(code);\r\n            if (codeWithNoCheckDigit == null) {\r\n                throw new CheckDigitException(\"Invalid Code=[\" + code + \"]\");\r\n            }\r\n            final String actual = routine.calculate(codeWithNoCheckDigit);\r\n            // If exception not thrown, check that the digit is incorrect instead\r\n            if (expected.equals(actual)) {\r\n                fail(\"Expected mismatch for \" + code + \" expected \" + expected + \" actual \" + actual);\r\n            }\r\n        } catch (final CheckDigitException e) {\r\n            // possible failure messages:\r\n            // Invalid ISBN Length ...\r\n            // Invalid Character[ ...\r\n            // Are there any others?\r\n            assertTrue(e.getMessage().startsWith(\"Invalid \"), \"Invalid Character[\" + i + \"]=\" + e.getMessage());\r\n            // WAS                assertTrue(\"Invalid Character[\" +i +\"]=\" +  e.getMessage(), e.getMessage().startsWith(\"Invalid Character[\"));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\AbstractCheckDigitTest.java",
  "methodName" : "testCalculateValid",
  "sourceCode" : "/**\r\n * Test calculate() for valid values.\r\n */\r\n@Test\r\nvoid testCalculateValid() {\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"testCalculateValid() for \" + routine.getClass().getName());\r\n    }\r\n    // test valid values\r\n    for (int i = 0; i < valid.length; i++) {\r\n        final String code = removeCheckDigit(valid[i]);\r\n        final String expected = checkDigit(valid[i]);\r\n        try {\r\n            if (log.isDebugEnabled()) {\r\n                log.debug(\"   \" + i + \" Testing Valid Check Digit, Code=[\" + code + \"] expected=[\" + expected + \"]\");\r\n            }\r\n            assertEquals(expected, routine.calculate(code), \"valid[\" + i + \"]: \" + valid[i]);\r\n        } catch (final Exception e) {\r\n            fail(\"valid[\" + i + \"]=\" + valid[i] + \" threw \" + e);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\AbstractCheckDigitTest.java",
  "methodName" : "testIsValidFalse",
  "sourceCode" : "/**\r\n * Test isValid() for invalid values.\r\n */\r\n@Test\r\nvoid testIsValidFalse() {\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"testIsValidFalse() for \" + routine.getClass().getName());\r\n    }\r\n    // test invalid code values\r\n    for (int i = 0; i < invalid.length; i++) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"   \" + i + \" Testing Invalid Code=[\" + invalid[i] + \"]\");\r\n        }\r\n        assertFalse(routine.isValid(invalid[i]), \"invalid[\" + i + \"]: \" + invalid[i]);\r\n    }\r\n    // test invalid check digit values\r\n    final String[] invalidCheckDigits = createInvalidCodes(valid);\r\n    for (int i = 0; i < invalidCheckDigits.length; i++) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"   \" + i + \" Testing Invalid Check Digit, Code=[\" + invalidCheckDigits[i] + \"]\");\r\n        }\r\n        assertFalse(routine.isValid(invalidCheckDigits[i]), \"invalid check digit[\" + i + \"]: \" + invalidCheckDigits[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\AbstractCheckDigitTest.java",
  "methodName" : "testIsValidTrue",
  "sourceCode" : "/**\r\n * Test isValid() for valid values.\r\n */\r\n@Test\r\nvoid testIsValidTrue() {\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"testIsValidTrue() for \" + routine.getClass().getName());\r\n    }\r\n    // test valid values\r\n    for (int i = 0; i < valid.length; i++) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"   \" + i + \" Testing Valid Code=[\" + valid[i] + \"]\");\r\n        }\r\n        assertTrue(routine.isValid(valid[i]), \"valid[\" + i + \"]: \" + valid[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\AbstractCheckDigitTest.java",
  "methodName" : "testMissingCode",
  "sourceCode" : "/**\r\n * Test missing code\r\n */\r\n@Test\r\nvoid testMissingCode() {\r\n    // isValid() null\r\n    assertFalse(routine.isValid(null), \"isValid() Null\");\r\n    // isValid() zero length\r\n    assertFalse(routine.isValid(\"\"), \"isValid() Zero Length\");\r\n    // isValid() length 1\r\n    // Don't use 0, because that passes for Verhoef (not sure why yet)\r\n    assertFalse(routine.isValid(\"9\"), \"isValid() Length 1\");\r\n    // calculate() null\r\n    Exception e = assertThrows(Exception.class, () -> routine.calculate(null), \"calculate() Null\");\r\n    assertEquals(missingMessage, e.getMessage(), \"calculate() Null\");\r\n    // calculate() zero length\r\n    e = assertThrows(Exception.class, () -> routine.calculate(\"\"), \"calculate() Zero Length\");\r\n    assertEquals(missingMessage, e.getMessage(), \"calculate() Zero Length\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\AbstractCheckDigitTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "/**\r\n * Test check digit serialization.\r\n */\r\n@Test\r\nvoid testSerialization() {\r\n    assumeTrue(routine instanceof Serializable);\r\n    // Serialize the check digit routine\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\r\n        oos.writeObject(routine);\r\n        oos.flush();\r\n    } catch (final Exception e) {\r\n        fail(routine.getClass().getName() + \" error during serialization: \" + e);\r\n    }\r\n    // Deserialize the test object\r\n    Object result = null;\r\n    try (ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())) {\r\n        final ObjectInputStream ois = new ObjectInputStream(bais);\r\n        result = ois.readObject();\r\n    } catch (final Exception e) {\r\n        fail(routine.getClass().getName() + \" error during deserialization: \" + e);\r\n    }\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\AbstractCheckDigitTest.java",
  "methodName" : "testZeroSum",
  "sourceCode" : "/**\r\n * Test zero sum\r\n */\r\n@Test\r\nvoid testZeroSum() {\r\n    assertFalse(routine.isValid(zeroSum), \"isValid() Zero Sum\");\r\n    final Exception e = assertThrows(Exception.class, () -> routine.calculate(zeroSum), \"Zero Sum\");\r\n    assertEquals(\"Invalid code, sum is zero\", e.getMessage(), \"isValid() Zero Sum\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\CUSIPCheckDigitTest.java",
  "methodName" : "testValidator336InvalidCheckDigits",
  "sourceCode" : "@Test\r\nvoid testValidator336InvalidCheckDigits() {\r\n    for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\r\n        assertFalse(routine.isValid(invalidCheckDigit), \"Should fail: \" + invalidCheckDigit);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\CUSIPCheckDigitTest.java",
  "methodName" : "testValidator336ValidCheckDigits",
  "sourceCode" : "@Test\r\nvoid testValidator336ValidCheckDigits() {\r\n    for (final String validCheckDigit : VALID_CHECK_DIGITS) {\r\n        assertTrue(routine.isValid(validCheckDigit), \"Should fail: \" + validCheckDigit);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\IBANCheckDigitTest.java",
  "methodName" : "testOther",
  "sourceCode" : "@Test\r\nvoid testOther() throws Exception {\r\n    try (BufferedReader rdr = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream(\"IBANtests.txt\"), \"ASCII\"))) {\r\n        String line;\r\n        while ((line = rdr.readLine()) != null) {\r\n            if (!line.startsWith(\"#\") && !line.isEmpty()) {\r\n                if (line.startsWith(\"-\")) {\r\n                    line = line.substring(1);\r\n                    assertFalse(routine.isValid(line.replace(\" \", \"\")), line);\r\n                } else {\r\n                    assertTrue(routine.isValid(line.replace(\" \", \"\")), line);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\IBANCheckDigitTest.java",
  "methodName" : "testZeroSum",
  "sourceCode" : "/**\r\n * Test zero sum\r\n */\r\n@Override\r\n@Test\r\nvoid testZeroSum() {\r\n    // ignore, don't run this test\r\n    // example code used to create dummy IBANs\r\n    //        try {\r\n    //            for(int i=0; i<97;i++) {\r\n    //                String check = String.format(\"ZZ00ZZZZZZZZZZZZZZZZZZZZZZZZZ%02d\", new Object[]{Integer.valueOf(i)});\r\n    //                String chk = routine.calculate(check);\r\n    //                if (chk.equals(\"97\")||chk.equals(\"98\")||chk.equals(\"02\")) {\r\n    //                    System.out.println(check+ \" \"+chk);\r\n    //                }\r\n    //            }\r\n    //        } catch (CheckDigitException e) {\r\n    //            e.printStackTrace();\r\n    //        }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\ISBNCheckDigitTest.java",
  "methodName" : "testInvalidLength",
  "sourceCode" : "/**\r\n * Sets up routine & valid codes.\r\n */\r\n@Test\r\nvoid testInvalidLength() {\r\n    assertFalse(routine.isValid(\"123456789\"), \"isValid() Lth 9 \");\r\n    assertFalse(routine.isValid(\"12345678901\"), \"isValid() Lth 11\");\r\n    assertFalse(routine.isValid(\"123456789012\"), \"isValid() Lth 12\");\r\n    assertFalse(routine.isValid(\"12345678901234\"), \"isValid() Lth 14\");\r\n    Exception e = assertThrows(CheckDigitException.class, () -> routine.calculate(\"12345678\"), \"calculate() Lth 8\");\r\n    assertEquals(\"Invalid ISBN Length = 8\", e.getMessage(), \"calculate() Lth 8\");\r\n    e = assertThrows(CheckDigitException.class, () -> routine.calculate(\"1234567890\"), \"calculate() Lth 10\");\r\n    assertEquals(\"Invalid ISBN Length = 10\", e.getMessage(), \"calculate() Lth 10\");\r\n    e = assertThrows(CheckDigitException.class, () -> routine.calculate(\"12345678901\"), \"calculate() Lth 11\");\r\n    assertEquals(\"Invalid ISBN Length = 11\", e.getMessage(), \"calculate() Lth 11\");\r\n    e = assertThrows(CheckDigitException.class, () -> routine.calculate(\"1234567890123\"), \"calculate() Lth 13\");\r\n    assertEquals(\"Invalid ISBN Length = 13\", e.getMessage(), \"calculate() Lth 13\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\ISINCheckDigitTest.java",
  "methodName" : "testValidator345",
  "sourceCode" : "@Test\r\nvoid testValidator345() {\r\n    for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\r\n        assertFalse(routine.isValid(invalidCheckDigit), \"Should fail: \" + invalidCheckDigit);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\ModulusTenCUSIPCheckDigitTest.java",
  "methodName" : "testValidator336InvalidCheckDigits",
  "sourceCode" : "@Test\r\nvoid testValidator336InvalidCheckDigits() {\r\n    for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\r\n        assertFalse(routine.isValid(invalidCheckDigit), \"Should fail: \" + invalidCheckDigit);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\ModulusTenCUSIPCheckDigitTest.java",
  "methodName" : "testValidator336ValidCheckDigits",
  "sourceCode" : "@Test\r\nvoid testValidator336ValidCheckDigits() {\r\n    for (final String validCheckDigit : VALID_CHECK_DIGITS) {\r\n        assertTrue(routine.isValid(validCheckDigit), \"Should fail: \" + validCheckDigit);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\ModulusTenSedolCheckDigitTest.java",
  "methodName" : "testValidator346",
  "sourceCode" : "@Test\r\nvoid testValidator346() {\r\n    for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\r\n        assertFalse(routine.isValid(invalidCheckDigit), \"Should fail: \" + invalidCheckDigit);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\SedolCheckDigitTest.java",
  "methodName" : "testValidator346",
  "sourceCode" : "@Test\r\nvoid testValidator346() {\r\n    for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\r\n        assertFalse(routine.isValid(invalidCheckDigit), \"Should fail: \" + invalidCheckDigit);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\checkdigit\\VerhoeffCheckDigitTest.java",
  "methodName" : "testZeroSum",
  "sourceCode" : "/**\r\n * Test zero sum\r\n */\r\n@Override\r\n@Test\r\nvoid testZeroSum() {\r\n    // ignore, don't run this test\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CodeValidatorTest.java",
  "methodName" : "testCheckDigit",
  "sourceCode" : "/**\r\n * Test Check Digit.\r\n */\r\n@Test\r\nvoid testCheckDigit() {\r\n    CodeValidator validator = new CodeValidator((String) null, -1, -1, (CheckDigit) null);\r\n    final String invalidEAN = \"9781930110992\";\r\n    final String validEAN = \"9781930110991\";\r\n    // Test no CheckDigit (i.e. null)\r\n    assertNull(validator.getCheckDigit(), \"No CheckDigit\");\r\n    assertEquals(invalidEAN, validator.validate(invalidEAN), \"No CheckDigit invalid\");\r\n    assertEquals(validEAN, validator.validate(validEAN), \"No CheckDigit valid\");\r\n    assertTrue(validator.isValid(invalidEAN), \"No CheckDigit (is) invalid\");\r\n    assertTrue(validator.isValid(validEAN), \"No CheckDigit (is) valid\");\r\n    // Use the EAN-13 check digit routine\r\n    validator = new CodeValidator((String) null, -1, EAN13CheckDigit.EAN13_CHECK_DIGIT);\r\n    assertNotNull(validator.getCheckDigit(), \"EAN CheckDigit\");\r\n    assertNull(validator.validate(invalidEAN), \"EAN CheckDigit invalid\");\r\n    assertEquals(validEAN, validator.validate(validEAN), \"EAN CheckDigit valid\");\r\n    assertFalse(validator.isValid(invalidEAN), \"EAN CheckDigit (is) invalid\");\r\n    assertTrue(validator.isValid(validEAN), \"EAN CheckDigit (is) valid\");\r\n    assertNull(validator.validate(\"978193011099X\"), \"EAN CheckDigit ex\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CodeValidatorTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "/**\r\n * Test Regular Expression.\r\n */\r\n@Test\r\nvoid testConstructors() {\r\n    CodeValidator validator;\r\n    final RegexValidator regex = new RegexValidator(\"^[0-9]*$\");\r\n    // Constructor 1\r\n    validator = new CodeValidator(regex, EAN13CheckDigit.EAN13_CHECK_DIGIT);\r\n    assertEquals(regex, validator.getRegexValidator(), \"Constructor 1 - regex\");\r\n    assertEquals(-1, validator.getMinLength(), \"Constructor 1 - min length\");\r\n    assertEquals(-1, validator.getMaxLength(), \"Constructor 1 - max length\");\r\n    assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 1 - check digit\");\r\n    // Constructor 2\r\n    validator = new CodeValidator(regex, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\r\n    assertEquals(regex, validator.getRegexValidator(), \"Constructor 2 - regex\");\r\n    assertEquals(13, validator.getMinLength(), \"Constructor 2 - min length\");\r\n    assertEquals(13, validator.getMaxLength(), \"Constructor 2 - max length\");\r\n    assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 2 - check digit\");\r\n    // Constructor 3\r\n    validator = new CodeValidator(regex, 10, 20, EAN13CheckDigit.EAN13_CHECK_DIGIT);\r\n    assertEquals(regex, validator.getRegexValidator(), \"Constructor 3 - regex\");\r\n    assertEquals(10, validator.getMinLength(), \"Constructor 3 - min length\");\r\n    assertEquals(20, validator.getMaxLength(), \"Constructor 3 - max length\");\r\n    assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 3 - check digit\");\r\n    // Constructor 4\r\n    validator = new CodeValidator(\"^[0-9]*$\", EAN13CheckDigit.EAN13_CHECK_DIGIT);\r\n    assertEquals(validator.getRegexValidator().toString(), \"RegexValidator{^[0-9]*$}\", \"Constructor 4 - regex\");\r\n    assertEquals(-1, validator.getMinLength(), \"Constructor 4 - min length\");\r\n    assertEquals(-1, validator.getMaxLength(), \"Constructor 4 - max length\");\r\n    assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 4 - check digit\");\r\n    // Constructor 5\r\n    validator = new CodeValidator(\"^[0-9]*$\", 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\r\n    assertEquals(validator.getRegexValidator().toString(), \"RegexValidator{^[0-9]*$}\", \"Constructor 5 - regex\");\r\n    assertEquals(13, validator.getMinLength(), \"Constructor 5 - min length\");\r\n    assertEquals(13, validator.getMaxLength(), \"Constructor 5 - max length\");\r\n    assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 5 - check digit\");\r\n    // Constructor 6\r\n    validator = new CodeValidator(\"^[0-9]*$\", 10, 20, EAN13CheckDigit.EAN13_CHECK_DIGIT);\r\n    assertEquals(validator.getRegexValidator().toString(), \"RegexValidator{^[0-9]*$}\", \"Constructor 6 - regex\");\r\n    assertEquals(10, validator.getMinLength(), \"Constructor 6 - min length\");\r\n    assertEquals(20, validator.getMaxLength(), \"Constructor 6 - max length\");\r\n    assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 6 - check digit\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CodeValidatorTest.java",
  "methodName" : "testLength",
  "sourceCode" : "/**\r\n * Test the minimum/maximum length\r\n */\r\n@Test\r\nvoid testLength() {\r\n    CodeValidator validator = new CodeValidator((String) null, -1, -1, (CheckDigit) null);\r\n    final String length10 = \"1234567890\";\r\n    final String length11 = \"12345678901\";\r\n    final String length12 = \"123456789012\";\r\n    final String length20 = \"12345678901234567890\";\r\n    final String length21 = \"123456789012345678901\";\r\n    final String length22 = \"1234567890123456789012\";\r\n    assertEquals(-1, validator.getMinLength(), \"No min\");\r\n    assertEquals(-1, validator.getMaxLength(), \"No max\");\r\n    assertEquals(length10, validator.validate(length10), \"No Length 10\");\r\n    assertEquals(length11, validator.validate(length11), \"No Length 11\");\r\n    assertEquals(length12, validator.validate(length12), \"No Length 12\");\r\n    assertEquals(length20, validator.validate(length20), \"No Length 20\");\r\n    assertEquals(length21, validator.validate(length21), \"No Length 21\");\r\n    assertEquals(length22, validator.validate(length22), \"No Length 22\");\r\n    validator = new CodeValidator((String) null, 11, -1, (CheckDigit) null);\r\n    assertEquals(11, validator.getMinLength(), \"Min 11 - min\");\r\n    assertEquals(-1, validator.getMaxLength(), \"Min 11 - max\");\r\n    assertNull(validator.validate(length10), \"Min 11 - 10\");\r\n    assertEquals(length11, validator.validate(length11), \"Min 11 - 11\");\r\n    assertEquals(length12, validator.validate(length12), \"Min 11 - 12\");\r\n    assertEquals(length20, validator.validate(length20), \"Min 11 - 20\");\r\n    assertEquals(length21, validator.validate(length21), \"Min 11 - 21\");\r\n    assertEquals(length22, validator.validate(length22), \"Min 11 - 22\");\r\n    validator = new CodeValidator((String) null, -1, 21, (CheckDigit) null);\r\n    assertEquals(-1, validator.getMinLength(), \"Max 21 - min\");\r\n    assertEquals(21, validator.getMaxLength(), \"Max 21 - max\");\r\n    assertEquals(length10, validator.validate(length10), \"Max 21 - 10\");\r\n    assertEquals(length11, validator.validate(length11), \"Max 21 - 11\");\r\n    assertEquals(length12, validator.validate(length12), \"Max 21 - 12\");\r\n    assertEquals(length20, validator.validate(length20), \"Max 21 - 20\");\r\n    assertEquals(length21, validator.validate(length21), \"Max 21 - 21\");\r\n    assertNull(validator.validate(length22), \"Max 21 - 22\");\r\n    validator = new CodeValidator((String) null, 11, 21, (CheckDigit) null);\r\n    assertEquals(11, validator.getMinLength(), \"Min 11 / Max 21 - min\");\r\n    assertEquals(21, validator.getMaxLength(), \"Min 11 / Max 21 - max\");\r\n    assertNull(validator.validate(length10), \"Min 11 / Max 21 - 10\");\r\n    assertEquals(length11, validator.validate(length11), \"Min 11 / Max 21 - 11\");\r\n    assertEquals(length12, validator.validate(length12), \"Min 11 / Max 21 - 12\");\r\n    assertEquals(length20, validator.validate(length20), \"Min 11 / Max 21 - 20\");\r\n    assertEquals(length21, validator.validate(length21), \"Min 11 / Max 21 - 21\");\r\n    assertNull(validator.validate(length22), \"Min 11 / Max 21 - 22\");\r\n    validator = new CodeValidator((String) null, 11, 11, (CheckDigit) null);\r\n    assertEquals(11, validator.getMinLength(), \"Exact 11 - min\");\r\n    assertEquals(11, validator.getMaxLength(), \"Exact 11 - max\");\r\n    assertNull(validator.validate(length10), \"Exact 11 - 10\");\r\n    assertEquals(length11, validator.validate(length11), \"Exact 11 - 11\");\r\n    assertNull(validator.validate(length12), \"Exact 11 - 12\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CodeValidatorTest.java",
  "methodName" : "testNoInput",
  "sourceCode" : "/**\r\n * Test Regular Expression.\r\n */\r\n@Test\r\nvoid testNoInput() {\r\n    final CodeValidator validator = new CodeValidator((String) null, -1, -1, (CheckDigit) null);\r\n    assertNull(validator.validate(null), \"Null\");\r\n    assertNull(validator.validate(\"\"), \"Zero Length\");\r\n    assertNull(validator.validate(\"   \"), \"Spaces\");\r\n    assertEquals(validator.validate(\" A  \"), \"A\", \"Trimmed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CodeValidatorTest.java",
  "methodName" : "testRegex",
  "sourceCode" : "/**\r\n * Test Regular Expression.\r\n */\r\n@Test\r\nvoid testRegex() {\r\n    CodeValidator validator = new CodeValidator((String) null, -1, -1, (CheckDigit) null);\r\n    final String value2 = \"12\";\r\n    final String value3 = \"123\";\r\n    final String value4 = \"1234\";\r\n    final String value5 = \"12345\";\r\n    final String invalid = \"12a4\";\r\n    // No Regular Expression\r\n    assertNull(validator.getRegexValidator(), \"No Regex\");\r\n    assertEquals(value2, validator.validate(value2), \"No Regex 2\");\r\n    assertEquals(value3, validator.validate(value3), \"No Regex 3\");\r\n    assertEquals(value4, validator.validate(value4), \"No Regex 4\");\r\n    assertEquals(value5, validator.validate(value5), \"No Regex 5\");\r\n    assertEquals(invalid, validator.validate(invalid), \"No Regex invalid\");\r\n    // Regular Expression\r\n    String regex = \"^([0-9]{3,4})$\";\r\n    validator = new CodeValidator(regex, -1, -1, (CheckDigit) null);\r\n    assertNotNull(validator.getRegexValidator(), \"No Regex\");\r\n    assertNull(validator.validate(value2), \"Regex 2\");\r\n    assertEquals(value3, validator.validate(value3), \"Regex 3\");\r\n    assertEquals(value4, validator.validate(value4), \"Regex 4\");\r\n    assertNull(validator.validate(value5), \"Regex 5\");\r\n    assertNull(validator.validate(invalid), \"Regex invalid\");\r\n    // Reformatted\r\n    regex = \"^([0-9]{3})(?:[-\\\\s])([0-9]{3})$\";\r\n    validator = new CodeValidator(new RegexValidator(regex), 6, (CheckDigit) null);\r\n    assertEquals(validator.validate(\"123-456\"), \"123456\", \"Reformat 123-456\");\r\n    assertEquals(validator.validate(\"123 456\"), \"123456\", \"Reformat 123 456\");\r\n    assertNull(validator.validate(\"123456\"), \"Reformat 123456\");\r\n    assertNull(validator.validate(\"123.456\"), \"Reformat 123.456\");\r\n    regex = \"^(?:([0-9]{3})(?:[-\\\\s])([0-9]{3}))|([0-9]{6})$\";\r\n    validator = new CodeValidator(new RegexValidator(regex), 6, (CheckDigit) null);\r\n    assertEquals(validator.getRegexValidator().toString(), \"RegexValidator{\" + regex + \"}\", \"Reformat 2 Regex\");\r\n    assertEquals(validator.validate(\"123-456\"), \"123456\", \"Reformat 2 123-456\");\r\n    assertEquals(validator.validate(\"123 456\"), \"123456\", \"Reformat 2 123 456\");\r\n    assertEquals(validator.validate(\"123456\"), \"123456\", \"Reformat 2 123456\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CodeValidatorTest.java",
  "methodName" : "testValidator294Part1",
  "sourceCode" : "@Test\r\nvoid testValidator294Part1() {\r\n    CodeValidator validator = new CodeValidator((String) null, 0, -1, (CheckDigit) null);\r\n    assertNull(validator.validate(null), \"Null\");\r\n    validator = new CodeValidator((String) null, -1, 0, (CheckDigit) null);\r\n    assertNull(validator.validate(null), \"Null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CodeValidatorTest.java",
  "methodName" : "testValidator294Part2",
  "sourceCode" : "@Test\r\nvoid testValidator294Part2() {\r\n    final CodeValidator validator = new CodeValidator((String) null, -1, 0, (CheckDigit) null);\r\n    assertNull(validator.validate(null), \"Null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testAddAllowedCardType",
  "sourceCode" : "@Test\r\nvoid testAddAllowedCardType() {\r\n    final CreditCardValidator ccv = new CreditCardValidator(CreditCardValidator.NONE);\r\n    // Turned off all cards so even valid numbers should fail\r\n    assertFalse(ccv.isValid(VALID_VISA));\r\n    assertFalse(ccv.isValid(VALID_AMEX));\r\n    assertFalse(ccv.isValid(VALID_MASTERCARD));\r\n    assertFalse(ccv.isValid(VALID_DISCOVER));\r\n    assertFalse(ccv.isValid(VALID_DINERS));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testAmexOption",
  "sourceCode" : "/**\r\n * Test the Amex Card option\r\n */\r\n@Test\r\nvoid testAmexOption() {\r\n    final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.AMEX);\r\n    assertFalse(validator.isValid(ERROR_AMEX), \"Invalid\");\r\n    assertNull(validator.validate(ERROR_AMEX), \"validate()\");\r\n    assertEquals(VALID_AMEX, validator.validate(VALID_AMEX));\r\n    assertTrue(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertFalse(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testAmexValidator",
  "sourceCode" : "/**\r\n * Test the Amex Card validator\r\n */\r\n@Test\r\nvoid testAmexValidator() {\r\n    final CodeValidator validator = CreditCardValidator.AMEX_VALIDATOR;\r\n    final RegexValidator regex = validator.getRegexValidator();\r\n    // ****** Test Regular Expression ******\r\n    // length 15 and start with a \"34\" or \"37\"\r\n    assertFalse(regex.isValid(\"343456789012\"), \"Length 12\");\r\n    assertFalse(regex.isValid(\"3434567890123\"), \"Length 13\");\r\n    assertFalse(regex.isValid(\"34345678901234\"), \"Length 14\");\r\n    assertTrue(regex.isValid(\"343456789012345\"), \"Length 15\");\r\n    assertFalse(regex.isValid(\"3434567890123456\"), \"Length 16\");\r\n    assertFalse(regex.isValid(\"34345678901234567\"), \"Length 17\");\r\n    assertFalse(regex.isValid(\"343456789012345678\"), \"Length 18\");\r\n    assertFalse(regex.isValid(\"333456789012345\"), \"Prefix 33\");\r\n    assertTrue(regex.isValid(\"343456789012345\"), \"Prefix 34\");\r\n    assertFalse(regex.isValid(\"353456789012345\"), \"Prefix 35\");\r\n    assertFalse(regex.isValid(\"363456789012345\"), \"Prefix 36\");\r\n    assertTrue(regex.isValid(\"373456789012345\"), \"Prefix 37\");\r\n    assertFalse(regex.isValid(\"383456789012345\"), \"Prefix 38\");\r\n    assertFalse(regex.isValid(\"413456789012345\"), \"Prefix 41\");\r\n    assertFalse(regex.isValid(\"3434567x9012345\"), \"Invalid Char\");\r\n    // *********** Test Validator **********\r\n    assertTrue(regex.isValid(ERROR_AMEX), \"Valid regex\");\r\n    assertFalse(validator.isValid(ERROR_AMEX), \"Invalid\");\r\n    assertNull(validator.validate(ERROR_AMEX), \"validate()\");\r\n    assertEquals(VALID_AMEX, validator.validate(VALID_AMEX));\r\n    assertTrue(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertFalse(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n    assertTrue(validator.isValid(\"371449635398431\"), \"Valid-A\");\r\n    assertTrue(validator.isValid(\"340000000000009\"), \"Valid-B\");\r\n    assertTrue(validator.isValid(\"370000000000002\"), \"Valid-C\");\r\n    assertTrue(validator.isValid(\"378734493671000\"), \"Valid-D\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testArrayConstructor",
  "sourceCode" : "/**\r\n * Test the CodeValidator array constructor\r\n */\r\n@Test\r\nvoid testArrayConstructor() {\r\n    final CreditCardValidator ccv = new CreditCardValidator(new CodeValidator[] { CreditCardValidator.VISA_VALIDATOR, CreditCardValidator.AMEX_VALIDATOR });\r\n    assertTrue(ccv.isValid(VALID_VISA));\r\n    assertTrue(ccv.isValid(VALID_SHORT_VISA));\r\n    assertTrue(ccv.isValid(VALID_AMEX));\r\n    assertFalse(ccv.isValid(VALID_MASTERCARD));\r\n    assertFalse(ccv.isValid(VALID_DISCOVER));\r\n    assertFalse(ccv.isValid(ERROR_VISA));\r\n    assertFalse(ccv.isValid(ERROR_SHORT_VISA));\r\n    assertFalse(ccv.isValid(ERROR_AMEX));\r\n    assertFalse(ccv.isValid(ERROR_MASTERCARD));\r\n    assertFalse(ccv.isValid(ERROR_DISCOVER));\r\n    assertThrows(IllegalArgumentException.class, () -> new CreditCardValidator((CodeValidator[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testDinersOption",
  "sourceCode" : "/**\r\n * Test the Diners Card option\r\n */\r\n@Test\r\nvoid testDinersOption() {\r\n    final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.DINERS);\r\n    assertFalse(validator.isValid(ERROR_DINERS), \"Invalid\");\r\n    assertNull(validator.validate(ERROR_DINERS), \"validate()\");\r\n    assertEquals(VALID_DINERS, validator.validate(VALID_DINERS));\r\n    assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertTrue(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertFalse(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testDinersValidator",
  "sourceCode" : "/**\r\n * Test the Diners Card validator\r\n */\r\n@Test\r\nvoid testDinersValidator() {\r\n    final CodeValidator validator = CreditCardValidator.DINERS_VALIDATOR;\r\n    final RegexValidator regex = validator.getRegexValidator();\r\n    // ****** Test Regular Expression ******\r\n    // length 14 and start with a \"300-305\" or \"3095\" or \"36\" or \"38\" or \"39\"\r\n    assertFalse(regex.isValid(\"300456789012\"), \"Length 12-300\");\r\n    assertFalse(regex.isValid(\"363456789012\"), \"Length 12-36\");\r\n    assertFalse(regex.isValid(\"3004567890123\"), \"Length 13-300\");\r\n    assertFalse(regex.isValid(\"3634567890123\"), \"Length 13-36\");\r\n    assertTrue(regex.isValid(\"30045678901234\"), \"Length 14-300\");\r\n    assertTrue(regex.isValid(\"36345678901234\"), \"Length 14-36\");\r\n    assertFalse(regex.isValid(\"300456789012345\"), \"Length 15-300\");\r\n    assertFalse(regex.isValid(\"363456789012345\"), \"Length 15-36\");\r\n    assertFalse(regex.isValid(\"3004567890123456\"), \"Length 16-300\");\r\n    assertFalse(regex.isValid(\"3634567890123456\"), \"Length 16-36\");\r\n    assertFalse(regex.isValid(\"30045678901234567\"), \"Length 17-300\");\r\n    assertFalse(regex.isValid(\"36345678901234567\"), \"Length 17-36\");\r\n    assertFalse(regex.isValid(\"300456789012345678\"), \"Length 18-300\");\r\n    assertFalse(regex.isValid(\"363456789012345678\"), \"Length 18-36\");\r\n    assertTrue(regex.isValid(\"30045678901234\"), \"Prefix 300\");\r\n    assertTrue(regex.isValid(\"30145678901234\"), \"Prefix 301\");\r\n    assertTrue(regex.isValid(\"30245678901234\"), \"Prefix 302\");\r\n    assertTrue(regex.isValid(\"30345678901234\"), \"Prefix 303\");\r\n    assertTrue(regex.isValid(\"30445678901234\"), \"Prefix 304\");\r\n    assertTrue(regex.isValid(\"30545678901234\"), \"Prefix 305\");\r\n    assertFalse(regex.isValid(\"30645678901234\"), \"Prefix 306\");\r\n    assertFalse(regex.isValid(\"30945678901234\"), \"Prefix 3094\");\r\n    assertTrue(regex.isValid(\"30955678901234\"), \"Prefix 3095\");\r\n    assertFalse(regex.isValid(\"30965678901234\"), \"Prefix 3096\");\r\n    assertFalse(regex.isValid(\"35345678901234\"), \"Prefix 35\");\r\n    assertTrue(regex.isValid(\"36345678901234\"), \"Prefix 36\");\r\n    assertFalse(regex.isValid(\"37345678901234\"), \"Prefix 37\");\r\n    assertTrue(regex.isValid(\"38345678901234\"), \"Prefix 38\");\r\n    assertTrue(regex.isValid(\"39345678901234\"), \"Prefix 39\");\r\n    assertFalse(regex.isValid(\"3004567x901234\"), \"Invalid Char-A\");\r\n    assertFalse(regex.isValid(\"3634567x901234\"), \"Invalid Char-B\");\r\n    // *********** Test Validator **********\r\n    assertTrue(regex.isValid(ERROR_DINERS), \"Valid regex\");\r\n    assertFalse(validator.isValid(ERROR_DINERS), \"Invalid\");\r\n    assertNull(validator.validate(ERROR_DINERS), \"validate()\");\r\n    assertEquals(VALID_DINERS, validator.validate(VALID_DINERS));\r\n    assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertTrue(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertFalse(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n    assertTrue(validator.isValid(\"30000000000004\"), \"Valid-A\");\r\n    assertTrue(validator.isValid(\"30123456789019\"), \"Valid-B\");\r\n    assertTrue(validator.isValid(\"36432685260294\"), \"Valid-C\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testDiscoverOption",
  "sourceCode" : "/**\r\n * Test the Discover Card option\r\n */\r\n@Test\r\nvoid testDiscoverOption() {\r\n    final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.DISCOVER);\r\n    assertFalse(validator.isValid(ERROR_DISCOVER), \"Invalid\");\r\n    assertFalse(validator.isValid(ERROR_DISCOVER65), \"Invalid65\");\r\n    assertNull(validator.validate(ERROR_DISCOVER), \"validate()\");\r\n    assertEquals(VALID_DISCOVER, validator.validate(VALID_DISCOVER));\r\n    assertEquals(VALID_DISCOVER65, validator.validate(VALID_DISCOVER65));\r\n    assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertTrue(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertTrue(validator.isValid(VALID_DISCOVER65), \"Discover\");\r\n    assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertFalse(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testDiscoverValidator",
  "sourceCode" : "/**\r\n * Test the Discover Card validator\r\n */\r\n@Test\r\nvoid testDiscoverValidator() {\r\n    final CodeValidator validator = CreditCardValidator.DISCOVER_VALIDATOR;\r\n    final RegexValidator regex = validator.getRegexValidator();\r\n    // ****** Test Regular Expression ******\r\n    // length 16 and start with either \"6011\" or or \"64[4-9]\" or \"65\"\r\n    assertFalse(regex.isValid(\"601156789012\"), \"Length 12-6011\");\r\n    assertFalse(regex.isValid(\"653456789012\"), \"Length 12-65\");\r\n    assertFalse(regex.isValid(\"6011567890123\"), \"Length 13-6011\");\r\n    assertFalse(regex.isValid(\"6534567890123\"), \"Length 13-65\");\r\n    assertFalse(regex.isValid(\"60115678901234\"), \"Length 14-6011\");\r\n    assertFalse(regex.isValid(\"65345678901234\"), \"Length 14-65\");\r\n    assertFalse(regex.isValid(\"601156789012345\"), \"Length 15-6011\");\r\n    assertFalse(regex.isValid(\"653456789012345\"), \"Length 15-65\");\r\n    assertTrue(regex.isValid(\"6011567890123456\"), \"Length 16-6011\");\r\n    assertTrue(regex.isValid(\"6444567890123456\"), \"Length 16-644\");\r\n    assertTrue(regex.isValid(\"6484567890123456\"), \"Length 16-648\");\r\n    assertTrue(regex.isValid(\"6534567890123456\"), \"Length 16-65\");\r\n    assertFalse(regex.isValid(\"65345678901234567\"), \"Length 17-65\");\r\n    assertFalse(regex.isValid(\"601156789012345678\"), \"Length 18-6011\");\r\n    assertFalse(regex.isValid(\"653456789012345678\"), \"Length 18-65\");\r\n    assertFalse(regex.isValid(\"6404567890123456\"), \"Prefix 640\");\r\n    assertFalse(regex.isValid(\"6414567890123456\"), \"Prefix 641\");\r\n    assertFalse(regex.isValid(\"6424567890123456\"), \"Prefix 642\");\r\n    assertFalse(regex.isValid(\"6434567890123456\"), \"Prefix 643\");\r\n    assertFalse(regex.isValid(\"6010567890123456\"), \"Prefix 6010\");\r\n    assertFalse(regex.isValid(\"6012567890123456\"), \"Prefix 6012\");\r\n    assertFalse(regex.isValid(\"6011567x90123456\"), \"Invalid Char\");\r\n    // *********** Test Validator **********\r\n    assertTrue(regex.isValid(ERROR_DISCOVER), \"Valid regex\");\r\n    assertTrue(regex.isValid(ERROR_DISCOVER65), \"Valid regex65\");\r\n    assertFalse(validator.isValid(ERROR_DISCOVER), \"Invalid\");\r\n    assertFalse(validator.isValid(ERROR_DISCOVER65), \"Invalid65\");\r\n    assertNull(validator.validate(ERROR_DISCOVER), \"validate()\");\r\n    assertEquals(VALID_DISCOVER, validator.validate(VALID_DISCOVER));\r\n    assertEquals(VALID_DISCOVER65, validator.validate(VALID_DISCOVER65));\r\n    assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertTrue(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertTrue(validator.isValid(VALID_DISCOVER65), \"Discover\");\r\n    assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertFalse(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n    assertTrue(validator.isValid(\"6011111111111117\"), \"Valid-A\");\r\n    assertTrue(validator.isValid(\"6011000000000004\"), \"Valid-B\");\r\n    assertTrue(validator.isValid(\"6011000000000012\"), \"Valid-C\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testDisjointRange",
  "sourceCode" : "@Test\r\nvoid testDisjointRange() {\r\n    CreditCardValidator ccv = new CreditCardValidator(new CreditCardRange[] { new CreditCardRange(\"305\", \"4\", new int[] { 13, 16 }) });\r\n    assertEquals(13, VALID_SHORT_VISA.length());\r\n    assertEquals(16, VALID_VISA.length());\r\n    assertEquals(14, VALID_DINERS.length());\r\n    assertTrue(ccv.isValid(VALID_SHORT_VISA));\r\n    assertTrue(ccv.isValid(VALID_VISA));\r\n    assertFalse(ccv.isValid(ERROR_SHORT_VISA));\r\n    assertFalse(ccv.isValid(ERROR_VISA));\r\n    assertFalse(ccv.isValid(VALID_DINERS));\r\n    ccv = new CreditCardValidator(new CreditCardRange[] { // add 14 as a valid length\r\n    new CreditCardRange(\"305\", \"4\", new int[] { 13, 14, 16 }) });\r\n    assertTrue(ccv.isValid(VALID_DINERS));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testGeneric",
  "sourceCode" : "@Test\r\nvoid testGeneric() {\r\n    final CreditCardValidator ccv = CreditCardValidator.genericCreditCardValidator();\r\n    for (final String s : VALID_CARDS) {\r\n        assertTrue(ccv.isValid(s), s);\r\n    }\r\n    for (final String s : ERROR_CARDS) {\r\n        assertFalse(ccv.isValid(s), s);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testIsValid",
  "sourceCode" : "@Test\r\nvoid testIsValid() {\r\n    CreditCardValidator ccv = new CreditCardValidator();\r\n    assertNull(ccv.validate(null));\r\n    assertFalse(ccv.isValid(null));\r\n    assertFalse(ccv.isValid(\"\"));\r\n    // too short\r\n    assertFalse(ccv.isValid(\"123456789012\"));\r\n    // too long\r\n    assertFalse(ccv.isValid(\"12345678901234567890\"));\r\n    assertFalse(ccv.isValid(\"4417123456789112\"));\r\n    assertFalse(ccv.isValid(\"4417q23456w89113\"));\r\n    assertTrue(ccv.isValid(VALID_VISA));\r\n    assertTrue(ccv.isValid(VALID_SHORT_VISA));\r\n    assertTrue(ccv.isValid(VALID_AMEX));\r\n    assertTrue(ccv.isValid(VALID_MASTERCARD));\r\n    assertTrue(ccv.isValid(VALID_DISCOVER));\r\n    assertTrue(ccv.isValid(VALID_DISCOVER65));\r\n    assertFalse(ccv.isValid(ERROR_VISA));\r\n    assertFalse(ccv.isValid(ERROR_SHORT_VISA));\r\n    assertFalse(ccv.isValid(ERROR_AMEX));\r\n    assertFalse(ccv.isValid(ERROR_MASTERCARD));\r\n    assertFalse(ccv.isValid(ERROR_DISCOVER));\r\n    assertFalse(ccv.isValid(ERROR_DISCOVER65));\r\n    // disallow Visa so it should fail even with good number\r\n    ccv = new CreditCardValidator(CreditCardValidator.AMEX);\r\n    assertFalse(ccv.isValid(\"4417123456789113\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testMastercardOption",
  "sourceCode" : "/**\r\n * Test the Mastercard Card option\r\n */\r\n@Test\r\nvoid testMastercardOption() {\r\n    final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.MASTERCARD);\r\n    assertFalse(validator.isValid(ERROR_MASTERCARD), \"Invalid\");\r\n    assertNull(validator.validate(ERROR_MASTERCARD), \"validate()\");\r\n    assertEquals(VALID_MASTERCARD, validator.validate(VALID_MASTERCARD));\r\n    assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertTrue(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertFalse(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testMastercardUsingSeparators",
  "sourceCode" : "/**\r\n * Test using separators\r\n */\r\n@Test\r\nvoid testMastercardUsingSeparators() {\r\n    final String masterCardRegExSep = \"^(5[1-5]\\\\d{2})(?:[- ])?(\\\\d{4})(?:[- ])?(\\\\d{4})(?:[- ])?(\\\\d{4})$\";\r\n    final CodeValidator validator = new CodeValidator(masterCardRegExSep, LuhnCheckDigit.LUHN_CHECK_DIGIT);\r\n    final RegexValidator regex = validator.getRegexValidator();\r\n    // ****** Test Regular Expression ******\r\n    // length 16 and start with a \"51-55\"\r\n    assertEquals(\"5134567890123456\", regex.validate(\"5134567890123456\"), \"Number\");\r\n    assertEquals(\"5134567890123456\", regex.validate(\"5134-5678-9012-3456\"), \"Hyphen\");\r\n    assertEquals(\"5134567890123456\", regex.validate(\"5134 5678 9012 3456\"), \"Space\");\r\n    assertEquals(\"5134567890123456\", regex.validate(\"5134-5678 9012-3456\"), \"MixedA\");\r\n    assertEquals(\"5134567890123456\", regex.validate(\"5134 5678-9012 3456\"), \"MixedB\");\r\n    assertFalse(regex.isValid(\"5134.5678.9012.3456\"), \"Invalid Separator A\");\r\n    assertFalse(regex.isValid(\"5134_5678_9012_3456\"), \"Invalid Separator B\");\r\n    assertFalse(regex.isValid(\"513-45678-9012-3456\"), \"Invalid Grouping A\");\r\n    assertFalse(regex.isValid(\"5134-567-89012-3456\"), \"Invalid Grouping B\");\r\n    assertFalse(regex.isValid(\"5134-5678-901-23456\"), \"Invalid Grouping C\");\r\n    // *********** Test Validator **********\r\n    assertEquals(\"5500000000000004\", validator.validate(\"5500-0000-0000-0004\"), \"Valid-A\");\r\n    assertEquals(\"5424000000000015\", validator.validate(\"5424 0000 0000 0015\"), \"Valid-B\");\r\n    assertEquals(\"5301250070000191\", validator.validate(\"5301-250070000191\"), \"Valid-C\");\r\n    assertEquals(\"5123456789012346\", validator.validate(\"5123456789012346\"), \"Valid-D\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testMastercardValidator",
  "sourceCode" : "/**\r\n * Test the Mastercard Card validator\r\n */\r\n@Test\r\nvoid testMastercardValidator() {\r\n    final CodeValidator validator = CreditCardValidator.MASTERCARD_VALIDATOR;\r\n    final RegexValidator regex = validator.getRegexValidator();\r\n    // ****** Test Regular Expression ******\r\n    // length 16 and start with a \"51-55\"\r\n    assertFalse(regex.isValid(\"513456789012\"), \"Length 12\");\r\n    assertFalse(regex.isValid(\"5134567890123\"), \"Length 13\");\r\n    assertFalse(regex.isValid(\"51345678901234\"), \"Length 14\");\r\n    assertFalse(regex.isValid(\"513456789012345\"), \"Length 15\");\r\n    assertTrue(regex.isValid(\"5134567890123456\"), \"Length 16\");\r\n    assertFalse(regex.isValid(\"51345678901234567\"), \"Length 17\");\r\n    assertFalse(regex.isValid(\"513456789012345678\"), \"Length 18\");\r\n    assertFalse(regex.isValid(\"4134567890123456\"), \"Prefix 41\");\r\n    assertFalse(regex.isValid(\"5034567890123456\"), \"Prefix 50\");\r\n    assertTrue(regex.isValid(\"5134567890123456\"), \"Prefix 51\");\r\n    assertTrue(regex.isValid(\"5234567890123456\"), \"Prefix 52\");\r\n    assertTrue(regex.isValid(\"5334567890123456\"), \"Prefix 53\");\r\n    assertTrue(regex.isValid(\"5434567890123456\"), \"Prefix 54\");\r\n    assertTrue(regex.isValid(\"5534567890123456\"), \"Prefix 55\");\r\n    assertFalse(regex.isValid(\"5634567890123456\"), \"Prefix 56\");\r\n    assertFalse(regex.isValid(\"6134567890123456\"), \"Prefix 61\");\r\n    assertFalse(regex.isValid(\"5134567x90123456\"), \"Invalid Char\");\r\n    // *********** Test Validator **********\r\n    assertTrue(regex.isValid(ERROR_MASTERCARD), \"Valid regex\");\r\n    assertFalse(validator.isValid(ERROR_MASTERCARD), \"Invalid\");\r\n    assertNull(validator.validate(ERROR_MASTERCARD), \"validate()\");\r\n    assertEquals(VALID_MASTERCARD, validator.validate(VALID_MASTERCARD));\r\n    assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertTrue(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertFalse(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n    assertTrue(validator.isValid(\"5500000000000004\"), \"Valid-A\");\r\n    assertTrue(validator.isValid(\"5424000000000015\"), \"Valid-B\");\r\n    assertTrue(validator.isValid(\"5301250070000191\"), \"Valid-C\");\r\n    assertTrue(validator.isValid(\"5123456789012346\"), \"Valid-D\");\r\n    assertTrue(validator.isValid(\"5555555555554444\"), \"Valid-E\");\r\n    final RegexValidator rev = validator.getRegexValidator();\r\n    final String pad = \"0000000000\";\r\n    assertFalse(rev.isValid(\"222099\" + pad), \"222099\");\r\n    for (int i = 222100; i <= 272099; i++) {\r\n        final String j = Integer.toString(i) + pad;\r\n        assertTrue(rev.isValid(j), j);\r\n    }\r\n    assertFalse(rev.isValid(\"272100\" + pad), \"272100\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testRangeGenerator",
  "sourceCode" : "@Test\r\nvoid testRangeGenerator() {\r\n    final CreditCardValidator ccv = new CreditCardValidator(new CodeValidator[] { CreditCardValidator.AMEX_VALIDATOR, CreditCardValidator.VISA_VALIDATOR, CreditCardValidator.MASTERCARD_VALIDATOR, CreditCardValidator.DISCOVER_VALIDATOR }, // Add missing validator\r\n    new CreditCardRange[] { // Diners\r\n    new CreditCardRange(\"300\", \"305\", 14, 14), // Diners\r\n    new CreditCardRange(\"3095\", null, 14, 14), // Diners\r\n    new CreditCardRange(\"36\", null, 14, 14), // Diners\r\n    new CreditCardRange(\"38\", \"39\", 14, 14) });\r\n    for (final String s : VALID_CARDS) {\r\n        assertTrue(ccv.isValid(s), s);\r\n    }\r\n    for (final String s : ERROR_CARDS) {\r\n        assertFalse(ccv.isValid(s), s);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testRangeGeneratorNoLuhn",
  "sourceCode" : "@Test\r\nvoid testRangeGeneratorNoLuhn() {\r\n    final CodeValidator cv = CreditCardValidator.createRangeValidator(new CreditCardRange[] { new CreditCardRange(\"1\", null, 6, 7), new CreditCardRange(\"644\", \"65\", 8, 8) }, null);\r\n    assertTrue(cv.isValid(\"1990000\"));\r\n    assertTrue(cv.isValid(\"199000\"));\r\n    assertFalse(cv.isValid(\"000000\"));\r\n    assertFalse(cv.isValid(\"099999\"));\r\n    assertFalse(cv.isValid(\"200000\"));\r\n    assertFalse(cv.isValid(\"64399999\"));\r\n    assertTrue(cv.isValid(\"64400000\"));\r\n    assertTrue(cv.isValid(\"64900000\"));\r\n    assertTrue(cv.isValid(\"65000000\"));\r\n    assertTrue(cv.isValid(\"65999999\"));\r\n    assertFalse(cv.isValid(\"66000000\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testValidLength",
  "sourceCode" : "@Test\r\nvoid testValidLength() {\r\n    assertTrue(CreditCardValidator.validLength(14, new CreditCardRange(\"\", \"\", 14, 14)));\r\n    assertFalse(CreditCardValidator.validLength(15, new CreditCardRange(\"\", \"\", 14, 14)));\r\n    assertFalse(CreditCardValidator.validLength(13, new CreditCardRange(\"\", \"\", 14, 14)));\r\n    assertFalse(CreditCardValidator.validLength(14, new CreditCardRange(\"\", \"\", 15, 17)));\r\n    assertTrue(CreditCardValidator.validLength(15, new CreditCardRange(\"\", \"\", 15, 17)));\r\n    assertTrue(CreditCardValidator.validLength(16, new CreditCardRange(\"\", \"\", 15, 17)));\r\n    assertTrue(CreditCardValidator.validLength(17, new CreditCardRange(\"\", \"\", 15, 17)));\r\n    assertFalse(CreditCardValidator.validLength(18, new CreditCardRange(\"\", \"\", 15, 17)));\r\n    assertFalse(CreditCardValidator.validLength(14, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\r\n    assertTrue(CreditCardValidator.validLength(15, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\r\n    assertFalse(CreditCardValidator.validLength(16, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\r\n    assertTrue(CreditCardValidator.validLength(17, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\r\n    assertFalse(CreditCardValidator.validLength(18, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testVisaOption",
  "sourceCode" : "/**\r\n * Test the Visa Card option\r\n */\r\n@Test\r\nvoid testVisaOption() {\r\n    final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.VISA);\r\n    assertFalse(validator.isValid(ERROR_VISA), \"Invalid\");\r\n    assertFalse(validator.isValid(ERROR_SHORT_VISA), \"Invalid-S\");\r\n    assertNull(validator.validate(ERROR_VISA), \"validate()\");\r\n    assertEquals(VALID_VISA, validator.validate(VALID_VISA));\r\n    assertEquals(VALID_SHORT_VISA, validator.validate(VALID_SHORT_VISA));\r\n    assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertTrue(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertTrue(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testVisaValidator",
  "sourceCode" : "/**\r\n * Test the Visa Card validator\r\n */\r\n@Test\r\nvoid testVisaValidator() {\r\n    final CodeValidator validator = CreditCardValidator.VISA_VALIDATOR;\r\n    final RegexValidator regex = validator.getRegexValidator();\r\n    // ****** Test Regular Expression ******\r\n    // length 13 or 16, must start with a \"4\"\r\n    assertFalse(regex.isValid(\"423456789012\"), \"Length 12\");\r\n    assertTrue(regex.isValid(\"4234567890123\"), \"Length 13\");\r\n    assertFalse(regex.isValid(\"42345678901234\"), \"Length 14\");\r\n    assertFalse(regex.isValid(\"423456789012345\"), \"Length 15\");\r\n    assertTrue(regex.isValid(\"4234567890123456\"), \"Length 16\");\r\n    assertFalse(regex.isValid(\"42345678901234567\"), \"Length 17\");\r\n    assertFalse(regex.isValid(\"423456789012345678\"), \"Length 18\");\r\n    assertFalse(regex.isValid(\"3234567890123\"), \"Invalid Pref-A\");\r\n    assertFalse(regex.isValid(\"3234567890123456\"), \"Invalid Pref-B\");\r\n    assertFalse(regex.isValid(\"4234567x90123\"), \"Invalid Char-A\");\r\n    assertFalse(regex.isValid(\"4234567x90123456\"), \"Invalid Char-B\");\r\n    // *********** Test Validator **********\r\n    assertTrue(regex.isValid(ERROR_VISA), \"Valid regex\");\r\n    assertTrue(regex.isValid(ERROR_SHORT_VISA), \"Valid regex-S\");\r\n    assertFalse(validator.isValid(ERROR_VISA), \"Invalid\");\r\n    assertFalse(validator.isValid(ERROR_SHORT_VISA), \"Invalid-S\");\r\n    assertNull(validator.validate(ERROR_VISA), \"validate()\");\r\n    assertEquals(VALID_VISA, validator.validate(VALID_VISA));\r\n    assertEquals(VALID_SHORT_VISA, validator.validate(VALID_SHORT_VISA));\r\n    assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertTrue(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertTrue(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n    assertTrue(validator.isValid(\"4111111111111111\"), \"Valid-A\");\r\n    assertTrue(validator.isValid(\"4543059999999982\"), \"Valid-C\");\r\n    assertTrue(validator.isValid(\"4462000000000003\"), \"Valid-B\");\r\n    // Electron\r\n    assertTrue(validator.isValid(\"4508750000000009\"), \"Valid-D\");\r\n    assertTrue(validator.isValid(\"4012888888881881\"), \"Valid-E\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CreditCardValidatorTest.java",
  "methodName" : "testVPayOption",
  "sourceCode" : "@Test\r\nvoid testVPayOption() {\r\n    final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.VPAY);\r\n    assertTrue(validator.isValid(VALID_VPAY), \"Valid\");\r\n    assertTrue(validator.isValid(VALID_VPAY2), \"Valid\");\r\n    assertFalse(validator.isValid(ERROR_VPAY), \"Invalid\");\r\n    assertEquals(VALID_VPAY, validator.validate(VALID_VPAY));\r\n    assertEquals(VALID_VPAY2, validator.validate(VALID_VPAY2));\r\n    assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\r\n    assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\r\n    assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\r\n    assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\r\n    assertTrue(validator.isValid(VALID_VISA), \"Visa\");\r\n    assertTrue(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CurrencyValidatorTest.java",
  "methodName" : "testFormatType",
  "sourceCode" : "/**\r\n * Test Format Type\r\n */\r\n@Test\r\nvoid testFormatType() {\r\n    assertEquals(1, CurrencyValidator.getInstance().getFormatType(), \"Format Type A\");\r\n    assertEquals(AbstractNumberValidator.CURRENCY_FORMAT, CurrencyValidator.getInstance().getFormatType(), \"Format Type B\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CurrencyValidatorTest.java",
  "methodName" : "testIntegerInvalid",
  "sourceCode" : "/**\r\n * Test Invalid integer (non decimal) currency values\r\n */\r\n@Test\r\nvoid testIntegerInvalid() {\r\n    final CurrencyValidator validator = new CurrencyValidator(true, false);\r\n    // Invalid UK - has decimals\r\n    assertFalse(validator.isValid(ukPound + \"1,234.56\", Locale.UK), \"UK positive\");\r\n    assertFalse(validator.isValid(\"-\" + ukPound + \"1,234.56\", Locale.UK), \"UK negative\");\r\n    // Invalid US - has decimals\r\n    assertFalse(validator.isValid(usDollar + \"1,234.56\", Locale.US), \"US positive\");\r\n    assertFalse(validator.isValid(\"(\" + usDollar + \"1,234.56)\", Locale.US), \"US negative\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CurrencyValidatorTest.java",
  "methodName" : "testIntegerValid",
  "sourceCode" : "/**\r\n * Test Valid integer (non-decimal) currency values\r\n */\r\n@Test\r\n@DefaultLocale(\"en-GB\")\r\nvoid testIntegerValid() {\r\n    final CurrencyValidator validator = new CurrencyValidator();\r\n    final BigDecimal expected = new BigDecimal(\"1234.00\");\r\n    final BigDecimal negative = new BigDecimal(\"-1234.00\");\r\n    // Generate the exected strings, as these vary between JVMs\r\n    final String ukPlus = NumberFormat.getCurrencyInstance(Locale.UK).format(1234);\r\n    final String ukMinus = NumberFormat.getCurrencyInstance(Locale.UK).format(-1234);\r\n    final String usPlus = NumberFormat.getCurrencyInstance(Locale.US).format(1234);\r\n    final String usMinus = NumberFormat.getCurrencyInstance(Locale.US).format(-1234);\r\n    assertEquals(expected, validator.validate(ukPlus), \"Default locale\");\r\n    assertEquals(expected, validator.validate(ukPlus, Locale.UK), \"UK locale\");\r\n    assertEquals(negative, validator.validate(ukMinus, Locale.UK), \"UK negative\");\r\n    assertEquals(expected, validator.validate(usPlus, Locale.US), \"US locale\");\r\n    assertEquals(negative, validator.validate(usMinus, Locale.US), \"US negative\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CurrencyValidatorTest.java",
  "methodName" : "testInvalid",
  "sourceCode" : "/**\r\n * Test Invalid currency values\r\n */\r\n@Test\r\nvoid testInvalid() {\r\n    final BigDecimalValidator validator = CurrencyValidator.getInstance();\r\n    final String ukPlus = NumberFormat.getCurrencyInstance(Locale.UK).format(1234.56);\r\n    final String usPlus = NumberFormat.getCurrencyInstance(Locale.US).format(1234.56);\r\n    final String ukMinus = NumberFormat.getCurrencyInstance(Locale.UK).format(-1234.56);\r\n    final String usMinus = NumberFormat.getCurrencyInstance(Locale.US).format(-1234.56);\r\n    // Invalid Missing\r\n    assertFalse(validator.isValid(null), \"isValid() Null Value\");\r\n    assertFalse(validator.isValid(\"\"), \"isValid() Empty Value\");\r\n    assertNull(validator.validate(null), \"validate() Null Value\");\r\n    assertNull(validator.validate(\"\"), \"validate() Empty Value\");\r\n    // Invalid UK\r\n    assertFalse(validator.isValid(usPlus, Locale.UK), \"UK wrong symbol: \" + usPlus);\r\n    if (ukMinus.startsWith(\"-\")) {\r\n        assertFalse(validator.isValid(\"(\" + ukPound + \"1,234.56)\", Locale.UK), \"UK wrong negative: \" + ukMinus);\r\n    } else {\r\n        assertFalse(validator.isValid(\"-\" + ukPound + \"1,234.56\", Locale.UK), \"UK wrong negative: \" + ukMinus);\r\n    }\r\n    // Invalid US\r\n    assertFalse(validator.isValid(ukPlus, Locale.US), \"US wrong symbol: \" + ukPlus);\r\n    if (usMinus.startsWith(\"-\")) {\r\n        assertFalse(validator.isValid(\"(\" + usDollar + \"1,234.56)\", Locale.US), \"UK wrong negative: \" + usMinus);\r\n    } else {\r\n        assertFalse(validator.isValid(\"-\" + usDollar + \"1,234.56\", Locale.US), \"UK wrong negative: \" + usMinus);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CurrencyValidatorTest.java",
  "methodName" : "testPattern",
  "sourceCode" : "/**\r\n * Test currency values with a pattern\r\n */\r\n@Test\r\n@DefaultLocale(\"en-GB\")\r\nvoid testPattern() {\r\n    final BigDecimalValidator validator = CurrencyValidator.getInstance();\r\n    final String basicPattern = CURRENCY_SYMBOL + \"#,##0.000\";\r\n    final String pattern = basicPattern + \";[\" + basicPattern + \"]\";\r\n    final BigDecimal expected = new BigDecimal(\"1234.567\");\r\n    final BigDecimal negative = new BigDecimal(\"-1234.567\");\r\n    // Test Pattern\r\n    assertEquals(expected, validator.validate(ukPound + \"1,234.567\", pattern), \"default\");\r\n    assertEquals(negative, validator.validate(\"[\" + ukPound + \"1,234.567]\", pattern), \"negative\");\r\n    assertEquals(expected, validator.validate(\"1,234.567\", pattern), \"no symbol +ve\");\r\n    assertEquals(negative, validator.validate(\"[1,234.567]\", pattern), \"no symbol -ve\");\r\n    // Test Pattern & Locale\r\n    assertEquals(expected, validator.validate(usDollar + \"1,234.567\", pattern, Locale.US), \"default\");\r\n    assertEquals(negative, validator.validate(\"[\" + usDollar + \"1,234.567]\", pattern, Locale.US), \"negative\");\r\n    assertEquals(expected, validator.validate(\"1,234.567\", pattern, Locale.US), \"no symbol +ve\");\r\n    assertEquals(negative, validator.validate(\"[1,234.567]\", pattern, Locale.US), \"no symbol -ve\");\r\n    // invalid\r\n    assertFalse(validator.isValid(usDollar + \"1,234.567\", pattern), \"invalid symbol\");\r\n    assertFalse(validator.isValid(ukPound + \"1,234.567\", pattern, Locale.US), \"invalid symbol\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\CurrencyValidatorTest.java",
  "methodName" : "testValid",
  "sourceCode" : "/**\r\n * Test Valid currency values\r\n */\r\n@Test\r\n@DefaultLocale(\"en-GB\")\r\nvoid testValid() {\r\n    final BigDecimalValidator validator = CurrencyValidator.getInstance();\r\n    final BigDecimal expected = new BigDecimal(\"1234.56\");\r\n    final BigDecimal negative = new BigDecimal(\"-1234.56\");\r\n    final BigDecimal noDecimal = new BigDecimal(\"1234.00\");\r\n    final BigDecimal oneDecimal = new BigDecimal(\"1234.50\");\r\n    // Generate the exected strings, as these vary between JVMs\r\n    final String ukPlus = NumberFormat.getCurrencyInstance(Locale.UK).format(1234.56);\r\n    final String ukPlus0Decimal = NumberFormat.getCurrencyInstance(Locale.UK).format(1234);\r\n    final String ukPlus1Decimal = NumberFormat.getCurrencyInstance(Locale.UK).format(1234.5);\r\n    // Note that NumberFormat may perform rounding up or truncation, so we cheat\r\n    final String ukPlus3Decimal = NumberFormat.getCurrencyInstance(Locale.UK).format(1234.56) + \"7\";\r\n    final String ukMinus = NumberFormat.getCurrencyInstance(Locale.UK).format(-1234.56);\r\n    final String usPlus = NumberFormat.getCurrencyInstance(Locale.US).format(1234.56);\r\n    final String usPlus0Decimal = NumberFormat.getCurrencyInstance(Locale.US).format(1234);\r\n    final String usPlus1Decimal = NumberFormat.getCurrencyInstance(Locale.US).format(1234.5);\r\n    // Note that NumberFormat may perform rounding up or truncation, so we cheat\r\n    final String usPlus3Decimal = NumberFormat.getCurrencyInstance(Locale.US).format(1234.56) + \"7\";\r\n    final String usMinus = NumberFormat.getCurrencyInstance(Locale.US).format(-1234.56);\r\n    assertEquals(expected, validator.validate(ukPlus), \"Default locale\");\r\n    assertEquals(expected, validator.validate(ukPlus, Locale.UK), \"UK locale\");\r\n    assertEquals(negative, validator.validate(ukMinus, Locale.UK), \"UK negative\");\r\n    assertEquals(noDecimal, validator.validate(ukPlus0Decimal, Locale.UK), \"UK no decimal\");\r\n    assertEquals(oneDecimal, validator.validate(ukPlus1Decimal, Locale.UK), \"UK 1 decimal\");\r\n    assertEquals(expected, validator.validate(ukPlus3Decimal, Locale.UK), \"UK 3 decimal: \" + ukPlus3Decimal);\r\n    // TODO: The following expects the value to be truncated, rather than rounded up - is that correct?\r\n    assertEquals(expected, validator.validate(ukPlus3Decimal, Locale.UK), \"UK 3 decimal: \" + ukPlus3Decimal);\r\n    assertEquals(expected, validator.validate(\"1,234.56\", Locale.UK), \"UK no symbol\");\r\n    assertEquals(expected, validator.validate(usPlus, Locale.US), \"US locale\");\r\n    assertEquals(negative, validator.validate(usMinus, Locale.US), \"US negative\");\r\n    assertEquals(noDecimal, validator.validate(usPlus0Decimal, Locale.US), \"US no decimal\");\r\n    assertEquals(oneDecimal, validator.validate(usPlus1Decimal, Locale.US), \"US 1 decimal\");\r\n    // TODO: The following expects the value to be truncated, rather than rounded up - is that correct?\r\n    assertEquals(expected, validator.validate(usPlus3Decimal, Locale.US), \"US 3 decimal: \" + usPlus3Decimal);\r\n    assertEquals(expected, validator.validate(\"1,234.56\", Locale.US), \"US no symbol\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DateValidatorTest.java",
  "methodName" : "testCompare",
  "sourceCode" : "/**\r\n * Test compare date methods\r\n */\r\n@Test\r\nvoid testCompare() {\r\n    final int sameTime = 124522;\r\n    final int testDate = 20050823;\r\n    // same date, different time\r\n    final Date diffHour = createDate(TimeZones.GMT, testDate, 115922);\r\n    // test value\r\n    final Date value = createDate(TimeZones.GMT, testDate, sameTime);\r\n    // +1 day\r\n    final Date date20050824 = createDate(TimeZones.GMT, 20050824, sameTime);\r\n    // -1 day\r\n    final Date date20050822 = createDate(TimeZones.GMT, 20050822, sameTime);\r\n    // +1 week\r\n    final Date date20050830 = createDate(TimeZones.GMT, 20050830, sameTime);\r\n    // -1 week\r\n    final Date date20050816 = createDate(TimeZones.GMT, 20050816, sameTime);\r\n    // +1 month\r\n    final Date date20050901 = createDate(TimeZones.GMT, 20050901, sameTime);\r\n    // same month\r\n    final Date date20050801 = createDate(TimeZones.GMT, 20050801, sameTime);\r\n    // -1 month\r\n    final Date date20050731 = createDate(TimeZones.GMT, 20050731, sameTime);\r\n    // +1 quarter (Feb Start)\r\n    final Date date20051101 = createDate(TimeZones.GMT, 20051101, sameTime);\r\n    // +1 quarter\r\n    final Date date20051001 = createDate(TimeZones.GMT, 20051001, sameTime);\r\n    // same quarter\r\n    final Date date20050701 = createDate(TimeZones.GMT, 20050701, sameTime);\r\n    // -1 quarter\r\n    final Date date20050630 = createDate(TimeZones.GMT, 20050630, sameTime);\r\n    // Previous Year qtr (Fen start)\r\n    final Date date20050110 = createDate(TimeZones.GMT, 20050110, sameTime);\r\n    // +1 year\r\n    final Date date20060101 = createDate(TimeZones.GMT, 20060101, sameTime);\r\n    // same year\r\n    final Date date20050101 = createDate(TimeZones.GMT, 20050101, sameTime);\r\n    // -1 year\r\n    final Date date20041231 = createDate(TimeZones.GMT, 20041231, sameTime);\r\n    // +1 day\r\n    assertEquals(-1, dateValidator.compareDates(value, date20050824, TimeZones.GMT), \"date LT\");\r\n    // same day, diff hour\r\n    assertEquals(0, dateValidator.compareDates(value, diffHour, TimeZones.GMT), \"date EQ\");\r\n    // -1 day\r\n    assertEquals(1, dateValidator.compareDates(value, date20050822, TimeZones.GMT), \"date GT\");\r\n    // +1 week\r\n    assertEquals(-1, dateValidator.compareWeeks(value, date20050830, TimeZones.GMT), \"week LT\");\r\n    // +1 day\r\n    assertEquals(0, dateValidator.compareWeeks(value, date20050824, TimeZones.GMT), \"week =1\");\r\n    // same week\r\n    assertEquals(0, dateValidator.compareWeeks(value, date20050822, TimeZones.GMT), \"week =2\");\r\n    // -1 day\r\n    assertEquals(0, dateValidator.compareWeeks(value, date20050822, TimeZones.GMT), \"week =3\");\r\n    // -1 week\r\n    assertEquals(1, dateValidator.compareWeeks(value, date20050816, TimeZones.GMT), \"week GT\");\r\n    // +1 month\r\n    assertEquals(-1, dateValidator.compareMonths(value, date20050901, TimeZones.GMT), \"mnth LT\");\r\n    // +1 week\r\n    assertEquals(0, dateValidator.compareMonths(value, date20050830, TimeZones.GMT), \"mnth =1\");\r\n    // same month\r\n    assertEquals(0, dateValidator.compareMonths(value, date20050801, TimeZones.GMT), \"mnth =2\");\r\n    // -1 week\r\n    assertEquals(0, dateValidator.compareMonths(value, date20050816, TimeZones.GMT), \"mnth =3\");\r\n    // -1 month\r\n    assertEquals(1, dateValidator.compareMonths(value, date20050731, TimeZones.GMT), \"mnth GT\");\r\n    // +1 quarter (Feb)\r\n    assertEquals(-1, dateValidator.compareQuarters(value, date20051101, TimeZones.GMT), \"qtrA <1\");\r\n    // +1 quarter\r\n    assertEquals(-1, dateValidator.compareQuarters(value, date20051001, TimeZones.GMT), \"qtrA <2\");\r\n    // +1 month\r\n    assertEquals(0, dateValidator.compareQuarters(value, date20050901, TimeZones.GMT), \"qtrA =1\");\r\n    // same quarter\r\n    assertEquals(0, dateValidator.compareQuarters(value, date20050701, TimeZones.GMT), \"qtrA =2\");\r\n    // -1 month\r\n    assertEquals(0, dateValidator.compareQuarters(value, date20050731, TimeZones.GMT), \"qtrA =3\");\r\n    // -1 quarter\r\n    assertEquals(1, dateValidator.compareQuarters(value, date20050630, TimeZones.GMT), \"qtrA GT\");\r\n    // Change quarter 1 to start in Feb\r\n    // +1 quarter (Feb)\r\n    assertEquals(-1, dateValidator.compareQuarters(value, date20051101, TimeZones.GMT, 2), \"qtrB LT\");\r\n    // same quarter\r\n    assertEquals(0, dateValidator.compareQuarters(value, date20051001, TimeZones.GMT, 2), \"qtrB =1\");\r\n    // +1 month\r\n    assertEquals(0, dateValidator.compareQuarters(value, date20050901, TimeZones.GMT, 2), \"qtrB =2\");\r\n    // same quarter\r\n    assertEquals(1, dateValidator.compareQuarters(value, date20050701, TimeZones.GMT, 2), \"qtrB =3\");\r\n    // -1 month\r\n    assertEquals(1, dateValidator.compareQuarters(value, date20050731, TimeZones.GMT, 2), \"qtrB =4\");\r\n    // -1 quarter\r\n    assertEquals(1, dateValidator.compareQuarters(value, date20050630, TimeZones.GMT, 2), \"qtrB GT\");\r\n    // Jan Prev year qtr\r\n    assertEquals(1, dateValidator.compareQuarters(value, date20050110, TimeZones.GMT, 2), \"qtrB prev\");\r\n    // +1 year\r\n    assertEquals(-1, dateValidator.compareYears(value, date20060101, TimeZones.GMT), \"year LT\");\r\n    // same year\r\n    assertEquals(0, dateValidator.compareYears(value, date20050101, TimeZones.GMT), \"year EQ\");\r\n    // -1 year\r\n    assertEquals(1, dateValidator.compareYears(value, date20041231, TimeZones.GMT), \"year GT\");\r\n    // Compare using alternative TimeZone\r\n    final Date sameDayTwoAm = createDate(TimeZones.GMT, testDate, 20000);\r\n    // +1 day\r\n    assertEquals(-1, dateValidator.compareDates(value, date20050824, TestTimeZones.EST), \"date LT\");\r\n    // same day, diff hour\r\n    assertEquals(0, dateValidator.compareDates(value, diffHour, TestTimeZones.EST), \"date EQ\");\r\n    // same day, diff hour\r\n    assertEquals(1, dateValidator.compareDates(value, sameDayTwoAm, TestTimeZones.EST), \"date EQ\");\r\n    // -1 day\r\n    assertEquals(1, dateValidator.compareDates(value, date20050822, TestTimeZones.EST), \"date GT\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DateValidatorTest.java",
  "methodName" : "testDateValidatorMethods",
  "sourceCode" : "/**\r\n * Test DateValidator validate Methods\r\n */\r\n@Test\r\n@DefaultLocale(country = \"US\", language = \"en\")\r\nvoid testDateValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"yyyy-MM-dd\";\r\n    final String patternVal = \"2005-12-31\";\r\n    final String germanPattern = \"dd MMM yyyy\";\r\n    // Don't rely on specific German format - it varies between JVMs\r\n    final DateFormat df = new SimpleDateFormat(germanPattern, locale);\r\n    final Calendar cal = Calendar.getInstance(Locale.US);\r\n    // month is 0-based\r\n    cal.set(2005, Calendar.DECEMBER, 31);\r\n    final String germanVal = df.format(cal.getTime());\r\n    final String localeVal = \"31.12.2005\";\r\n    final String defaultVal = \"12/31/05\";\r\n    final String xxxx = \"XXXX\";\r\n    final Date expected = createCalendar(null, 20051231, 0).getTime();\r\n    assertEquals(expected, DateValidator.getInstance().validate(defaultVal), \"validate(A) default\");\r\n    assertEquals(expected, DateValidator.getInstance().validate(localeVal, locale), \"validate(A) locale \");\r\n    assertEquals(expected, DateValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\r\n    assertEquals(expected, DateValidator.getInstance().validate(germanVal, germanPattern, Locale.GERMAN), \"validate(A) both\");\r\n    assertTrue(DateValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(DateValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\r\n    assertTrue(DateValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(DateValidator.getInstance().isValid(germanVal, germanPattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(DateValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(DateValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\r\n    assertNull(DateValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(DateValidator.getInstance().validate(\"31 Dec 2005\", germanPattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(DateValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(DateValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale \");\r\n    assertFalse(DateValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(DateValidator.getInstance().isValid(\"31 Dec 2005\", germanPattern, Locale.GERMAN), \"isValid(B) both\");\r\n    // Test Time Zone\r\n    final TimeZone zone = TimeZone.getDefault().getRawOffset() == TestTimeZones.EET.getRawOffset() ? TestTimeZones.EST : TestTimeZones.EET;\r\n    final Date expectedZone = createCalendar(zone, 20051231, 0).getTime();\r\n    assertNotEquals(expected.getTime(), expectedZone.getTime(), \"default/zone same \" + zone);\r\n    assertEquals(expectedZone, DateValidator.getInstance().validate(defaultVal, zone), \"validate(C) default\");\r\n    assertEquals(expectedZone, DateValidator.getInstance().validate(localeVal, locale, zone), \"validate(C) locale \");\r\n    assertEquals(expectedZone, DateValidator.getInstance().validate(patternVal, pattern, zone), \"validate(C) pattern\");\r\n    assertEquals(expectedZone, DateValidator.getInstance().validate(germanVal, germanPattern, Locale.GERMAN, zone), \"validate(C) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testCannotUpdate",
  "sourceCode" : "@Test\r\nvoid testCannotUpdate() {\r\n    // OK\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\");\r\n    final DomainValidator dv = DomainValidator.getInstance();\r\n    assertNotNull(dv);\r\n    assertThrows(IllegalStateException.class, () -> DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testInstanceOverride",
  "sourceCode" : "@Test\r\nvoid testInstanceOverride() {\r\n    // Show that the instance picks up static values\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"gp\");\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"com\");\r\n    DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_PLUS, \"cp\");\r\n    DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"ch\");\r\n    DomainValidator validator = DomainValidator.getInstance(false);\r\n    assertTrue(validator.isValidGenericTld(\"gp\"));\r\n    assertFalse(validator.isValidGenericTld(\"com\"));\r\n    assertTrue(validator.isValidCountryCodeTld(\"cp\"));\r\n    assertFalse(validator.isValidCountryCodeTld(\"ch\"));\r\n    // show we can override them for a new instance\r\n    final List<DomainValidator.Item> items = new ArrayList<>();\r\n    items.add(new DomainValidator.Item(ArrayType.GENERIC_MINUS, \"\"));\r\n    items.add(new DomainValidator.Item(ArrayType.COUNTRY_CODE_MINUS, \"\"));\r\n    validator = DomainValidator.getInstance(false, items);\r\n    assertTrue(validator.isValidGenericTld(\"gp\"));\r\n    // Should be true again\r\n    assertTrue(validator.isValidGenericTld(\"com\"));\r\n    assertTrue(validator.isValidCountryCodeTld(\"cp\"));\r\n    // Should be true again\r\n    assertTrue(validator.isValidCountryCodeTld(\"ch\"));\r\n    // Show the class overrides are unaffected\r\n    validator = DomainValidator.getInstance(false);\r\n    assertTrue(validator.isValidGenericTld(\"gp\"));\r\n    assertFalse(validator.isValidGenericTld(\"com\"));\r\n    assertTrue(validator.isValidCountryCodeTld(\"cp\"));\r\n    assertFalse(validator.isValidCountryCodeTld(\"ch\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateBaseArrayCC",
  "sourceCode" : "@Test\r\nvoid testUpdateBaseArrayCC() {\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_RO, \"com\"));\r\n    assertEquals(\"Cannot update the table: COUNTRY_CODE_RO\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateBaseArrayGeneric",
  "sourceCode" : "@Test\r\nvoid testUpdateBaseArrayGeneric() {\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> DomainValidator.updateTLDOverride(ArrayType.GENERIC_RO, \"com\"));\r\n    assertEquals(\"Cannot update the table: GENERIC_RO\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateBaseArrayInfra",
  "sourceCode" : "@Test\r\nvoid testUpdateBaseArrayInfra() {\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> DomainValidator.updateTLDOverride(ArrayType.INFRASTRUCTURE_RO, \"com\"));\r\n    assertEquals(\"Cannot update the table: INFRASTRUCTURE_RO\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateBaseArrayLocal",
  "sourceCode" : "@Test\r\nvoid testUpdateBaseArrayLocal() {\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> DomainValidator.updateTLDOverride(ArrayType.LOCAL_RO, \"com\"));\r\n    assertEquals(\"Cannot update the table: LOCAL_RO\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateCountryCode1a",
  "sourceCode" : "@Test\r\nvoid testUpdateCountryCode1a() {\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    // cannot be valid\r\n    assertFalse(validator.isValidCountryCodeTld(\"com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateCountryCode1b",
  "sourceCode" : "@Test\r\nvoid testUpdateCountryCode1b() {\r\n    DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_PLUS, \"com\");\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    // it is now!\r\n    assertTrue(validator.isValidCountryCodeTld(\"com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateCountryCode2",
  "sourceCode" : "@Test\r\nvoid testUpdateCountryCode2() {\r\n    DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_PLUS, \"com\");\r\n    DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"com\");\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    // show that minus overrides the rest\r\n    assertFalse(validator.isValidCountryCodeTld(\"com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateCountryCode3a",
  "sourceCode" : "@Test\r\nvoid testUpdateCountryCode3a() {\r\n    // show ch is valid\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    assertTrue(validator.isValidCountryCodeTld(\"ch\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateCountryCode3b",
  "sourceCode" : "@Test\r\nvoid testUpdateCountryCode3b() {\r\n    // show ch can be made invalid\r\n    DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"ch\");\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    assertFalse(validator.isValidCountryCodeTld(\"ch\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateCountryCode3c",
  "sourceCode" : "@Test\r\nvoid testUpdateCountryCode3c() {\r\n    // show ch can be made valid again by replacing the CC array\r\n    DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"ch\");\r\n    DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"xx\");\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    assertTrue(validator.isValidCountryCodeTld(\"ch\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateGeneric1",
  "sourceCode" : "@Test\r\nvoid testUpdateGeneric1() {\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    // cannot be valid\r\n    assertFalse(validator.isValidGenericTld(\"ch\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateGeneric2",
  "sourceCode" : "@Test\r\nvoid testUpdateGeneric2() {\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\");\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    // it is now!\r\n    assertTrue(validator.isValidGenericTld(\"ch\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateGeneric3",
  "sourceCode" : "@Test\r\nvoid testUpdateGeneric3() {\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\");\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"ch\");\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    // show that minus overrides the rest\r\n    assertFalse(validator.isValidGenericTld(\"ch\"));\r\n    assertTrue(validator.isValidGenericTld(\"com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateGeneric4",
  "sourceCode" : "@Test\r\nvoid testUpdateGeneric4() {\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\");\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"ch\");\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"com\");\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    assertFalse(validator.isValidGenericTld(\"com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testUpdateGeneric5",
  "sourceCode" : "@Test\r\nvoid testUpdateGeneric5() {\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\");\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"ch\");\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"com\");\r\n    // change the minus list\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"xx\");\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    assertTrue(validator.isValidGenericTld(\"com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testValidator412a",
  "sourceCode" : "@Test\r\nvoid testValidator412a() {\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    assertFalse(validator.isValidGenericTld(\"local\"));\r\n    assertFalse(validator.isValid(\"abc.local\"));\r\n    assertFalse(validator.isValidGenericTld(\"pvt\"));\r\n    assertFalse(validator.isValid(\"abc.pvt\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testValidator412b",
  "sourceCode" : "@Test\r\nvoid testValidator412b() {\r\n    DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"local\", \"pvt\");\r\n    final DomainValidator validator = DomainValidator.getInstance();\r\n    assertTrue(validator.isValidGenericTld(\"local\"));\r\n    assertTrue(validator.isValid(\"abc.local\"));\r\n    assertTrue(validator.isValidGenericTld(\"pvt\"));\r\n    assertTrue(validator.isValid(\"abc.pvt\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testValidator412c",
  "sourceCode" : "@Test\r\nvoid testValidator412c() {\r\n    final DomainValidator validator = DomainValidator.getInstance(true);\r\n    assertFalse(validator.isValidLocalTld(\"local\"));\r\n    assertFalse(validator.isValid(\"abc.local\"));\r\n    assertFalse(validator.isValidLocalTld(\"pvt\"));\r\n    assertFalse(validator.isValid(\"abc.pvt\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorStartupTest.java",
  "methodName" : "testValidator412d",
  "sourceCode" : "@Test\r\nvoid testValidator412d() {\r\n    DomainValidator.updateTLDOverride(ArrayType.LOCAL_PLUS, \"local\", \"pvt\");\r\n    final DomainValidator validator = DomainValidator.getInstance(true);\r\n    assertTrue(validator.isValidLocalTld(\"local\"));\r\n    assertTrue(validator.isValidLocalTld(\"pvt\"));\r\n    assertTrue(validator.isValid(\"abc.local\"));\r\n    assertTrue(validator.isValid(\"abc.pvt\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "tesLocalTldsSortedAndLowerCase",
  "sourceCode" : "// Check array is sorted and is lower-case\r\n@Test\r\npublic void tesLocalTldsSortedAndLowerCase() throws Exception {\r\n    final boolean sorted = isSortedLowerCase(\"LOCAL_TLDS\");\r\n    assertTrue(sorted);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testAllowLocal",
  "sourceCode" : "@Test\r\nvoid testAllowLocal() {\r\n    final DomainValidator noLocal = DomainValidator.getInstance(false);\r\n    final DomainValidator allowLocal = DomainValidator.getInstance(true);\r\n    // Default is false, and should use singletons\r\n    assertEquals(noLocal, validator);\r\n    // Default won't allow local\r\n    assertFalse(noLocal.isValid(\"localhost.localdomain\"), \"localhost.localdomain should validate\");\r\n    assertFalse(noLocal.isValid(\"localhost\"), \"localhost should validate\");\r\n    // But it may be requested\r\n    assertTrue(allowLocal.isValid(\"localhost.localdomain\"), \"localhost.localdomain should validate\");\r\n    assertTrue(allowLocal.isValid(\"localhost\"), \"localhost should validate\");\r\n    assertTrue(allowLocal.isValid(\"hostname\"), \"hostname should validate\");\r\n    assertTrue(allowLocal.isValid(\"machinename\"), \"machinename should validate\");\r\n    // Check the localhost one with a few others\r\n    assertTrue(allowLocal.isValid(\"apache.org\"), \"apache.org should validate\");\r\n    assertFalse(allowLocal.isValid(\" apache.org \"), \"domain name with spaces shouldn't validate\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testCountryCodeTldsSortedAndLowerCase",
  "sourceCode" : "// Check array is sorted and is lower-case\r\n@Test\r\nvoid testCountryCodeTldsSortedAndLowerCase() throws Exception {\r\n    final boolean sorted = isSortedLowerCase(\"COUNTRY_CODE_TLDS\");\r\n    assertTrue(sorted);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testDomainNoDots",
  "sourceCode" : "@Test\r\nvoid testDomainNoDots() {\r\n    // rfc1123\r\n    assertTrue(validator.isValidDomainSyntax(\"a\"), \"a (alpha) should validate\");\r\n    assertTrue(validator.isValidDomainSyntax(\"9\"), \"9 (alphanum) should validate\");\r\n    assertTrue(validator.isValidDomainSyntax(\"c-z\"), \"c-z (alpha - alpha) should validate\");\r\n    assertFalse(validator.isValidDomainSyntax(\"c-\"), \"c- (alpha -) should fail\");\r\n    assertFalse(validator.isValidDomainSyntax(\"-c\"), \"-c (- alpha) should fail\");\r\n    assertFalse(validator.isValidDomainSyntax(\"-\"), \"- (-) should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testEnumIsPublic",
  "sourceCode" : "@Test\r\nvoid testEnumIsPublic() {\r\n    assertTrue(Modifier.isPublic(DomainValidator.ArrayType.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testGenericTldsSortedAndLowerCase",
  "sourceCode" : "// Check array is sorted and is lower-case\r\n@Test\r\nvoid testGenericTldsSortedAndLowerCase() throws Exception {\r\n    final boolean sorted = isSortedLowerCase(\"GENERIC_TLDS\");\r\n    assertTrue(sorted);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testGetArray",
  "sourceCode" : "@Test\r\nvoid testGetArray() {\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.COUNTRY_CODE_MINUS));\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.COUNTRY_CODE_PLUS));\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.GENERIC_MINUS));\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.GENERIC_PLUS));\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.LOCAL_MINUS));\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.LOCAL_PLUS));\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.COUNTRY_CODE_RO));\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.GENERIC_RO));\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.INFRASTRUCTURE_RO));\r\n    assertNotNull(DomainValidator.getTLDEntries(ArrayType.LOCAL_RO));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testIDN",
  "sourceCode" : "@Test\r\nvoid testIDN() {\r\n    assertTrue(validator.isValid(\"www.xn--bcher-kva.ch\"), \"b\\u00fccher.ch in IDN should validate\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testIDNJava6OrLater",
  "sourceCode" : "@Test\r\nvoid testIDNJava6OrLater() {\r\n    // xn--d1abbgf6aiiy.xn--p1ai http://президент.рф\r\n    assertTrue(validator.isValid(\"www.b\\u00fccher.ch\"), \"b\\u00fccher.ch should validate\");\r\n    assertTrue(validator.isValid(\"xn--d1abbgf6aiiy.xn--p1ai\"), \"xn--d1abbgf6aiiy.xn--p1ai should validate\");\r\n    assertTrue(validator.isValid(\"президент.рф\"), \"президент.рф should validate\");\r\n    assertFalse(validator.isValid(\"www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testInfrastructureTldsSortedAndLowerCase",
  "sourceCode" : "// Check array is sorted and is lower-case\r\n@Test\r\nvoid testInfrastructureTldsSortedAndLowerCase() throws Exception {\r\n    final boolean sorted = isSortedLowerCase(\"INFRASTRUCTURE_TLDS\");\r\n    assertTrue(sorted);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testInvalidDomains",
  "sourceCode" : "@Test\r\nvoid testInvalidDomains() {\r\n    assertFalse(validator.isValid(\".org\"), \"bare TLD .org shouldn't validate\");\r\n    assertFalse(validator.isValid(\" apache.org \"), \"domain name with spaces shouldn't validate\");\r\n    assertFalse(validator.isValid(\"apa che.org\"), \"domain name containing spaces shouldn't validate\");\r\n    assertFalse(validator.isValid(\"-testdomain.name\"), \"domain name starting with dash shouldn't validate\");\r\n    assertFalse(validator.isValid(\"testdomain-.name\"), \"domain name ending with dash shouldn't validate\");\r\n    assertFalse(validator.isValid(\"---c.com\"), \"domain name starting with multiple dashes shouldn't validate\");\r\n    assertFalse(validator.isValid(\"c--.com\"), \"domain name ending with multiple dashes shouldn't validate\");\r\n    assertFalse(validator.isValid(\"apache.rog\"), \"domain name with invalid TLD shouldn't validate\");\r\n    assertFalse(validator.isValid(\"http://www.apache.org\"), \"URL shouldn't validate\");\r\n    assertFalse(validator.isValid(\" \"), \"Empty string shouldn't validate as domain name\");\r\n    assertFalse(validator.isValid(null), \"Null shouldn't validate as domain name\");\r\n    // VALIDATOR-501\r\n    assertFalse(validator.isValid(\"-test.fr\"));\r\n    assertFalse(validator.isValid(\"test-.fr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testInvalidDomains501",
  "sourceCode" : "@Test\r\n@Disabled\r\nvoid testInvalidDomains501() {\r\n    // VALIDATOR-501\r\n    assertFalse(validator.isValid(\"-tést.fr\"));\r\n    assertFalse(validator.isValid(\"tést-.fr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testIsIDNtoASCIIBroken",
  "sourceCode" : "// Check if IDN.toASCII is broken or not\r\n@Test\r\nvoid testIsIDNtoASCIIBroken() {\r\n    final String input = \".\";\r\n    if (!input.equals(IDN.toASCII(input))) {\r\n        System.out.println(\">>DomainValidatorTest.testIsIDNtoASCIIBroken()\");\r\n        System.out.println(\"IDN.toASCII is BROKEN\");\r\n        final String[] props = { // Java Runtime Environment version\r\n        \"java.version\", // Java Runtime Environment vendor\r\n        \"java.vendor\", // Java Virtual Machine specification version\r\n        \"java.vm.specification.version\", // Java Virtual Machine specification vendor\r\n        \"java.vm.specification.vendor\", // Java Virtual Machine specification name\r\n        \"java.vm.specification.name\", // Java Virtual Machine implementation version\r\n        \"java.vm.version\", // Java Virtual Machine implementation vendor\r\n        \"java.vm.vendor\", // Java Virtual Machine implementation name\r\n        \"java.vm.name\", // Java Runtime Environment specification version\r\n        \"java.specification.version\", // Java Runtime Environment specification vendor\r\n        \"java.specification.vendor\", // Java Runtime Environment specification name\r\n        \"java.specification.name\", // Java class format version number\r\n        \"java.class.version\" };\r\n        for (final String t : props) {\r\n            System.out.println(t + \"=\" + System.getProperty(t));\r\n        }\r\n        System.out.println(\"<<DomainValidatorTest.testIsIDNtoASCIIBroken()\");\r\n    }\r\n    // dummy assertion to satisfy lint\r\n    assertTrue(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testRFC2396domainlabel",
  "sourceCode" : "// RFC2396: domainlabel = alphanum | alphanum *( alphanum | \"-\" ) alphanum\r\n@Test\r\nvoid testRFC2396domainlabel() {\r\n    // use fixed valid TLD\r\n    assertTrue(validator.isValid(\"a.ch\"), \"a.ch should validate\");\r\n    assertTrue(validator.isValid(\"9.ch\"), \"9.ch should validate\");\r\n    assertTrue(validator.isValid(\"az.ch\"), \"az.ch should validate\");\r\n    assertTrue(validator.isValid(\"09.ch\"), \"09.ch should validate\");\r\n    assertTrue(validator.isValid(\"9-1.ch\"), \"9-1.ch should validate\");\r\n    assertFalse(validator.isValid(\"91-.ch\"), \"91-.ch should not validate\");\r\n    assertFalse(validator.isValid(\"-.ch\"), \"-.ch should not validate\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testRFC2396toplabel",
  "sourceCode" : "// RFC2396 toplabel = alpha | alpha *( alphanum | \"-\" ) alphanum\r\n@Test\r\nvoid testRFC2396toplabel() {\r\n    // These tests use non-existent TLDs so currently need to use a package protected method\r\n    assertTrue(validator.isValidDomainSyntax(\"a.c\"), \"a.c (alpha) should validate\");\r\n    assertTrue(validator.isValidDomainSyntax(\"a.cc\"), \"a.cc (alpha alpha) should validate\");\r\n    assertTrue(validator.isValidDomainSyntax(\"a.c9\"), \"a.c9 (alpha alphanum) should validate\");\r\n    assertTrue(validator.isValidDomainSyntax(\"a.c-9\"), \"a.c-9 (alpha - alphanum) should validate\");\r\n    assertTrue(validator.isValidDomainSyntax(\"a.c-z\"), \"a.c-z (alpha - alpha) should validate\");\r\n    assertFalse(validator.isValidDomainSyntax(\"a.9c\"), \"a.9c (alphanum alpha) should fail\");\r\n    assertFalse(validator.isValidDomainSyntax(\"a.c-\"), \"a.c- (alpha -) should fail\");\r\n    assertFalse(validator.isValidDomainSyntax(\"a.-\"), \"a.- (-) should fail\");\r\n    assertFalse(validator.isValidDomainSyntax(\"a.-9\"), \"a.-9 (- alphanum) should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testTopLevelDomains",
  "sourceCode" : "@Test\r\nvoid testTopLevelDomains() {\r\n    // infrastructure TLDs\r\n    assertTrue(validator.isValidInfrastructureTld(\".arpa\"), \".arpa should validate as iTLD\");\r\n    assertFalse(validator.isValidInfrastructureTld(\".com\"), \".com shouldn't validate as iTLD\");\r\n    // generic TLDs\r\n    assertTrue(validator.isValidGenericTld(\".name\"), \".name should validate as gTLD\");\r\n    assertFalse(validator.isValidGenericTld(\".us\"), \".us shouldn't validate as gTLD\");\r\n    // country code TLDs\r\n    assertTrue(validator.isValidCountryCodeTld(\".uk\"), \".uk should validate as ccTLD\");\r\n    assertFalse(validator.isValidCountryCodeTld(\".org\"), \".org shouldn't validate as ccTLD\");\r\n    // case-insensitive\r\n    assertTrue(validator.isValidTld(\".COM\"), \".COM should validate as TLD\");\r\n    assertTrue(validator.isValidTld(\".BiZ\"), \".BiZ should validate as TLD\");\r\n    // corner cases\r\n    // TODO this is not guaranteed invalid forever\r\n    assertFalse(validator.isValid(\".nope\"), \"invalid TLD shouldn't validate\");\r\n    assertFalse(validator.isValid(\"\"), \"empty string shouldn't validate as TLD\");\r\n    assertFalse(validator.isValid(null), \"null shouldn't validate as TLD\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testUnicodeToASCII",
  "sourceCode" : "// Check that IDN.toASCII behaves as it should (when wrapped by DomainValidator.unicodeToASCII)\r\n// Tests show that method incorrectly trims a trailing \".\" character\r\n@Test\r\nvoid testUnicodeToASCII() {\r\n    final String[] asciidots = { // fails IDN.toASCII, but should pass wrapped version\r\n    \"\", // fails IDN.toASCII, but should pass wrapped version\r\n    \",\", // fails IDN.toASCII, but should pass wrapped version\r\n    \".\", // ditto\r\n    \"a.\", \"a.b\", \"a..b\", \"a...b\", \".a\", \"..a\" };\r\n    for (final String s : asciidots) {\r\n        assertEquals(s, DomainValidator.unicodeToASCII(s));\r\n    }\r\n    // RFC3490 3.1. 1)\r\n    //      Whenever dots are used as label separators, the following\r\n    //      characters MUST be recognized as dots: U+002E (full stop), U+3002\r\n    //      (ideographic full stop), U+FF0E (fullwidth full stop), U+FF61\r\n    //      (halfwidth ideographic full stop).\r\n    final String[][] otherDots = { { \"b\\u3002\", \"b.\" }, { \"b\\uFF0E\", \"b.\" }, { \"b\\uFF61\", \"b.\" }, { \"\\u3002\", \".\" }, { \"\\uFF0E\", \".\" }, { \"\\uFF61\", \".\" } };\r\n    for (final String[] s : otherDots) {\r\n        assertEquals(s[1], DomainValidator.unicodeToASCII(s[0]));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testValidator297",
  "sourceCode" : "@Test\r\nvoid testValidator297() {\r\n    // This uses a valid TLD\r\n    assertTrue(validator.isValid(\"xn--d1abbgf6aiiy.xn--p1ai\"), \"xn--d1abbgf6aiiy.xn--p1ai should validate\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testValidator306",
  "sourceCode" : "// labels are a max of 63 chars and domains 253\r\n@Test\r\nvoid testValidator306() {\r\n    final String longString = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A\";\r\n    // 26 * 2 + 11\r\n    assertEquals(63, longString.length());\r\n    assertTrue(validator.isValidDomainSyntax(longString + \".com\"), \"63 chars label should validate\");\r\n    assertFalse(validator.isValidDomainSyntax(longString + \"x.com\"), \"64 chars label should fail\");\r\n    assertTrue(validator.isValidDomainSyntax(\"test.\" + longString), \"63 chars TLD should validate\");\r\n    assertFalse(validator.isValidDomainSyntax(\"test.x\" + longString), \"64 chars TLD should fail\");\r\n    final String longDomain = longString + \".\" + longString + \".\" + longString + \".\" + longString.substring(0, 61);\r\n    assertEquals(253, longDomain.length());\r\n    assertTrue(validator.isValidDomainSyntax(longDomain), \"253 chars domain should validate\");\r\n    assertFalse(validator.isValidDomainSyntax(longDomain + \"x\"), \"254 chars domain should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DomainValidatorTest.java",
  "methodName" : "testValidDomains",
  "sourceCode" : "@Test\r\nvoid testValidDomains() {\r\n    assertTrue(validator.isValid(\"apache.org\"), \"apache.org should validate\");\r\n    assertTrue(validator.isValid(\"www.google.com\"), \"www.google.com should validate\");\r\n    assertTrue(validator.isValid(\"test-domain.com\"), \"test-domain.com should validate\");\r\n    assertTrue(validator.isValid(\"test---domain.com\"), \"test---domain.com should validate\");\r\n    assertTrue(validator.isValid(\"test-d-o-m-ain.com\"), \"test-d-o-m-ain.com should validate\");\r\n    assertTrue(validator.isValid(\"as.uk\"), \"two-letter domain label should validate\");\r\n    assertTrue(validator.isValid(\"ApAchE.Org\"), \"case-insensitive ApAchE.Org should validate\");\r\n    assertTrue(validator.isValid(\"z.com\"), \"single-character domain label should validate\");\r\n    assertTrue(validator.isValid(\"i.have.an-example.domain.name\"), \"i.have.an-example.domain.name should validate\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DoubleValidatorTest.java",
  "methodName" : "testDoubleRangeMinMax",
  "sourceCode" : "/**\r\n * Test Double Range/Min/Max\r\n */\r\n@Test\r\nvoid testDoubleRangeMinMax() {\r\n    final DoubleValidator validator = (DoubleValidator) strictValidator;\r\n    final Double number9 = validator.validate(\"9\", \"#\");\r\n    final Double number10 = validator.validate(\"10\", \"#\");\r\n    final Double number11 = validator.validate(\"11\", \"#\");\r\n    final Double number19 = validator.validate(\"19\", \"#\");\r\n    final Double number20 = validator.validate(\"20\", \"#\");\r\n    final Double number21 = validator.validate(\"21\", \"#\");\r\n    // Test isInRange()\r\n    assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\r\n    assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\r\n    assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\r\n    assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\r\n    assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\r\n    // Test minValue()\r\n    assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\r\n    assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\r\n    assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\r\n    // Test minValue()\r\n    assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\r\n    assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\r\n    assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\DoubleValidatorTest.java",
  "methodName" : "testDoubleValidatorMethods",
  "sourceCode" : "/**\r\n * Test DoubleValidator validate Methods\r\n */\r\n@Test\r\nvoid testDoubleValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"0,00,00\";\r\n    final String patternVal = \"1,23,45\";\r\n    final String germanPatternVal = \"1.23.45\";\r\n    final String localeVal = \"12.345\";\r\n    final String defaultVal = \"12,345\";\r\n    final String xxxx = \"XXXX\";\r\n    final Double expected = Double.valueOf(12345);\r\n    assertEquals(expected, DoubleValidator.getInstance().validate(defaultVal), \"validate(A) default\");\r\n    assertEquals(expected, DoubleValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\r\n    assertEquals(expected, DoubleValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\r\n    assertEquals(expected, DoubleValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\r\n    assertTrue(DoubleValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(DoubleValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\r\n    assertTrue(DoubleValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(DoubleValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(DoubleValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(DoubleValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\r\n    assertNull(DoubleValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(DoubleValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(DoubleValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(DoubleValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\r\n    assertFalse(DoubleValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(DoubleValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmail",
  "sourceCode" : "/**\r\n * Tests the e-mail validation.\r\n */\r\n@Test\r\nvoid testEmail() {\r\n    assertTrue(validator.isValid(\"jsmith@apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailAtTLD",
  "sourceCode" : "/**\r\n * Tests the e-mail validation with a user at a TLD\r\n *\r\n * https://tools.ietf.org/html/rfc5321#section-2.3.5 (In the case of a top-level domain used by itself in an email address, a single string is used without\r\n * any dots)\r\n */\r\n@Test\r\nvoid testEmailAtTLD() {\r\n    final EmailValidator val = EmailValidator.getInstance(false, true);\r\n    assertTrue(val.isValid(\"test@com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailExtension",
  "sourceCode" : "/**\r\n * Tests the e-mail validation.\r\n */\r\n@Test\r\nvoid testEmailExtension() {\r\n    assertTrue(validator.isValid(\"jsmith@apache.org\"));\r\n    assertTrue(validator.isValid(\"jsmith@apache.com\"));\r\n    assertTrue(validator.isValid(\"jsmith@apache.net\"));\r\n    assertTrue(validator.isValid(\"jsmith@apache.info\"));\r\n    assertFalse(validator.isValid(\"jsmith@apache.\"));\r\n    assertFalse(validator.isValid(\"jsmith@apache.c\"));\r\n    assertTrue(validator.isValid(\"someone@yahoo.museum\"));\r\n    assertFalse(validator.isValid(\"someone@yahoo.mu-seum\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailFromPerl",
  "sourceCode" : "/**\r\n * Write this test based on perl Mail::RFC822::Address which takes its example email address directly from RFC822\r\n *\r\n * This test fails so disable it The real solution is to fix the email parsing.\r\n */\r\n@Disabled(\"VALIDATOR-267\")\r\n@Test\r\nvoid testEmailFromPerl() {\r\n    int errors = 0;\r\n    for (final ResultPair element : TEST_EMAIL_FROM_PERL) {\r\n        final String item = element.item;\r\n        final boolean exp = element.valid;\r\n        final boolean act = validator.isValid(item);\r\n        if (act != exp) {\r\n            System.out.printf(\"%s: expected %s actual %s%n\", item, exp, act);\r\n            errors += 1;\r\n        }\r\n    }\r\n    assertEquals(0, errors, \"Expected 0 errors\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailLocalhost",
  "sourceCode" : "/**\r\n * Test that @localhost and @localhost.localdomain addresses are declared as valid when requested.\r\n */\r\n@Test\r\nvoid testEmailLocalhost() {\r\n    // Check the default is not to allow\r\n    final EmailValidator noLocal = EmailValidator.getInstance(false);\r\n    final EmailValidator allowLocal = EmailValidator.getInstance(true);\r\n    assertEquals(validator, noLocal);\r\n    // Depends on the validator\r\n    assertTrue(allowLocal.isValid(\"joe@localhost.localdomain\"), \"@localhost.localdomain should be accepted but wasn't\");\r\n    assertTrue(allowLocal.isValid(\"joe@localhost\"), \"@localhost should be accepted but wasn't\");\r\n    assertFalse(noLocal.isValid(\"joe@localhost.localdomain\"), \"@localhost.localdomain should be accepted but wasn't\");\r\n    assertFalse(noLocal.isValid(\"joe@localhost\"), \"@localhost should be accepted but wasn't\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailUserName",
  "sourceCode" : "/**\r\n * Write this test according to parts of RFC, as opposed to the type of character that is being tested.\r\n */\r\n@Test\r\nvoid testEmailUserName() {\r\n    assertTrue(validator.isValid(\"joe1blow@apache.org\"));\r\n    assertTrue(validator.isValid(\"joe$blow@apache.org\"));\r\n    assertTrue(validator.isValid(\"joe-@apache.org\"));\r\n    assertTrue(validator.isValid(\"joe_@apache.org\"));\r\n    // + is valid unquoted\r\n    assertTrue(validator.isValid(\"joe+@apache.org\"));\r\n    // ! is valid unquoted\r\n    assertTrue(validator.isValid(\"joe!@apache.org\"));\r\n    // * is valid unquoted\r\n    assertTrue(validator.isValid(\"joe*@apache.org\"));\r\n    // ' is valid unquoted\r\n    assertTrue(validator.isValid(\"joe'@apache.org\"));\r\n    // % is valid unquoted\r\n    assertTrue(validator.isValid(\"joe%45@apache.org\"));\r\n    // ? is valid unquoted\r\n    assertTrue(validator.isValid(\"joe?@apache.org\"));\r\n    // & ditto\r\n    assertTrue(validator.isValid(\"joe&@apache.org\"));\r\n    // = ditto\r\n    assertTrue(validator.isValid(\"joe=@apache.org\"));\r\n    // + is valid unquoted\r\n    assertTrue(validator.isValid(\"+joe@apache.org\"));\r\n    // ! is valid unquoted\r\n    assertTrue(validator.isValid(\"!joe@apache.org\"));\r\n    // * is valid unquoted\r\n    assertTrue(validator.isValid(\"*joe@apache.org\"));\r\n    // ' is valid unquoted\r\n    assertTrue(validator.isValid(\"'joe@apache.org\"));\r\n    // % is valid unquoted\r\n    assertTrue(validator.isValid(\"%joe45@apache.org\"));\r\n    // ? is valid unquoted\r\n    assertTrue(validator.isValid(\"?joe@apache.org\"));\r\n    // & ditto\r\n    assertTrue(validator.isValid(\"&joe@apache.org\"));\r\n    // = ditto\r\n    assertTrue(validator.isValid(\"=joe@apache.org\"));\r\n    // + is valid unquoted\r\n    assertTrue(validator.isValid(\"+@apache.org\"));\r\n    // ! is valid unquoted\r\n    assertTrue(validator.isValid(\"!@apache.org\"));\r\n    // * is valid unquoted\r\n    assertTrue(validator.isValid(\"*@apache.org\"));\r\n    // ' is valid unquoted\r\n    assertTrue(validator.isValid(\"'@apache.org\"));\r\n    // % is valid unquoted\r\n    assertTrue(validator.isValid(\"%@apache.org\"));\r\n    // ? is valid unquoted\r\n    assertTrue(validator.isValid(\"?@apache.org\"));\r\n    // & ditto\r\n    assertTrue(validator.isValid(\"&@apache.org\"));\r\n    // = ditto\r\n    assertTrue(validator.isValid(\"=@apache.org\"));\r\n    // UnQuoted Special characters are invalid\r\n    // . not allowed at end of local part\r\n    assertFalse(validator.isValid(\"joe.@apache.org\"));\r\n    // . not allowed at start of local part\r\n    assertFalse(validator.isValid(\".joe@apache.org\"));\r\n    // . not allowed alone\r\n    assertFalse(validator.isValid(\".@apache.org\"));\r\n    // . allowed embedded\r\n    assertTrue(validator.isValid(\"joe.ok@apache.org\"));\r\n    // .. not allowed embedded\r\n    assertFalse(validator.isValid(\"joe..ok@apache.org\"));\r\n    // .. not allowed alone\r\n    assertFalse(validator.isValid(\"..@apache.org\"));\r\n    assertFalse(validator.isValid(\"joe(@apache.org\"));\r\n    assertFalse(validator.isValid(\"joe)@apache.org\"));\r\n    assertFalse(validator.isValid(\"joe,@apache.org\"));\r\n    assertFalse(validator.isValid(\"joe;@apache.org\"));\r\n    // Quoted Special characters are valid\r\n    assertTrue(validator.isValid(\"\\\"joe.\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\".joe\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe+\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe@\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe!\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe*\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe'\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe(\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe)\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe,\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe%45\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe;\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe?\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe&\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"joe=\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\"..\\\"@apache.org\"));\r\n    // escaped quote character valid in quoted string\r\n    assertTrue(validator.isValid(\"\\\"john\\\\\\\"doe\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"john56789.john56789.john56789.john56789.john56789.john56789.john@example.com\"));\r\n    assertFalse(validator.isValid(\"john56789.john56789.john56789.john56789.john56789.john56789.john5@example.com\"));\r\n    assertTrue(validator.isValid(\"\\\\>escape\\\\\\\\special\\\\^characters\\\\<@example.com\"));\r\n    assertTrue(validator.isValid(\"Abc\\\\@def@example.com\"));\r\n    assertFalse(validator.isValid(\"Abc@def@example.com\"));\r\n    assertTrue(validator.isValid(\"space\\\\ monkey@example.com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailWithBogusCharacter",
  "sourceCode" : "/**\r\n * Tests the e-mail validation with an RCS-noncompliant character in the address.\r\n */\r\n@Test\r\nvoid testEmailWithBogusCharacter() {\r\n    assertFalse(validator.isValid(\"andy.noble@\\u008fdata-workshop.com\"));\r\n    // The ' character is valid in an email username.\r\n    assertTrue(validator.isValid(\"andy.o'reilly@data-workshop.com\"));\r\n    // But not in the domain name.\r\n    assertFalse(validator.isValid(\"andy@o'reilly.data-workshop.com\"));\r\n    // The + character is valid in an email username.\r\n    assertTrue(validator.isValid(\"foo+bar@i.am.not.in.us.example.com\"));\r\n    // But not in the domain name\r\n    assertFalse(validator.isValid(\"foo+bar@example+3.com\"));\r\n    // Domains with only special characters aren't allowed (VALIDATOR-286)\r\n    assertFalse(validator.isValid(\"test@%*.com\"));\r\n    assertFalse(validator.isValid(\"test@^&#.com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailWithCommas",
  "sourceCode" : "/**\r\n * Tests the email validation with commas.\r\n */\r\n@Test\r\nvoid testEmailWithCommas() {\r\n    assertFalse(validator.isValid(\"joeblow@apa,che.org\"));\r\n    assertFalse(validator.isValid(\"joeblow@apache.o,rg\"));\r\n    assertFalse(validator.isValid(\"joeblow@apache,org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailWithControlChars",
  "sourceCode" : "/**\r\n * Tests the email validation with ASCII control characters. (i.e. ASCII chars 0 - 31 and 127)\r\n */\r\n@Test\r\nvoid testEmailWithControlChars() {\r\n    for (char c = 0; c < 32; c++) {\r\n        assertFalse(validator.isValid(\"foo\" + c + \"bar@domain.com\"), \"Test control char \" + (int) c);\r\n    }\r\n    assertFalse(validator.isValid(\"foo\" + (char) 127 + \"bar@domain.com\"), \"Test control char 127\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailWithDash",
  "sourceCode" : "/**\r\n * <p>\r\n * Tests the e-mail validation with a dash in the address.\r\n * </p>\r\n */\r\n@Test\r\nvoid testEmailWithDash() {\r\n    assertTrue(validator.isValid(\"andy.noble@data-workshop.com\"));\r\n    assertFalse(validator.isValid(\"andy-noble@data-workshop.-com\"));\r\n    assertFalse(validator.isValid(\"andy-noble@data-workshop.c-om\"));\r\n    assertFalse(validator.isValid(\"andy-noble@data-workshop.co-m\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailWithDotEnd",
  "sourceCode" : "/**\r\n * Tests the e-mail validation with a dot at the end of the address.\r\n */\r\n@Test\r\nvoid testEmailWithDotEnd() {\r\n    assertFalse(validator.isValid(\"andy.noble@data-workshop.com.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailWithNumericAddress",
  "sourceCode" : "/**\r\n * Tests the email validation with numeric domains.\r\n */\r\n@Test\r\nvoid testEmailWithNumericAddress() {\r\n    assertTrue(validator.isValid(\"someone@[216.109.118.76]\"));\r\n    assertTrue(validator.isValid(\"someone@yahoo.com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailWithSlashes",
  "sourceCode" : "/**\r\n * VALIDATOR-296 - A / or a ! is valid in the user part, but not in the domain part\r\n */\r\n@Test\r\nvoid testEmailWithSlashes() {\r\n    assertTrue(validator.isValid(\"joe!/blow@apache.org\"), \"/ and ! valid in username\");\r\n    assertFalse(validator.isValid(\"joe@ap/ache.org\"), \"/ not valid in domain\");\r\n    assertFalse(validator.isValid(\"joe@apac!he.org\"), \"! not valid in domain\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testEmailWithSpaces",
  "sourceCode" : "/**\r\n * Tests the email validation with spaces.\r\n */\r\n@Test\r\nvoid testEmailWithSpaces() {\r\n    assertFalse(validator.isValid(\"joeblow @apache.org\"));\r\n    assertFalse(validator.isValid(\"joeblow@ apache.org\"));\r\n    assertFalse(validator.isValid(\" joeblow@apache.org\"));\r\n    assertFalse(validator.isValid(\"joeblow@apache.org \"));\r\n    assertFalse(validator.isValid(\"joe blow@apache.org \"));\r\n    assertFalse(validator.isValid(\"joeblow@apa che.org \"));\r\n    assertTrue(validator.isValid(\"\\\"joeblow \\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\" joeblow\\\"@apache.org\"));\r\n    assertTrue(validator.isValid(\"\\\" joe blow \\\"@apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator235",
  "sourceCode" : "@Test\r\nvoid testValidator235() {\r\n    assertTrue(validator.isValid(\"someone@xn--d1abbgf6aiiy.xn--p1ai\"), \"xn--d1abbgf6aiiy.xn--p1ai should validate\");\r\n    assertTrue(validator.isValid(\"someone@президент.рф\"), \"президент.рф should validate\");\r\n    assertTrue(validator.isValid(\"someone@www.b\\u00fccher.ch\"), \"www.b\\u00fccher.ch should validate\");\r\n    assertFalse(validator.isValid(\"someone@www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\r\n    assertTrue(validator.isValid(\"someone@www.b\\u00fccher.ch\"), \"www.b\\u00fccher.ch should validate\");\r\n    assertFalse(validator.isValid(\"someone@www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator278",
  "sourceCode" : "@Test\r\nvoid testValidator278() {\r\n    // hostname starts with dash/hyphen\r\n    assertFalse(validator.isValid(\"someone@-test.com\"));\r\n    // hostname ends with dash/hyphen\r\n    assertFalse(validator.isValid(\"someone@test-.com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator293",
  "sourceCode" : "@Test\r\nvoid testValidator293() {\r\n    assertTrue(validator.isValid(\"abc-@abc.com\"));\r\n    assertTrue(validator.isValid(\"abc_@abc.com\"));\r\n    assertTrue(validator.isValid(\"abc-def@abc.com\"));\r\n    assertTrue(validator.isValid(\"abc_def@abc.com\"));\r\n    assertFalse(validator.isValid(\"abc@abc_def.com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator315",
  "sourceCode" : "@Test\r\nvoid testValidator315() {\r\n    assertFalse(validator.isValid(\"me@at&t.net\"));\r\n    // Make sure TLD is not the cause of the failure\r\n    assertTrue(validator.isValid(\"me@att.net\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator359",
  "sourceCode" : "@Test\r\nvoid testValidator359() {\r\n    final EmailValidator val = EmailValidator.getInstance(false, true);\r\n    assertFalse(val.isValid(\"test@.com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator365",
  "sourceCode" : "@Test\r\nvoid testValidator365() {\r\n    assertFalse(validator.isValid(\"Loremipsumdolorsitametconsecteturadipiscingelit.Nullavitaeligulamattisrhoncusnuncegestasmattisleo.\" + \"Donecnonsapieninmagnatristiquedictumaacturpis.Fusceorciduifacilisisutsapieneuconsequatpharetralectus.\" + \"Quisqueenimestpulvinarutquamvitaeportamattisex.Nullamquismaurisplaceratconvallisjustoquisportamauris.\" + \"Innullalacusconvalliseufringillautvenenatissitametdiam.Maecenasluctusligulascelerisquepulvinarfeugiat.\" + \"Sedmolestienullaaliquetorciluctusidpharetranislfinibus.Suspendissemalesuadatinciduntduisitametportaarcusollicitudinnec.\" + \"Donecetmassamagna.Curabitururnadiampretiumveldignissimporttitorfringillaeuneque.\" + \"Duisantetelluspharetraidtinciduntinterdummolestiesitametfelis.Utquisquamsitametantesagittisdapibusacnonodio.\" + \"Namrutrummolestiediamidmattis.Cumsociisnatoquepenatibusetmagnisdisparturientmontesnasceturridiculusmus.\" + \"Morbiposueresedmetusacconsectetur.Etiamquisipsumvitaejustotempusmaximus.Sedultriciesplaceratvolutpat.\" + \"Integerlacuslectusmaximusacornarequissagittissitametjusto.\" + \"Cumsociisnatoquepenatibusetmagnisdisparturientmontesnasceturridiculusmus.Maecenasindictumpurussedrutrumex.Nullafacilisi.\" + \"Integerfinibusfinibusmietpharetranislfaucibusvel.Maecenasegetdolorlacinialobortisjustovelullamcorpersem.\" + \"Vivamusaliquetpurusidvariusornaresapienrisusrutrumnisitinciduntmollissemnequeidmetus.\" + \"Etiamquiseleifendpurus.Nuncfelisnuncscelerisqueiddignissimnecfinibusalibero.\" + \"Nuncsemperenimnequesitamethendreritpurusfacilisisac.Maurisdapibussemperfelisdignissimgravida.\" + \"Aeneanultricesblanditnequealiquamfinibusodioscelerisqueac.Aliquamnecmassaeumaurisfaucibusfringilla.\" + \"Etiamconsequatligulanisisitametaliquamnibhtemporquis.Nuncinterdumdignissimnullaatsodalesarcusagittiseu.\" + \"Proinpharetrametusneclacuspulvinarsedvolutpatliberoornare.Sedligulanislpulvinarnonlectuseublanditfacilisisante.\" + \"Sedmollisnislalacusauctorsuscipit.Inhachabitasseplateadictumst.Phasellussitametvelittemporvenenatisfeliseuegestasrisus.\" + \"Aliquameteratsitametnibhcommodofinibus.Morbiefficiturodiovelpulvinariaculis.\" + \"Aeneantemporipsummassaaconsecteturturpisfaucibusultrices.Praesentsodalesmaurisquisportafermentum.\" + \"Etiamnisinislvenenatisvelauctorutullamcorperinjusto.Proinvelligulaerat.Phasellusvestibulumgravidamassanonfeugiat.\" + \"Maecenaspharetraeuismodmetusegetefficitur.Suspendisseamet@gmail.com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator374",
  "sourceCode" : "@Test\r\nvoid testValidator374() {\r\n    assertTrue(validator.isValid(\"abc@school.school\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator473Part1",
  "sourceCode" : "@Test\r\nvoid testValidator473Part1() {\r\n    // reject null DomainValidator\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new EmailValidator(false, false, null));\r\n    assertEquals(\"DomainValidator cannot be null\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator473Part2",
  "sourceCode" : "@Test\r\nvoid testValidator473Part2() {\r\n    // reject null DomainValidator with mismatched allowLocal\r\n    final List<DomainValidator.Item> items = new ArrayList<>();\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new EmailValidator(false, false, DomainValidator.getInstance(true, items)));\r\n    assertEquals(\"DomainValidator must agree with allowLocal setting\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator473Part3",
  "sourceCode" : "@Test\r\nvoid testValidator473Part3() {\r\n    // reject null DomainValidator with mismatched allowLocal\r\n    final List<DomainValidator.Item> items = new ArrayList<>();\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new EmailValidator(true, false, DomainValidator.getInstance(false, items)));\r\n    assertEquals(\"DomainValidator must agree with allowLocal setting\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\EmailValidatorTest.java",
  "methodName" : "testValidator473Part4",
  "sourceCode" : "@Test\r\nvoid testValidator473Part4() {\r\n    // Show that can override domain validation\r\n    assertFalse(validator.isValidDomain(\"test.local\"));\r\n    final List<DomainValidator.Item> items = new ArrayList<>();\r\n    items.add(new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"local\"));\r\n    final EmailValidator val = new EmailValidator(true, false, DomainValidator.getInstance(true, items));\r\n    assertTrue(val.isValidDomain(\"test.local\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\FloatValidatorTest.java",
  "methodName" : "testFloatRangeMinMax",
  "sourceCode" : "/**\r\n * Test Float Range/Min/Max\r\n */\r\n@Test\r\nvoid testFloatRangeMinMax() {\r\n    final FloatValidator validator = (FloatValidator) strictValidator;\r\n    final Float number9 = validator.validate(\"9\", \"#\");\r\n    final Float number10 = validator.validate(\"10\", \"#\");\r\n    final Float number11 = validator.validate(\"11\", \"#\");\r\n    final Float number19 = validator.validate(\"19\", \"#\");\r\n    final Float number20 = validator.validate(\"20\", \"#\");\r\n    final Float number21 = validator.validate(\"21\", \"#\");\r\n    // Test isInRange()\r\n    assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\r\n    assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\r\n    assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\r\n    assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\r\n    assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\r\n    // Test minValue()\r\n    assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\r\n    assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\r\n    assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\r\n    // Test minValue()\r\n    assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\r\n    assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\r\n    assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\FloatValidatorTest.java",
  "methodName" : "testFloatSmallestValues",
  "sourceCode" : "/**\r\n * Test Float validation for values too small to handle. (slightly different from max/min which are the largest +ve/-ve\r\n */\r\n@Test\r\nvoid testFloatSmallestValues() {\r\n    final String pattern = \"#.#################################################################\";\r\n    final DecimalFormat fmt = new DecimalFormat(pattern);\r\n    // Validate Smallest +ve value\r\n    final Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\r\n    final String strSmallestPositive = fmt.format(smallestPositive);\r\n    assertEquals(smallestPositive, FloatValidator.getInstance().validate(strSmallestPositive, pattern), \"Smallest +ve\");\r\n    // Validate Smallest -ve value\r\n    final Float smallestNegative = Float.valueOf(Float.MIN_VALUE * -1);\r\n    final String strSmallestNegative = fmt.format(smallestNegative);\r\n    assertEquals(smallestNegative, FloatValidator.getInstance().validate(strSmallestNegative, pattern), \"Smallest -ve\");\r\n    // Validate Too Small +ve\r\n    final Double tooSmallPositive = Double.valueOf((double) Float.MIN_VALUE / (double) 10);\r\n    final String strTooSmallPositive = fmt.format(tooSmallPositive);\r\n    assertFalse(FloatValidator.getInstance().isValid(strTooSmallPositive, pattern), \"Too small +ve\");\r\n    // Validate Too Small -ve\r\n    final Double tooSmallNegative = Double.valueOf(tooSmallPositive.doubleValue() * -1);\r\n    final String strTooSmallNegative = fmt.format(tooSmallNegative);\r\n    assertFalse(FloatValidator.getInstance().isValid(strTooSmallNegative, pattern), \"Too small -ve\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\FloatValidatorTest.java",
  "methodName" : "testFloatValidatorMethods",
  "sourceCode" : "/**\r\n * Test FloatValidator validate Methods\r\n */\r\n@Test\r\nvoid testFloatValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"0,00,00\";\r\n    final String patternVal = \"1,23,45\";\r\n    final String localeVal = \"12.345\";\r\n    final String germanPatternVal = \"1.23.45\";\r\n    final String defaultVal = \"12,345\";\r\n    final String xxxx = \"XXXX\";\r\n    final Float expected = Float.valueOf(12345);\r\n    assertEquals(expected, FloatValidator.getInstance().validate(defaultVal), \"validate(A) default\");\r\n    assertEquals(expected, FloatValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\r\n    assertEquals(expected, FloatValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\r\n    assertEquals(expected, FloatValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\r\n    assertTrue(FloatValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(FloatValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\r\n    assertTrue(FloatValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(FloatValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(FloatValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(FloatValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\r\n    assertNull(FloatValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(FloatValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(FloatValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(FloatValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\r\n    assertFalse(FloatValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(FloatValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testExampleAccountsShouldBeValid",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"ibanRegistrySourceExamples\")\r\nvoid testExampleAccountsShouldBeValid(final String countryName, final String example) {\r\n    Assumptions.assumeFalse(INVALID_IBAN_FIXTURES.contains(example), \"Skip invalid example: \" + example + \" for \" + countryName);\r\n    assertTrue(IBANValidator.getInstance().isValid(example), \"IBAN validator returned false for \" + example + \" for \" + countryName);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testGetRegexValidatorPatterns",
  "sourceCode" : "@Test\r\nvoid testGetRegexValidatorPatterns() {\r\n    assertNotNull(VALIDATOR.getValidator(\"GB\").getRegexValidator().getPatterns(), \"GB\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testGetValidator",
  "sourceCode" : "@Test\r\nvoid testGetValidator() {\r\n    assertNotNull(VALIDATOR.getValidator(\"GB\"), \"GB\");\r\n    assertNull(VALIDATOR.getValidator(\"gb\"), \"gb\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testHasValidator",
  "sourceCode" : "@Test\r\nvoid testHasValidator() {\r\n    assertTrue(VALIDATOR.hasValidator(\"GB\"), \"GB\");\r\n    assertFalse(VALIDATOR.hasValidator(\"gb\"), \"gb\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testInValid",
  "sourceCode" : "@ParameterizedTest\r\n@FieldSource(\"INVALID_IBAN_FIXTURES\")\r\nvoid testInValid(final String invalidIban) {\r\n    // ensure field is marked as being used\r\n    assertNotNull(INVALID_IBAN_FIXTURES);\r\n    assertFalse(VALIDATOR.isValid(invalidIban), invalidIban);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testMoreValid",
  "sourceCode" : "@ParameterizedTest\r\n@FieldSource(\"VALID_IBAN_FIXTURES\")\r\nvoid testMoreValid(final String invalidIban) {\r\n    // ensure field is marked as being used\r\n    assertNotNull(VALID_IBAN_FIXTURES);\r\n    assertTrue(VALIDATOR.isValid(invalidIban), invalidIban);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    assertFalse(VALIDATOR.isValid(null), \"isValid(null)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testSetDefaultValidator1",
  "sourceCode" : "@Test\r\nvoid testSetDefaultValidator1() {\r\n    final IllegalStateException thrown = assertThrows(IllegalStateException.class, () -> VALIDATOR.setValidator(\"GB\", 15, \"GB\"));\r\n    assertEquals(\"The singleton validator cannot be modified\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testSetDefaultValidator2",
  "sourceCode" : "@Test\r\nvoid testSetDefaultValidator2() {\r\n    final IllegalStateException thrown = assertThrows(IllegalStateException.class, () -> VALIDATOR.setValidator(\"GB\", -1, \"GB\"));\r\n    assertEquals(\"The singleton validator cannot be modified\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testSetValidatorLC",
  "sourceCode" : "@Test\r\nvoid testSetValidatorLC() {\r\n    final IBANValidator validator = new IBANValidator();\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> validator.setValidator(\"gb\", 15, \"GB\"));\r\n    assertEquals(\"Invalid country Code; must be exactly 2 upper-case characters\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testSetValidatorLen1",
  "sourceCode" : "@Test\r\nvoid testSetValidatorLen1() {\r\n    final IBANValidator validator = new IBANValidator();\r\n    assertNotNull(validator.setValidator(\"GB\", -1, \"\"), \"should be present\");\r\n    assertNull(validator.setValidator(\"GB\", -1, \"\"), \"no longer present\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testSetValidatorLen35",
  "sourceCode" : "@Test\r\nvoid testSetValidatorLen35() {\r\n    final IBANValidator validator = new IBANValidator();\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> validator.setValidator(\"GB\", 35, \"GB\"));\r\n    assertEquals(\"Invalid length parameter, must be in range 8 to 34 inclusive: 35\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testSetValidatorLen7",
  "sourceCode" : "@Test\r\nvoid testSetValidatorLen7() {\r\n    final IBANValidator validator = new IBANValidator();\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> validator.setValidator(\"GB\", 7, \"GB\"));\r\n    assertEquals(\"Invalid length parameter, must be in range 8 to 34 inclusive: 7\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testSorted",
  "sourceCode" : "@Test\r\nvoid testSorted() {\r\n    final IBANValidator validator = new IBANValidator();\r\n    final Validator[] vals = validator.getDefaultValidators();\r\n    assertNotNull(vals);\r\n    for (int i = 1; i < vals.length; i++) {\r\n        if (vals[i].countryCode.compareTo(vals[i - 1].countryCode) <= 0) {\r\n            fail(\"Not sorted: \" + vals[i].countryCode + \" <= \" + vals[i - 1].countryCode);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testValid",
  "sourceCode" : "@ParameterizedTest\r\n@FieldSource(\"VALID_IBAN_FIXTURES\")\r\nvoid testValid(final String iban) {\r\n    assertTrue(IBANCheckDigit.IBAN_CHECK_DIGIT.isValid(iban), \"Checksum fail: \" + iban);\r\n    assertTrue(VALIDATOR.hasValidator(iban), \"Missing validator: \" + iban);\r\n    assertTrue(VALIDATOR.isValid(iban), iban);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testValidateIbanStatuses",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"validateIbanStatuses\")\r\nvoid testValidateIbanStatuses(final String iban, final IBANValidatorStatus expectedStatus) {\r\n    assertEquals(expectedStatus, IBANValidator.getInstance().validate(iban));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IBANValidatorTest.java",
  "methodName" : "testValidatorShouldExistWithProperConfiguration",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"ibanRegistrySource\")\r\nvoid testValidatorShouldExistWithProperConfiguration(final String countryName, final String countryCode, final List<String> acountyCode, final int ibanLength, final String structure) throws Exception {\r\n    final String countryInfo = \" countryCode: \" + countryCode + \", countryName: \" + countryName;\r\n    final Validator validator = IBANValidator.getInstance().getValidator(countryCode);\r\n    assertNotNull(validator, \"IBAN validator returned null for\" + countryInfo);\r\n    assertEquals(ibanLength, validator.getIbanLength(), \"IBAN length should be \" + ibanLength + \" for\" + countryInfo);\r\n    final List<String> allPatterns = Arrays.stream(validator.getRegexValidator().getPatterns()).map(Pattern::pattern).collect(Collectors.toList());\r\n    //allow for prefix\r\n    final String re = fmtRE(structure.substring(2), ibanLength - 2);\r\n    assertTrue(allPatterns.remove(countryCode + re), \"No pattern \" + countryCode + re + \" found for \" + countryInfo);\r\n    for (final String ac : acountyCode) {\r\n        assertTrue(allPatterns.remove(ac + re), \"No additional country code \" + ac + \" found for \" + countryInfo);\r\n    }\r\n    assertTrue(allPatterns.isEmpty(), \"Unrecognized patterns: \" + allPatterns + \" for\" + countryInfo);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\InetAddressValidatorTest.java",
  "methodName" : "testBrokenInetAddresses",
  "sourceCode" : "/**\r\n * Test obviously broken IPs.\r\n */\r\n@Test\r\nvoid testBrokenInetAddresses() {\r\n    assertFalse(validator.isValid(\"124.14.32.abc\"), \"IP with characters should be invalid\");\r\n    // TODO: there is some debate as to whether leading zeros should be allowed\r\n    // They are ambiguous: does the leading 0 mean octal?\r\n    assertFalse(validator.isValid(\"124.14.32.01\"), \"IP with leading zeroes should be invalid\");\r\n    assertFalse(validator.isValid(\"23.64.12\"), \"IP with three groups should be invalid\");\r\n    assertFalse(validator.isValid(\"26.34.23.77.234\"), \"IP with five groups should be invalid\");\r\n    // empty string\r\n    assertFalse(validator.isValidInet6Address(\"\"), \"IP empty string should be invalid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\InetAddressValidatorTest.java",
  "methodName" : "testInetAddressesByClass",
  "sourceCode" : "/**\r\n * Test valid and invalid IPs from each address class.\r\n */\r\n@Test\r\nvoid testInetAddressesByClass() {\r\n    assertTrue(validator.isValid(\"24.25.231.12\"), \"class A IP should be valid\");\r\n    assertFalse(validator.isValid(\"2.41.32.324\"), \"illegal class A IP should be invalid\");\r\n    assertTrue(validator.isValid(\"135.14.44.12\"), \"class B IP should be valid\");\r\n    assertFalse(validator.isValid(\"154.123.441.123\"), \"illegal class B IP should be invalid\");\r\n    assertTrue(validator.isValid(\"213.25.224.32\"), \"class C IP should be valid\");\r\n    assertFalse(validator.isValid(\"201.543.23.11\"), \"illegal class C IP should be invalid\");\r\n    assertTrue(validator.isValid(\"229.35.159.6\"), \"class D IP should be valid\");\r\n    assertFalse(validator.isValid(\"231.54.11.987\"), \"illegal class D IP should be invalid\");\r\n    assertTrue(validator.isValid(\"248.85.24.92\"), \"class E IP should be valid\");\r\n    assertFalse(validator.isValid(\"250.21.323.48\"), \"illegal class E IP should be invalid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\InetAddressValidatorTest.java",
  "methodName" : "testInetAddressesFromTheWild",
  "sourceCode" : "/**\r\n * Test IPs that point to real, well-known hosts (without actually looking them up).\r\n */\r\n@Test\r\nvoid testInetAddressesFromTheWild() {\r\n    assertTrue(validator.isValid(\"140.211.11.130\"), \"www.apache.org IP should be valid\");\r\n    assertTrue(validator.isValid(\"72.14.253.103\"), \"www.l.google.com IP should be valid\");\r\n    assertTrue(validator.isValid(\"199.232.41.5\"), \"fsf.org IP should be valid\");\r\n    assertTrue(validator.isValid(\"216.35.123.87\"), \"appscs.ign.com IP should be valid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\InetAddressValidatorTest.java",
  "methodName" : "testIPv6",
  "sourceCode" : "/**\r\n * Test IPv6 addresses.\r\n * <p>\r\n * These tests were ported from a <a href=\"https://download.dartware.com/thirdparty/test-ipv6-regex.pl\">Perl script</a>.\r\n * </p>\r\n */\r\n@Test\r\nvoid testIPv6() {\r\n    // The original Perl script contained a lot of duplicate tests.\r\n    // I removed the duplicates I noticed, but there may be more.\r\n    // empty string\r\n    assertFalse(validator.isValidInet6Address(\"\"), \"IPV6 empty string should be invalid\");\r\n    // loopback, compressed, non-routable\r\n    assertTrue(validator.isValidInet6Address(\"::1\"), \"IPV6 ::1 should be valid\");\r\n    // unspecified, compressed, non-routable\r\n    assertTrue(validator.isValidInet6Address(\"::\"), \"IPV6 :: should be valid\");\r\n    // loopback, full\r\n    assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0:0:1\"), \"IPV6 0:0:0:0:0:0:0:1 should be valid\");\r\n    // unspecified, full\r\n    assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0:0:0\"), \"IPV6 0:0:0:0:0:0:0:0 should be valid\");\r\n    // unicast, full\r\n    assertTrue(validator.isValidInet6Address(\"2001:DB8:0:0:8:800:200C:417A\"), \"IPV6 2001:DB8:0:0:8:800:200C:417A should be valid\");\r\n    // multicast, full\r\n    assertTrue(validator.isValidInet6Address(\"FF01:0:0:0:0:0:0:101\"), \"IPV6 FF01:0:0:0:0:0:0:101 should be valid\");\r\n    // unicast, compressed\r\n    assertTrue(validator.isValidInet6Address(\"2001:DB8::8:800:200C:417A\"), \"IPV6 2001:DB8::8:800:200C:417A should be valid\");\r\n    // multicast, compressed\r\n    assertTrue(validator.isValidInet6Address(\"FF01::101\"), \"IPV6 FF01::101 should be valid\");\r\n    // unicast,\r\n    assertFalse(validator.isValidInet6Address(\"2001:DB8:0:0:8:800:200C:417A:221\"), \"IPV6 2001:DB8:0:0:8:800:200C:417A:221 should be invalid\");\r\n    // full\r\n    // multicast, compressed\r\n    assertFalse(validator.isValidInet6Address(\"FF01::101::2\"), \"IPV6 FF01::101::2 should be invalid\");\r\n    assertTrue(validator.isValidInet6Address(\"fe80::217:f2ff:fe07:ed62\"), \"IPV6 fe80::217:f2ff:fe07:ed62 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0000:1234:0000:0000:C1C0:ABCD:0876\"), \"IPV6 2001:0000:1234:0000:0000:C1C0:ABCD:0876 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"3ffe:0b00:0000:0000:0001:0000:0000:000a\"), \"IPV6 3ffe:0b00:0000:0000:0001:0000:0000:000a should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"FF02:0000:0000:0000:0000:0000:0000:0001\"), \"IPV6 FF02:0000:0000:0000:0000:0000:0000:0001 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"0000:0000:0000:0000:0000:0000:0000:0001\"), \"IPV6 0000:0000:0000:0000:0000:0000:0000:0001 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"0000:0000:0000:0000:0000:0000:0000:0000\"), \"IPV6 0000:0000:0000:0000:0000:0000:0000:0000 should be valid\");\r\n    assertFalse(validator.isValidInet6Address(\"02001:0000:1234:0000:0000:C1C0:ABCD:0876\"), // extra 0 not allowed!\r\n    \"IPV6 02001:0000:1234:0000:0000:C1C0:ABCD:0876 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"2001:0000:1234:0000:00001:C1C0:ABCD:0876\"), // extra 0 not allowed!\r\n    \"IPV6 2001:0000:1234:0000:00001:C1C0:ABCD:0876 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"2001:0000:1234:0000:0000:C1C0:ABCD:0876 0\"), // junk after valid address\r\n    \"IPV6 2001:0000:1234:0000:0000:C1C0:ABCD:0876 0 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"2001:0000:1234: 0000:0000:C1C0:ABCD:0876\"), // internal space\r\n    \"IPV6 2001:0000:1234: 0000:0000:C1C0:ABCD:0876 should be invalid\");\r\n    // seven\r\n    assertFalse(validator.isValidInet6Address(\"3ffe:0b00:0000:0001:0000:0000:000a\"), \"IPV6 3ffe:0b00:0000:0001:0000:0000:000a should be invalid\");\r\n    // segments\r\n    assertFalse(validator.isValidInet6Address(\"FF02:0000:0000:0000:0000:0000:0000:0000:0001\"), // nine segments\r\n    \"IPV6 FF02:0000:0000:0000:0000:0000:0000:0000:0001 should be invalid\");\r\n    // double \"::\"\r\n    assertFalse(validator.isValidInet6Address(\"3ffe:b00::1::a\"), \"IPV6 3ffe:b00::1::a should be invalid\");\r\n    // double\r\n    assertFalse(validator.isValidInet6Address(\"::1111:2222:3333:4444:5555:6666::\"), \"IPV6 ::1111:2222:3333:4444:5555:6666:: should be invalid\");\r\n    // \"::\"\r\n    assertTrue(validator.isValidInet6Address(\"2::10\"), \"IPV6 2::10 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"ff02::1\"), \"IPV6 ff02::1 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"fe80::\"), \"IPV6 fe80:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2002::\"), \"IPV6 2002:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:db8::\"), \"IPV6 2001:db8:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0db8:1234::\"), \"IPV6 2001:0db8:1234:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::ffff:0:0\"), \"IPV6 ::ffff:0:0 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4:5:6:7:8\"), \"IPV6 1:2:3:4:5:6:7:8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4:5:6::8\"), \"IPV6 1:2:3:4:5:6::8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4:5::8\"), \"IPV6 1:2:3:4:5::8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4::8\"), \"IPV6 1:2:3:4::8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3::8\"), \"IPV6 1:2:3::8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2::8\"), \"IPV6 1:2::8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::8\"), \"IPV6 1::8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::2:3:4:5:6:7\"), \"IPV6 1::2:3:4:5:6:7 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::2:3:4:5:6\"), \"IPV6 1::2:3:4:5:6 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::2:3:4:5\"), \"IPV6 1::2:3:4:5 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::2:3:4\"), \"IPV6 1::2:3:4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::2:3\"), \"IPV6 1::2:3 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::2:3:4:5:6:7:8\"), \"IPV6 ::2:3:4:5:6:7:8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::2:3:4:5:6:7\"), \"IPV6 ::2:3:4:5:6:7 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::2:3:4:5:6\"), \"IPV6 ::2:3:4:5:6 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::2:3:4:5\"), \"IPV6 ::2:3:4:5 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::2:3:4\"), \"IPV6 ::2:3:4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::2:3\"), \"IPV6 ::2:3 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::8\"), \"IPV6 ::8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4:5:6::\"), \"IPV6 1:2:3:4:5:6:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4:5::\"), \"IPV6 1:2:3:4:5:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4::\"), \"IPV6 1:2:3:4:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3::\"), \"IPV6 1:2:3:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2::\"), \"IPV6 1:2:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::\"), \"IPV6 1:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4:5::7:8\"), \"IPV6 1:2:3:4:5::7:8 should be valid\");\r\n    // Double \"::\"\r\n    assertFalse(validator.isValidInet6Address(\"1:2:3::4:5::7:8\"), \"IPV6 1:2:3::4:5::7:8 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"12345::6:7:8\"), \"IPV6 12345::6:7:8 should be invalid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4::7:8\"), \"IPV6 1:2:3:4::7:8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3::7:8\"), \"IPV6 1:2:3::7:8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2::7:8\"), \"IPV6 1:2::7:8 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::7:8\"), \"IPV6 1::7:8 should be valid\");\r\n    // IPv4 addresses as dotted-quads\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4:5:6:1.2.3.4\"), \"IPV6 1:2:3:4:5:6:1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4:5::1.2.3.4\"), \"IPV6 1:2:3:4:5::1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4::1.2.3.4\"), \"IPV6 1:2:3:4::1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3::1.2.3.4\"), \"IPV6 1:2:3::1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2::1.2.3.4\"), \"IPV6 1:2::1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::1.2.3.4\"), \"IPV6 1::1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3:4::5:1.2.3.4\"), \"IPV6 1:2:3:4::5:1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2:3::5:1.2.3.4\"), \"IPV6 1:2:3::5:1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1:2::5:1.2.3.4\"), \"IPV6 1:2::5:1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::5:1.2.3.4\"), \"IPV6 1::5:1.2.3.4 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1::5:11.22.33.44\"), \"IPV6 1::5:11.22.33.44 should be valid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:400.2.3.4\"), \"IPV6 1::5:400.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:260.2.3.4\"), \"IPV6 1::5:260.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:256.2.3.4\"), \"IPV6 1::5:256.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:1.256.3.4\"), \"IPV6 1::5:1.256.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:1.2.256.4\"), \"IPV6 1::5:1.2.256.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:1.2.3.256\"), \"IPV6 1::5:1.2.3.256 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:300.2.3.4\"), \"IPV6 1::5:300.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:1.300.3.4\"), \"IPV6 1::5:1.300.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:1.2.300.4\"), \"IPV6 1::5:1.2.300.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:1.2.3.300\"), \"IPV6 1::5:1.2.3.300 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:900.2.3.4\"), \"IPV6 1::5:900.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:1.900.3.4\"), \"IPV6 1::5:1.900.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:1.2.900.4\"), \"IPV6 1::5:1.2.900.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:1.2.3.900\"), \"IPV6 1::5:1.2.3.900 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:300.300.300.300\"), \"IPV6 1::5:300.300.300.300 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::5:3000.30.30.30\"), \"IPV6 1::5:3000.30.30.30 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::400.2.3.4\"), \"IPV6 1::400.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::260.2.3.4\"), \"IPV6 1::260.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::256.2.3.4\"), \"IPV6 1::256.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::1.256.3.4\"), \"IPV6 1::1.256.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::1.2.256.4\"), \"IPV6 1::1.2.256.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::1.2.3.256\"), \"IPV6 1::1.2.3.256 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::300.2.3.4\"), \"IPV6 1::300.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::1.300.3.4\"), \"IPV6 1::1.300.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::1.2.300.4\"), \"IPV6 1::1.2.300.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::1.2.3.300\"), \"IPV6 1::1.2.3.300 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::900.2.3.4\"), \"IPV6 1::900.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::1.900.3.4\"), \"IPV6 1::1.900.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::1.2.900.4\"), \"IPV6 1::1.2.900.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::1.2.3.900\"), \"IPV6 1::1.2.3.900 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::300.300.300.300\"), \"IPV6 1::300.300.300.300 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::3000.30.30.30\"), \"IPV6 1::3000.30.30.30 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::400.2.3.4\"), \"IPV6 ::400.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::260.2.3.4\"), \"IPV6 ::260.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::256.2.3.4\"), \"IPV6 ::256.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.256.3.4\"), \"IPV6 ::1.256.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.2.256.4\"), \"IPV6 ::1.2.256.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.2.3.256\"), \"IPV6 ::1.2.3.256 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::300.2.3.4\"), \"IPV6 ::300.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.300.3.4\"), \"IPV6 ::1.300.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.2.300.4\"), \"IPV6 ::1.2.300.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.2.3.300\"), \"IPV6 ::1.2.3.300 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::900.2.3.4\"), \"IPV6 ::900.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.900.3.4\"), \"IPV6 ::1.900.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.2.900.4\"), \"IPV6 ::1.2.900.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.2.3.900\"), \"IPV6 ::1.2.3.900 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::300.300.300.300\"), \"IPV6 ::300.300.300.300 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::3000.30.30.30\"), \"IPV6 ::3000.30.30.30 should be invalid\");\r\n    assertTrue(validator.isValidInet6Address(\"fe80::217:f2ff:254.7.237.98\"), \"IPV6 fe80::217:f2ff:254.7.237.98 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::ffff:192.168.1.26\"), \"IPV6 ::ffff:192.168.1.26 should be valid\");\r\n    // garbage\r\n    assertFalse(validator.isValidInet6Address(\"2001:1:1:1:1:1:255Z255X255Y255\"), \"IPV6 2001:1:1:1:1:1:255Z255X255Y255 should be invalid\");\r\n    // instead of \".\"\r\n    // in IPv4\r\n    // ditto\r\n    assertFalse(validator.isValidInet6Address(\"::ffff:192x168.1.26\"), \"IPV6 ::ffff:192x168.1.26 should be invalid\");\r\n    assertTrue(validator.isValidInet6Address(\"::ffff:192.168.1.1\"), \"IPV6 ::ffff:192.168.1.1 should be valid\");\r\n    // IPv4-compatible IPv6 address, full,\r\n    assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0:13.1.68.3\"), \"IPV6 0:0:0:0:0:0:13.1.68.3 should be valid\");\r\n    // deprecated\r\n    // IPv4-mapped IPv6\r\n    assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:FFFF:129.144.52.38\"), \"IPV6 0:0:0:0:0:FFFF:129.144.52.38 should be valid\");\r\n    // address, full\r\n    // IPv4-compatible IPv6 address, compressed, deprecated\r\n    assertTrue(validator.isValidInet6Address(\"::13.1.68.3\"), \"IPV6 ::13.1.68.3 should be valid\");\r\n    // IPv4-mapped IPv6 address, compressed\r\n    assertTrue(validator.isValidInet6Address(\"::FFFF:129.144.52.38\"), \"IPV6 ::FFFF:129.144.52.38 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"fe80:0:0:0:204:61ff:254.157.241.86\"), \"IPV6 fe80:0:0:0:204:61ff:254.157.241.86 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"fe80::204:61ff:254.157.241.86\"), \"IPV6 fe80::204:61ff:254.157.241.86 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::ffff:12.34.56.78\"), \"IPV6 ::ffff:12.34.56.78 should be valid\");\r\n    assertFalse(validator.isValidInet6Address(\"::ffff:2.3.4\"), \"IPV6 ::ffff:2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::ffff:257.1.2.3\"), \"IPV6 ::ffff:257.1.2.3 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1.2.3.4\"), \"IPV6 1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1.2.3.4:1111:2222:3333:4444::5555\"), \"IPV6 1.2.3.4:1111:2222:3333:4444::5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1.2.3.4:1111:2222:3333::5555\"), \"IPV6 1.2.3.4:1111:2222:3333::5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1.2.3.4:1111:2222::5555\"), \"IPV6 1.2.3.4:1111:2222::5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1.2.3.4:1111::5555\"), \"IPV6 1.2.3.4:1111::5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1.2.3.4::5555\"), \"IPV6 1.2.3.4::5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1.2.3.4::\"), \"IPV6 1.2.3.4:: should be invalid\");\r\n    // Testing IPv4 addresses represented as dotted-quads\r\n    // Leading zeroes in IPv4 addresses not allowed: some systems treat the leading \"0\" in \".086\" as the start of an octal number\r\n    // Update: The BNF in RFC-3986 explicitly defines the dec-octet (for IPv4 addresses) not to have a leading zero\r\n    assertFalse(validator.isValidInet6Address(\"fe80:0000:0000:0000:0204:61ff:254.157.241.086\"), \"IPV6 fe80:0000:0000:0000:0204:61ff:254.157.241.086 should be invalid\");\r\n    // but this is OK, since there's a single\r\n    assertTrue(validator.isValidInet6Address(\"::ffff:192.0.2.128\"), \"IPV6 ::ffff:192.0.2.128 should be valid\");\r\n    // digit\r\n    assertFalse(validator.isValidInet6Address(\"XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:1.2.3.4\"), \"IPV6 XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:00.00.00.00\"), \"IPV6 1111:2222:3333:4444:5555:6666:00.00.00.00 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:000.000.000.000\"), \"IPV6 1111:2222:3333:4444:5555:6666:000.000.000.000 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:256.256.256.256\"), \"IPV6 1111:2222:3333:4444:5555:6666:256.256.256.256 should be invalid\");\r\n    assertTrue(validator.isValidInet6Address(\"fe80:0000:0000:0000:0204:61ff:fe9d:f156\"), \"IPV6 fe80:0000:0000:0000:0204:61ff:fe9d:f156 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"fe80:0:0:0:204:61ff:fe9d:f156\"), \"IPV6 fe80:0:0:0:204:61ff:fe9d:f156 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"fe80::204:61ff:fe9d:f156\"), \"IPV6 fe80::204:61ff:fe9d:f156 should be valid\");\r\n    assertFalse(validator.isValidInet6Address(\":\"), \"IPV6 : should be invalid\");\r\n    assertTrue(validator.isValidInet6Address(\"::ffff:c000:280\"), \"IPV6 ::ffff:c000:280 should be valid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::5555:\"), \"IPV6 1111:2222:3333:4444::5555: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555:\"), \"IPV6 1111:2222:3333::5555: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::5555:\"), \"IPV6 1111:2222::5555: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::5555:\"), \"IPV6 1111::5555: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::5555:\"), \"IPV6 ::5555: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::\"), \"IPV6 ::: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:\"), \"IPV6 1111: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::5555\"), \"IPV6 :1111:2222:3333:4444::5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333::5555\"), \"IPV6 :1111:2222:3333::5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::5555\"), \"IPV6 :1111:2222::5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::5555\"), \"IPV6 :1111::5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::5555\"), \"IPV6 :::5555 should be invalid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"), \"IPV6 2001:0db8:85a3:0000:0000:8a2e:0370:7334 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:db8:85a3:0:0:8a2e:370:7334\"), \"IPV6 2001:db8:85a3:0:0:8a2e:370:7334 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:db8:85a3::8a2e:370:7334\"), \"IPV6 2001:db8:85a3::8a2e:370:7334 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0db8:0000:0000:0000:0000:1428:57ab\"), \"IPV6 2001:0db8:0000:0000:0000:0000:1428:57ab should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0db8:0000:0000:0000::1428:57ab\"), \"IPV6 2001:0db8:0000:0000:0000::1428:57ab should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0db8:0:0:0:0:1428:57ab\"), \"IPV6 2001:0db8:0:0:0:0:1428:57ab should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0db8:0:0::1428:57ab\"), \"IPV6 2001:0db8:0:0::1428:57ab should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0db8::1428:57ab\"), \"IPV6 2001:0db8::1428:57ab should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:db8::1428:57ab\"), \"IPV6 2001:db8::1428:57ab should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::ffff:0c22:384e\"), \"IPV6 ::ffff:0c22:384e should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0db8:1234:0000:0000:0000:0000:0000\"), \"IPV6 2001:0db8:1234:0000:0000:0000:0000:0000 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:0db8:1234:ffff:ffff:ffff:ffff:ffff\"), \"IPV6 2001:0db8:1234:ffff:ffff:ffff:ffff:ffff should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"2001:db8:a::123\"), \"IPV6 2001:db8:a::123 should be valid\");\r\n    assertFalse(validator.isValidInet6Address(\"123\"), \"IPV6 123 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"ldkfj\"), \"IPV6 ldkfj should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"2001::FFD3::57ab\"), \"IPV6 2001::FFD3::57ab should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"2001:db8:85a3::8a2e:37023:7334\"), \"IPV6 2001:db8:85a3::8a2e:37023:7334 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"2001:db8:85a3::8a2e:370k:7334\"), \"IPV6 2001:db8:85a3::8a2e:370k:7334 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1:2:3:4:5:6:7:8:9\"), \"IPV6 1:2:3:4:5:6:7:8:9 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1::2::3\"), \"IPV6 1::2::3 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1:::3:4:5\"), \"IPV6 1:::3:4:5 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1:2:3::4:5:6:7:8:9\"), \"IPV6 1:2:3::4:5:6:7:8:9 should be invalid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777::\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::\"), \"IPV6 1111:2222:3333:4444:5555:6666:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::\"), \"IPV6 1111:2222:3333:4444:5555:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::\"), \"IPV6 1111:2222:3333:4444:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333::\"), \"IPV6 1111:2222:3333:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::\"), \"IPV6 1111:2222:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::\"), \"IPV6 1111:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::8888\"), \"IPV6 1111:2222:3333:4444:5555:6666::8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::8888\"), \"IPV6 1111:2222:3333:4444:5555::8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::8888\"), \"IPV6 1111:2222:3333:4444::8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333::8888\"), \"IPV6 1111:2222:3333::8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::8888\"), \"IPV6 1111:2222::8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::8888\"), \"IPV6 1111::8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::8888\"), \"IPV6 ::8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::7777:8888\"), \"IPV6 1111:2222:3333:4444:5555::7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::7777:8888\"), \"IPV6 1111:2222:3333:4444::7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333::7777:8888\"), \"IPV6 1111:2222:3333::7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::7777:8888\"), \"IPV6 1111:2222::7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::7777:8888\"), \"IPV6 1111::7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::7777:8888\"), \"IPV6 ::7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::6666:7777:8888\"), \"IPV6 1111:2222:3333:4444::6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333::6666:7777:8888\"), \"IPV6 1111:2222:3333::6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::6666:7777:8888\"), \"IPV6 1111:2222::6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::6666:7777:8888\"), \"IPV6 1111::6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::6666:7777:8888\"), \"IPV6 ::6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333::5555:6666:7777:8888\"), \"IPV6 1111:2222:3333::5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::5555:6666:7777:8888\"), \"IPV6 1111:2222::5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::5555:6666:7777:8888\"), \"IPV6 1111::5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::5555:6666:7777:8888\"), \"IPV6 ::5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::4444:5555:6666:7777:8888\"), \"IPV6 1111:2222::4444:5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::4444:5555:6666:7777:8888\"), \"IPV6 1111::4444:5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::4444:5555:6666:7777:8888\"), \"IPV6 ::4444:5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::3333:4444:5555:6666:7777:8888\"), \"IPV6 1111::3333:4444:5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::3333:4444:5555:6666:7777:8888\"), \"IPV6 ::3333:4444:5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 ::2222:3333:4444:5555:6666:7777:8888 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:123.123.123.123\"), \"IPV6 1111:2222:3333:4444:5555:6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::123.123.123.123\"), \"IPV6 1111:2222:3333:4444:5555::123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::123.123.123.123\"), \"IPV6 1111:2222:3333:4444::123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333::123.123.123.123\"), \"IPV6 1111:2222:3333::123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::123.123.123.123\"), \"IPV6 1111:2222::123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::123.123.123.123\"), \"IPV6 1111::123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::123.123.123.123\"), \"IPV6 ::123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::6666:123.123.123.123\"), \"IPV6 1111:2222:3333:4444::6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333::6666:123.123.123.123\"), \"IPV6 1111:2222:3333::6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::6666:123.123.123.123\"), \"IPV6 1111:2222::6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::6666:123.123.123.123\"), \"IPV6 1111::6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::6666:123.123.123.123\"), \"IPV6 ::6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222:3333::5555:6666:123.123.123.123\"), \"IPV6 1111:2222:3333::5555:6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::5555:6666:123.123.123.123\"), \"IPV6 1111:2222::5555:6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::5555:6666:123.123.123.123\"), \"IPV6 1111::5555:6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::5555:6666:123.123.123.123\"), \"IPV6 ::5555:6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111:2222::4444:5555:6666:123.123.123.123\"), \"IPV6 1111:2222::4444:5555:6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::4444:5555:6666:123.123.123.123\"), \"IPV6 1111::4444:5555:6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::4444:5555:6666:123.123.123.123\"), \"IPV6 ::4444:5555:6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"1111::3333:4444:5555:6666:123.123.123.123\"), \"IPV6 1111::3333:4444:5555:6666:123.123.123.123 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:123.123.123.123\"), \"IPV6 ::2222:3333:4444:5555:6666:123.123.123.123 should be valid\");\r\n    // Trying combinations of \"0\" and \"::\"\r\n    // These are all syntactically correct, but are bad form\r\n    // because \"0\" adjacent to \"::\" should be combined into \"::\"\r\n    assertTrue(validator.isValidInet6Address(\"::0:0:0:0:0:0:0\"), \"IPV6 ::0:0:0:0:0:0:0 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::0:0:0:0:0:0\"), \"IPV6 ::0:0:0:0:0:0 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::0:0:0:0:0\"), \"IPV6 ::0:0:0:0:0 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::0:0:0:0\"), \"IPV6 ::0:0:0:0 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::0:0:0\"), \"IPV6 ::0:0:0 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::0:0\"), \"IPV6 ::0:0 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"::0\"), \"IPV6 ::0 should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0:0::\"), \"IPV6 0:0:0:0:0:0:0:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0::\"), \"IPV6 0:0:0:0:0:0:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"0:0:0:0:0::\"), \"IPV6 0:0:0:0:0:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"0:0:0:0::\"), \"IPV6 0:0:0:0:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"0:0:0::\"), \"IPV6 0:0:0:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"0:0::\"), \"IPV6 0:0:: should be valid\");\r\n    assertTrue(validator.isValidInet6Address(\"0::\"), \"IPV6 0:: should be valid\");\r\n    // Invalid data\r\n    assertFalse(validator.isValidInet6Address(\"XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX\"), \"IPV6 XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX should be invalid\");\r\n    // Too many components\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888:9999\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888:9999 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888::\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:8888:9999\"), \"IPV6 ::2222:3333:4444:5555:6666:7777:8888:9999 should be invalid\");\r\n    // Too few components\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666\"), \"IPV6 1111:2222:3333:4444:5555:6666 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555\"), \"IPV6 1111:2222:3333:4444:5555 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444\"), \"IPV6 1111:2222:3333:4444 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333\"), \"IPV6 1111:2222:3333 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222\"), \"IPV6 1111:2222 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111\"), \"IPV6 1111 should be invalid\");\r\n    // Missing :\r\n    assertFalse(validator.isValidInet6Address(\"11112222:3333:4444:5555:6666:7777:8888\"), \"IPV6 11112222:3333:4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:22223333:4444:5555:6666:7777:8888\"), \"IPV6 1111:22223333:4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:33334444:5555:6666:7777:8888\"), \"IPV6 1111:2222:33334444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:44445555:6666:7777:8888\"), \"IPV6 1111:2222:3333:44445555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:55556666:7777:8888\"), \"IPV6 1111:2222:3333:4444:55556666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:66667777:8888\"), \"IPV6 1111:2222:3333:4444:5555:66667777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:77778888\"), \"IPV6 1111:2222:3333:4444:5555:6666:77778888 should be invalid\");\r\n    // Missing : intended for ::\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888:\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:\"), \"IPV6 1111:2222:3333:4444:5555:6666: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:\"), \"IPV6 1111:2222:3333:4444:5555: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:\"), \"IPV6 1111:2222:3333:4444: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:\"), \"IPV6 1111:2222:3333: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:\"), \"IPV6 1111:2222: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":8888\"), \"IPV6 :8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":7777:8888\"), \"IPV6 :7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":6666:7777:8888\"), \"IPV6 :6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":5555:6666:7777:8888\"), \"IPV6 :5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":4444:5555:6666:7777:8888\"), \"IPV6 :4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":3333:4444:5555:6666:7777:8888\"), \"IPV6 :3333:4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 :2222:3333:4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 :1111:2222:3333:4444:5555:6666:7777:8888 should be invalid\");\r\n    // :::\r\n    assertFalse(validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 :::2222:3333:4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:::3333:4444:5555:6666:7777:8888\"), \"IPV6 1111:::3333:4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:::4444:5555:6666:7777:8888\"), \"IPV6 1111:2222:::4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:::5555:6666:7777:8888\"), \"IPV6 1111:2222:3333:::5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:::6666:7777:8888\"), \"IPV6 1111:2222:3333:4444:::6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:::7777:8888\"), \"IPV6 1111:2222:3333:4444:5555:::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:::8888\"), \"IPV6 1111:2222:3333:4444:5555:6666:::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:::\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777::: should be invalid\");\r\n    // Double ::\r\n    assertFalse(validator.isValidInet6Address(\"::2222::4444:5555:6666:7777:8888\"), \"IPV6 ::2222::4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333::5555:6666:7777:8888\"), \"IPV6 ::2222:3333::5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333:4444::6666:7777:8888\"), \"IPV6 ::2222:3333:4444::6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555::7777:8888\"), \"IPV6 ::2222:3333:4444:5555::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:7777::8888\"), \"IPV6 ::2222:3333:4444:5555:7777::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:7777:8888::\"), \"IPV6 ::2222:3333:4444:5555:7777:8888:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::3333::5555:6666:7777:8888\"), \"IPV6 1111::3333::5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::3333:4444::6666:7777:8888\"), \"IPV6 1111::3333:4444::6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555::7777:8888\"), \"IPV6 1111::3333:4444:5555::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555:6666::8888\"), \"IPV6 1111::3333:4444:5555:6666::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555:6666:7777::\"), \"IPV6 1111::3333:4444:5555:6666:7777:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::4444::6666:7777:8888\"), \"IPV6 1111:2222::4444::6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555::7777:8888\"), \"IPV6 1111:2222::4444:5555::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555:6666::8888\"), \"IPV6 1111:2222::4444:5555:6666::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555:6666:7777::\"), \"IPV6 1111:2222::4444:5555:6666:7777:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555::7777:8888\"), \"IPV6 1111:2222:3333::5555::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555:6666::8888\"), \"IPV6 1111:2222:3333::5555:6666::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555:6666:7777::\"), \"IPV6 1111:2222:3333::5555:6666:7777:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::6666::8888\"), \"IPV6 1111:2222:3333:4444::6666::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::6666:7777::\"), \"IPV6 1111:2222:3333:4444::6666:7777:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::7777::\"), \"IPV6 1111:2222:3333:4444:5555::7777:: should be invalid\");\r\n    // Too many components\"\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::1.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:6666::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:1.2.3.4\"), \"IPV6 ::2222:3333:4444:5555:6666:7777:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:1.2.3.4.5\"), \"IPV6 1111:2222:3333:4444:5555:6666:1.2.3.4.5 should be invalid\");\r\n    // Too few components\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:1.2.3.4\"), \"IPV6 1111:2222:3333:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:1.2.3.4\"), \"IPV6 1111:2222:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:1.2.3.4\"), \"IPV6 1111:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1.2.3.4\"), \"IPV6 1.2.3.4 should be invalid\");\r\n    // Missing :\r\n    assertFalse(validator.isValidInet6Address(\"11112222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 11112222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:22223333:4444:5555:6666:1.2.3.4\"), \"IPV6 1111:22223333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:33334444:5555:6666:1.2.3.4\"), \"IPV6 1111:2222:33334444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:44445555:6666:1.2.3.4\"), \"IPV6 1111:2222:3333:44445555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:55556666:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:55556666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:66661.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:66661.2.3.4 should be invalid\");\r\n    // Missing .\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:255255.255.255\"), \"IPV6 1111:2222:3333:4444:5555:6666:255255.255.255 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:255.255255.255\"), \"IPV6 1111:2222:3333:4444:5555:6666:255.255255.255 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:255.255.255255\"), \"IPV6 1111:2222:3333:4444:5555:6666:255.255.255255 should be invalid\");\r\n    // Missing : intended for ::\r\n    assertFalse(validator.isValidInet6Address(\":1.2.3.4\"), \"IPV6 :1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":6666:1.2.3.4\"), \"IPV6 :6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":5555:6666:1.2.3.4\"), \"IPV6 :5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":4444:5555:6666:1.2.3.4\"), \"IPV6 :4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :3333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :1111:2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    // :::\r\n    assertFalse(validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :::2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:::3333:4444:5555:6666:1.2.3.4\"), \"IPV6 1111:::3333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:::4444:5555:6666:1.2.3.4\"), \"IPV6 1111:2222:::4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:::5555:6666:1.2.3.4\"), \"IPV6 1111:2222:3333:::5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:::6666:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:::6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:::1.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:::1.2.3.4 should be invalid\");\r\n    // Double ::\r\n    assertFalse(validator.isValidInet6Address(\"::2222::4444:5555:6666:1.2.3.4\"), \"IPV6 ::2222::4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333::5555:6666:1.2.3.4\"), \"IPV6 ::2222:3333::5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333:4444::6666:1.2.3.4\"), \"IPV6 ::2222:3333:4444::6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555::1.2.3.4\"), \"IPV6 ::2222:3333:4444:5555::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::3333::5555:6666:1.2.3.4\"), \"IPV6 1111::3333::5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::3333:4444::6666:1.2.3.4\"), \"IPV6 1111::3333:4444::6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555::1.2.3.4\"), \"IPV6 1111::3333:4444:5555::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::4444::6666:1.2.3.4\"), \"IPV6 1111:2222::4444::6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555::1.2.3.4\"), \"IPV6 1111:2222::4444:5555::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555::1.2.3.4\"), \"IPV6 1111:2222:3333::5555::1.2.3.4 should be invalid\");\r\n    // Missing parts\r\n    assertFalse(validator.isValidInet6Address(\"::.\"), \"IPV6 ::. should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::..\"), \"IPV6 ::.. should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::...\"), \"IPV6 ::... should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1...\"), \"IPV6 ::1... should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.2..\"), \"IPV6 ::1.2.. should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::1.2.3.\"), \"IPV6 ::1.2.3. should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::.2..\"), \"IPV6 ::.2.. should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::.2.3.\"), \"IPV6 ::.2.3. should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::.2.3.4\"), \"IPV6 ::.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::..3.\"), \"IPV6 ::..3. should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::..3.4\"), \"IPV6 ::..3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::...4\"), \"IPV6 ::...4 should be invalid\");\r\n    // Extra : in front\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:7777::\"), \"IPV6 :1111:2222:3333:4444:5555:6666:7777:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666::\"), \"IPV6 :1111:2222:3333:4444:5555:6666:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555::\"), \"IPV6 :1111:2222:3333:4444:5555:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::\"), \"IPV6 :1111:2222:3333:4444:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333::\"), \"IPV6 :1111:2222:3333:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::\"), \"IPV6 :1111:2222:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::\"), \"IPV6 :1111:: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666::8888\"), \"IPV6 :1111:2222:3333:4444:5555:6666::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555::8888\"), \"IPV6 :1111:2222:3333:4444:5555::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::8888\"), \"IPV6 :1111:2222:3333:4444::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333::8888\"), \"IPV6 :1111:2222:3333::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::8888\"), \"IPV6 :1111:2222::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::8888\"), \"IPV6 :1111::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::8888\"), \"IPV6 :::8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555::7777:8888\"), \"IPV6 :1111:2222:3333:4444:5555::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::7777:8888\"), \"IPV6 :1111:2222:3333:4444::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333::7777:8888\"), \"IPV6 :1111:2222:3333::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::7777:8888\"), \"IPV6 :1111:2222::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::7777:8888\"), \"IPV6 :1111::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::7777:8888\"), \"IPV6 :::7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::6666:7777:8888\"), \"IPV6 :1111:2222:3333:4444::6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333::6666:7777:8888\"), \"IPV6 :1111:2222:3333::6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::6666:7777:8888\"), \"IPV6 :1111:2222::6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::6666:7777:8888\"), \"IPV6 :1111::6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::6666:7777:8888\"), \"IPV6 :::6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333::5555:6666:7777:8888\"), \"IPV6 :1111:2222:3333::5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::5555:6666:7777:8888\"), \"IPV6 :1111:2222::5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::5555:6666:7777:8888\"), \"IPV6 :1111::5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::5555:6666:7777:8888\"), \"IPV6 :::5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::4444:5555:6666:7777:8888\"), \"IPV6 :1111:2222::4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::4444:5555:6666:7777:8888\"), \"IPV6 :1111::4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::4444:5555:6666:7777:8888\"), \"IPV6 :::4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::3333:4444:5555:6666:7777:8888\"), \"IPV6 :1111::3333:4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::3333:4444:5555:6666:7777:8888\"), \"IPV6 :::3333:4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 :::2222:3333:4444:5555:6666:7777:8888 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :1111:2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555::1.2.3.4\"), \"IPV6 :1111:2222:3333:4444:5555::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::1.2.3.4\"), \"IPV6 :1111:2222:3333:4444::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333::1.2.3.4\"), \"IPV6 :1111:2222:3333::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::1.2.3.4\"), \"IPV6 :1111:2222::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::1.2.3.4\"), \"IPV6 :1111::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::1.2.3.4\"), \"IPV6 :::1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::6666:1.2.3.4\"), \"IPV6 :1111:2222:3333:4444::6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333::6666:1.2.3.4\"), \"IPV6 :1111:2222:3333::6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::6666:1.2.3.4\"), \"IPV6 :1111:2222::6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::6666:1.2.3.4\"), \"IPV6 :1111::6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::6666:1.2.3.4\"), \"IPV6 :::6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222:3333::5555:6666:1.2.3.4\"), \"IPV6 :1111:2222:3333::5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::5555:6666:1.2.3.4\"), \"IPV6 :1111:2222::5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::5555:6666:1.2.3.4\"), \"IPV6 :1111::5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::5555:6666:1.2.3.4\"), \"IPV6 :::5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111:2222::4444:5555:6666:1.2.3.4\"), \"IPV6 :1111:2222::4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::4444:5555:6666:1.2.3.4\"), \"IPV6 :1111::4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::4444:5555:6666:1.2.3.4\"), \"IPV6 :::4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":1111::3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :1111::3333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :::2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\r\n    // Extra : at end\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:::\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777::: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:::\"), \"IPV6 1111:2222:3333:4444:5555:6666::: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:::\"), \"IPV6 1111:2222:3333:4444:5555::: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:::\"), \"IPV6 1111:2222:3333:4444::: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:::\"), \"IPV6 1111:2222:3333::: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:::\"), \"IPV6 1111:2222::: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:::\"), \"IPV6 1111::: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::8888:\"), \"IPV6 1111:2222:3333:4444:5555:6666::8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::8888:\"), \"IPV6 1111:2222:3333:4444:5555::8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::8888:\"), \"IPV6 1111:2222:3333:4444::8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333::8888:\"), \"IPV6 1111:2222:3333::8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::8888:\"), \"IPV6 1111:2222::8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::8888:\"), \"IPV6 1111::8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::8888:\"), \"IPV6 ::8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::7777:8888:\"), \"IPV6 1111:2222:3333:4444:5555::7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::7777:8888:\"), \"IPV6 1111:2222:3333:4444::7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333::7777:8888:\"), \"IPV6 1111:2222:3333::7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::7777:8888:\"), \"IPV6 1111:2222::7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::7777:8888:\"), \"IPV6 1111::7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::7777:8888:\"), \"IPV6 ::7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::6666:7777:8888:\"), \"IPV6 1111:2222:3333:4444::6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333::6666:7777:8888:\"), \"IPV6 1111:2222:3333::6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::6666:7777:8888:\"), \"IPV6 1111:2222::6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::6666:7777:8888:\"), \"IPV6 1111::6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::6666:7777:8888:\"), \"IPV6 ::6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555:6666:7777:8888:\"), \"IPV6 1111:2222:3333::5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::5555:6666:7777:8888:\"), \"IPV6 1111:2222::5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::5555:6666:7777:8888:\"), \"IPV6 1111::5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::5555:6666:7777:8888:\"), \"IPV6 ::5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555:6666:7777:8888:\"), \"IPV6 1111:2222::4444:5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::4444:5555:6666:7777:8888:\"), \"IPV6 1111::4444:5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::4444:5555:6666:7777:8888:\"), \"IPV6 ::4444:5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555:6666:7777:8888:\"), \"IPV6 1111::3333:4444:5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::3333:4444:5555:6666:7777:8888:\"), \"IPV6 ::3333:4444:5555:6666:7777:8888: should be invalid\");\r\n    assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:8888:\"), \"IPV6 ::2222:3333:4444:5555:6666:7777:8888: should be invalid\");\r\n    assertTrue(validator.isValidInet6Address(\"0:a:b:c:d:e:f::\"), \"IPV6 0:a:b:c:d:e:f:: should be valid\");\r\n    // syntactically correct, but bad form (::0:...\r\n    assertTrue(validator.isValidInet6Address(\"::0:a:b:c:d:e:f\"), \"IPV6 ::0:a:b:c:d:e:f should be valid\");\r\n    // could be combined)\r\n    assertTrue(validator.isValidInet6Address(\"a:b:c:d:e:f:0::\"), \"IPV6 a:b:c:d:e:f:0:: should be valid\");\r\n    assertFalse(validator.isValidInet6Address(\"':10.0.0.1\"), \"IPV6 ':10.0.0.1 should be invalid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\InetAddressValidatorTest.java",
  "methodName" : "testReservedInetAddresses",
  "sourceCode" : "/**\r\n * Test reserved IPs.\r\n */\r\n@Test\r\nvoid testReservedInetAddresses() {\r\n    assertTrue(validator.isValid(\"127.0.0.1\"), \"localhost IP should be valid\");\r\n    assertTrue(validator.isValid(\"255.255.255.255\"), \"broadcast IP should be valid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\InetAddressValidatorTest.java",
  "methodName" : "testValidator335",
  "sourceCode" : "@Test\r\nvoid testValidator335() {\r\n    assertTrue(validator.isValid(\"2001:0438:FFFE:0000:0000:0000:0000:0A35\"), \"2001:0438:FFFE:0000:0000:0000:0000:0A35 should be valid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\InetAddressValidatorTest.java",
  "methodName" : "testValidator419",
  "sourceCode" : "@Test\r\nvoid testValidator419() {\r\n    String addr;\r\n    addr = \"0:0:0:0:0:0:13.1.68.3\";\r\n    assertTrue(validator.isValid(addr));\r\n    addr = \"0:0:0:0:0:FFFF:129.144.52.38\";\r\n    assertTrue(validator.isValid(addr), addr);\r\n    addr = \"::13.1.68.3\";\r\n    assertTrue(validator.isValid(addr), addr);\r\n    addr = \"::FFFF:129.144.52.38\";\r\n    assertTrue(validator.isValid(addr), addr);\r\n    addr = \"::ffff:192.168.1.1:192.168.1.1\";\r\n    assertFalse(validator.isValid(addr), addr);\r\n    addr = \"::192.168.1.1:192.168.1.1\";\r\n    assertFalse(validator.isValid(addr), addr);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\InetAddressValidatorTest.java",
  "methodName" : "testValidator445",
  "sourceCode" : "/**\r\n * Inet6Address may also contain a scope id.\r\n */\r\n@Test\r\nvoid testValidator445() {\r\n    final String[] valid = { \"2001:0000:1234:0000:0000:C1C0:ABCD:0876\", \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/123\", \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0\", \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%0\", \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abcdefgh\" };\r\n    final String[] invalid = { // too big\r\n    \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/129\", // sign not allowed\r\n    \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/-0\", // sign not allowed\r\n    \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/+0\", // non-digit\r\n    \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/10O\", // /bits before %node-id\r\n    \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0%0\", // space in node id\r\n    \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc defgh\", // '%' in node id\r\n    \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc%defgh\" };\r\n    for (final String item : valid) {\r\n        assertTrue(validator.isValid(item), item + \" should be valid\");\r\n    }\r\n    for (final String item : invalid) {\r\n        assertFalse(validator.isValid(item), item + \" should be invalid\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IntegerValidatorTest.java",
  "methodName" : "testIntegerRangeMinMax",
  "sourceCode" : "/**\r\n * Test Integer Range/Min/Max\r\n */\r\n@Test\r\nvoid testIntegerRangeMinMax() {\r\n    final IntegerValidator validator = (IntegerValidator) strictValidator;\r\n    final Integer number9 = validator.validate(\"9\", \"#\");\r\n    final Integer number10 = validator.validate(\"10\", \"#\");\r\n    final Integer number11 = validator.validate(\"11\", \"#\");\r\n    final Integer number19 = validator.validate(\"19\", \"#\");\r\n    final Integer number20 = validator.validate(\"20\", \"#\");\r\n    final Integer number21 = validator.validate(\"21\", \"#\");\r\n    // Test isInRange()\r\n    assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\r\n    assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\r\n    assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\r\n    assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\r\n    assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\r\n    // Test minValue()\r\n    assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\r\n    assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\r\n    assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\r\n    // Test minValue()\r\n    assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\r\n    assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\r\n    assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IntegerValidatorTest.java",
  "methodName" : "testIntegerValidatorMethods",
  "sourceCode" : "/**\r\n * Test IntegerValidator validate Methods\r\n */\r\n@Test\r\nvoid testIntegerValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"0,00,00\";\r\n    final String patternVal = \"1,23,45\";\r\n    final String germanPatternVal = \"1.23.45\";\r\n    final String localeVal = \"12.345\";\r\n    final String defaultVal = \"12,345\";\r\n    final String xxxx = \"XXXX\";\r\n    final Integer expected = Integer.valueOf(12345);\r\n    assertEquals(expected, IntegerValidator.getInstance().validate(defaultVal), \"validate(A) default\");\r\n    assertEquals(expected, IntegerValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\r\n    assertEquals(expected, IntegerValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\r\n    assertEquals(expected, IntegerValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\r\n    assertTrue(IntegerValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(IntegerValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\r\n    assertTrue(IntegerValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(IntegerValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(IntegerValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(IntegerValidator.getInstance().validate(xxxx, locale), \"validate(B) locale\");\r\n    assertNull(IntegerValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(IntegerValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(IntegerValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(IntegerValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\r\n    assertFalse(IntegerValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(IntegerValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\IntegerValidatorTest.java",
  "methodName" : "testMinMaxValues",
  "sourceCode" : "@Test\r\nvoid testMinMaxValues() {\r\n    assertTrue(validator.isValid(\"2147483647\"), \"2147483647 is max integer\");\r\n    assertFalse(validator.isValid(\"2147483648\"), \"2147483648 > max integer\");\r\n    assertTrue(validator.isValid(\"-2147483648\"), \"-2147483648 is min integer\");\r\n    assertFalse(validator.isValid(\"-2147483649\"), \"-2147483649 < min integer\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testConversionErrors",
  "sourceCode" : "/**\r\n * Test method for {@link org.apache.commons.validator.routines.ISBNValidator#convertToISBN13(java.lang.String)}.\r\n */\r\n@Test\r\nvoid testConversionErrors() {\r\n    final ISBNValidator validator = ISBNValidator.getInstance();\r\n    final String input1 = \"123456789 \";\r\n    assertThrows(IllegalArgumentException.class, () -> validator.convertToISBN13(input1), \"Expected IllegalArgumentException for '\" + input1 + \"'\");\r\n    final String input2 = \"12345678901\";\r\n    assertThrows(IllegalArgumentException.class, () -> validator.convertToISBN13(input2), \"Expected IllegalArgumentException for '\" + input2 + \"'\");\r\n    final String input3 = \"\";\r\n    assertThrows(IllegalArgumentException.class, () -> validator.convertToISBN13(input3), \"Expected IllegalArgumentException for '\" + input3 + \"'\");\r\n    final String input4 = \"X234567890\";\r\n    assertThrows(IllegalArgumentException.class, () -> validator.convertToISBN13(input4), \"Expected IllegalArgumentException for '\" + input4 + \"'\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testInvalid",
  "sourceCode" : "/**\r\n * Test Invalid ISBN-10 codes\r\n */\r\n@Test\r\nvoid testInvalid() {\r\n    final ISBNValidator validator = ISBNValidator.getInstance();\r\n    String baseCode = \"193011099\";\r\n    assertFalse(validator.isValid(baseCode + \"0\"), \"ISBN10-0\");\r\n    assertFalse(validator.isValid(baseCode + \"1\"), \"ISBN10-1\");\r\n    assertFalse(validator.isValid(baseCode + \"2\"), \"ISBN10-2\");\r\n    assertFalse(validator.isValid(baseCode + \"3\"), \"ISBN10-3\");\r\n    assertFalse(validator.isValid(baseCode + \"4\"), \"ISBN10-4\");\r\n    // valid check digit\r\n    assertTrue(validator.isValid(baseCode + \"5\"), \"ISBN10-5\");\r\n    assertFalse(validator.isValid(baseCode + \"6\"), \"ISBN10-6\");\r\n    assertFalse(validator.isValid(baseCode + \"7\"), \"ISBN10-7\");\r\n    assertFalse(validator.isValid(baseCode + \"8\"), \"ISBN10-8\");\r\n    assertFalse(validator.isValid(baseCode + \"9\"), \"ISBN10-9\");\r\n    assertFalse(validator.isValid(baseCode + \"X\"), \"ISBN10-X\");\r\n    baseCode = \"978193011099\";\r\n    assertFalse(validator.isValid(baseCode + \"0\"), \"ISBN13-0\");\r\n    // valid check digit\r\n    assertTrue(validator.isValid(baseCode + \"1\"), \"ISBN13-1\");\r\n    assertFalse(validator.isValid(baseCode + \"2\"), \"ISBN13-2\");\r\n    assertFalse(validator.isValid(baseCode + \"3\"), \"ISBN13-3\");\r\n    assertFalse(validator.isValid(baseCode + \"4\"), \"ISBN13-4\");\r\n    assertFalse(validator.isValid(baseCode + \"5\"), \"ISBN13-5\");\r\n    assertFalse(validator.isValid(baseCode + \"6\"), \"ISBN13-6\");\r\n    assertFalse(validator.isValid(baseCode + \"7\"), \"ISBN13-7\");\r\n    assertFalse(validator.isValid(baseCode + \"8\"), \"ISBN13-8\");\r\n    assertFalse(validator.isValid(baseCode + \"9\"), \"ISBN13-9\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testInvalidISBN10Format",
  "sourceCode" : "/**\r\n * Test Invalid ISBN-10 formats.\r\n */\r\n@Test\r\nvoid testInvalidISBN10Format() {\r\n    final ISBNValidator validator = ISBNValidator.getInstance();\r\n    final Pattern pattern = Pattern.compile(ISBNValidator.ISBN10_REGEX);\r\n    for (int i = 0; i < invalidISBN10Format.length; i++) {\r\n        assertFalse(pattern.matcher(invalidISBN10Format[i]).matches(), \"Pattern[\" + i + \"]=\" + invalidISBN10Format[i]);\r\n        assertFalse(validator.isValidISBN10(invalidISBN10Format[i]), \"isValidISBN10[\" + i + \"]=\" + invalidISBN10Format[i]);\r\n        assertNull(validator.validateISBN10(invalidISBN10Format[i]), \"validateISBN10[\" + i + \"]=\" + invalidISBN10Format[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testInvalidISBN13Format",
  "sourceCode" : "/**\r\n * Test Invalid ISBN-13 formats.\r\n */\r\n@Test\r\nvoid testInvalidISBN13Format() {\r\n    final Pattern pattern = Pattern.compile(ISBNValidator.ISBN13_REGEX);\r\n    final ISBNValidator validator = ISBNValidator.getInstance();\r\n    for (int i = 0; i < invalidISBN13Format.length; i++) {\r\n        assertFalse(pattern.matcher(invalidISBN13Format[i]).matches(), \"Pattern[\" + i + \"]=\" + invalidISBN13Format[i]);\r\n        assertFalse(validator.isValidISBN13(invalidISBN13Format[i]), \"isValidISBN13[\" + i + \"]=\" + invalidISBN13Format[i]);\r\n        assertNull(validator.validateISBN13(invalidISBN13Format[i]), \"validateISBN13[\" + i + \"]=\" + invalidISBN13Format[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testIsValidISBN10",
  "sourceCode" : "/**\r\n * Test isValid() ISBN-10 codes\r\n */\r\n@Test\r\nvoid testIsValidISBN10() {\r\n    final ISBNValidator validator = ISBNValidator.getInstance();\r\n    assertTrue(validator.isValidISBN10(\"1930110995\"), \"isValidISBN10-1\");\r\n    assertTrue(validator.isValidISBN10(\"1-930110-99-5\"), \"isValidISBN10-2\");\r\n    assertTrue(validator.isValidISBN10(\"1 930110 99 5\"), \"isValidISBN10-3\");\r\n    assertTrue(validator.isValidISBN10(\"020163385X\"), \"isValidISBN10-4\");\r\n    assertTrue(validator.isValidISBN10(\"0-201-63385-X\"), \"isValidISBN10-5\");\r\n    assertTrue(validator.isValidISBN10(\"0 201 63385 X\"), \"isValidISBN10-6\");\r\n    assertTrue(validator.isValid(\"1930110995\"), \"isValid-1\");\r\n    assertTrue(validator.isValid(\"1-930110-99-5\"), \"isValid-2\");\r\n    assertTrue(validator.isValid(\"1 930110 99 5\"), \"isValid-3\");\r\n    assertTrue(validator.isValid(\"020163385X\"), \"isValid-4\");\r\n    assertTrue(validator.isValid(\"0-201-63385-X\"), \"isValid-5\");\r\n    assertTrue(validator.isValid(\"0 201 63385 X\"), \"isValid-6\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testIsValidISBN13",
  "sourceCode" : "/**\r\n * Test isValid() ISBN-13 codes\r\n */\r\n@Test\r\nvoid testIsValidISBN13() {\r\n    final ISBNValidator validator = ISBNValidator.getInstance();\r\n    assertTrue(validator.isValidISBN13(\"9781930110991\"), \"isValidISBN13-1\");\r\n    assertTrue(validator.isValidISBN13(\"978-1-930110-99-1\"), \"isValidISBN13-2\");\r\n    assertTrue(validator.isValidISBN13(\"978 1 930110 99 1\"), \"isValidISBN13-3\");\r\n    assertTrue(validator.isValidISBN13(\"9780201633856\"), \"isValidISBN13-4\");\r\n    assertTrue(validator.isValidISBN13(\"978-0-201-63385-6\"), \"isValidISBN13-5\");\r\n    assertTrue(validator.isValidISBN13(\"978 0 201 63385 6\"), \"isValidISBN13-6\");\r\n    assertTrue(validator.isValid(\"9781930110991\"), \"isValid-1\");\r\n    assertTrue(validator.isValid(\"978-1-930110-99-1\"), \"isValid-2\");\r\n    assertTrue(validator.isValid(\"978 1 930110 99 1\"), \"isValid-3\");\r\n    assertTrue(validator.isValid(\"9780201633856\"), \"isValid-4\");\r\n    assertTrue(validator.isValid(\"978-0-201-63385-6\"), \"isValid-5\");\r\n    assertTrue(validator.isValid(\"978 0 201 63385 6\"), \"isValid-6\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testNull",
  "sourceCode" : "/**\r\n * Test null values\r\n */\r\n@Test\r\nvoid testNull() {\r\n    final ISBNValidator validator = ISBNValidator.getInstance();\r\n    assertFalse(validator.isValid(null), \"isValid\");\r\n    assertFalse(validator.isValidISBN10(null), \"isValidISBN10\");\r\n    assertFalse(validator.isValidISBN13(null), \"isValidISBN13\");\r\n    assertNull(validator.validate(null), \"validate\");\r\n    assertNull(validator.validateISBN10(null), \"validateISBN10\");\r\n    assertNull(validator.validateISBN13(null), \"validateISBN13\");\r\n    assertNull(validator.convertToISBN13(null), \"convertToISBN13\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testValidateISBN10",
  "sourceCode" : "/**\r\n * Test validate() ISBN-10 codes (don't convert)\r\n */\r\n@Test\r\nvoid testValidateISBN10() {\r\n    final ISBNValidator validator = ISBNValidator.getInstance(false);\r\n    assertEquals(validator.validateISBN10(\"1930110995\"), \"1930110995\", \"validateISBN10-1\");\r\n    assertEquals(validator.validateISBN10(\"1-930110-99-5\"), \"1930110995\", \"validateISBN10-2\");\r\n    assertEquals(validator.validateISBN10(\"1 930110 99 5\"), \"1930110995\", \"validateISBN10-3\");\r\n    assertEquals(validator.validateISBN10(\"020163385X\"), \"020163385X\", \"validateISBN10-4\");\r\n    assertEquals(validator.validateISBN10(\"0-201-63385-X\"), \"020163385X\", \"validateISBN10-5\");\r\n    assertEquals(validator.validateISBN10(\"0 201 63385 X\"), \"020163385X\", \"validateISBN10-6\");\r\n    assertEquals(validator.validate(\"1930110995\"), \"1930110995\", \"validate-1\");\r\n    assertEquals(validator.validate(\"1-930110-99-5\"), \"1930110995\", \"validate-2\");\r\n    assertEquals(validator.validate(\"1 930110 99 5\"), \"1930110995\", \"validate-3\");\r\n    assertEquals(validator.validate(\"020163385X\"), \"020163385X\", \"validate-4\");\r\n    assertEquals(validator.validate(\"0-201-63385-X\"), \"020163385X\", \"validate-5\");\r\n    assertEquals(validator.validate(\"0 201 63385 X\"), \"020163385X\", \"validate-6\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testValidateISBN10Convert",
  "sourceCode" : "/**\r\n * Test validate() ISBN-10 codes (convert)\r\n */\r\n@Test\r\nvoid testValidateISBN10Convert() {\r\n    final ISBNValidator validator = ISBNValidator.getInstance();\r\n    assertEquals(validator.validate(\"1930110995\"), \"9781930110991\", \"validate-1\");\r\n    assertEquals(validator.validate(\"1-930110-99-5\"), \"9781930110991\", \"validate-2\");\r\n    assertEquals(validator.validate(\"1 930110 99 5\"), \"9781930110991\", \"validate-3\");\r\n    assertEquals(validator.validate(\"020163385X\"), \"9780201633856\", \"validate-4\");\r\n    assertEquals(validator.validate(\"0-201-63385-X\"), \"9780201633856\", \"validate-5\");\r\n    assertEquals(validator.validate(\"0 201 63385 X\"), \"9780201633856\", \"validate-6\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testValidateISBN13",
  "sourceCode" : "/**\r\n * Test validate() ISBN-13 codes\r\n */\r\n@Test\r\nvoid testValidateISBN13() {\r\n    final ISBNValidator validator = ISBNValidator.getInstance();\r\n    assertEquals(validator.validateISBN13(\"9781930110991\"), \"9781930110991\", \"validateISBN13-1\");\r\n    assertEquals(validator.validateISBN13(\"978-1-930110-99-1\"), \"9781930110991\", \"validateISBN13-2\");\r\n    assertEquals(validator.validateISBN13(\"978 1 930110 99 1\"), \"9781930110991\", \"validateISBN13-3\");\r\n    assertEquals(validator.validateISBN13(\"9780201633856\"), \"9780201633856\", \"validateISBN13-4\");\r\n    assertEquals(validator.validateISBN13(\"978-0-201-63385-6\"), \"9780201633856\", \"validateISBN13-5\");\r\n    assertEquals(validator.validateISBN13(\"978 0 201 63385 6\"), \"9780201633856\", \"validateISBN13-6\");\r\n    assertEquals(validator.validate(\"9781930110991\"), \"9781930110991\", \"validate-1\");\r\n    assertEquals(validator.validate(\"978-1-930110-99-1\"), \"9781930110991\", \"validate-2\");\r\n    assertEquals(validator.validate(\"978 1 930110 99 1\"), \"9781930110991\", \"validate-3\");\r\n    assertEquals(validator.validate(\"9780201633856\"), \"9780201633856\", \"validate-4\");\r\n    assertEquals(validator.validate(\"978-0-201-63385-6\"), \"9780201633856\", \"validate-5\");\r\n    assertEquals(validator.validate(\"978 0 201 63385 6\"), \"9780201633856\", \"validate-6\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testValidISBN10Format",
  "sourceCode" : "/**\r\n * Test Valid ISBN-10 formats.\r\n */\r\n@Test\r\nvoid testValidISBN10Format() {\r\n    final Pattern pattern = Pattern.compile(ISBNValidator.ISBN10_REGEX);\r\n    for (int i = 0; i < validISBN10Format.length; i++) {\r\n        assertTrue(pattern.matcher(validISBN10Format[i]).matches(), \"Pattern[\" + i + \"]=\" + validISBN10Format[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISBNValidatorTest.java",
  "methodName" : "testValidISBN13Format",
  "sourceCode" : "/**\r\n * Test Valid ISBN-13 formats.\r\n */\r\n@Test\r\nvoid testValidISBN13Format() {\r\n    final Pattern pattern = Pattern.compile(ISBNValidator.ISBN13_REGEX);\r\n    for (int i = 0; i < validISBN13Format.length; i++) {\r\n        assertTrue(pattern.matcher(validISBN13Format[i]).matches(), \"Pattern[\" + i + \"]=\" + validISBN13Format[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISINValidatorTest.java",
  "methodName" : "testInvalidFalse",
  "sourceCode" : "@Test\r\nvoid testInvalidFalse() {\r\n    for (final String f : invalidFormat) {\r\n        assertFalse(VALIDATOR_FALSE.isValid(f), f);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISINValidatorTest.java",
  "methodName" : "testInvalidTrue",
  "sourceCode" : "@Test\r\nvoid testInvalidTrue() {\r\n    for (final String f : invalidFormat) {\r\n        assertFalse(VALIDATOR_TRUE.isValid(f), f);\r\n    }\r\n    for (final String f : invalidFormatTrue) {\r\n        assertFalse(VALIDATOR_TRUE.isValid(f), f);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISINValidatorTest.java",
  "methodName" : "testIsValidFalse",
  "sourceCode" : "@Test\r\nvoid testIsValidFalse() {\r\n    for (final String f : validFormat) {\r\n        assertTrue(VALIDATOR_FALSE.isValid(f), f);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISINValidatorTest.java",
  "methodName" : "testIsValidTrue",
  "sourceCode" : "@Test\r\nvoid testIsValidTrue() {\r\n    for (final String f : validFormat) {\r\n        assertTrue(VALIDATOR_TRUE.isValid(f), f);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISSNValidatorTest.java",
  "methodName" : "testConversionErrors",
  "sourceCode" : "/**\r\n * Test Invalid EAN-13 ISSN prefix codes Test Input length\r\n */\r\n@Test\r\nvoid testConversionErrors() {\r\n    final String input1 = \"9780072129519\";\r\n    assertThrows(IllegalArgumentException.class, () -> VALIDATOR.extractFromEAN13(input1), \"Expected IllegalArgumentException for '\" + input1 + \"'\");\r\n    final String input2 = \"9791090636071\";\r\n    assertThrows(IllegalArgumentException.class, () -> VALIDATOR.extractFromEAN13(input2), \"Expected IllegalArgumentException for '\" + input2 + \"'\");\r\n    final String input3 = \"03178471\";\r\n    assertThrows(IllegalArgumentException.class, () -> VALIDATOR.extractFromEAN13(input3), \"Expected IllegalArgumentException for '\" + input3 + \"'\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISSNValidatorTest.java",
  "methodName" : "testInvalid",
  "sourceCode" : "/**\r\n * Test Invalid ISSN codes\r\n */\r\n@Test\r\nvoid testInvalid() {\r\n    for (final String f : INVALID_FORMAT) {\r\n        assertFalse(VALIDATOR.isValid(f), f);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISSNValidatorTest.java",
  "methodName" : "testIsValidExtract",
  "sourceCode" : "/**\r\n * Test valid EAN-13 ISSN codes and extract the ISSN\r\n */\r\n@Test\r\nvoid testIsValidExtract() {\r\n    assertEquals(\"12345679\", VALIDATOR.extractFromEAN13(\"9771234567003\"));\r\n    assertEquals(\"00014664\", VALIDATOR.extractFromEAN13(\"9770001466006\"));\r\n    assertEquals(\"03178471\", VALIDATOR.extractFromEAN13(\"9770317847001\"));\r\n    assertEquals(\"1144875X\", VALIDATOR.extractFromEAN13(\"9771144875007\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISSNValidatorTest.java",
  "methodName" : "testIsValidISSN",
  "sourceCode" : "/**\r\n * Test isValid() ISSN codes\r\n */\r\n@Test\r\nvoid testIsValidISSN() {\r\n    for (final String f : VALID_FORMAT) {\r\n        assertTrue(VALIDATOR.isValid(f), f);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISSNValidatorTest.java",
  "methodName" : "testIsValidISSNConvert",
  "sourceCode" : "/**\r\n * Test isValid() ISSN codes and convert them\r\n */\r\n@Test\r\nvoid testIsValidISSNConvert() {\r\n    final CheckDigit ean13cd = EAN13CheckDigit.EAN13_CHECK_DIGIT;\r\n    final Random r = new Random();\r\n    for (final String f : VALID_FORMAT) {\r\n        final String suffix = String.format(\"%02d\", r.nextInt(100));\r\n        final String ean13 = VALIDATOR.convertToEAN13(f, suffix);\r\n        assertTrue(ean13cd.isValid(ean13), ean13);\r\n    }\r\n    // internet samples\r\n    assertEquals(VALIDATOR.convertToEAN13(\"1144-875X\", \"00\"), \"9771144875007\");\r\n    assertEquals(VALIDATOR.convertToEAN13(\"0264-3596\", \"00\"), \"9770264359008\");\r\n    assertEquals(VALIDATOR.convertToEAN13(\"1234-5679\", \"00\"), \"9771234567003\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISSNValidatorTest.java",
  "methodName" : "testIsValidISSNConvertNull",
  "sourceCode" : "@Test\r\nvoid testIsValidISSNConvertNull() {\r\n    assertNull(VALIDATOR.convertToEAN13(null, \"00\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISSNValidatorTest.java",
  "methodName" : "testIsValidISSNConvertSuffix",
  "sourceCode" : "@Test\r\nvoid testIsValidISSNConvertSuffix() {\r\n    assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, null));\r\n    assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"\"));\r\n    assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"0\"));\r\n    assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"A\"));\r\n    assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"AA\"));\r\n    assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"999\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISSNValidatorTest.java",
  "methodName" : "testNull",
  "sourceCode" : "/**\r\n * Test null values\r\n */\r\n@Test\r\nvoid testNull() {\r\n    assertFalse(VALIDATOR.isValid(null), \"isValid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ISSNValidatorTest.java",
  "methodName" : "testValidCheckDigitEan13",
  "sourceCode" : "/**\r\n * Test Invalid EAN-13 ISSN codes\r\n */\r\n@Test\r\nvoid testValidCheckDigitEan13() {\r\n    assertNull(VALIDATOR.extractFromEAN13(\"9771234567001\"));\r\n    assertNull(VALIDATOR.extractFromEAN13(\"9771234567002\"));\r\n    // valid check digit\r\n    assertNotNull(VALIDATOR.extractFromEAN13(\"9771234567003\"));\r\n    assertNull(VALIDATOR.extractFromEAN13(\"9771234567004\"));\r\n    assertNull(VALIDATOR.extractFromEAN13(\"9771234567005\"));\r\n    assertNull(VALIDATOR.extractFromEAN13(\"9771234567006\"));\r\n    assertNull(VALIDATOR.extractFromEAN13(\"9771234567007\"));\r\n    assertNull(VALIDATOR.extractFromEAN13(\"9771234567008\"));\r\n    assertNull(VALIDATOR.extractFromEAN13(\"9771234567009\"));\r\n    assertNull(VALIDATOR.extractFromEAN13(\"9771234567000\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\LongValidatorTest.java",
  "methodName" : "testLongRangeMinMax",
  "sourceCode" : "/**\r\n * Test Long Range/Min/Max\r\n */\r\n@Test\r\nvoid testLongRangeMinMax() {\r\n    final LongValidator validator = (LongValidator) strictValidator;\r\n    final Long number9 = validator.validate(\"9\", \"#\");\r\n    final Long number10 = validator.validate(\"10\", \"#\");\r\n    final Long number11 = validator.validate(\"11\", \"#\");\r\n    final Long number19 = validator.validate(\"19\", \"#\");\r\n    final Long number20 = validator.validate(\"20\", \"#\");\r\n    final Long number21 = validator.validate(\"21\", \"#\");\r\n    // Test isInRange()\r\n    assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\r\n    assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\r\n    assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\r\n    assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\r\n    assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\r\n    // Test minValue()\r\n    assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\r\n    assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\r\n    assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\r\n    // Test minValue()\r\n    assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\r\n    assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\r\n    assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\LongValidatorTest.java",
  "methodName" : "testLongValidatorMethods",
  "sourceCode" : "/**\r\n * Test LongValidator validate Methods\r\n */\r\n@Test\r\nvoid testLongValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"0,00,00\";\r\n    final String patternVal = \"1,23,45\";\r\n    final String germanPatternVal = \"1.23.45\";\r\n    final String localeVal = \"12.345\";\r\n    final String defaultVal = \"12,345\";\r\n    final String xxxx = \"XXXX\";\r\n    final Long expected = Long.valueOf(12345);\r\n    assertEquals(expected, LongValidator.getInstance().validate(defaultVal), \"validate(A) default\");\r\n    assertEquals(expected, LongValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\r\n    assertEquals(expected, LongValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\r\n    assertEquals(expected, LongValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\r\n    assertTrue(LongValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(LongValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\r\n    assertTrue(LongValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(LongValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(LongValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(LongValidator.getInstance().validate(xxxx, locale), \"validate(B) locale\");\r\n    assertNull(LongValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(LongValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(LongValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(LongValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\r\n    assertFalse(LongValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(LongValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\PercentValidatorTest.java",
  "methodName" : "testFormatType",
  "sourceCode" : "/**\r\n * Test Format Type\r\n */\r\n@Test\r\nvoid testFormatType() {\r\n    assertEquals(2, PercentValidator.getInstance().getFormatType(), \"Format Type A\");\r\n    assertEquals(AbstractNumberValidator.PERCENT_FORMAT, PercentValidator.getInstance().getFormatType(), \"Format Type B\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\PercentValidatorTest.java",
  "methodName" : "testInvalid",
  "sourceCode" : "/**\r\n * Test Invalid percentage values\r\n */\r\n@Test\r\nvoid testInvalid() {\r\n    final BigDecimalValidator validator = PercentValidator.getInstance();\r\n    // Invalid Missing\r\n    assertFalse(validator.isValid(null), \"isValid() Null Value\");\r\n    assertFalse(validator.isValid(\"\"), \"isValid() Empty Value\");\r\n    assertNull(validator.validate(null), \"validate() Null Value\");\r\n    assertNull(validator.validate(\"\"), \"validate() Empty Value\");\r\n    // Invalid UK\r\n    // ???\r\n    assertFalse(validator.isValid(\"12@\", Locale.UK), \"UK wrong symbol\");\r\n    assertFalse(validator.isValid(\"(12%)\", Locale.UK), \"UK wrong negative\");\r\n    // Invalid US - can't find a Locale with different symbols!\r\n    // ???\r\n    assertFalse(validator.isValid(\"12@\", Locale.US), \"US wrong symbol\");\r\n    assertFalse(validator.isValid(\"(12%)\", Locale.US), \"US wrong negative\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\PercentValidatorTest.java",
  "methodName" : "testValid",
  "sourceCode" : "/**\r\n * Test Valid percentage values\r\n */\r\n@Test\r\n@DefaultLocale(\"en-GB\")\r\nvoid testValid() {\r\n    final BigDecimalValidator validator = PercentValidator.getInstance();\r\n    final BigDecimal expected = new BigDecimal(\"0.12\");\r\n    final BigDecimal negative = new BigDecimal(\"-0.12\");\r\n    final BigDecimal hundred = new BigDecimal(\"1.00\");\r\n    assertEquals(expected, validator.validate(\"12%\"), \"Default locale\");\r\n    assertEquals(negative, validator.validate(\"-12%\"), \"Default negative\");\r\n    // Invalid UK\r\n    assertEquals(expected, validator.validate(\"12%\", Locale.UK), \"UK locale\");\r\n    assertEquals(negative, validator.validate(\"-12%\", Locale.UK), \"UK negative\");\r\n    assertEquals(expected, validator.validate(\"12\", Locale.UK), \"UK No symbol\");\r\n    // Invalid US - can't find a Locale with different symbols!\r\n    assertEquals(expected, validator.validate(\"12%\", Locale.US), \"US locale\");\r\n    assertEquals(negative, validator.validate(\"-12%\", Locale.US), \"US negative\");\r\n    assertEquals(expected, validator.validate(\"12\", Locale.US), \"US No symbol\");\r\n    assertEquals(hundred, validator.validate(\"100%\"), \"100%\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\RegexValidatorTest.java",
  "methodName" : "testExceptions",
  "sourceCode" : "/**\r\n * Test exceptions\r\n */\r\n@Test\r\nvoid testExceptions() {\r\n    assertThrows(PatternSyntaxException.class, () -> new RegexValidator(\"^([abCD12]*$\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\RegexValidatorTest.java",
  "methodName" : "testGetPatterns",
  "sourceCode" : "@Test\r\nvoid testGetPatterns() {\r\n    final RegexValidator regexValidator = new RegexValidator(MULTIPLE_REGEX);\r\n    assertNotSame(regexValidator.getPatterns(), regexValidator.getPatterns());\r\n    final Pattern[] patterns = regexValidator.getPatterns();\r\n    assertEquals(REGEX_1, patterns[0].pattern());\r\n    assertEquals(REGEX_2, patterns[1].pattern());\r\n    assertEquals(REGEX_3, patterns[2].pattern());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\RegexValidatorTest.java",
  "methodName" : "testMissingRegex",
  "sourceCode" : "/**\r\n * Test exceptions\r\n */\r\n@Test\r\nvoid testMissingRegex() {\r\n    // Single Regular Expression - null\r\n    Exception e = assertThrows(IllegalArgumentException.class, () -> new RegexValidator((String) null), \"Single Null\");\r\n    assertEquals(\"Regular expression[0] is missing\", e.getMessage(), \"Single Null\");\r\n    // Single Regular Expression - Zero Length\r\n    e = assertThrows(IllegalArgumentException.class, () -> new RegexValidator(\"\"), \"Single Zero Length\");\r\n    assertEquals(\"Regular expression[0] is missing\", e.getMessage(), \"Single Zero Length\");\r\n    // Multiple Regular Expression - Null array\r\n    e = assertThrows(IllegalArgumentException.class, () -> new RegexValidator((String[]) null), \"Null Array\");\r\n    assertEquals(\"Regular expressions are missing\", e.getMessage(), \"Null Array\");\r\n    // Multiple Regular Expression - Zero Length array\r\n    e = assertThrows(IllegalArgumentException.class, RegexValidator::new, \"Zero Length Array\");\r\n    assertEquals(\"Regular expressions are missing\", e.getMessage(), \"Zero Length Array\");\r\n    // Multiple Regular Expression - Array has Null\r\n    e = assertThrows(IllegalArgumentException.class, () -> new RegexValidator(new String[] { \"ABC\", null }), \"Array has Null\");\r\n    assertEquals(\"Regular expression[1] is missing\", e.getMessage(), \"Array has Null\");\r\n    // Multiple Regular Expression - Array has Zero Length\r\n    e = assertThrows(IllegalArgumentException.class, () -> new RegexValidator(new String[] { \"\", \"ABC\" }), \"Array has Zero Length\");\r\n    assertEquals(\"Regular expression[0] is missing\", e.getMessage(), \"Array has Zero Length\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\RegexValidatorTest.java",
  "methodName" : "testMultipleInsensitive",
  "sourceCode" : "/**\r\n * Test with multiple regular expressions (case in-sensitive).\r\n */\r\n@Test\r\nvoid testMultipleInsensitive() {\r\n    // Set up In-sensitive Validators\r\n    final RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\r\n    final RegexValidator single1 = new RegexValidator(REGEX_1, false);\r\n    final RegexValidator single2 = new RegexValidator(REGEX_2, false);\r\n    final RegexValidator single3 = new RegexValidator(REGEX_3, false);\r\n    // Set up test values\r\n    String value = \"AAC FDE 321\";\r\n    final String expect = \"AACFDE321\";\r\n    final String[] array = { \"AAC\", \"FDE\", \"321\" };\r\n    // isValid()\r\n    assertTrue(multiple.isValid(value), \"isValid() Multiple\");\r\n    assertFalse(single1.isValid(value), \"isValid() 1st\");\r\n    assertTrue(single2.isValid(value), \"isValid() 2nd\");\r\n    assertFalse(single3.isValid(value), \"isValid() 3rd\");\r\n    // validate()\r\n    assertEquals(expect, multiple.validate(value), \"validate() Multiple\");\r\n    assertNull(single1.validate(value), \"validate() 1st\");\r\n    assertEquals(expect, single2.validate(value), \"validate() 2nd\");\r\n    assertNull(single3.validate(value), \"validate() 3rd\");\r\n    // match()\r\n    checkArray(\"match() Multiple\", array, multiple.match(value));\r\n    checkArray(\"match() 1st\", null, single1.match(value));\r\n    checkArray(\"match() 2nd\", array, single2.match(value));\r\n    checkArray(\"match() 3rd\", null, single3.match(value));\r\n    // All invalid\r\n    value = \"AAC*FDE*321\";\r\n    assertFalse(multiple.isValid(value), \"isValid() Invalid\");\r\n    assertNull(multiple.validate(value), \"validate() Invalid\");\r\n    assertNull(multiple.match(value), \"match() Multiple\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\RegexValidatorTest.java",
  "methodName" : "testMultipleSensitive",
  "sourceCode" : "/**\r\n * Test with multiple regular expressions (case sensitive).\r\n */\r\n@Test\r\nvoid testMultipleSensitive() {\r\n    // Set up Sensitive Validators\r\n    final RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX);\r\n    final RegexValidator single1 = new RegexValidator(REGEX_1);\r\n    final RegexValidator single2 = new RegexValidator(REGEX_2);\r\n    final RegexValidator single3 = new RegexValidator(REGEX_3);\r\n    // Set up test values\r\n    String value = \"aac FDE 321\";\r\n    final String expect = \"aacFDE321\";\r\n    final String[] array = { \"aac\", \"FDE\", \"321\" };\r\n    // isValid()\r\n    assertTrue(multiple.isValid(value), \"Sensitive isValid() Multiple\");\r\n    assertFalse(single1.isValid(value), \"Sensitive isValid() 1st\");\r\n    assertTrue(single2.isValid(value), \"Sensitive isValid() 2nd\");\r\n    assertFalse(single3.isValid(value), \"Sensitive isValid() 3rd\");\r\n    // validate()\r\n    assertEquals(expect, multiple.validate(value), \"Sensitive validate() Multiple\");\r\n    assertNull(single1.validate(value), \"Sensitive validate() 1st\");\r\n    assertEquals(expect, single2.validate(value), \"Sensitive validate() 2nd\");\r\n    assertNull(single3.validate(value), \"Sensitive validate() 3rd\");\r\n    // match()\r\n    checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\r\n    checkArray(\"Sensitive match() 1st\", null, single1.match(value));\r\n    checkArray(\"Sensitive match() 2nd\", array, single2.match(value));\r\n    checkArray(\"Sensitive match() 3rd\", null, single3.match(value));\r\n    // All invalid\r\n    value = \"AAC*FDE*321\";\r\n    assertFalse(multiple.isValid(value), \"isValid() Invalid\");\r\n    assertNull(multiple.validate(value), \"validate() Invalid\");\r\n    assertNull(multiple.match(value), \"match() Multiple\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\RegexValidatorTest.java",
  "methodName" : "testNullValue",
  "sourceCode" : "/**\r\n * Test Null value\r\n */\r\n@Test\r\nvoid testNullValue() {\r\n    final RegexValidator validator = new RegexValidator(REGEX);\r\n    assertFalse(validator.isValid(null), \"Instance isValid()\");\r\n    assertNull(validator.validate(null), \"Instance validate()\");\r\n    assertNull(validator.match(null), \"Instance match()\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\RegexValidatorTest.java",
  "methodName" : "testSingle",
  "sourceCode" : "/**\r\n * Test instance methods with single regular expression.\r\n */\r\n@Test\r\nvoid testSingle() {\r\n    final RegexValidator sensitive = new RegexValidator(REGEX);\r\n    final RegexValidator insensitive = new RegexValidator(REGEX, false);\r\n    // isValid()\r\n    assertTrue(sensitive.isValid(\"ac-DE-1\"), \"Sensitive isValid() valid\");\r\n    assertFalse(sensitive.isValid(\"AB-de-1\"), \"Sensitive isValid() invalid\");\r\n    assertTrue(insensitive.isValid(\"AB-de-1\"), \"Insensitive isValid() valid\");\r\n    assertFalse(insensitive.isValid(\"ABd-de-1\"), \"Insensitive isValid() invalid\");\r\n    // validate()\r\n    assertEquals(\"acDE1\", sensitive.validate(\"ac-DE-1\"), \"Sensitive validate() valid\");\r\n    assertNull(sensitive.validate(\"AB-de-1\"), \"Sensitive validate() invalid\");\r\n    assertEquals(\"ABde1\", insensitive.validate(\"AB-de-1\"), \"Insensitive validate() valid\");\r\n    assertNull(insensitive.validate(\"ABd-de-1\"), \"Insensitive validate() invalid\");\r\n    // match()\r\n    checkArray(\"Sensitive match() valid\", new String[] { \"ac\", \"DE\", \"1\" }, sensitive.match(\"ac-DE-1\"));\r\n    checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\r\n    checkArray(\"Insensitive match() valid\", new String[] { \"AB\", \"de\", \"1\" }, insensitive.match(\"AB-de-1\"));\r\n    checkArray(\"Insensitive match() invalid\", null, insensitive.match(\"ABd-de-1\"));\r\n    assertEquals(\"ABC\", new RegexValidator(\"^([A-Z]*)$\").validate(\"ABC\"), \"validate one\");\r\n    checkArray(\"match one\", new String[] { \"ABC\" }, new RegexValidator(\"^([A-Z]*)$\").match(\"ABC\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\RegexValidatorTest.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Test toString() method\r\n */\r\n@Test\r\nvoid testToString() {\r\n    final RegexValidator single = new RegexValidator(REGEX);\r\n    assertEquals(\"RegexValidator{\" + REGEX + \"}\", single.toString(), \"Single\");\r\n    final RegexValidator multiple = new RegexValidator(REGEX, REGEX);\r\n    assertEquals(\"RegexValidator{\" + REGEX + \",\" + REGEX + \"}\", multiple.toString(), \"Multiple\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ShortValidatorTest.java",
  "methodName" : "testShortRangeMinMax",
  "sourceCode" : "/**\r\n * Test Short Range/Min/Max\r\n */\r\n@Test\r\nvoid testShortRangeMinMax() {\r\n    final ShortValidator validator = (ShortValidator) strictValidator;\r\n    final Short number9 = validator.validate(\"9\", \"#\");\r\n    final Short number10 = validator.validate(\"10\", \"#\");\r\n    final Short number11 = validator.validate(\"11\", \"#\");\r\n    final Short number19 = validator.validate(\"19\", \"#\");\r\n    final Short number20 = validator.validate(\"20\", \"#\");\r\n    final Short number21 = validator.validate(\"21\", \"#\");\r\n    final short min = (short) 10;\r\n    final short max = (short) 20;\r\n    // Test isInRange()\r\n    assertFalse(validator.isInRange(number9, min, max), \"isInRange() < min\");\r\n    assertTrue(validator.isInRange(number10, min, max), \"isInRange() = min\");\r\n    assertTrue(validator.isInRange(number11, min, max), \"isInRange() in range\");\r\n    assertTrue(validator.isInRange(number20, min, max), \"isInRange() = max\");\r\n    assertFalse(validator.isInRange(number21, min, max), \"isInRange() > max\");\r\n    // Test minValue()\r\n    assertFalse(validator.minValue(number9, min), \"minValue() < min\");\r\n    assertTrue(validator.minValue(number10, min), \"minValue() = min\");\r\n    assertTrue(validator.minValue(number11, min), \"minValue() > min\");\r\n    // Test minValue()\r\n    assertTrue(validator.maxValue(number19, max), \"maxValue() < max\");\r\n    assertTrue(validator.maxValue(number20, max), \"maxValue() = max\");\r\n    assertFalse(validator.maxValue(number21, max), \"maxValue() > max\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\ShortValidatorTest.java",
  "methodName" : "testShortValidatorMethods",
  "sourceCode" : "/**\r\n * Test ShortValidator validate Methods\r\n */\r\n@Test\r\nvoid testShortValidatorMethods() {\r\n    final Locale locale = Locale.GERMAN;\r\n    final String pattern = \"0,00,00\";\r\n    final String patternVal = \"1,23,45\";\r\n    final String germanPatternVal = \"1.23.45\";\r\n    final String localeVal = \"12.345\";\r\n    final String defaultVal = \"12,345\";\r\n    final String xxxx = \"XXXX\";\r\n    final Short expected = Short.valueOf((short) 12345);\r\n    assertEquals(expected, ShortValidator.getInstance().validate(defaultVal), \"validate(A) default\");\r\n    assertEquals(expected, ShortValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\r\n    assertEquals(expected, ShortValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\r\n    assertEquals(expected, ShortValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\r\n    assertTrue(ShortValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\r\n    assertTrue(ShortValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\r\n    assertTrue(ShortValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\r\n    assertTrue(ShortValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\r\n    assertNull(ShortValidator.getInstance().validate(xxxx), \"validate(B) default\");\r\n    assertNull(ShortValidator.getInstance().validate(xxxx, locale), \"validate(B) locale\");\r\n    assertNull(ShortValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\r\n    assertNull(ShortValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\r\n    assertFalse(ShortValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\r\n    assertFalse(ShortValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\r\n    assertFalse(ShortValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\r\n    assertFalse(ShortValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\TimeValidatorTest.java",
  "methodName" : "testCompare",
  "sourceCode" : "/**\r\n * Test compare date methods\r\n */\r\n@Test\r\nvoid testCompare() {\r\n    final int testTime = 154523;\r\n    final int min = 100;\r\n    final int hour = 10000;\r\n    // > milli sec\r\n    final Calendar milliGreater = createTime(TimeZones.GMT, testTime, 500);\r\n    // test value\r\n    final Calendar value = createTime(TimeZones.GMT, testTime, 400);\r\n    // < milli sec\r\n    final Calendar milliLess = createTime(TimeZones.GMT, testTime, 300);\r\n    // +1 sec\r\n    final Calendar secGreater = createTime(TimeZones.GMT, testTime + 1, 100);\r\n    // -1 sec\r\n    final Calendar secLess = createTime(TimeZones.GMT, testTime - 1, 100);\r\n    // +1 min\r\n    final Calendar minGreater = createTime(TimeZones.GMT, testTime + min, 100);\r\n    // -1 min\r\n    final Calendar minLess = createTime(TimeZones.GMT, testTime - min, 100);\r\n    // +1 hour\r\n    final Calendar hourGreater = createTime(TimeZones.GMT, testTime + hour, 100);\r\n    // -1 hour\r\n    final Calendar hourLess = createTime(TimeZones.GMT, testTime - hour, 100);\r\n    // > milli\r\n    assertEquals(-1, validator.compareTime(value, milliGreater), \"milli LT\");\r\n    // same time\r\n    assertEquals(0, validator.compareTime(value, value), \"milli EQ\");\r\n    // < milli\r\n    assertEquals(1, validator.compareTime(value, milliLess), \"milli GT\");\r\n    // +1 sec\r\n    assertEquals(-1, validator.compareSeconds(value, secGreater), \"secs LT\");\r\n    // > milli\r\n    assertEquals(0, validator.compareSeconds(value, milliGreater), \"secs =1\");\r\n    // same time\r\n    assertEquals(0, validator.compareSeconds(value, value), \"secs =2\");\r\n    // < milli\r\n    assertEquals(0, validator.compareSeconds(value, milliLess), \"secs =3\");\r\n    // -1 sec\r\n    assertEquals(1, validator.compareSeconds(value, secLess), \"secs GT\");\r\n    // +1 min\r\n    assertEquals(-1, validator.compareMinutes(value, minGreater), \"mins LT\");\r\n    // +1 sec\r\n    assertEquals(0, validator.compareMinutes(value, secGreater), \"mins =1\");\r\n    // same time\r\n    assertEquals(0, validator.compareMinutes(value, value), \"mins =2\");\r\n    // -1 sec\r\n    assertEquals(0, validator.compareMinutes(value, secLess), \"mins =3\");\r\n    // -1 min\r\n    assertEquals(1, validator.compareMinutes(value, minLess), \"mins GT\");\r\n    // +1 hour\r\n    assertEquals(-1, validator.compareHours(value, hourGreater), \"hour LT\");\r\n    // +1 min\r\n    assertEquals(0, validator.compareHours(value, minGreater), \"hour =1\");\r\n    // same time\r\n    assertEquals(0, validator.compareHours(value, value), \"hour =2\");\r\n    // -1 min\r\n    assertEquals(0, validator.compareHours(value, minLess), \"hour =3\");\r\n    // -1 hour\r\n    assertEquals(1, validator.compareHours(value, hourLess), \"hour GT\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\TimeValidatorTest.java",
  "methodName" : "testFormat",
  "sourceCode" : "/**\r\n * Test Invalid Dates with \"locale\" validation\r\n */\r\n@Test\r\n@DefaultLocale(\"en-GB\")\r\nvoid testFormat() {\r\n    // The JVM format varies; calculate expected results\r\n    final Calendar cal = createTime(null, 164923, 0);\r\n    final DateFormat df = DateFormat.getTimeInstance(DateFormat.SHORT);\r\n    final String val = df.format(cal.getTime());\r\n    final DateFormat dfus = DateFormat.getTimeInstance(DateFormat.SHORT, Locale.US);\r\n    final String valus = dfus.format(cal.getTime());\r\n    final Object test = TimeValidator.getInstance().validate(\"16:49:23\", \"HH:mm:ss\");\r\n    assertNotNull(test, \"Test Date \");\r\n    assertEquals(\"16-49-23\", validator.format(test, \"HH-mm-ss\"), \"Format pattern\");\r\n    assertEquals(valus, validator.format(test, Locale.US), \"Format locale\");\r\n    assertEquals(val, validator.format(test), \"Format default\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\TimeValidatorTest.java",
  "methodName" : "testLocaleInvalid",
  "sourceCode" : "/**\r\n * Test Invalid Dates with \"locale\" validation\r\n */\r\n@Test\r\nvoid testLocaleInvalid() {\r\n    for (int i = 0; i < localeInvalid.length; i++) {\r\n        final String text = i + \" value=[\" + localeInvalid[i] + \"] passed \";\r\n        final Object date = validator.validate(localeInvalid[i], Locale.US);\r\n        assertNull(date, \"validate() \" + text + date);\r\n        assertFalse(validator.isValid(localeInvalid[i], Locale.UK), \"isValid() \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\TimeValidatorTest.java",
  "methodName" : "testLocaleValid",
  "sourceCode" : "/**\r\n * Test Valid Dates with \"locale\" validation\r\n */\r\n@Test\r\nvoid testLocaleValid() {\r\n    for (int i = 0; i < localeValid.length; i++) {\r\n        final String text = i + \" value=[\" + localeValid[i] + \"] failed \";\r\n        final Calendar calendar = validator.validate(localeValid[i], Locale.UK);\r\n        assertNotNull(calendar, \"validate() \" + text);\r\n        final Date date = calendar.getTime();\r\n        assertTrue(validator.isValid(localeValid[i], Locale.UK), \"isValid() \" + text);\r\n        assertEquals(localeExpect[i], date, \"compare \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\TimeValidatorTest.java",
  "methodName" : "testPatternInvalid",
  "sourceCode" : "/**\r\n * Test Invalid Dates with \"pattern\" validation\r\n */\r\n@Test\r\nvoid testPatternInvalid() {\r\n    for (int i = 0; i < patternInvalid.length; i++) {\r\n        final String text = i + \" value=[\" + patternInvalid[i] + \"] passed \";\r\n        final Object date = validator.validate(patternInvalid[i], \"HH-mm-ss\");\r\n        assertNull(date, \"validate() \" + text + date);\r\n        assertFalse(validator.isValid(patternInvalid[i], \"HH-mm-ss\"), \"isValid() \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\TimeValidatorTest.java",
  "methodName" : "testPatternValid",
  "sourceCode" : "/**\r\n * Test Valid Dates with \"pattern\" validation\r\n */\r\n@Test\r\nvoid testPatternValid() {\r\n    for (int i = 0; i < patternValid.length; i++) {\r\n        final String text = i + \" value=[\" + patternValid[i] + \"] failed \";\r\n        final Calendar calendar = validator.validate(patternValid[i], \"HH-mm-ss\");\r\n        assertNotNull(calendar, \"validateObj() \" + text);\r\n        final Date date = calendar.getTime();\r\n        assertTrue(validator.isValid(patternValid[i], \"HH-mm-ss\"), \"isValid() \" + text);\r\n        assertEquals(patternExpect[i], date, \"compare \" + text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\TimeValidatorTest.java",
  "methodName" : "testTimeZone",
  "sourceCode" : "/**\r\n * Test time zone methods.\r\n */\r\n@Test\r\n@DefaultLocale(\"en-GB\")\r\n@DefaultTimeZone(\"GMT\")\r\nvoid testTimeZone() {\r\n    Calendar result = validator.validate(\"18:01\");\r\n    assertNotNull(result, \"default result\");\r\n    assertEquals(TimeZones.GMT, result.getTimeZone(), \"default zone\");\r\n    assertEquals(18, result.get(Calendar.HOUR_OF_DAY), \"default hour\");\r\n    assertEquals(01, result.get(Calendar.MINUTE), \"default minute\");\r\n    result = null;\r\n    // Default Locale, diff TimeZone\r\n    result = validator.validate(\"16:49\", TestTimeZones.EST);\r\n    assertNotNull(result, \"zone result\");\r\n    assertEquals(TestTimeZones.EST, result.getTimeZone(), \"zone zone\");\r\n    assertEquals(16, result.get(Calendar.HOUR_OF_DAY), \"zone hour\");\r\n    assertEquals(49, result.get(Calendar.MINUTE), \"zone minute\");\r\n    result = null;\r\n    // Pattern, diff TimeZone\r\n    result = validator.validate(\"14-34\", \"HH-mm\", TestTimeZones.EST);\r\n    assertNotNull(result, \"pattern result\");\r\n    assertEquals(TestTimeZones.EST, result.getTimeZone(), \"pattern zone\");\r\n    assertEquals(14, result.get(Calendar.HOUR_OF_DAY), \"pattern hour\");\r\n    assertEquals(34, result.get(Calendar.MINUTE), \"pattern minute\");\r\n    result = null;\r\n    // Locale, diff TimeZone\r\n    final DateFormat usdf = DateFormat.getTimeInstance(DateFormat.SHORT, Locale.US);\r\n    final Calendar uscal = Calendar.getInstance(Locale.US);\r\n    // month is 0-based\r\n    uscal.set(2005, Calendar.JANUARY, 1, 19, 18);\r\n    final String usVal = usdf.format(uscal.getTime());\r\n    result = validator.validate(usVal, Locale.US, TestTimeZones.EST);\r\n    assertNotNull(result, \"locale result: \" + usVal);\r\n    assertEquals(TestTimeZones.EST, result.getTimeZone(), \"locale zone: \" + usVal);\r\n    assertEquals(19, result.get(Calendar.HOUR_OF_DAY), \"locale hour: \" + usVal);\r\n    assertEquals(18, result.get(Calendar.MINUTE), \"locale minute: \" + usVal);\r\n    result = null;\r\n    final String dateTimePattern = \"dd/MMM/yy HH-mm\";\r\n    final Calendar decal = Calendar.getInstance(Locale.GERMAN);\r\n    // month is 0-based\r\n    decal.set(2005, 11, 31, 21, 05);\r\n    final String germanSample = new SimpleDateFormat(dateTimePattern, Locale.GERMAN).format(decal.getTime());\r\n    // Locale & Pattern, diff TimeZone\r\n    result = validator.validate(germanSample, dateTimePattern, Locale.GERMAN, TestTimeZones.EST);\r\n    assertNotNull(result, \"pattern result: \" + germanSample);\r\n    assertEquals(TestTimeZones.EST, result.getTimeZone(), \"pattern zone\");\r\n    assertEquals(2005, result.get(Calendar.YEAR), \"pattern day\");\r\n    // months are 0-11\r\n    assertEquals(11, result.get(Calendar.MONTH), \"pattern day\");\r\n    assertEquals(31, result.get(Calendar.DATE), \"pattern day\");\r\n    assertEquals(21, result.get(Calendar.HOUR_OF_DAY), \"pattern hour\");\r\n    assertEquals(05, result.get(Calendar.MINUTE), \"pattern minute\");\r\n    result = null;\r\n    // Locale & Pattern, default TimeZone\r\n    result = validator.validate(germanSample, dateTimePattern, Locale.GERMAN);\r\n    assertNotNull(result, \"pattern result: \" + germanSample);\r\n    assertEquals(TimeZones.GMT, result.getTimeZone(), \"pattern zone\");\r\n    assertEquals(2005, result.get(Calendar.YEAR), \"pattern day\");\r\n    // months are 0-11\r\n    assertEquals(11, result.get(Calendar.MONTH), \"pattern day\");\r\n    assertEquals(31, result.get(Calendar.DATE), \"pattern day\");\r\n    assertEquals(21, result.get(Calendar.HOUR_OF_DAY), \"pattern hour\");\r\n    assertEquals(05, result.get(Calendar.MINUTE), \"pattern minute\");\r\n    result = null;\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testFragments",
  "sourceCode" : "@Test\r\nvoid testFragments() {\r\n    final String[] schemes = { \"http\", \"https\" };\r\n    UrlValidator urlValidator = new UrlValidator(schemes, UrlValidator.NO_FRAGMENTS);\r\n    assertFalse(urlValidator.isValid(\"http://apache.org/a/b/c#frag\"));\r\n    urlValidator = new UrlValidator(schemes);\r\n    assertTrue(urlValidator.isValid(\"http://apache.org/a/b/c#frag\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testIsValid",
  "sourceCode" : "@Test\r\nvoid testIsValid() {\r\n    testIsValid(testUrlParts, UrlValidator.ALLOW_ALL_SCHEMES);\r\n    setUp();\r\n    final long options = UrlValidator.ALLOW_2_SLASHES + UrlValidator.ALLOW_ALL_SCHEMES + UrlValidator.NO_FRAGMENTS;\r\n    testIsValid(testUrlPartsOptions, options);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testIsValidScheme",
  "sourceCode" : "@Test\r\nvoid testIsValidScheme() {\r\n    if (printStatus) {\r\n        System.out.print(\"\\n testIsValidScheme() \");\r\n    }\r\n    // UrlValidator urlVal = new UrlValidator(schemes,false,false,false);\r\n    final UrlValidator urlVal = new UrlValidator(schemes, 0);\r\n    for (final ResultPair testPair : testScheme) {\r\n        final boolean result = urlVal.isValidScheme(testPair.item);\r\n        assertEquals(testPair.valid, result, testPair.item);\r\n        if (printStatus) {\r\n            if (result == testPair.valid) {\r\n                System.out.print('.');\r\n            } else {\r\n                System.out.print('X');\r\n            }\r\n        }\r\n    }\r\n    if (printStatus) {\r\n        System.out.println();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidateUrl",
  "sourceCode" : "@Test\r\nvoid testValidateUrl() {\r\n    assertTrue(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator202",
  "sourceCode" : "@Test\r\nvoid testValidator202() {\r\n    final String[] schemes = { \"http\", \"https\" };\r\n    final UrlValidator urlValidator = new UrlValidator(schemes, UrlValidator.NO_FRAGMENTS);\r\n    assertTrue(urlValidator.isValid(\"http://l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator204",
  "sourceCode" : "@Test\r\nvoid testValidator204() {\r\n    final String[] schemes = { \"http\", \"https\" };\r\n    final UrlValidator urlValidator = new UrlValidator(schemes);\r\n    assertTrue(urlValidator.isValid(\"http://tech.yahoo.com/rc/desktops/102;_ylt=Ao8yevQHlZ4On0O3ZJGXLEQFLZA5\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator218",
  "sourceCode" : "@Test\r\nvoid testValidator218() {\r\n    final UrlValidator validator = new UrlValidator(UrlValidator.ALLOW_2_SLASHES);\r\n    assertTrue(validator.isValid(\"http://somewhere.com/pathxyz/file(1).html\"), \"parentheses should be valid in URLs\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator235",
  "sourceCode" : "@Test\r\nvoid testValidator235() {\r\n    final UrlValidator validator = new UrlValidator();\r\n    assertTrue(validator.isValid(\"http://xn--d1abbgf6aiiy.xn--p1ai\"), \"xn--d1abbgf6aiiy.xn--p1ai should validate\");\r\n    assertTrue(validator.isValid(\"http://президент.рф\"), \"президент.рф should validate\");\r\n    assertTrue(validator.isValid(\"http://www.b\\u00fccher.ch\"), \"www.b\\u00fccher.ch should validate\");\r\n    assertFalse(validator.isValid(\"http://www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\r\n    assertTrue(validator.isValid(\"ftp://www.b\\u00fccher.ch\"), \"www.b\\u00fccher.ch should validate\");\r\n    assertFalse(validator.isValid(\"ftp://www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator248",
  "sourceCode" : "@Test\r\nvoid testValidator248() {\r\n    final RegexValidator regex = new RegexValidator(\"localhost\", \".*\\\\.my-testing\");\r\n    UrlValidator validator = new UrlValidator(regex, 0);\r\n    assertTrue(validator.isValid(\"http://localhost/test/index.html\"), \"localhost URL should validate\");\r\n    assertTrue(validator.isValid(\"http://first.my-testing/test/index.html\"), \"first.my-testing should validate\");\r\n    assertTrue(validator.isValid(\"http://sup3r.my-testing/test/index.html\"), \"sup3r.my-testing should validate\");\r\n    assertFalse(validator.isValid(\"http://broke.my-test/test/index.html\"), \"broke.my-test should not validate\");\r\n    assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"www.apache.org should still validate\");\r\n    // Now check using options\r\n    validator = new UrlValidator(UrlValidator.ALLOW_LOCAL_URLS);\r\n    assertTrue(validator.isValid(\"http://localhost/test/index.html\"), \"localhost URL should validate\");\r\n    assertTrue(validator.isValid(\"http://machinename/test/index.html\"), \"machinename URL should validate\");\r\n    assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"www.apache.org should still validate\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator276",
  "sourceCode" : "@Test\r\nvoid testValidator276() {\r\n    // file:// isn't allowed by default\r\n    UrlValidator validator = new UrlValidator();\r\n    assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"http://apache.org/ should be allowed by default\");\r\n    assertFalse(validator.isValid(\"file:///C:/some.file\"), \"file:///c:/ shouldn't be allowed by default\");\r\n    assertFalse(validator.isValid(\"file:///C:\\\\some.file\"), \"file:///c:\\\\ shouldn't be allowed by default\");\r\n    assertFalse(validator.isValid(\"file:///etc/hosts\"), \"file:///etc/ shouldn't be allowed by default\");\r\n    assertFalse(validator.isValid(\"file://localhost/etc/hosts\"), \"file://localhost/etc/ shouldn't be allowed by default\");\r\n    assertFalse(validator.isValid(\"file://localhost/c:/some.file\"), \"file://localhost/c:/ shouldn't be allowed by default\");\r\n    // Turn it on, and check\r\n    // Note - we need to enable local urls when working with file:\r\n    validator = new UrlValidator(new String[] { \"http\", \"file\" }, UrlValidator.ALLOW_LOCAL_URLS);\r\n    assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"http://apache.org/ should be allowed by default\");\r\n    assertTrue(validator.isValid(\"file:///C:/some.file\"), \"file:///c:/ should now be allowed\");\r\n    // Only allow forward slashes\r\n    assertFalse(validator.isValid(\"file:///C:\\\\some.file\"), \"file:///c:\\\\ should not be allowed\");\r\n    assertTrue(validator.isValid(\"file:///etc/hosts\"), \"file:///etc/ should now be allowed\");\r\n    assertTrue(validator.isValid(\"file://localhost/etc/hosts\"), \"file://localhost/etc/ should now be allowed\");\r\n    assertTrue(validator.isValid(\"file://localhost/c:/some.file\"), \"file://localhost/c:/ should now be allowed\");\r\n    // These are never valid\r\n    assertFalse(validator.isValid(\"file://C:/some.file\"), \"file://c:/ shouldn't ever be allowed, needs file:///c:/\");\r\n    assertFalse(validator.isValid(\"file://C:\\\\some.file\"), \"file://c:\\\\ shouldn't ever be allowed, needs file:///c:/\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator283",
  "sourceCode" : "@Test\r\nvoid testValidator283() {\r\n    final UrlValidator validator = new UrlValidator();\r\n    assertFalse(validator.isValid(\"http://finance.yahoo.com/news/Owners-54B-NY-housing-apf-2493139299.html?x=0&ap=%fr\"));\r\n    assertTrue(validator.isValid(\"http://finance.yahoo.com/news/Owners-54B-NY-housing-apf-2493139299.html?x=0&ap=%22\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator288",
  "sourceCode" : "@Test\r\nvoid testValidator288() {\r\n    UrlValidator validator = new UrlValidator(UrlValidator.ALLOW_LOCAL_URLS);\r\n    assertTrue(validator.isValid(\"http://hostname\"), \"hostname should validate\");\r\n    assertTrue(validator.isValid(\"http://hostname/test/index.html\"), \"hostname with path should validate\");\r\n    assertTrue(validator.isValid(\"http://localhost/test/index.html\"), \"localhost URL should validate\");\r\n    assertFalse(validator.isValid(\"http://first.my-testing/test/index.html\"), \"first.my-testing should not validate\");\r\n    assertFalse(validator.isValid(\"http://broke.hostname/test/index.html\"), \"broke.hostname should not validate\");\r\n    assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"www.apache.org should still validate\");\r\n    // Turn it off, and check\r\n    validator = new UrlValidator(0);\r\n    assertFalse(validator.isValid(\"http://hostname\"), \"hostname should no longer validate\");\r\n    assertFalse(validator.isValid(\"http://localhost/test/index.html\"), \"localhost URL should no longer validate\");\r\n    assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"www.apache.org should still validate\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator290",
  "sourceCode" : "@Test\r\nvoid testValidator290() {\r\n    final UrlValidator validator = new UrlValidator();\r\n    assertTrue(validator.isValid(\"http://xn--h1acbxfam.idn.icann.org/\"));\r\n    //        assertTrue(validator.isValid(\"http://xn--e1afmkfd.xn--80akhbyknj4f\"));\r\n    // Internationalized country code top-level domains\r\n    // Algeria\r\n    assertTrue(validator.isValid(\"http://test.xn--lgbbat1ad8j\"));\r\n    // China\r\n    assertTrue(validator.isValid(\"http://test.xn--fiqs8s\"));\r\n    // China\r\n    assertTrue(validator.isValid(\"http://test.xn--fiqz9s\"));\r\n    // Egypt\r\n    assertTrue(validator.isValid(\"http://test.xn--wgbh1c\"));\r\n    // Hong Kong\r\n    assertTrue(validator.isValid(\"http://test.xn--j6w193g\"));\r\n    // India\r\n    assertTrue(validator.isValid(\"http://test.xn--h2brj9c\"));\r\n    // India\r\n    assertTrue(validator.isValid(\"http://test.xn--mgbbh1a71e\"));\r\n    // India\r\n    assertTrue(validator.isValid(\"http://test.xn--fpcrj9c3d\"));\r\n    // India\r\n    assertTrue(validator.isValid(\"http://test.xn--gecrj9c\"));\r\n    // India\r\n    assertTrue(validator.isValid(\"http://test.xn--s9brj9c\"));\r\n    // India\r\n    assertTrue(validator.isValid(\"http://test.xn--xkc2dl3a5ee0h\"));\r\n    // India\r\n    assertTrue(validator.isValid(\"http://test.xn--45brj9c\"));\r\n    // Iran\r\n    assertTrue(validator.isValid(\"http://test.xn--mgba3a4f16a\"));\r\n    // Jordan\r\n    assertTrue(validator.isValid(\"http://test.xn--mgbayh7gpa\"));\r\n    // Morocco\r\n    assertTrue(validator.isValid(\"http://test.xn--mgbc0a9azcg\"));\r\n    // Palestinian Territory\r\n    assertTrue(validator.isValid(\"http://test.xn--ygbi2ammx\"));\r\n    // Qatar\r\n    assertTrue(validator.isValid(\"http://test.xn--wgbl6a\"));\r\n    // Russia\r\n    assertTrue(validator.isValid(\"http://test.xn--p1ai\"));\r\n    // Saudi Arabia\r\n    assertTrue(validator.isValid(\"http://test.xn--mgberp4a5d4ar\"));\r\n    // Serbia\r\n    assertTrue(validator.isValid(\"http://test.xn--90a3ac\"));\r\n    // Singapore\r\n    assertTrue(validator.isValid(\"http://test.xn--yfro4i67o\"));\r\n    // Singapore\r\n    assertTrue(validator.isValid(\"http://test.xn--clchc0ea0b2g2a9gcd\"));\r\n    // South Korea\r\n    assertTrue(validator.isValid(\"http://test.xn--3e0b707e\"));\r\n    // Sri Lanka\r\n    assertTrue(validator.isValid(\"http://test.xn--fzc2c9e2c\"));\r\n    // Sri Lanka\r\n    assertTrue(validator.isValid(\"http://test.xn--xkc2al3hye2a\"));\r\n    // Syria\r\n    assertTrue(validator.isValid(\"http://test.xn--ogbpf8fl\"));\r\n    // Taiwan\r\n    assertTrue(validator.isValid(\"http://test.xn--kprw13d\"));\r\n    // Taiwan\r\n    assertTrue(validator.isValid(\"http://test.xn--kpry57d\"));\r\n    // Thailand\r\n    assertTrue(validator.isValid(\"http://test.xn--o3cw4h\"));\r\n    // Tunisia\r\n    assertTrue(validator.isValid(\"http://test.xn--pgbs0dh\"));\r\n    // United Arab Emirates\r\n    assertTrue(validator.isValid(\"http://test.xn--mgbaam7a8h\"));\r\n    // Proposed internationalized ccTLDs\r\n    //        assertTrue(validator.isValid(\"http://test.xn--54b7fta0cc\")); // Bangladesh\r\n    //        assertTrue(validator.isValid(\"http://test.xn--90ae\")); // Bulgaria\r\n    //        assertTrue(validator.isValid(\"http://test.xn--node\")); // Georgia\r\n    //        assertTrue(validator.isValid(\"http://test.xn--4dbrk0ce\")); // Israel\r\n    //        assertTrue(validator.isValid(\"http://test.xn--mgb9awbf\")); // Oman\r\n    //        assertTrue(validator.isValid(\"http://test.xn--j1amh\")); // Ukraine\r\n    //        assertTrue(validator.isValid(\"http://test.xn--mgb2ddes\")); // Yemen\r\n    // Test TLDs\r\n    //        assertTrue(validator.isValid(\"http://test.xn--kgbechtv\")); // Arabic\r\n    //        assertTrue(validator.isValid(\"http://test.xn--hgbk6aj7f53bba\")); // Persian\r\n    //        assertTrue(validator.isValid(\"http://test.xn--0zwm56d\")); // Chinese\r\n    //        assertTrue(validator.isValid(\"http://test.xn--g6w251d\")); // Chinese\r\n    //        assertTrue(validator.isValid(\"http://test.xn--80akhbyknj4f\")); // Russian\r\n    //        assertTrue(validator.isValid(\"http://test.xn--11b5bs3a9aj6g\")); // Hindi\r\n    //        assertTrue(validator.isValid(\"http://test.xn--jxalpdlp\")); // Greek\r\n    //        assertTrue(validator.isValid(\"http://test.xn--9t4b11yi5a\")); // Korean\r\n    //        assertTrue(validator.isValid(\"http://test.xn--deba0ad\")); // Yiddish\r\n    //        assertTrue(validator.isValid(\"http://test.xn--zckzah\")); // Japanese\r\n    //        assertTrue(validator.isValid(\"http://test.xn--hlcj6aya9esc7a\")); // Tamil\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator309",
  "sourceCode" : "@Test\r\nvoid testValidator309() {\r\n    UrlValidator urlValidator = new UrlValidator();\r\n    assertTrue(urlValidator.isValid(\"http://sample.ondemand.com/\"));\r\n    assertTrue(urlValidator.isValid(\"hTtP://sample.ondemand.CoM/\"));\r\n    assertTrue(urlValidator.isValid(\"httpS://SAMPLE.ONEMAND.COM/\"));\r\n    urlValidator = new UrlValidator(new String[] { \"HTTP\", \"HTTPS\" });\r\n    assertTrue(urlValidator.isValid(\"http://sample.ondemand.com/\"));\r\n    assertTrue(urlValidator.isValid(\"hTtP://sample.ondemand.CoM/\"));\r\n    assertTrue(urlValidator.isValid(\"httpS://SAMPLE.ONEMAND.COM/\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator339",
  "sourceCode" : "@Test\r\nvoid testValidator339() {\r\n    final UrlValidator urlValidator = new UrlValidator();\r\n    // without\r\n    assertTrue(urlValidator.isValid(\"http://www.cnn.com/WORLD/?hpt=sitenav\"));\r\n    // with\r\n    assertTrue(urlValidator.isValid(\"http://www.cnn.com./WORLD/?hpt=sitenav\"));\r\n    // doubly dotty\r\n    assertFalse(urlValidator.isValid(\"http://www.cnn.com../\"));\r\n    assertFalse(urlValidator.isValid(\"http://www.cnn.invalid/\"));\r\n    // check . does not affect invalid domains\r\n    assertFalse(urlValidator.isValid(\"http://www.cnn.invalid./\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator339IDN",
  "sourceCode" : "@Test\r\nvoid testValidator339IDN() {\r\n    final UrlValidator urlValidator = new UrlValidator();\r\n    // without\r\n    assertTrue(urlValidator.isValid(\"http://президент.рф/WORLD/?hpt=sitenav\"));\r\n    // with\r\n    assertTrue(urlValidator.isValid(\"http://президент.рф./WORLD/?hpt=sitenav\"));\r\n    // very dotty\r\n    assertFalse(urlValidator.isValid(\"http://президент.рф..../\"));\r\n    // triply dotty\r\n    assertFalse(urlValidator.isValid(\"http://президент.рф.../\"));\r\n    // doubly dotty\r\n    assertFalse(urlValidator.isValid(\"http://президент.рф../\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator342",
  "sourceCode" : "@Test\r\nvoid testValidator342() {\r\n    final UrlValidator urlValidator = new UrlValidator();\r\n    assertTrue(urlValidator.isValid(\"http://example.rocks/\"));\r\n    assertTrue(urlValidator.isValid(\"http://example.rocks\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator353",
  "sourceCode" : "@Test\r\nvoid testValidator353() {\r\n    // userinfo\r\n    final UrlValidator validator = new UrlValidator();\r\n    assertTrue(validator.isValid(\"http://www.apache.org:80/path\"));\r\n    assertTrue(validator.isValid(\"http://user:pass@www.apache.org:80/path\"));\r\n    assertTrue(validator.isValid(\"http://user:@www.apache.org:80/path\"));\r\n    assertTrue(validator.isValid(\"http://user@www.apache.org:80/path\"));\r\n    assertTrue(validator.isValid(\"http://us%00er:-._~!$&'()*+,;=@www.apache.org:80/path\"));\r\n    assertFalse(validator.isValid(\"http://:pass@www.apache.org:80/path\"));\r\n    assertFalse(validator.isValid(\"http://:@www.apache.org:80/path\"));\r\n    assertFalse(validator.isValid(\"http://user:pa:ss@www.apache.org/path\"));\r\n    assertFalse(validator.isValid(\"http://user:pa@ss@www.apache.org/path\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator361",
  "sourceCode" : "@Test\r\nvoid testValidator361() {\r\n    final UrlValidator validator = new UrlValidator();\r\n    assertTrue(validator.isValid(\"http://hello.tokyo/\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator363",
  "sourceCode" : "@Test\r\nvoid testValidator363() {\r\n    final UrlValidator urlValidator = new UrlValidator();\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/a/b/hello..world\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/a/hello..world\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/hello.world/\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/hello..world/\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/hello.world\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/hello..world\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/..world\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/.../world\"));\r\n    assertFalse(urlValidator.isValid(\"http://www.example.org/../world\"));\r\n    assertFalse(urlValidator.isValid(\"http://www.example.org/..\"));\r\n    assertFalse(urlValidator.isValid(\"http://www.example.org/../\"));\r\n    assertFalse(urlValidator.isValid(\"http://www.example.org/./..\"));\r\n    assertFalse(urlValidator.isValid(\"http://www.example.org/././..\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/...\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/.../\"));\r\n    assertTrue(urlValidator.isValid(\"http://www.example.org/.../..\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator375",
  "sourceCode" : "@Test\r\nvoid testValidator375() {\r\n    final UrlValidator validator = new UrlValidator();\r\n    String url = \"http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html\";\r\n    assertTrue(validator.isValid(url), \"IPv6 address URL should validate: \" + url);\r\n    url = \"http://[::1]:80/index.html\";\r\n    assertTrue(validator.isValid(url), \"IPv6 address URL should validate: \" + url);\r\n    url = \"http://FEDC:BA98:7654:3210:FEDC:BA98:7654:3210:80/index.html\";\r\n    assertFalse(validator.isValid(url), \"IPv6 address without [] should not validate: \" + url);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator380",
  "sourceCode" : "@Test\r\nvoid testValidator380() {\r\n    final UrlValidator validator = new UrlValidator();\r\n    assertTrue(validator.isValid(\"http://www.apache.org:80/path\"));\r\n    assertTrue(validator.isValid(\"http://www.apache.org:8/path\"));\r\n    assertTrue(validator.isValid(\"http://www.apache.org:/path\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator382",
  "sourceCode" : "@Test\r\nvoid testValidator382() {\r\n    final UrlValidator validator = new UrlValidator();\r\n    assertTrue(validator.isValid(\"ftp://username:password@example.com:8042/over/there/index.dtb?type=animal&name=narwhal#nose\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator391FAILS",
  "sourceCode" : "@Test\r\nvoid testValidator391FAILS() {\r\n    final String[] schemes = { \"file\" };\r\n    final UrlValidator urlValidator = new UrlValidator(schemes);\r\n    assertTrue(urlValidator.isValid(\"file:/C:/path/to/dir/\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator391OK",
  "sourceCode" : "@Test\r\nvoid testValidator391OK() {\r\n    final String[] schemes = { \"file\" };\r\n    final UrlValidator urlValidator = new UrlValidator(schemes);\r\n    assertTrue(urlValidator.isValid(\"file:///C:/path/to/dir/\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator411",
  "sourceCode" : "@Test\r\nvoid testValidator411() {\r\n    final UrlValidator urlValidator = new UrlValidator();\r\n    assertTrue(urlValidator.isValid(\"http://example.rocks:/\"));\r\n    assertTrue(urlValidator.isValid(\"http://example.rocks:0/\"));\r\n    assertTrue(urlValidator.isValid(\"http://example.rocks:65535/\"));\r\n    assertFalse(urlValidator.isValid(\"http://example.rocks:65536/\"));\r\n    assertFalse(urlValidator.isValid(\"http://example.rocks:100000/\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator420",
  "sourceCode" : "@Test\r\nvoid testValidator420() {\r\n    final UrlValidator validator = new UrlValidator();\r\n    assertFalse(validator.isValid(\"http://example.com/serach?address=Main Avenue\"));\r\n    assertTrue(validator.isValid(\"http://example.com/serach?address=Main%20Avenue\"));\r\n    assertTrue(validator.isValid(\"http://example.com/serach?address=Main+Avenue\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator452",
  "sourceCode" : "@Test\r\nvoid testValidator452() {\r\n    final UrlValidator urlValidator = new UrlValidator();\r\n    assertTrue(urlValidator.isValid(\"http://[::FFFF:129.144.52.38]:80/index.html\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator464",
  "sourceCode" : "@Test\r\nvoid testValidator464() {\r\n    final String[] schemes = { \"file\" };\r\n    final UrlValidator urlValidator = new UrlValidator(schemes);\r\n    final String fileNAK = \"file://bad ^ domain.com/label/test\";\r\n    assertFalse(urlValidator.isValid(fileNAK), fileNAK);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator467",
  "sourceCode" : "@Test\r\nvoid testValidator467() {\r\n    final UrlValidator validator = new UrlValidator(UrlValidator.ALLOW_2_SLASHES);\r\n    assertTrue(validator.isValid(\"https://example.com/some_path/path/\"));\r\n    assertTrue(validator.isValid(\"https://example.com//somepath/path/\"));\r\n    assertTrue(validator.isValid(\"https://example.com//some_path/path/\"));\r\n    // VALIDATOR-429\r\n    assertTrue(validator.isValid(\"http://example.com//_test\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator473Part1",
  "sourceCode" : "@Test\r\nvoid testValidator473Part1() {\r\n    // reject null DomainValidator\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new UrlValidator(new String[] {}, null, 0L, null));\r\n    assertEquals(\"DomainValidator must not be null\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator473Part2",
  "sourceCode" : "@Test\r\nvoid testValidator473Part2() {\r\n    // reject null DomainValidator with mismatched allowLocal\r\n    final List<DomainValidator.Item> items = new ArrayList<>();\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new UrlValidator(new String[] {}, null, 0L, DomainValidator.getInstance(true, items)));\r\n    assertEquals(\"DomainValidator disagrees with ALLOW_LOCAL_URLS setting\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\routines\\UrlValidatorTest.java",
  "methodName" : "testValidator473Part3",
  "sourceCode" : "@Test\r\nvoid testValidator473Part3() {\r\n    // reject null DomainValidator with mismatched allowLocal\r\n    final List<DomainValidator.Item> items = new ArrayList<>();\r\n    final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new UrlValidator(new String[] {}, null, UrlValidator.ALLOW_LOCAL_URLS, DomainValidator.getInstance(false, items)));\r\n    assertEquals(\"DomainValidator disagrees with ALLOW_LOCAL_URLS setting\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ShortTest.java",
  "methodName" : "testShortBeyondMax",
  "sourceCode" : "/**\r\n * Tests the short validation failure.\r\n */\r\n@Test\r\nvoid testShortBeyondMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Short.MAX_VALUE + \"1\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ShortTest.java",
  "methodName" : "testShortBeyondMin",
  "sourceCode" : "/**\r\n * Tests the short validation failure.\r\n */\r\n@Test\r\nvoid testShortBeyondMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Short.MIN_VALUE + \"1\");\r\n    valueTest(info, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ShortTest.java",
  "methodName" : "testShortMax",
  "sourceCode" : "/**\r\n * Tests the short validation.\r\n */\r\n@Test\r\nvoid testShortMax() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Short.toString(Short.MAX_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ShortTest.java",
  "methodName" : "testShortMin",
  "sourceCode" : "/**\r\n * Tests the short validation.\r\n */\r\n@Test\r\nvoid testShortMin() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final ValueBean info = new ValueBean();\r\n    info.setValue(Short.toString(Short.MIN_VALUE));\r\n    valueTest(info, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\UrlTest.java",
  "methodName" : "testIsValid",
  "sourceCode" : "@Test\r\nvoid testIsValid() {\r\n    testIsValid(testUrlParts, UrlValidator.ALLOW_ALL_SCHEMES);\r\n    setUp();\r\n    final int options = UrlValidator.ALLOW_2_SLASHES + UrlValidator.ALLOW_ALL_SCHEMES + UrlValidator.NO_FRAGMENTS;\r\n    testIsValid(testUrlPartsOptions, options);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\UrlTest.java",
  "methodName" : "testIsValidScheme",
  "sourceCode" : "@Test\r\nvoid testIsValidScheme() {\r\n    if (printStatus) {\r\n        System.out.print(\"\\n testIsValidScheme() \");\r\n    }\r\n    final String[] schemes = { \"http\", \"gopher\" };\r\n    // UrlValidator urlVal = new UrlValidator(schemes,false,false,false);\r\n    final UrlValidator urlVal = new UrlValidator(schemes, 0);\r\n    for (final ResultPair testPair : testScheme) {\r\n        final boolean result = urlVal.isValidScheme(testPair.item);\r\n        assertEquals(testPair.valid, result, testPair.item);\r\n        if (printStatus) {\r\n            if (result == testPair.valid) {\r\n                System.out.print('.');\r\n            } else {\r\n                System.out.print('X');\r\n            }\r\n        }\r\n    }\r\n    if (printStatus) {\r\n        System.out.println();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\UrlTest.java",
  "methodName" : "testValidateUrl",
  "sourceCode" : "@Test\r\nvoid testValidateUrl() {\r\n    assertTrue(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\UrlTest.java",
  "methodName" : "testValidator202",
  "sourceCode" : "@Test\r\nvoid testValidator202() {\r\n    final String[] schemes = { \"http\", \"https\" };\r\n    final UrlValidator urlValidator = new UrlValidator(schemes, UrlValidator.NO_FRAGMENTS);\r\n    urlValidator.isValid(\"http://www.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.log\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\UrlTest.java",
  "methodName" : "testValidator204",
  "sourceCode" : "@Test\r\nvoid testValidator204() {\r\n    final String[] schemes = { \"http\", \"https\" };\r\n    final UrlValidator urlValidator = new UrlValidator(schemes);\r\n    assertTrue(urlValidator.isValid(\"http://tech.yahoo.com/rc/desktops/102;_ylt=Ao8yevQHlZ4On0O3ZJGXLEQFLZA5\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test\r\nvoid testClear() {\r\n    final Flags f = new Flags(98432);\r\n    f.clear();\r\n    assertEquals(0, f.getFlags());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testClone",
  "sourceCode" : "/**\r\n * Test for Object clone()\r\n */\r\n@Test\r\nvoid testClone() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "/**\r\n * Test for boolean equals(Object)\r\n */\r\n@Test\r\nvoid testEqualsObject() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testGetFlags",
  "sourceCode" : "@Test\r\nvoid testGetFlags() {\r\n    final Flags f = new Flags(45);\r\n    assertEquals(f.getFlags(), 45);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final Flags f = new Flags(45);\r\n    assertEquals(f.hashCode(), 45);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testIsOnIsFalseWhenNotAllFlagsInArgumentAreOn",
  "sourceCode" : "@Test\r\nvoid testIsOnIsFalseWhenNotAllFlagsInArgumentAreOn() {\r\n    final Flags first = new Flags(1);\r\n    final long firstAndSecond = 3;\r\n    assertFalse(first.isOn(firstAndSecond));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testIsOnIsTrueWhenHighOrderBitIsSetAndQueried",
  "sourceCode" : "@Test\r\nvoid testIsOnIsTrueWhenHighOrderBitIsSetAndQueried() {\r\n    final Flags allOn = new Flags(~0);\r\n    final long highOrderBit = 0x8000000000000000L;\r\n    assertTrue(allOn.isOn(highOrderBit));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testIsOnOff",
  "sourceCode" : "@Test\r\nvoid testIsOnOff() {\r\n    final Flags f = new Flags();\r\n    f.turnOn(LONG_FLAG);\r\n    f.turnOn(INT_FLAG);\r\n    assertTrue(f.isOn(LONG_FLAG));\r\n    assertFalse(f.isOff(LONG_FLAG));\r\n    assertTrue(f.isOn(INT_FLAG));\r\n    assertFalse(f.isOff(INT_FLAG));\r\n    assertTrue(f.isOff(LONG_FLAG_2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Test for String toString()\r\n */\r\n@Test\r\nvoid testToString() {\r\n    final Flags f = new Flags();\r\n    String s = f.toString();\r\n    assertEquals(64, s.length());\r\n    f.turnOn(INT_FLAG);\r\n    s = f.toString();\r\n    assertEquals(64, s.length());\r\n    assertEquals(\"0000000000000000000000000000000000000000000000000000000000000100\", s);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testTurnOff",
  "sourceCode" : "@Test\r\nvoid testTurnOff() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testTurnOffAll",
  "sourceCode" : "@Test\r\nvoid testTurnOffAll() {\r\n    final Flags f = new Flags(98432);\r\n    f.turnOffAll();\r\n    assertEquals(0, f.getFlags());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testTurnOnAll",
  "sourceCode" : "@Test\r\nvoid testTurnOnAll() {\r\n    final Flags f = new Flags();\r\n    f.turnOnAll();\r\n    assertEquals(~0, f.getFlags());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\FlagsTest.java",
  "methodName" : "testTurnOnOff",
  "sourceCode" : "@Test\r\nvoid testTurnOnOff() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\util\\ValidatorUtilsTest.java",
  "methodName" : "testCopyFastHashMap",
  "sourceCode" : "@Test\r\nvoid testCopyFastHashMap() {\r\n    final FastHashMap original = new FastHashMap();\r\n    original.put(\"key1\", \"value1\");\r\n    original.put(\"key2\", \"value2\");\r\n    original.put(\"key3\", \"value3\");\r\n    original.setFast(true);\r\n    final FastHashMap copy = ValidatorUtils.copyFastHashMap(original);\r\n    assertEquals(original, copy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ValidatorResourcesTest.java",
  "methodName" : "testNullInputStream",
  "sourceCode" : "/**\r\n * Test null Input Stream for Validator Resources.\r\n */\r\n@Test\r\nvoid testNullInputStream() {\r\n    assertThrows(IllegalArgumentException.class, () -> new ValidatorResources((InputStream) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ValidatorResultsTest.java",
  "methodName" : "testAllValid",
  "sourceCode" : "/**\r\n * Test all validations ran and passed.\r\n */\r\n@Test\r\nvoid testAllValid() throws ValidatorException {\r\n    // Create bean to run test on.\r\n    final NameBean bean = createNameBean();\r\n    // Validate.\r\n    final ValidatorResults results = validate(bean);\r\n    // Check results\r\n    checkValidatorResult(results, FIRST_NAME_FIELD, \"required\", true);\r\n    checkValidatorResult(results, MIDDLE_NAME_FIELD, \"required\", true);\r\n    checkValidatorResult(results, MIDDLE_NAME_FIELD, \"int\", true);\r\n    checkValidatorResult(results, MIDDLE_NAME_FIELD, \"positive\", true);\r\n    checkValidatorResult(results, LAST_NAME_FIELD, \"required\", true);\r\n    checkValidatorResult(results, LAST_NAME_FIELD, \"int\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ValidatorResultsTest.java",
  "methodName" : "testErrors",
  "sourceCode" : "/**\r\n * Test some validations failed and some didn't run.\r\n */\r\n@Test\r\nvoid testErrors() throws ValidatorException {\r\n    middleName = \"XXX\";\r\n    lastName = null;\r\n    // Create bean to run test on.\r\n    final NameBean bean = createNameBean();\r\n    // Validate.\r\n    final ValidatorResults results = validate(bean);\r\n    // Check results\r\n    checkValidatorResult(results, FIRST_NAME_FIELD, \"required\", true);\r\n    checkValidatorResult(results, MIDDLE_NAME_FIELD, \"required\", true);\r\n    checkValidatorResult(results, MIDDLE_NAME_FIELD, \"int\", false);\r\n    checkNotRun(results, MIDDLE_NAME_FIELD, \"positive\");\r\n    checkValidatorResult(results, LAST_NAME_FIELD, \"required\", false);\r\n    checkNotRun(results, LAST_NAME_FIELD, \"int\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ValidatorTest.java",
  "methodName" : "testManualBoolean",
  "sourceCode" : "/**\r\n * Verify that one value generates an error and the other passes. The validation method being tested returns a {@code boolean} value.\r\n */\r\n@Test\r\nvoid testManualBoolean() {\r\n    final ValidatorResources resources = new ValidatorResources();\r\n    final ValidatorAction va = new ValidatorAction();\r\n    va.setName(\"capLetter\");\r\n    va.setClassName(\"org.apache.commons.validator.ValidatorTest\");\r\n    va.setMethod(\"isCapLetter\");\r\n    va.setMethodParams(\"java.lang.Object,org.apache.commons.validator.Field,java.util.List\");\r\n    final FormSet fs = new FormSet();\r\n    final Form form = new Form();\r\n    form.setName(\"testForm\");\r\n    final Field field = new Field();\r\n    field.setProperty(\"letter\");\r\n    field.setDepends(\"capLetter\");\r\n    form.addField(field);\r\n    fs.addForm(form);\r\n    resources.addValidatorAction(va);\r\n    resources.addFormSet(fs);\r\n    resources.process();\r\n    final List<?> l = new ArrayList<>();\r\n    final TestBean bean = new TestBean();\r\n    bean.setLetter(\"A\");\r\n    final Validator validator = new Validator(resources, \"testForm\");\r\n    validator.setParameter(Validator.BEAN_PARAM, bean);\r\n    validator.setParameter(\"java.util.List\", l);\r\n    try {\r\n        validator.validate();\r\n    } catch (final Exception e) {\r\n        fail(\"An exception was thrown while calling Validator.validate()\");\r\n    }\r\n    assertEquals(0, l.size(), \"Validation of the letter 'A'.\");\r\n    l.clear();\r\n    bean.setLetter(\"AA\");\r\n    try {\r\n        validator.validate();\r\n    } catch (final Exception e) {\r\n        fail(\"An exception was thrown while calling Validator.validate()\");\r\n    }\r\n    assertEquals(1, l.size(), \"Validation of the letter 'AA'.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ValidatorTest.java",
  "methodName" : "testManualBooleanDeprecated",
  "sourceCode" : "/**\r\n * Verify that one value generates an error and the other passes. The validation method being tested returns a {@code boolean} value.\r\n */\r\n@Test\r\nvoid testManualBooleanDeprecated() {\r\n    final ValidatorResources resources = new ValidatorResources();\r\n    final ValidatorAction va = new ValidatorAction();\r\n    va.setName(\"capLetter\");\r\n    va.setClassname(\"org.apache.commons.validator.ValidatorTest\");\r\n    va.setMethod(\"isCapLetter\");\r\n    va.setMethodParams(\"java.lang.Object,org.apache.commons.validator.Field,java.util.List\");\r\n    final FormSet fs = new FormSet();\r\n    final Form form = new Form();\r\n    form.setName(\"testForm\");\r\n    final Field field = new Field();\r\n    field.setProperty(\"letter\");\r\n    field.setDepends(\"capLetter\");\r\n    form.addField(field);\r\n    fs.addForm(form);\r\n    resources.addValidatorAction(va);\r\n    resources.addFormSet(fs);\r\n    resources.process();\r\n    final List<?> l = new ArrayList<>();\r\n    final TestBean bean = new TestBean();\r\n    bean.setLetter(\"A\");\r\n    final Validator validator = new Validator(resources, \"testForm\");\r\n    validator.setParameter(Validator.BEAN_PARAM, bean);\r\n    validator.setParameter(\"java.util.List\", l);\r\n    try {\r\n        validator.validate();\r\n    } catch (final Exception e) {\r\n        fail(\"An exception was thrown while calling Validator.validate()\");\r\n    }\r\n    assertEquals(0, l.size(), \"Validation of the letter 'A'.\");\r\n    l.clear();\r\n    bean.setLetter(\"AA\");\r\n    try {\r\n        validator.validate();\r\n    } catch (final Exception e) {\r\n        fail(\"An exception was thrown while calling Validator.validate()\");\r\n    }\r\n    assertEquals(1, l.size(), \"Validation of the letter 'AA'.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ValidatorTest.java",
  "methodName" : "testManualObject",
  "sourceCode" : "/**\r\n * Verify that one value generates an error and the other passes. The validation method being tested returns an object ({@code null} will be considered\r\n * an error).\r\n */\r\n@Test\r\nvoid testManualObject() {\r\n    // property name of the method we are validating\r\n    final String property = \"date\";\r\n    // name of ValidatorAction\r\n    final String action = \"date\";\r\n    final ValidatorResources resources = setupDateResources(property, action);\r\n    final TestBean bean = new TestBean();\r\n    bean.setDate(\"2/3/1999\");\r\n    final Validator validator = new Validator(resources, \"testForm\");\r\n    validator.setParameter(Validator.BEAN_PARAM, bean);\r\n    try {\r\n        final ValidatorResults results = validator.validate();\r\n        assertNotNull(results, \"Results are null.\");\r\n        final ValidatorResult result = results.getValidatorResult(property);\r\n        assertNotNull(results, \"Results are null.\");\r\n        assertTrue(result.containsAction(action), \"ValidatorResult does not contain '\" + action + \"' validator result.\");\r\n        assertTrue(result.isValid(action), \"Validation of the date formatting has failed.\");\r\n    } catch (final Exception e) {\r\n        fail(\"An exception was thrown while calling Validator.validate()\");\r\n    }\r\n    bean.setDate(\"2/30/1999\");\r\n    try {\r\n        final ValidatorResults results = validator.validate();\r\n        assertNotNull(results, \"Results are null.\");\r\n        final ValidatorResult result = results.getValidatorResult(property);\r\n        assertNotNull(results, \"Results are null.\");\r\n        assertTrue(result.containsAction(action), \"ValidatorResult does not contain '\" + action + \"' validator result.\");\r\n        assertFalse(result.isValid(action), \"Validation of the date formatting has passed when it should have failed.\");\r\n    } catch (final Exception e) {\r\n        fail(\"An exception was thrown while calling Validator.validate()\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ValidatorTest.java",
  "methodName" : "testOnlyReturnErrors",
  "sourceCode" : "@Test\r\nvoid testOnlyReturnErrors() throws ValidatorException {\r\n    // property name of the method we are validating\r\n    final String property = \"date\";\r\n    // name of ValidatorAction\r\n    final String action = \"date\";\r\n    final ValidatorResources resources = setupDateResources(property, action);\r\n    final TestBean bean = new TestBean();\r\n    bean.setDate(\"2/3/1999\");\r\n    final Validator validator = new Validator(resources, \"testForm\");\r\n    validator.setParameter(Validator.BEAN_PARAM, bean);\r\n    ValidatorResults results = validator.validate();\r\n    assertNotNull(results);\r\n    // Field passed and should be in results\r\n    assertTrue(results.getPropertyNames().contains(property));\r\n    // Field passed but should not be in results\r\n    validator.setOnlyReturnErrors(true);\r\n    results = validator.validate();\r\n    assertFalse(results.getPropertyNames().contains(property));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\ValidatorTest.java",
  "methodName" : "testOnlyValidateField",
  "sourceCode" : "@Test\r\nvoid testOnlyValidateField() throws ValidatorException {\r\n    // property name of the method we are validating\r\n    final String property = \"date\";\r\n    // name of ValidatorAction\r\n    final String action = \"date\";\r\n    final ValidatorResources resources = setupDateResources(property, action);\r\n    final TestBean bean = new TestBean();\r\n    bean.setDate(\"2/3/1999\");\r\n    final Validator validator = new Validator(resources, \"testForm\", property);\r\n    validator.setParameter(Validator.BEAN_PARAM, bean);\r\n    final ValidatorResults results = validator.validate();\r\n    assertNotNull(results);\r\n    // Field passed and should be in results\r\n    assertTrue(results.getPropertyNames().contains(property));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-validator\\src\\test\\java\\org\\apache\\commons\\validator\\VarTest.java",
  "methodName" : "testVars",
  "sourceCode" : "/**\r\n * With nothing provided, we should fail both because both are required.\r\n */\r\n@Test\r\nvoid testVars() {\r\n    final Form form = resources.getForm(Locale.getDefault(), FORM_KEY);\r\n    // Get field 1\r\n    final Field field1 = form.getField(\"field-1\");\r\n    assertNotNull(field1, \"field-1 is null.\");\r\n    assertEquals(\"field-1\", field1.getProperty(), \"field-1 property is wrong\");\r\n    // Get var-1-1\r\n    final Var var11 = field1.getVar(\"var-1-1\");\r\n    assertNotNull(var11, \"var-1-1 is null.\");\r\n    assertEquals(\"var-1-1\", var11.getName(), \"var-1-1 name is wrong\");\r\n    assertEquals(\"value-1-1\", var11.getValue(), \"var-1-1 value is wrong\");\r\n    assertEquals(\"jstype-1-1\", var11.getJsType(), \"var-1-1 jstype is wrong\");\r\n    assertFalse(var11.isResource(), \"var-1-1 resource is true\");\r\n    assertNull(var11.getBundle(), \"var-1-1 bundle is not null.\");\r\n    // Get field 2\r\n    final Field field2 = form.getField(\"field-2\");\r\n    assertNotNull(field2, \"field-2 is null.\");\r\n    assertEquals(\"field-2\", field2.getProperty(), \"field-2 property is wrong\");\r\n    // Get var-2-1\r\n    final Var var21 = field2.getVar(\"var-2-1\");\r\n    assertNotNull(var21, \"var-2-1 is null.\");\r\n    assertEquals(\"var-2-1\", var21.getName(), \"var-2-1 name is wrong\");\r\n    assertEquals(\"value-2-1\", var21.getValue(), \"var-2-1 value is wrong\");\r\n    assertEquals(\"jstype-2-1\", var21.getJsType(), \"var-2-1 jstype is wrong\");\r\n    assertTrue(var21.isResource(), \"var-2-1 resource is false\");\r\n    assertEquals(\"bundle-2-1\", var21.getBundle(), \"var-2-1 bundle is wrong\");\r\n    // Get var-2-2\r\n    final Var var22 = field2.getVar(\"var-2-2\");\r\n    assertNotNull(var22, \"var-2-2 is null.\");\r\n    assertEquals(\"var-2-2\", var22.getName(), \"var-2-2 name is wrong\");\r\n    assertEquals(\"value-2-2\", var22.getValue(), \"var-2-2 value is wrong\");\r\n    assertNull(var22.getJsType(), \"var-2-2 jstype is not null\");\r\n    assertFalse(var22.isResource(), \"var-2-2 resource is true\");\r\n    assertEquals(\"bundle-2-2\", var22.getBundle(), \"var-2-2 bundle is wrong\");\r\n}",
  "annotations" : [ "Test" ]
} ]