[ {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\auth\\StaticUserAuthenticatorTest.java",
  "methodName" : "testAuthenticationRequest",
  "sourceCode" : "@Test\r\npublic void testAuthenticationRequest() {\r\n    final UserAuthenticator userAuthenticator = new StaticUserAuthenticator(\"DOMAIN\", \"USER\", \"PWD\");\r\n    UserAuthenticationData authenticationData = userAuthenticator.requestAuthentication(ArrayUtils.toArray(UserAuthenticationData.DOMAIN));\r\n    assertArrayEquals(\"DOMAIN\".toCharArray(), authenticationData.getData(UserAuthenticationData.DOMAIN));\r\n    assertNull(authenticationData.getData(UserAuthenticationData.USERNAME));\r\n    assertNull(authenticationData.getData(UserAuthenticationData.PASSWORD));\r\n    authenticationData = userAuthenticator.requestAuthentication(ArrayUtils.toArray(UserAuthenticationData.USERNAME, UserAuthenticationData.PASSWORD));\r\n    assertNull(authenticationData.getData(UserAuthenticationData.DOMAIN));\r\n    assertArrayEquals(\"USER\".toCharArray(), authenticationData.getData(UserAuthenticationData.USERNAME));\r\n    assertArrayEquals(\"PWD\".toCharArray(), authenticationData.getData(UserAuthenticationData.PASSWORD));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\auth\\StaticUserAuthenticatorTest.java",
  "methodName" : "testEquality",
  "sourceCode" : "@Test\r\npublic void testEquality() {\r\n    final UserAuthenticator userAuthenticator = new StaticUserAuthenticator(\"DOMAIN\", \"USER\", \"PWD\");\r\n    assertEquals(new StaticUserAuthenticator(\"DOMAIN\", \"USER\", \"PWD\"), userAuthenticator);\r\n    assertNotEquals(new StaticUserAuthenticator(\"DOMAIN\", \"USER\", null), userAuthenticator);\r\n    assertNotEquals(new StaticUserAuthenticator(\"DOMAIN\", null, \"PWD\"), userAuthenticator);\r\n    assertNotEquals(new StaticUserAuthenticator(null, \"USER\", \"PWD\"), userAuthenticator);\r\n    assertEquals(new StaticUserAuthenticator(\"DOMAIN\", \"USER\", \"PWD\").hashCode(), userAuthenticator.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\AbstractFilesCacheTestsBase.java",
  "methodName" : "testBasicCacheOps",
  "sourceCode" : "/**\r\n * Basic Cache operations, work for all caches (besides {@link NullFilesCacheTests#testBasicCacheOps() NullFilesCache}).\r\n */\r\n@Test\r\npublic void testBasicCacheOps() throws Exception {\r\n    final FilesCache cache = getManager().getFilesCache();\r\n    final FileObject fo = getWriteFolder().resolveFile(\"dir1\");\r\n    final FileName fn = fo.getName();\r\n    final FileSystem fs = fo.getFileSystem();\r\n    cache.clear(fs);\r\n    assertNull(cache.getFile(fs, fn));\r\n    cache.putFile(fo);\r\n    assertSame(fo, cache.getFile(fs, fn));\r\n    assertFalse(cache.putFileIfAbsent(fo));\r\n    cache.clear(fs);\r\n    assertNull(cache.getFile(fs, fn));\r\n    assertTrue(cache.putFileIfAbsent(fo));\r\n    cache.removeFile(fs, fn);\r\n    assertNull(cache.getFile(fs, fn));\r\n    assertTrue(cache.putFileIfAbsent(fo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\AbstractFilesCacheTestsBase.java",
  "methodName" : "testClearFiles",
  "sourceCode" : "/**\r\n * Will test if the cache is cleared and if it is still usable afterwards. It will actually ensure the test is\r\n * hitting the cache.\r\n */\r\n@Test\r\npublic void testClearFiles() throws Exception {\r\n    final FilesCache cache = getManager().getFilesCache();\r\n    final FileObject fo1 = getWriteFolder().resolveFile(\"dir1\");\r\n    // clean the cache for this file system\r\n    cache.clear(fo1.getFileSystem());\r\n    // make sure an empty cache clean does not fail\r\n    cache.clear(fo1.getFileSystem());\r\n    final FileObject fo2 = getWriteFolder().resolveFile(\"dir1\");\r\n    assertNotSame(\"Objects after cache clear should be different\", fo1, fo2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\DefaultFilesCacheTests.java",
  "methodName" : "testFilesCache",
  "sourceCode" : "@Test\r\npublic void testFilesCache() throws Exception {\r\n    final FileObject scratchFolder = getWriteFolder();\r\n    final FileObject dir1 = scratchFolder.resolveFile(\"dir1\");\r\n    final FileObject dir1Bis = scratchFolder.resolveFile(\"dir1\");\r\n    assertSame(dir1, dir1Bis);\r\n    // now the same test, unreferenced (compare only hashCode)\r\n    final int hc1 = getFileHashCode();\r\n    final int hc2 = getFileHashCode();\r\n    assertEquals(\"Hashcode of file changed, so most likely new instance\", hc1, hc2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\LRUFilesCacheTests.java",
  "methodName" : "testClass",
  "sourceCode" : "@Test\r\npublic void testClass() {\r\n    @SuppressWarnings(\"resource\")\r\n    final DefaultFileSystemManager manager = getManager();\r\n    Assertions.assertNotNull(manager, \"manager\");\r\n    final FilesCache filesCache = manager.getFilesCache();\r\n    assertTrue(Objects.toString(filesCache), filesCache instanceof LRUFilesCache);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\LRUFilesCacheTests.java",
  "methodName" : "testFilesCache",
  "sourceCode" : "@Test\r\npublic void testFilesCache() throws Exception {\r\n    final FileObject scratchFolder = getWriteFolder();\r\n    Assertions.assertNotNull(scratchFolder, \"scratchFolder\");\r\n    // releasable\r\n    final FileObject dir1 = scratchFolder.resolveFile(\"dir1\");\r\n    // avoid cache removal\r\n    final FileObject dir2 = scratchFolder.resolveFile(\"dir2\");\r\n    dir2.getContent();\r\n    // releasable\r\n    @SuppressWarnings(\"unused\")\r\n    final FileObject dir3 = scratchFolder.resolveFile(\"dir3\");\r\n    // releasable\r\n    @SuppressWarnings(\"unused\")\r\n    final FileObject dir4 = scratchFolder.resolveFile(\"dir4\");\r\n    // releasable\r\n    @SuppressWarnings(\"unused\")\r\n    final FileObject dir5 = scratchFolder.resolveFile(\"dir5\");\r\n    // releasable\r\n    @SuppressWarnings(\"unused\")\r\n    final FileObject dir6 = scratchFolder.resolveFile(\"dir6\");\r\n    // releasable\r\n    @SuppressWarnings(\"unused\")\r\n    final FileObject dir7 = scratchFolder.resolveFile(\"dir7\");\r\n    // releasable\r\n    @SuppressWarnings(\"unused\")\r\n    final FileObject dir8 = scratchFolder.resolveFile(\"dir8\");\r\n    // check if the cache still holds the right instance\r\n    final FileObject dir2Bis = scratchFolder.resolveFile(\"dir2\");\r\n    assertSame(dir2, dir2Bis);\r\n    // check if the cache still holds the right instance\r\n    final FileObject dir1Bis = scratchFolder.resolveFile(\"dir1\");\r\n    assertNotSame(dir1, dir1Bis);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\NullFilesCacheTests.java",
  "methodName" : "testBasicCacheOps",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testBasicCacheOps() throws Exception {\r\n    final DefaultFileSystemManager manager = getManager();\r\n    Assertions.assertNotNull(manager, \"This test should not have a null DefaultFileSystemManager\");\r\n    // the basic test looks different for a null cache:\r\n    final FilesCache cache = manager.getFilesCache();\r\n    final FileObject fo = getWriteFolder().resolveFile(\"dir1\");\r\n    final FileName fn = fo.getName();\r\n    final FileSystem fs = fo.getFileSystem();\r\n    cache.clear(fs);\r\n    assertNull(cache.getFile(fs, fn));\r\n    cache.putFile(fo);\r\n    assertNull(null, cache.getFile(fs, fn));\r\n    // hmmm?\r\n    assertFalse(cache.putFileIfAbsent(fo));\r\n    assertNull(null, cache.getFile(fs, fn));\r\n    cache.removeFile(fs, fn);\r\n    assertNull(cache.getFile(fs, fn));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\NullFilesCacheTests.java",
  "methodName" : "testClass",
  "sourceCode" : "@Test\r\npublic void testClass() {\r\n    final DefaultFileSystemManager manager = getManager();\r\n    Assertions.assertNotNull(manager, \"This test should not have a null DefaultFileSystemManager\");\r\n    assertTrue(manager.getFilesCache() instanceof NullFilesCache);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\NullFilesCacheTests.java",
  "methodName" : "testFilesCache",
  "sourceCode" : "@Test\r\npublic void testFilesCache() throws Exception {\r\n    final FileObject scratchFolder = getWriteFolder();\r\n    Assertions.assertNotNull(scratchFolder, \"This test should not have a null FileObject scratch folder\");\r\n    final FileObject dir1 = scratchFolder.resolveFile(\"dir1\");\r\n    final FileObject dir1_2 = scratchFolder.resolveFile(\"dir1\");\r\n    assertNotSame(\"Should always be new instance with NullCache\", dir1, dir1_2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\SoftRefFilesCacheTests.java",
  "methodName" : "testFilesCache",
  "sourceCode" : "@Test\r\npublic void testFilesCache() throws Exception {\r\n    final FileObject scratchFolder = getWriteFolder();\r\n    final FileObject dir1 = scratchFolder.resolveFile(\"dir1\");\r\n    final FileObject dir1_2 = scratchFolder.resolveFile(\"dir1\");\r\n    // since both are still referenced they are not purged\r\n    assertSame(dir1, dir1_2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\SoftRefFilesCacheTests.java",
  "methodName" : "testFilesCacheClass",
  "sourceCode" : "@Test\r\npublic void testFilesCacheClass() {\r\n    assertTrue(getManager().getFilesCache() instanceof SoftRefFilesCache);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\WeakRefFilesCacheTests.java",
  "methodName" : "testClass",
  "sourceCode" : "@Test\r\npublic void testClass() {\r\n    assertTrue(getManager().getFilesCache() instanceof WeakRefFilesCache);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\cache\\WeakRefFilesCacheTests.java",
  "methodName" : "testFilesCache",
  "sourceCode" : "@Test\r\npublic void testFilesCache() throws Exception {\r\n    final FileObject scratchFolder = getWriteFolder();\r\n    final FileObject dir1 = scratchFolder.resolveFile(\"dir1\");\r\n    final FileObject dir1_2 = scratchFolder.resolveFile(\"dir1\");\r\n    // since both are still referenced they are not purged\r\n    assertSame(dir1, dir1_2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testAllContent",
  "sourceCode" : "/**\r\n * Asserts that every expected file exists, and has the expected content.\r\n */\r\n@Test\r\npublic void testAllContent() throws Exception {\r\n    final FileInfo expectedFileInfo = buildExpectedStructure();\r\n    final FileObject actualFolder = getReadFolder();\r\n    assertSameContent(expectedFileInfo, actualFolder);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testAttributes",
  "sourceCode" : "/**\r\n * Tests attributes.\r\n */\r\n@Test\r\npublic void testAttributes() throws FileSystemException {\r\n    getReadFolder().getContent().getAttributes();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testByteArrayReadAll",
  "sourceCode" : "/**\r\n * Tests that input streams are cleaned up on file close.\r\n */\r\n@Test\r\npublic void testByteArrayReadAll() throws Exception {\r\n    // Get the test file\r\n    try (FileObject file = getReadFolder().resolveFile(\"file1.txt\")) {\r\n        assertEquals(FileType.FILE, file.getType());\r\n        assertTrue(file.isFile());\r\n        assertEquals(FILE1_CONTENT, new String(file.getContent().getByteArray()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testChildren",
  "sourceCode" : "/**\r\n * Tests that children cannot be listed for non-folders.\r\n */\r\n@Test\r\npublic void testChildren() throws FileSystemException {\r\n    // Check for file\r\n    FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertSame(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    try {\r\n        file.getChildren();\r\n        fail();\r\n    } catch (final FileSystemException e) {\r\n        assertSameMessage(\"vfs.provider/list-children-not-folder.error\", file, e);\r\n    }\r\n    // Should be able to get child by name\r\n    file = file.resolveFile(\"some-child\");\r\n    assertNotNull(file);\r\n    // Check for unknown file\r\n    file = getReadFolder().resolveFile(\"unknown-file\");\r\n    assertFalse(file.exists());\r\n    try {\r\n        file.getChildren();\r\n        fail();\r\n    } catch (final FileSystemException e) {\r\n        assertSameMessage(\"vfs.provider/list-children-not-folder.error\", file, e);\r\n    }\r\n    // Should be able to get child by name\r\n    final FileObject child = file.resolveFile(\"some-child\");\r\n    assertNotNull(child);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testContent",
  "sourceCode" : "/**\r\n * Tests content.\r\n */\r\n@Test\r\npublic void testContent() throws Exception {\r\n    // Test non-empty file\r\n    FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertSameContent(FILE1_CONTENT, file);\r\n    // Test empty file\r\n    file = getReadFolder().resolveFile(\"empty.txt\");\r\n    assertSameContent(\"\", file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testExists",
  "sourceCode" : "/**\r\n * Tests existence determination.\r\n */\r\n@Test\r\npublic void testExists() throws Exception {\r\n    // Test a file\r\n    FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertTrue(\"file exists\", file.exists());\r\n    assertNotSame(\"file exists\", file.getType(), FileType.IMAGINARY);\r\n    // Test a folder\r\n    file = getReadFolder().resolveFile(\"dir1\");\r\n    assertTrue(\"folder exists\", file.exists());\r\n    assertNotSame(\"folder exists\", file.getType(), FileType.IMAGINARY);\r\n    // Test an unknown file\r\n    file = getReadFolder().resolveFile(\"unknown-child\");\r\n    assertFalse(\"unknown file does not exist\", file.exists());\r\n    assertSame(\"unknown file does not exist\", file.getType(), FileType.IMAGINARY);\r\n    // Test an unknown file in an unknown folder\r\n    file = getReadFolder().resolveFile(\"unknown-folder/unknown-child\");\r\n    assertFalse(\"unknown file does not exist\", file.exists());\r\n    assertSame(\"unknown file does not exist\", file.getType(), FileType.IMAGINARY);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testGetStringCharset",
  "sourceCode" : "@Test\r\npublic void testGetStringCharset() throws Exception {\r\n    // Get the test file\r\n    try (FileObject file = getReadFolder().resolveFile(\"file1.txt\")) {\r\n        assertEquals(FileType.FILE, file.getType());\r\n        assertTrue(file.isFile());\r\n        assertEquals(FILE1_CONTENT, file.getContent().getString(StandardCharsets.UTF_8));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testGetStringString",
  "sourceCode" : "@Test\r\npublic void testGetStringString() throws Exception {\r\n    // Get the test file\r\n    try (FileObject file = getReadFolder().resolveFile(\"file1.txt\")) {\r\n        assertEquals(FileType.FILE, file.getType());\r\n        assertTrue(file.isFile());\r\n        assertEquals(FILE1_CONTENT, file.getContent().getString(StandardCharsets.UTF_8.name()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testInputStreamMultipleCleanup",
  "sourceCode" : "/**\r\n * Tests that input streams are cleaned up on file close.\r\n */\r\n@Test\r\npublic void testInputStreamMultipleCleanup() throws Exception {\r\n    // Get the test file\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertEquals(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    // Open some input streams\r\n    final InputStream instr1 = file.getContent().getInputStream();\r\n    assertEquals(instr1.read(), FILE1_CONTENT.charAt(0));\r\n    final InputStream instr2 = file.getContent().getInputStream();\r\n    assertEquals(instr2.read(), FILE1_CONTENT.charAt(0));\r\n    // Close the file\r\n    file.close();\r\n    // Check\r\n    assertEquals(instr1.read(), -1);\r\n    assertEquals(instr2.read(), -1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testInputStreamReadAll",
  "sourceCode" : "/**\r\n * Tests that input streams are cleaned up on file close.\r\n */\r\n@Test\r\npublic void testInputStreamReadAll() throws Exception {\r\n    // Get the test file\r\n    try (FileObject file = getReadFolder().resolveFile(\"file1.txt\")) {\r\n        assertEquals(FileType.FILE, file.getType());\r\n        assertTrue(file.isFile());\r\n        final ByteArrayOutputStream output = new ByteArrayOutputStream();\r\n        file.getContent().write(output);\r\n        assertEquals(FILE1_CONTENT, new String(output.toByteArray()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testInputStreamSingleCleanup",
  "sourceCode" : "/**\r\n * Tests that input streams are cleaned up on file close.\r\n */\r\n@Test\r\npublic void testInputStreamSingleCleanup() throws Exception {\r\n    // Get the test file\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertEquals(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    // Open some input streams\r\n    final InputStream instr1 = file.getContent().getInputStream();\r\n    assertEquals(instr1.read(), FILE1_CONTENT.charAt(0));\r\n    // Close the file\r\n    file.close();\r\n    // Check\r\n    assertEquals(instr1.read(), -1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testParent",
  "sourceCode" : "/**\r\n * Tests parent identity.\r\n */\r\n@Test\r\npublic void testParent() throws FileSystemException {\r\n    // Test when both exist\r\n    FileObject folder = getReadFolder().resolveFile(\"dir1\");\r\n    FileObject child = folder.resolveFile(\"file3.txt\");\r\n    assertTrue(\"folder exists\", folder.exists());\r\n    assertTrue(\"child exists\", child.exists());\r\n    assertSame(folder, child.getParent());\r\n    // Test when file does not exist\r\n    child = folder.resolveFile(\"unknown-file\");\r\n    assertTrue(\"folder exists\", folder.exists());\r\n    assertFalse(\"child does not exist\", child.exists());\r\n    assertSame(folder, child.getParent());\r\n    // Test when neither exists\r\n    folder = getReadFolder().resolveFile(\"unknown-folder\");\r\n    child = folder.resolveFile(\"unknown-file\");\r\n    assertFalse(\"folder does not exist\", folder.exists());\r\n    assertFalse(\"child does not exist\", child.exists());\r\n    assertSame(folder, child.getParent());\r\n    // Test the parent of the root of the file system\r\n    // TODO - refactor out test cases for layered vs originating fs\r\n    final FileSystem fileSystem = getFileSystem();\r\n    final FileObject root = fileSystem.getRoot();\r\n    if (fileSystem.getParentLayer() == null) {\r\n        // No parent layer, so parent should be null\r\n        assertNull(\"root has null parent\", root.getParent());\r\n    } else {\r\n        // Parent should be parent of parent layer.\r\n        assertSame(fileSystem.getParentLayer().getParent(), root.getParent());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testReadMultipleConcurrent",
  "sourceCode" : "/**\r\n * Tests concurrent reads on different files works.\r\n */\r\n@Test\r\npublic void testReadMultipleConcurrent() throws Exception {\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertTrue(file.exists());\r\n    final FileObject emptyFile = getReadFolder().resolveFile(\"empty.txt\");\r\n    assertTrue(emptyFile.exists());\r\n    // Start reading from the file\r\n    try (InputStream instr = file.getContent().getInputStream()) {\r\n        // Try to read from other file\r\n        assertSameContent(\"\", emptyFile);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testReadSingleConcurrent",
  "sourceCode" : "/**\r\n * Tests concurrent reads on a file.\r\n */\r\n@Test\r\npublic void testReadSingleConcurrent() throws Exception {\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertTrue(file.exists());\r\n    // Start reading from the file\r\n    try (InputStream instr = file.getContent().getInputStream()) {\r\n        // Start reading again\r\n        file.getContent().getInputStream().close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testReadSingleSequential",
  "sourceCode" : "/**\r\n * Tests concurrent reads on a file.\r\n */\r\n@Test\r\npublic void testReadSingleSequential() throws Exception {\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertTrue(file.exists());\r\n    file.getContent().getInputStream().close();\r\n    file.getContent().getInputStream().close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testReuse",
  "sourceCode" : "/**\r\n * Tests that content and file objects are usable after being closed.\r\n */\r\n@Test\r\npublic void testReuse() throws Exception {\r\n    // Get the test file\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertEquals(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    // Get the file content\r\n    assertSameContent(FILE1_CONTENT, file);\r\n    // Read the content again\r\n    assertSameContent(FILE1_CONTENT, file);\r\n    // Close the content + file\r\n    file.getContent().close();\r\n    file.close();\r\n    // Read the content again\r\n    assertSameContent(FILE1_CONTENT, file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testRootAPI",
  "sourceCode" : "/**\r\n * Tests root of file system exists.\r\n */\r\n@Test\r\npublic void testRootAPI() throws FileSystemException {\r\n    if (!getProviderConfig().isFileSystemRootAccessible()) {\r\n        return;\r\n    }\r\n    testRoot(getFileSystem().getRoot());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testRootURI",
  "sourceCode" : "/**\r\n * Tests root of file system exists.\r\n */\r\n@Test\r\npublic void testRootURI() throws FileSystemException {\r\n    if (!getProviderConfig().isFileSystemRootAccessible()) {\r\n        return;\r\n    }\r\n    final FileSystem fileSystem = getFileSystem();\r\n    final String uri = fileSystem.getRootURI();\r\n    testRoot(getManager().resolveFile(uri, fileSystem.getFileSystemOptions()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ContentTests.java",
  "methodName" : "testUnknownContent",
  "sourceCode" : "/**\r\n * Tests that unknown files have no content.\r\n */\r\n@Test\r\npublic void testUnknownContent() throws Exception {\r\n    // Try getting the content of an unknown file\r\n    final FileObject unknownFile = getReadFolder().resolveFile(\"unknown-file\");\r\n    final FileContent content = unknownFile.getContent();\r\n    try {\r\n        content.getInputStream();\r\n        fail();\r\n    } catch (final FileSystemException e) {\r\n        assertSameMessage(\"vfs.provider/read-not-file.error\", unknownFile, e);\r\n    }\r\n    try {\r\n        content.getSize();\r\n        fail();\r\n    } catch (final FileSystemException e) {\r\n        assertSameMessage(\"vfs.provider/get-size-not-file.error\", unknownFile, e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileChangeEventTest.java",
  "methodName" : "testFileObject",
  "sourceCode" : "@Test\r\npublic void testFileObject() throws FileSystemException {\r\n    try (FileObject baseFile = VFS.getManager().toFileObject(new File(\".\"))) {\r\n        assertNotNull(baseFile);\r\n        final FileChangeEvent fileChangeEvent = new FileChangeEvent(baseFile);\r\n        assertEquals(fileChangeEvent.getFile(), fileChangeEvent.getFileObject());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileExtensionSelectorTest.java",
  "methodName" : "testEmpty",
  "sourceCode" : "/**\r\n * Tests an empty selector.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testEmpty() throws Exception {\r\n    final FileSelector selector = new FileExtensionSelector();\r\n    final FileObject[] foList = baseFolder.findFiles(selector);\r\n    assertEquals(0, foList.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileExtensionSelectorTest.java",
  "methodName" : "testManyExtensions",
  "sourceCode" : "/**\r\n * Tests many extensions at once.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testManyExtensions() throws Exception {\r\n    final FileObject[] foArray = baseFolder.findFiles(Selectors.SELECT_FILES);\r\n    assertTrue(foArray.length > 0);\r\n    // gather file extensions.\r\n    final Set<String> extensionSet = new HashSet<>();\r\n    for (final FileObject fo : foArray) {\r\n        extensionSet.add(fo.getName().getExtension());\r\n    }\r\n    final String message = String.format(\"Extensions: %s; files: %s\", extensionSet.toString(), Arrays.asList(foArray).toString());\r\n    assertFalse(extensionSet.isEmpty(), message);\r\n    assertEquals(EXTENSION_COUNT, extensionSet.size(), message);\r\n    // check all unique extensions\r\n    final FileSelector selector = new FileExtensionSelector(extensionSet);\r\n    final FileObject[] list = baseFolder.findFiles(selector);\r\n    assertEquals(FILE_COUNT, list.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileExtensionSelectorTest.java",
  "methodName" : "testNullCollection",
  "sourceCode" : "/**\r\n * Tests a null selector.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testNullCollection() throws Exception {\r\n    final FileSelector selector0 = new FileExtensionSelector((Collection<String>) null);\r\n    final FileObject[] foList = baseFolder.findFiles(selector0);\r\n    assertEquals(0, foList.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileExtensionSelectorTest.java",
  "methodName" : "testNullString",
  "sourceCode" : "/**\r\n * Tests a null selector.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testNullString() throws Exception {\r\n    final FileSelector selector0 = new FileExtensionSelector((String) null);\r\n    final FileObject[] foList = baseFolder.findFiles(selector0);\r\n    assertEquals(0, foList.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileExtensionSelectorTest.java",
  "methodName" : "testOneExtension",
  "sourceCode" : "/**\r\n * Tests a one extension selector.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testOneExtension() throws Exception {\r\n    final FileObject[] foArray = baseFolder.findFiles(Selectors.SELECT_FILES);\r\n    assertTrue(foArray.length > 0);\r\n    // gather file extensions.\r\n    final Set<String> extensionSet = new HashSet<>();\r\n    for (final FileObject fo : foArray) {\r\n        extensionSet.add(fo.getName().getExtension());\r\n    }\r\n    final String message = String.format(\"Extensions: %s; files: %s\", extensionSet.toString(), Arrays.asList(foArray).toString());\r\n    assertEquals(EXTENSION_COUNT, extensionSet.size(), message);\r\n    // check each extension\r\n    for (final String extension : extensionSet) {\r\n        final FileSelector selector = new FileExtensionSelector(extension);\r\n        final FileObject[] list = baseFolder.findFiles(selector);\r\n        assertEquals(FILES_PER_EXTENSION_COUNT, list.length);\r\n    }\r\n    // check each file against itself\r\n    for (final FileObject fo : foArray) {\r\n        final FileSelector selector = new FileExtensionSelector(fo.getName().getExtension());\r\n        final FileObject[] list = baseFolder.findFiles(selector);\r\n        assertEquals(FILES_PER_EXTENSION_COUNT, list.length);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileIteratorTest.java",
  "methodName" : "testIterator",
  "sourceCode" : "@Test\r\npublic void testIterator() throws FileSystemException {\r\n    final FileObject[] findFiles = baseFolder.findFiles(Selectors.SELECT_ALL);\r\n    assertEquals(FILE_COUNT, findFiles.length);\r\n    final FileObject[] listFiles = baseFolder.getChildren();\r\n    assertTrue(FILE_COUNT > listFiles.length);\r\n    int i = 0;\r\n    for (final FileObject actualFile : baseFolder) {\r\n        final FileObject expectedFile = findFiles[i];\r\n        assertEquals(expectedFile, actualFile);\r\n        i++;\r\n    }\r\n    i = 0;\r\n    for (final FileObject element : baseFolder) {\r\n        final FileObject expectedFile = findFiles[i];\r\n        assertEquals(expectedFile, element);\r\n        i++;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileObjectContentOutputStreamCloseTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws IOException {\r\n    final Path tempFilePath = Files.createTempFile(\"org.apache.commons.vfs2\", \".txt\");\r\n    try (// VFS.getManager() is a constant.\r\n    @SuppressWarnings(\"resource\") FileObject fileObject = VFS.getManager().resolveFile(tempFilePath.toUri());\r\n        final FileContent content = fileObject.getContent();\r\n        OutputStream outputStream = content.getOutputStream();\r\n        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(outputStream);\r\n        OutputStreamWriter outputStreamWriter = new OutputStreamWriter(bufferedOutputStream)) {\r\n        outputStreamWriter.write(\"org.apache.commons.vfs2\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileObjectEscapeCharacterInPathTest.java",
  "methodName" : "testProviderGetPathGreat",
  "sourceCode" : "/**\r\n * Tests a path with the Chinese character 好.\r\n */\r\n@Test\r\npublic void testProviderGetPathGreat() throws URISyntaxException {\r\n    testProviderGetPath(REL_PATH_GREAT);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileObjectEscapeCharacterInPathTest.java",
  "methodName" : "testProviderGetPathSpace",
  "sourceCode" : "/**\r\n * Tests a path with the space character.\r\n */\r\n@Test\r\npublic void testProviderGetPathSpace() throws URISyntaxException {\r\n    testProviderGetPath(REL_PATH_SPACE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileObjectEscapeCharacterInPathTest.java",
  "methodName" : "testToFile",
  "sourceCode" : "@Test\r\npublic void testToFile() throws IOException {\r\n    testToFile(fileObject -> fileObject.getPath().toFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileObjectEscapeCharacterInPathTest.java",
  "methodName" : "testToFile2",
  "sourceCode" : "@Test\r\npublic void testToFile2() throws IOException {\r\n    testToFile(FileObjectEscapeCharacterInPathTest::toFile2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileSystemExceptionTest.java",
  "methodName" : "testDoesNotModifyUrlsWithoutPassword",
  "sourceCode" : "/**\r\n * Tests a {@link FileSystemException} containing info with a URL containing only the user information.\r\n */\r\n@Test\r\npublic void testDoesNotModifyUrlsWithoutPassword() {\r\n    final FileSystemException fse = new FileSystemException(\"vfs.provider/delete.error\", \"http://foo@junit.org/test.bin\");\r\n    assertEquals(\"http://foo@junit.org/test.bin\", fse.getInfo()[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileSystemExceptionTest.java",
  "methodName" : "testMasksPasswordOfUrlsWithBasicAuthentication",
  "sourceCode" : "/**\r\n * Tests a {@link FileSystemException} containing info with a URL containing a complete basic authentication.\r\n */\r\n@Test\r\npublic void testMasksPasswordOfUrlsWithBasicAuthentication() {\r\n    final FileSystemException fse = new FileSystemException(\"vfs.provider/rename.error\", \"file://test.bin\", \"http://foo:bar@junit.org/test.bin\");\r\n    assertEquals(\"file://test.bin\", fse.getInfo()[0]);\r\n    assertEquals(\"http://foo:***@junit.org/test.bin\", fse.getInfo()[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileSystemExceptionTest.java",
  "methodName" : "testProperDetectionOfUrl",
  "sourceCode" : "/**\r\n * Tests a {@link FileSystemException} containing info with a nested URL containing a complete basic authentication.\r\n */\r\n@Test\r\npublic void testProperDetectionOfUrl() {\r\n    final FileSystemException fse = new FileSystemException(\"vfs.provider/delete.error\", \"zip:http://foo:bar@junit.org/test.bin\");\r\n    assertEquals(\"zip:http://foo:***@junit.org/test.bin\", fse.getInfo()[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileSystemManagerFactoryTest.java",
  "methodName" : "testDefaultInstance",
  "sourceCode" : "/**\r\n * Sanity test.\r\n */\r\n@Test\r\npublic void testDefaultInstance() throws Exception {\r\n    // Locate the default manager\r\n    final FileSystemManager manager = VFS.getManager();\r\n    // Lookup a test jar file\r\n    final File jarFile = getTestResource(\"test.jar\");\r\n    // File\r\n    final FileObject file = manager.toFileObject(jarFile);\r\n    check(manager, file);\r\n    // Path\r\n    final FileObject path = manager.toFileObject(jarFile.toPath());\r\n    check(manager, file);\r\n    // URI\r\n    final FileObject file2 = manager.resolveFile(jarFile.toURI());\r\n    check(manager, file2);\r\n    // URL\r\n    final FileObject file3 = manager.resolveFile(jarFile.toURI().toURL());\r\n    check(manager, file3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileSystemOptionsTest.java",
  "methodName" : "testClone",
  "sourceCode" : "@Test\r\npublic void testClone() {\r\n    final FileSystemOptions fileSystemOptions = new FileSystemOptions();\r\n    assertEquals(fileSystemOptions.getClass(), fileSystemOptions.clone().getClass());\r\n    assertEquals(0, ((FileSystemOptions) fileSystemOptions.clone()).size());\r\n    fileSystemOptions.setOption(FileSystem.class, \"key1\", \"value1\");\r\n    assertEquals(1, ((FileSystemOptions) fileSystemOptions.clone()).size());\r\n    final FileSystemOptions clone = (FileSystemOptions) fileSystemOptions.clone();\r\n    assertEquals(\"value1\", clone.getOption(FileSystem.class, \"key1\"));\r\n    fileSystemOptions.setOption(FileSystem.class, \"key2\", \"value2\");\r\n    assertNull(clone.getOption(FileSystem.class, \"key2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileSystemOptionsTest.java",
  "methodName" : "testEqualsHashCodeAndCompareTo",
  "sourceCode" : "@Test\r\npublic void testEqualsHashCodeAndCompareTo() {\r\n    final JUnitConfigBuilder builder = JUnitConfigBuilder.getInstance();\r\n    final FileSystemOptions expected = new FileSystemOptions();\r\n    builder.setId(expected, \"Test\");\r\n    final FileSystemOptions actual = new FileSystemOptions();\r\n    builder.setId(actual, \"Test\");\r\n    assertEquals(expected, actual);\r\n    assertEquals(0, actual.compareTo(expected));\r\n    assertEquals(expected.hashCode(), actual.hashCode());\r\n    builder.setNames(expected, new String[] { \"A\", \"B\", \"C\" });\r\n    assertNotEquals(expected, actual);\r\n    assertEquals(-1, actual.compareTo(expected));\r\n    assertNotEquals(expected.hashCode(), actual.hashCode());\r\n    builder.setNames(actual, new String[] { \"A\", \"B\", \"C\" });\r\n    assertEquals(expected, actual);\r\n    assertEquals(0, actual.compareTo(expected));\r\n    assertEquals(expected.hashCode(), actual.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileSystemOptionsTest.java",
  "methodName" : "testEqualsHashCodeAndCompareToWithSftpIdentityProviderMatch",
  "sourceCode" : "@Test\r\npublic void testEqualsHashCodeAndCompareToWithSftpIdentityProviderMatch() {\r\n    for (int mask = 0; mask < 8; mask++) {\r\n        assertSftpOptionsEquals((mask & 1) == 1 ? new File(\"/tmp/test.priv\") : null, (mask & 2) == 2 ? new File(\"/tmp/test.pub\") : null, (mask & 4) == 4 ? new byte[] { 1, 2, 3 } : null);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileSystemOptionsTest.java",
  "methodName" : "testEqualsHashCodeAndCompareToWithSftpIdentityProviderMismatch",
  "sourceCode" : "@Test\r\npublic void testEqualsHashCodeAndCompareToWithSftpIdentityProviderMismatch() {\r\n    final String pubKey1 = \"/tmp/test.pub\";\r\n    final String pubKey2 = \"/tmp/test1.pub\";\r\n    final String privKey1 = \"/tmp/test.priv\";\r\n    final String privKey2 = \"/tmp/test1.priv\";\r\n    assertSftpOptionsNotEquals(new File(privKey1), new File(pubKey1), new byte[] { 1, 2, 3 }, new File(privKey2), new File(pubKey1), new byte[] { 1, 2, 3 });\r\n    assertSftpOptionsNotEquals(new File(privKey1), new File(pubKey1), new byte[] { 1, 2, 3 }, new File(privKey1), new File(pubKey2), new byte[] { 1, 2, 3 });\r\n    assertSftpOptionsNotEquals(new File(privKey1), new File(pubKey1), new byte[] { 1, 2, 3 }, new File(privKey1), new File(pubKey1), new byte[] { 1, 2, 4 });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileTypeSelectorTest.java",
  "methodName" : "testFileOrFolders",
  "sourceCode" : "@Test\r\npublic void testFileOrFolders() throws Exception {\r\n    final FileSelector selector = new FileTypeSelector(FileType.FILE_OR_FOLDER);\r\n    final FileObject[] foList = baseFolder.findFiles(selector);\r\n    // Why 0?\r\n    assertEquals(0, foList.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileTypeSelectorTest.java",
  "methodName" : "testFiles",
  "sourceCode" : "@Test\r\npublic void testFiles() throws Exception {\r\n    final FileSelector selector = new FileTypeSelector(FileType.FILE);\r\n    final FileObject[] foList = baseFolder.findFiles(selector);\r\n    assertEquals(5, foList.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileTypeSelectorTest.java",
  "methodName" : "testFolders",
  "sourceCode" : "@Test\r\npublic void testFolders() throws Exception {\r\n    final FileSelector selector = new FileTypeSelector(FileType.FOLDER);\r\n    final FileObject[] foList = baseFolder.findFiles(selector);\r\n    assertEquals(8, foList.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileTypeTest.java",
  "methodName" : "testSerializationContainer",
  "sourceCode" : "@Test\r\npublic void testSerializationContainer() {\r\n    final Fixture expectedFixture = new Fixture();\r\n    final byte[] serialized = SerializationUtils.serialize(expectedFixture);\r\n    final Fixture actualFixture = SerializationUtils.deserialize(serialized);\r\n    assertFileTypeEquals(expectedFixture.getFileType(), actualFixture.getFileType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileTypeTest.java",
  "methodName" : "testSerializationFile",
  "sourceCode" : "@Test\r\npublic void testSerializationFile() {\r\n    test(FileType.FILE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileTypeTest.java",
  "methodName" : "testSerializationFileOrFolder",
  "sourceCode" : "@Test\r\npublic void testSerializationFileOrFolder() {\r\n    test(FileType.FILE_OR_FOLDER);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileTypeTest.java",
  "methodName" : "testSerializationFolder",
  "sourceCode" : "@Test\r\npublic void testSerializationFolder() {\r\n    test(FileType.FOLDER);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\FileTypeTest.java",
  "methodName" : "testSerializationImaginary",
  "sourceCode" : "@Test\r\npublic void testSerializationImaginary() {\r\n    test(FileType.IMAGINARY);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AgeFileFilterTest.java",
  "methodName" : "testAgeFileFilterDate",
  "sourceCode" : "@Test\r\npublic void testAgeFileFilterDate() throws FileSystemException {\r\n    final AgeFileFilter testee = new AgeFileFilter(new Date());\r\n    assertTrue(testee.accept(oldFileInfo));\r\n    assertTrue(testee.accept(currentFileInfo));\r\n    assertFalse(testee.accept(newFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AgeFileFilterTest.java",
  "methodName" : "testAgeFileFilterDateBoolean",
  "sourceCode" : "@Test\r\npublic void testAgeFileFilterDateBoolean() throws FileSystemException {\r\n    AgeFileFilter testee;\r\n    testee = new AgeFileFilter(new Date(), true);\r\n    assertTrue(testee.accept(oldFileInfo));\r\n    assertTrue(testee.accept(currentFileInfo));\r\n    assertFalse(testee.accept(newFileInfo));\r\n    testee = new AgeFileFilter(new Date(), false);\r\n    assertFalse(testee.accept(oldFileInfo));\r\n    assertFalse(testee.accept(currentFileInfo));\r\n    assertTrue(testee.accept(newFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AgeFileFilterTest.java",
  "methodName" : "testAgeFileFilterFile",
  "sourceCode" : "@Test\r\npublic void testAgeFileFilterFile() throws FileSystemException {\r\n    final AgeFileFilter testee = new AgeFileFilter(currentFileInfo.getFile());\r\n    assertTrue(testee.accept(oldFileInfo));\r\n    assertTrue(testee.accept(currentFileInfo));\r\n    assertFalse(testee.accept(newFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AgeFileFilterTest.java",
  "methodName" : "testAgeFileFilterFileBoolean",
  "sourceCode" : "@Test\r\npublic void testAgeFileFilterFileBoolean() throws FileSystemException {\r\n    AgeFileFilter testee;\r\n    testee = new AgeFileFilter(currentFileInfo.getFile(), true);\r\n    assertTrue(testee.accept(oldFileInfo));\r\n    assertTrue(testee.accept(currentFileInfo));\r\n    assertFalse(testee.accept(newFileInfo));\r\n    testee = new AgeFileFilter(currentFileInfo.getFile(), false);\r\n    assertFalse(testee.accept(oldFileInfo));\r\n    assertFalse(testee.accept(currentFileInfo));\r\n    assertTrue(testee.accept(newFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AgeFileFilterTest.java",
  "methodName" : "testAgeFileFilterLong",
  "sourceCode" : "@Test\r\npublic void testAgeFileFilterLong() throws FileSystemException {\r\n    final AgeFileFilter testee = new AgeFileFilter(NOW_MILLIS);\r\n    assertTrue(testee.accept(oldFileInfo));\r\n    assertTrue(testee.accept(currentFileInfo));\r\n    assertFalse(testee.accept(newFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AgeFileFilterTest.java",
  "methodName" : "testAgeFileFilterLongBoolean",
  "sourceCode" : "@Test\r\npublic void testAgeFileFilterLongBoolean() throws FileSystemException {\r\n    AgeFileFilter testee;\r\n    testee = new AgeFileFilter(NOW_MILLIS, true);\r\n    assertTrue(testee.accept(oldFileInfo));\r\n    assertTrue(testee.accept(currentFileInfo));\r\n    assertFalse(testee.accept(newFileInfo));\r\n    testee = new AgeFileFilter(NOW_MILLIS, false);\r\n    assertFalse(testee.accept(oldFileInfo));\r\n    assertFalse(testee.accept(currentFileInfo));\r\n    assertTrue(testee.accept(newFileInfo));\r\n    // Same test with ZIP file\r\n    FileObject[] files;\r\n    files = zipFileObj.findFiles(new FileFilterSelector(new AgeFileFilter(NOW_MILLIS, true)));\r\n    assertContains(files, oldFile.getName(), currentFile.getName());\r\n    assertEquals(2, files.length);\r\n    files = zipFileObj.findFiles(new FileFilterSelector(new AgeFileFilter(NOW_MILLIS, false)));\r\n    assertContains(files, newFile.getName());\r\n    assertEquals(1, files.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AndFileFilterTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testAccept() throws FileSystemException {\r\n    final FileSelectInfo any = createFileSelectInfo(new File(\"anyfile\"));\r\n    // Empty\r\n    assertFalse(new AndFileFilter().accept(any));\r\n    // True\r\n    assertTrue(new AndFileFilter(new AlwaysTrueFileFilter()).accept(any));\r\n    assertTrue(new AndFileFilter(new AlwaysTrueFileFilter(), new AlwaysTrueFileFilter()).accept(any));\r\n    // False\r\n    assertFalse(new AndFileFilter(new AlwaysFalseFileFilter()).accept(any));\r\n    assertFalse(new AndFileFilter(new AlwaysFalseFileFilter(), new AlwaysFalseFileFilter()).accept(any));\r\n    assertFalse(new AndFileFilter(new AlwaysFalseFileFilter(), new AlwaysTrueFileFilter()).accept(any));\r\n    assertFalse(new AndFileFilter(new AlwaysTrueFileFilter(), new AlwaysFalseFileFilter()).accept(any));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AndFileFilterTest.java",
  "methodName" : "testAcceptChecked",
  "sourceCode" : "@Test\r\npublic void testAcceptChecked() throws FileSystemException {\r\n    final FileSelectInfo any = createFileSelectInfo(new File(\"anyfile\"));\r\n    // Empty\r\n    assertFalse(new AndFileFilter().accept(any));\r\n    // True\r\n    assertTrue(new AndFileFilter(new AlwaysTrueFileFilter()).accept(any));\r\n    assertTrue(new AndFileFilter(new AlwaysTrueFileFilter(), new AlwaysTrueFileFilter()).accept(any));\r\n    // False\r\n    assertFalse(new AndFileFilter(new AlwaysFalseFileFilter()).accept(any));\r\n    assertFalse(new AndFileFilter(new AlwaysFalseFileFilter(), new AlwaysFalseFileFilter()).accept(any));\r\n    assertFalse(new AndFileFilter(new AlwaysFalseFileFilter(), new AlwaysTrueFileFilter()).accept(any));\r\n    assertFalse(new AndFileFilter(new AlwaysTrueFileFilter(), new AlwaysFalseFileFilter()).accept(any));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AndFileFilterTest.java",
  "methodName" : "testAddFileFilter",
  "sourceCode" : "@Test\r\npublic void testAddFileFilter() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    // TEST\r\n    final AndFileFilter testee = new AndFileFilter();\r\n    testee.addFileFilter(filter1);\r\n    testee.addFileFilter(filter2);\r\n    testee.addFileFilter(filter3);\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter2, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AndFileFilterTest.java",
  "methodName" : "testAndFileFilterFileFilter",
  "sourceCode" : "@Test\r\npublic void testAndFileFilterFileFilter() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    // TEST\r\n    final AndFileFilter testee = new AndFileFilter(filter1, filter2, filter3);\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter2, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AndFileFilterTest.java",
  "methodName" : "testAndFileFilterList",
  "sourceCode" : "@Test\r\npublic void testAndFileFilterList() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    final List<FileFilter> list = new ArrayList<>();\r\n    list.add(filter1);\r\n    list.add(filter2);\r\n    list.add(filter3);\r\n    // TEST\r\n    final AndFileFilter testee = new AndFileFilter(list);\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter2, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AndFileFilterTest.java",
  "methodName" : "testRemoveFileFilter",
  "sourceCode" : "@Test\r\npublic void testRemoveFileFilter() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    final AndFileFilter testee = new AndFileFilter(filter1, filter2, filter3);\r\n    // TEST\r\n    testee.removeFileFilter(filter2);\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\AndFileFilterTest.java",
  "methodName" : "testSetFileFilters",
  "sourceCode" : "@Test\r\npublic void testSetFileFilters() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    final List<FileFilter> list = new ArrayList<>();\r\n    list.add(filter1);\r\n    list.add(filter2);\r\n    list.add(filter3);\r\n    final AndFileFilter testee = new AndFileFilter();\r\n    // TEST\r\n    testee.setFileFilters(list);\r\n    assertNotNull(testee.toString());\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter2, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\CanExecuteFileFilterTest.java",
  "methodName" : "testAcceptCanExecute",
  "sourceCode" : "@Test\r\npublic void testAcceptCanExecute() throws FileSystemException {\r\n    assertTrue(CanExecuteFileFilter.CAN_EXECUTE.accept(executableFileInfo));\r\n    assertTrue(CanExecuteFileFilter.CAN_EXECUTE.accept(notExecutableFileInfo));\r\n    assertFalse(CanExecuteFileFilter.CAN_EXECUTE.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\CanExecuteFileFilterTest.java",
  "methodName" : "testAcceptCannotExecute",
  "sourceCode" : "@Test\r\npublic void testAcceptCannotExecute() throws FileSystemException {\r\n    assertFalse(CanExecuteFileFilter.CANNOT_EXECUTE.accept(executableFileInfo));\r\n    assertFalse(CanExecuteFileFilter.CANNOT_EXECUTE.accept(notExecutableFileInfo));\r\n    assertTrue(CanExecuteFileFilter.CANNOT_EXECUTE.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\CanReadFileFilterTest.java",
  "methodName" : "testAcceptCannotRead",
  "sourceCode" : "@Test\r\npublic void testAcceptCannotRead() throws FileSystemException {\r\n    assertFalse(CanReadFileFilter.CANNOT_READ.accept(writableFileInfo));\r\n    assertFalse(CanReadFileFilter.CANNOT_READ.accept(readOnlyFileInfo));\r\n    assertTrue(CanReadFileFilter.CANNOT_READ.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\CanReadFileFilterTest.java",
  "methodName" : "testAcceptCanRead",
  "sourceCode" : "@Test\r\npublic void testAcceptCanRead() throws FileSystemException {\r\n    assertTrue(CanReadFileFilter.CAN_READ.accept(writableFileInfo));\r\n    assertTrue(CanReadFileFilter.CAN_READ.accept(readOnlyFileInfo));\r\n    assertFalse(CanReadFileFilter.CAN_READ.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\CanReadFileFilterTest.java",
  "methodName" : "testAcceptReadOnly",
  "sourceCode" : "@Test\r\npublic void testAcceptReadOnly() throws FileSystemException {\r\n    assertFalse(CanReadFileFilter.READ_ONLY.accept(writableFileInfo));\r\n    assertTrue(CanReadFileFilter.READ_ONLY.accept(readOnlyFileInfo));\r\n    assertFalse(CanReadFileFilter.READ_ONLY.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\CanReadFileFilterTest.java",
  "methodName" : "testAcceptZipFile",
  "sourceCode" : "@Test\r\npublic void testAcceptZipFile() throws FileSystemException {\r\n    FileObject[] files;\r\n    // CAN_READ Filter\r\n    files = zipFileObj.findFiles(new FileFilterSelector(CanReadFileFilter.CAN_READ));\r\n    assertContains(files, READONLY, WRITABLE);\r\n    assertEquals(2, files.length);\r\n    // CANNOT_READ Filter\r\n    files = zipFileObj.findFiles(new FileFilterSelector(CanReadFileFilter.CANNOT_READ));\r\n    assertTrue(files == null || files.length == 0);\r\n    // READ_ONLY Filter\r\n    files = zipFileObj.findFiles(new FileFilterSelector(CanReadFileFilter.READ_ONLY));\r\n    assertContains(files, READONLY, WRITABLE);\r\n    assertEquals(2, files.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\CanWriteFileFilterTest.java",
  "methodName" : "testAcceptCannotWrite",
  "sourceCode" : "@Test\r\npublic void testAcceptCannotWrite() throws FileSystemException {\r\n    assertFalse(CanWriteFileFilter.CANNOT_WRITE.accept(writableFileInfo));\r\n    assertTrue(CanWriteFileFilter.CANNOT_WRITE.accept(readOnlyFileInfo));\r\n    assertFalse(CanWriteFileFilter.CANNOT_WRITE.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\CanWriteFileFilterTest.java",
  "methodName" : "testAcceptCanWrite",
  "sourceCode" : "@Test\r\npublic void testAcceptCanWrite() throws FileSystemException {\r\n    assertTrue(CanWriteFileFilter.CAN_WRITE.accept(writableFileInfo));\r\n    assertFalse(CanWriteFileFilter.CAN_WRITE.accept(readOnlyFileInfo));\r\n    assertTrue(CanWriteFileFilter.CAN_WRITE.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\CanWriteFileFilterTest.java",
  "methodName" : "testAcceptZipFile",
  "sourceCode" : "@Test\r\npublic void testAcceptZipFile() throws FileSystemException {\r\n    FileObject[] files;\r\n    // CAN_WRITE Filter\r\n    files = zipFileObj.findFiles(new FileFilterSelector(CanWriteFileFilter.CAN_WRITE));\r\n    assertTrue(files == null || files.length == 0);\r\n    // CANNOT_WRITE Filter\r\n    files = zipFileObj.findFiles(new FileFilterSelector(CanWriteFileFilter.CANNOT_WRITE));\r\n    assertContains(files, READONLY, WRITABLE);\r\n    assertEquals(2, files.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\DirectoryAndFileFilterTest.java",
  "methodName" : "testAcceptZipFile",
  "sourceCode" : "@Test\r\npublic void testAcceptZipFile() throws FileSystemException {\r\n    FileObject[] files;\r\n    // FILE Filter\r\n    files = zipFileObj.findFiles(new FileSelector() {\r\n\r\n        @Override\r\n        public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {\r\n            return FileFileFilter.FILE.accept(fileInfo);\r\n        }\r\n\r\n        @Override\r\n        public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {\r\n            return true;\r\n        }\r\n    });\r\n    assertContains(files, FILE);\r\n    assertEquals(1, files.length);\r\n    // DIRECTORY Filter\r\n    files = zipFileObj.findFiles(new FileFilterSelector(DirectoryFileFilter.DIRECTORY));\r\n    assertContains(files, DIR);\r\n    assertEquals(1, files.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\DirectoryAndFileFilterTest.java",
  "methodName" : "testDirectoryFileFilter",
  "sourceCode" : "@Test\r\npublic void testDirectoryFileFilter() throws FileSystemException {\r\n    final FileFilter testee = DirectoryFileFilter.DIRECTORY;\r\n    assertTrue(testee.accept(dirInfo));\r\n    assertFalse(testee.accept(fileInfo));\r\n    assertFalse(testee.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\DirectoryAndFileFilterTest.java",
  "methodName" : "testFileFileFilter",
  "sourceCode" : "@Test\r\npublic void testFileFileFilter() throws FileSystemException {\r\n    final FileFilter testee = FileFileFilter.FILE;\r\n    assertTrue(testee.accept(fileInfo));\r\n    assertFalse(testee.accept(dirInfo));\r\n    assertFalse(testee.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\EmptyFileFilterTest.java",
  "methodName" : "testAcceptEmpty",
  "sourceCode" : "@Test\r\npublic void testAcceptEmpty() throws FileSystemException {\r\n    final FileFilter testee = EmptyFileFilter.EMPTY;\r\n    assertFalse(testee.accept(notEmptyFileInfo));\r\n    assertTrue(testee.accept(emptyFileInfo));\r\n    assertFalse(testee.accept(notEmptyDirInfo));\r\n    assertTrue(testee.accept(emptyDirInfo));\r\n    assertTrue(testee.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\EmptyFileFilterTest.java",
  "methodName" : "testAcceptNotEmpty",
  "sourceCode" : "@Test\r\npublic void testAcceptNotEmpty() throws FileSystemException {\r\n    final FileFilter testee = EmptyFileFilter.NOT_EMPTY;\r\n    assertTrue(testee.accept(notEmptyFileInfo));\r\n    assertFalse(testee.accept(emptyFileInfo));\r\n    assertTrue(testee.accept(notEmptyDirInfo));\r\n    assertFalse(testee.accept(emptyDirInfo));\r\n    assertFalse(testee.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\EmptyFileFilterTest.java",
  "methodName" : "testZipFile",
  "sourceCode" : "@Test\r\npublic void testZipFile() throws FileSystemException {\r\n    // Same test with ZIP file\r\n    FileObject[] files;\r\n    files = zipFileObj.findFiles(new FileFilterSelector(EmptyFileFilter.EMPTY));\r\n    assertContains(files, emptyFile.getName());\r\n    assertEquals(1, files.length);\r\n    files = zipFileObj.findFiles(new FileFilterSelector(EmptyFileFilter.NOT_EMPTY));\r\n    assertContains(files, notEmptyFile.getName(), notEmptyDir.getName());\r\n    assertEquals(2, files.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\HiddenFileFilterTest.java",
  "methodName" : "testAcceptHidden",
  "sourceCode" : "@Test\r\npublic void testAcceptHidden() throws FileSystemException {\r\n    final FileFilter testee = HiddenFileFilter.HIDDEN;\r\n    assertFalse(testee.accept(visibleFileInfo));\r\n    // TODO xxx In Java 6 there is no way to hide a file\r\n    // assertThat(testee.accept(hiddenFileInfo));\r\n    assertFalse(testee.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\HiddenFileFilterTest.java",
  "methodName" : "testAcceptVisible",
  "sourceCode" : "@Test\r\npublic void testAcceptVisible() throws FileSystemException {\r\n    final FileFilter testee = HiddenFileFilter.VISIBLE;\r\n    assertTrue(testee.accept(visibleFileInfo));\r\n    // TODO xxx In Java 6 there is no way to hide a file\r\n    // assertThat(testee.accept(hiddenFileInfo));\r\n    assertTrue(testee.accept(notExistingFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\HiddenFileFilterTest.java",
  "methodName" : "testZipFile",
  "sourceCode" : "@Test\r\npublic void testZipFile() throws FileSystemException {\r\n    // Same test with ZIP file\r\n    final FileObject[] files;\r\n    // TODO xxx In Java 6 there is no way to hide a file\r\n    // files = zipFileObj.findFiles(new\r\n    // FileFilterSelector(HiddenFileFilter.HIDDEN));\r\n    // assertContains(files, hiddenFile.getName());\r\n    // assertThat(files).hasSize(1);\r\n    files = zipFileObj.findFiles(new FileFilterSelector(HiddenFileFilter.VISIBLE));\r\n    assertContains(files, visibleFile.getName());\r\n    assertEquals(1, files.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\NameFileFilterTest.java",
  "methodName" : "testAcceptList",
  "sourceCode" : "@Test\r\npublic void testAcceptList() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"test1.txt\");\r\n    list.add(\"test2.txt\");\r\n    final NameFileFilter filter = new NameFileFilter(list);\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\NameFileFilterTest.java",
  "methodName" : "testAcceptListIOCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptListIOCaseInsensitive() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"test1.txt\");\r\n    list.add(\"test2.txt\");\r\n    final NameFileFilter filter = new NameFileFilter(IOCase.INSENSITIVE, list);\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"TEST1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\NameFileFilterTest.java",
  "methodName" : "testAcceptListIOCaseSensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptListIOCaseSensitive() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"test1.txt\");\r\n    list.add(\"test2.txt\");\r\n    final NameFileFilter filter = new NameFileFilter(IOCase.SENSITIVE, list);\r\n    // TEST\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"TEST1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\NameFileFilterTest.java",
  "methodName" : "testAcceptString",
  "sourceCode" : "@Test\r\npublic void testAcceptString() {\r\n    // PREPARE\r\n    final NameFileFilter filter = new NameFileFilter(\"test1.txt\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\NameFileFilterTest.java",
  "methodName" : "testAcceptStringIOCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptStringIOCaseInsensitive() {\r\n    // PREPARE\r\n    final NameFileFilter filter = new NameFileFilter(IOCase.INSENSITIVE, \"test2.txt\");\r\n    // TEST\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\NameFileFilterTest.java",
  "methodName" : "testAcceptStringIOCaseSensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptStringIOCaseSensitive() {\r\n    // PREPARE\r\n    final NameFileFilter filter = new NameFileFilter(IOCase.SENSITIVE, \"test2.txt\");\r\n    // TEST\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\NotFileFilterTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testAccept() throws FileSystemException {\r\n    final FileSelectInfo any = createFileSelectInfo(new File(\"test1.txt\"));\r\n    assertFalse(new NotFileFilter(TrueFileFilter.INSTANCE).accept(any));\r\n    assertFalse(new NotFileFilter(TrueFileFilter.TRUE).accept(any));\r\n    assertTrue(new NotFileFilter(FalseFileFilter.INSTANCE).accept(any));\r\n    assertTrue(new NotFileFilter(FalseFileFilter.FALSE).accept(any));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\OrFileFilterTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() throws FileSystemException {\r\n    final FileSelectInfo any = createFileSelectInfo(new File(\"anyfile\"));\r\n    // Empty\r\n    assertFalse(new OrFileFilter().accept(any));\r\n    // True\r\n    assertTrue(new OrFileFilter(new AlwaysTrueFileFilter()).accept(any));\r\n    assertTrue(new OrFileFilter(new AlwaysTrueFileFilter(), new AlwaysTrueFileFilter()).accept(any));\r\n    assertTrue(new OrFileFilter(new AlwaysFalseFileFilter(), new AlwaysTrueFileFilter()).accept(any));\r\n    assertTrue(new OrFileFilter(new AlwaysTrueFileFilter(), new AlwaysFalseFileFilter()).accept(any));\r\n    // False\r\n    assertFalse(new OrFileFilter(new AlwaysFalseFileFilter()).accept(any));\r\n    assertFalse(new OrFileFilter(new AlwaysFalseFileFilter(), new AlwaysFalseFileFilter()).accept(any));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\OrFileFilterTest.java",
  "methodName" : "testAddFileFilter",
  "sourceCode" : "@Test\r\npublic void testAddFileFilter() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    // TEST\r\n    final OrFileFilter testee = new OrFileFilter();\r\n    testee.addFileFilter(filter1);\r\n    testee.addFileFilter(filter2);\r\n    testee.addFileFilter(filter3);\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter2, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\OrFileFilterTest.java",
  "methodName" : "testOrFileFilterFileFilter",
  "sourceCode" : "@Test\r\npublic void testOrFileFilterFileFilter() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    // TEST\r\n    final OrFileFilter testee = new OrFileFilter(filter1, filter2, filter3);\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter2, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\OrFileFilterTest.java",
  "methodName" : "testOrFileFilterList",
  "sourceCode" : "@Test\r\npublic void testOrFileFilterList() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    final List<FileFilter> list = new ArrayList<>();\r\n    list.add(filter1);\r\n    list.add(filter2);\r\n    list.add(filter3);\r\n    // TEST\r\n    final OrFileFilter testee = new OrFileFilter(list);\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter2, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\OrFileFilterTest.java",
  "methodName" : "testRemoveFileFilter",
  "sourceCode" : "@Test\r\npublic void testRemoveFileFilter() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    final OrFileFilter testee = new OrFileFilter(filter1, filter2, filter3);\r\n    // TEST\r\n    testee.removeFileFilter(filter2);\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\OrFileFilterTest.java",
  "methodName" : "testSetFileFilters",
  "sourceCode" : "@Test\r\npublic void testSetFileFilters() {\r\n    // PREPARE\r\n    final FileFilter filter1 = new DummyFilter();\r\n    final FileFilter filter2 = new DummyFilter();\r\n    final FileFilter filter3 = new DummyFilter();\r\n    final List<FileFilter> list = new ArrayList<>();\r\n    list.add(filter1);\r\n    list.add(filter2);\r\n    list.add(filter3);\r\n    final OrFileFilter testee = new OrFileFilter();\r\n    // TEST\r\n    testee.setFileFilters(list);\r\n    // VERIFY\r\n    assertContainsOnly(testee.getFileFilters(), filter1, filter2, filter3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\PrefixFileFilterTest.java",
  "methodName" : "testAcceptList",
  "sourceCode" : "@Test\r\npublic void testAcceptList() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"test1\");\r\n    list.add(\"test2\");\r\n    final PrefixFileFilter filter = new PrefixFileFilter(list);\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\PrefixFileFilterTest.java",
  "methodName" : "testAcceptListIOCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptListIOCaseInsensitive() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"test1\");\r\n    list.add(\"test2\");\r\n    final PrefixFileFilter filter = new PrefixFileFilter(IOCase.INSENSITIVE, list);\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"TEST1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\PrefixFileFilterTest.java",
  "methodName" : "testAcceptListIOCaseSensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptListIOCaseSensitive() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"test1\");\r\n    list.add(\"test2\");\r\n    final PrefixFileFilter filter = new PrefixFileFilter(IOCase.SENSITIVE, list);\r\n    // TEST\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"TEST1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\PrefixFileFilterTest.java",
  "methodName" : "testAcceptString",
  "sourceCode" : "@Test\r\npublic void testAcceptString() {\r\n    // PREPARE\r\n    final PrefixFileFilter filter = new PrefixFileFilter(\"test\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\PrefixFileFilterTest.java",
  "methodName" : "testAcceptStringIOCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptStringIOCaseInsensitive() {\r\n    // PREPARE\r\n    final PrefixFileFilter filter = new PrefixFileFilter(IOCase.INSENSITIVE, \"test\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\PrefixFileFilterTest.java",
  "methodName" : "testAcceptStringIOCaseSensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptStringIOCaseSensitive() {\r\n    // PREPARE\r\n    final PrefixFileFilter filter = new PrefixFileFilter(IOCase.SENSITIVE, \"test\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"Test2.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\RegexFileFilterTest.java",
  "methodName" : "testPatternNullArgConstruction",
  "sourceCode" : "@Test\r\npublic void testPatternNullArgConstruction() {\r\n    try {\r\n        new RegexFileFilter((Pattern) null);\r\n        fail();\r\n    } catch (final IllegalArgumentException ex) {\r\n        assertEquals(RegexFileFilter.PATTERN_IS_MISSING, ex.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\RegexFileFilterTest.java",
  "methodName" : "testRegex",
  "sourceCode" : "@Test\r\npublic void testRegex() throws Exception {\r\n    FileFilter filter;\r\n    filter = new RegexFileFilter(\"^.*[tT]est(-\\\\d+)?\\\\.java$\");\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"Test.java\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test-10.java\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test-.java\"))));\r\n    filter = new RegexFileFilter(\"^[Tt]est.java$\");\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"Test.java\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.java\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"tEST.java\"))));\r\n    filter = new RegexFileFilter(Pattern.compile(\"^test.java$\", Pattern.CASE_INSENSITIVE));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"Test.java\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.java\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"tEST.java\"))));\r\n    filter = new RegexFileFilter(\"^test.java$\", Pattern.CASE_INSENSITIVE);\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"Test.java\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.java\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"tEST.java\"))));\r\n    filter = new RegexFileFilter(\"^test.java$\", IOCase.INSENSITIVE);\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"Test.java\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.java\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"tEST.java\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\RegexFileFilterTest.java",
  "methodName" : "testStringIOCaseNullArgConstruction",
  "sourceCode" : "@Test\r\npublic void testStringIOCaseNullArgConstruction() {\r\n    try {\r\n        new RegexFileFilter((String) null, IOCase.INSENSITIVE);\r\n        fail();\r\n    } catch (final IllegalArgumentException ex) {\r\n        assertEquals(RegexFileFilter.PATTERN_IS_MISSING, ex.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\RegexFileFilterTest.java",
  "methodName" : "testStringNullArgConstruction",
  "sourceCode" : "@Test\r\npublic void testStringNullArgConstruction() {\r\n    try {\r\n        new RegexFileFilter((String) null);\r\n        fail();\r\n    } catch (final IllegalArgumentException ex) {\r\n        assertEquals(RegexFileFilter.PATTERN_IS_MISSING, ex.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\RegexFileFilterTest.java",
  "methodName" : "testStringPatternNullArgConstruction",
  "sourceCode" : "@Test\r\npublic void testStringPatternNullArgConstruction() {\r\n    try {\r\n        new RegexFileFilter((String) null, Pattern.CASE_INSENSITIVE);\r\n        fail();\r\n    } catch (final IllegalArgumentException ex) {\r\n        assertEquals(RegexFileFilter.PATTERN_IS_MISSING, ex.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SizeFileFilterTest.java",
  "methodName" : "testSizeFileFilterLong",
  "sourceCode" : "@Test\r\npublic void testSizeFileFilterLong() throws FileSystemException {\r\n    final SizeFileFilter testee = new SizeFileFilter(4);\r\n    assertFalse(testee.accept(minFileInfo));\r\n    assertTrue(testee.accept(optFileInfo));\r\n    assertTrue(testee.accept(maxFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SizeFileFilterTest.java",
  "methodName" : "testSizeFileFilterLongBoolean",
  "sourceCode" : "@Test\r\npublic void testSizeFileFilterLongBoolean() throws FileSystemException {\r\n    SizeFileFilter testee;\r\n    testee = new SizeFileFilter(4, true);\r\n    assertFalse(testee.accept(minFileInfo));\r\n    assertTrue(testee.accept(optFileInfo));\r\n    assertTrue(testee.accept(maxFileInfo));\r\n    testee = new SizeFileFilter(4, false);\r\n    assertTrue(testee.accept(minFileInfo));\r\n    assertFalse(testee.accept(optFileInfo));\r\n    assertFalse(testee.accept(maxFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SizeFileFilterTest.java",
  "methodName" : "testSizeFileFilterZipDir",
  "sourceCode" : "@Test\r\npublic void testSizeFileFilterZipDir() throws FileSystemException {\r\n    // Same test with ZIP file\r\n    FileObject[] files;\r\n    files = zipFileObj.findFiles(new FileFilterSelector(new SizeFileFilter(4, true)));\r\n    assertContains(files, optFile.getName(), maxFile.getName());\r\n    assertEquals(2, files.length);\r\n    files = zipFileObj.findFiles(new FileFilterSelector(new SizeFileFilter(4, false)));\r\n    assertContains(files, minFile.getName());\r\n    assertEquals(1, files.length);\r\n    files = zipFileObj.findFiles(new FileFilterSelector(new SizeRangeFileFilter(2, 6)));\r\n    assertContains(files, minFile.getName(), optFile.getName(), maxFile.getName());\r\n    assertEquals(3, files.length);\r\n    files = zipFileObj.findFiles(new FileFilterSelector(new SizeRangeFileFilter(3, 6)));\r\n    assertContains(files, optFile.getName(), maxFile.getName());\r\n    assertEquals(2, files.length);\r\n    files = zipFileObj.findFiles(new FileFilterSelector(new SizeRangeFileFilter(2, 5)));\r\n    assertContains(files, minFile.getName(), optFile.getName());\r\n    assertEquals(2, files.length);\r\n    files = zipFileObj.findFiles(new FileFilterSelector(new SizeRangeFileFilter(3, 5)));\r\n    assertContains(files, optFile.getName());\r\n    assertEquals(1, files.length);\r\n    files = zipFileObj.findFiles(new FileFilterSelector(new SizeRangeFileFilter(4, 4)));\r\n    assertContains(files, optFile.getName());\r\n    assertEquals(1, files.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SizeFileFilterTest.java",
  "methodName" : "testSizeRangeFileFilter",
  "sourceCode" : "@Test\r\npublic void testSizeRangeFileFilter() throws FileSystemException {\r\n    SizeRangeFileFilter testee;\r\n    testee = new SizeRangeFileFilter(2, 6);\r\n    assertTrue(testee.accept(minFileInfo));\r\n    assertTrue(testee.accept(optFileInfo));\r\n    assertTrue(testee.accept(maxFileInfo));\r\n    testee = new SizeRangeFileFilter(3, 6);\r\n    assertFalse(testee.accept(minFileInfo));\r\n    assertTrue(testee.accept(optFileInfo));\r\n    assertTrue(testee.accept(maxFileInfo));\r\n    testee = new SizeRangeFileFilter(2, 5);\r\n    assertTrue(testee.accept(minFileInfo));\r\n    assertTrue(testee.accept(optFileInfo));\r\n    assertFalse(testee.accept(maxFileInfo));\r\n    testee = new SizeRangeFileFilter(3, 5);\r\n    assertFalse(testee.accept(minFileInfo));\r\n    assertTrue(testee.accept(optFileInfo));\r\n    assertFalse(testee.accept(maxFileInfo));\r\n    testee = new SizeRangeFileFilter(4, 4);\r\n    assertFalse(testee.accept(minFileInfo));\r\n    assertTrue(testee.accept(optFileInfo));\r\n    assertFalse(testee.accept(maxFileInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SuffixFileFilterTest.java",
  "methodName" : "testAcceptList",
  "sourceCode" : "@Test\r\npublic void testAcceptList() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\".txt\");\r\n    list.add(\".bin\");\r\n    final SuffixFileFilter filter = new SuffixFileFilter(list);\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.bin\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test2.BIN\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SuffixFileFilterTest.java",
  "methodName" : "testAcceptListIOCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptListIOCaseInsensitive() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\".txt\");\r\n    list.add(\".bin\");\r\n    final SuffixFileFilter filter = new SuffixFileFilter(IOCase.INSENSITIVE, list);\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"TEST1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.bin\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.TXT\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SuffixFileFilterTest.java",
  "methodName" : "testAcceptListIOCaseSensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptListIOCaseSensitive() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\".txt\");\r\n    list.add(\".bin\");\r\n    final SuffixFileFilter filter = new SuffixFileFilter(IOCase.SENSITIVE, list);\r\n    // TEST\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test1.Txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test2.BIN\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SuffixFileFilterTest.java",
  "methodName" : "testAcceptString",
  "sourceCode" : "@Test\r\npublic void testAcceptString() {\r\n    // PREPARE\r\n    final SuffixFileFilter filter = new SuffixFileFilter(\".txt\", \".xxx\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test2.TXT\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SuffixFileFilterTest.java",
  "methodName" : "testAcceptStringIOCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptStringIOCaseInsensitive() {\r\n    // PREPARE\r\n    final SuffixFileFilter filter = new SuffixFileFilter(IOCase.INSENSITIVE, \".txt\", \".xxx\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.TXT\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SuffixFileFilterTest.java",
  "methodName" : "testAcceptStringIOCaseSensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptStringIOCaseSensitive() {\r\n    // PREPARE\r\n    final SuffixFileFilter filter = new SuffixFileFilter(IOCase.SENSITIVE, \".txt\", \".xxx\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test2.TXT\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SymbolicLinkFileFilterTest.java",
  "methodName" : "testAcceptActual",
  "sourceCode" : "@Test\r\npublic void testAcceptActual() throws FileSystemException {\r\n    final FileFilter testee = SymbolicLinkFileFilter.ACTUAL;\r\n    assertTrue(targetFileInfo.getBaseFolder().exists());\r\n    assertTrue(targetFileInfo.getFile().exists());\r\n    assertTrue(testee.accept(targetFileInfo), targetFileInfo.toString());\r\n    assertTrue(testee.accept(notExistingFileInfo), notExistingFileInfo.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SymbolicLinkFileFilterTest.java",
  "methodName" : "testAcceptSymbolic",
  "sourceCode" : "@Test\r\npublic void testAcceptSymbolic() throws FileSystemException {\r\n    final FileFilter testee = SymbolicLinkFileFilter.SYMBOLIC;\r\n    assertTrue(testee.accept(linkFileInfo), linkFileInfo.toString());\r\n    assertFalse(testee.accept(notExistingFileInfo), notExistingFileInfo.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\SymbolicLinkFileFilterTest.java",
  "methodName" : "testZipFile",
  "sourceCode" : "@Test\r\npublic void testZipFile() throws FileSystemException {\r\n    final FileObject[] files = zipFileObject.findFiles(new FileFilterSelector(SymbolicLinkFileFilter.SYMBOLIC));\r\n    assertEquals(0, files.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\WildcardFileFilterTest.java",
  "methodName" : "testAcceptList",
  "sourceCode" : "@Test\r\npublic void testAcceptList() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"*.txt\");\r\n    list.add(\"*.a??\");\r\n    final WildcardFileFilter filter = new WildcardFileFilter(list);\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.a\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ab\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.abc\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ABC\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aaa\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.Aaa\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aAA\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.abcd\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\WildcardFileFilterTest.java",
  "methodName" : "testAcceptListIOCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptListIOCaseInsensitive() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"*.txt\");\r\n    list.add(\"*.a??\");\r\n    final WildcardFileFilter filter = new WildcardFileFilter(IOCase.INSENSITIVE, list);\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.a\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ab\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.abc\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.ABC\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aaa\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.Aaa\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aAA\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.abcd\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\WildcardFileFilterTest.java",
  "methodName" : "testAcceptListIOCaseSensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptListIOCaseSensitive() {\r\n    // PREPARE\r\n    final List<String> list = new ArrayList<>();\r\n    list.add(\"*.txt\");\r\n    list.add(\"*.a??\");\r\n    final WildcardFileFilter filter = new WildcardFileFilter(IOCase.SENSITIVE, list);\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.a\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ab\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.abc\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ABC\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aaa\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.Aaa\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aAA\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.abcd\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\WildcardFileFilterTest.java",
  "methodName" : "testAcceptString",
  "sourceCode" : "@Test\r\npublic void testAcceptString() {\r\n    // PREPARE\r\n    final WildcardFileFilter filter = new WildcardFileFilter(\"*.txt\", \"*.a??\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.a\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ab\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.abc\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ABC\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aaa\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.Aaa\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aAA\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.abcd\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\WildcardFileFilterTest.java",
  "methodName" : "testAcceptStringIOCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptStringIOCaseInsensitive() {\r\n    // PREPARE\r\n    final WildcardFileFilter filter = new WildcardFileFilter(IOCase.INSENSITIVE, \"*.txt\", \"*.a??\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.a\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ab\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.abc\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.ABC\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aaa\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.Aaa\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aAA\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.abcd\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\filter\\WildcardFileFilterTest.java",
  "methodName" : "testAcceptStringIOCaseSensitive",
  "sourceCode" : "@Test\r\npublic void testAcceptStringIOCaseSensitive() {\r\n    // PREPARE\r\n    final WildcardFileFilter filter = new WildcardFileFilter(IOCase.SENSITIVE, \"*.txt\", \"*.a??\");\r\n    // TEST\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test1.txt\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test2.txt\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.a\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ab\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.abc\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.ABC\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aaa\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.Aaa\"))));\r\n    assertTrue(filter.accept(createFileSelectInfo(new File(\"test.aAA\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.abcd\"))));\r\n    assertFalse(filter.accept(createFileSelectInfo(new File(\"test.xxx\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\function\\VfsConsumerTest.java",
  "methodName" : "test",
  "sourceCode" : "/**\r\n * Tests {@link VfsConsumer}.\r\n */\r\n@Test\r\npublic void test() throws FileSystemException {\r\n    test(FileObject::exists);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileMonitorTest.java",
  "methodName" : "testChildFileDeletedWithoutRecursiveChecking",
  "sourceCode" : "@Test\r\npublic void testChildFileDeletedWithoutRecursiveChecking() throws Exception {\r\n    writeToFile(testFile);\r\n    try (FileObject fileObject = fileSystemManager.resolveFile(testDir.toURI().toURL().toString())) {\r\n        try (DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener())) {\r\n            monitor.setDelay(2000);\r\n            monitor.setRecursive(false);\r\n            monitor.addFile(fileObject);\r\n            monitor.start();\r\n            resetStatus();\r\n            Thread.sleep(DELAY_MILLIS * 5);\r\n            testFile.delete();\r\n            Thread.sleep(DELAY_MILLIS * 30);\r\n            assertNull(getStatus(PeekLocation.LAST), \"Event should not have occurred\");\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileMonitorTest.java",
  "methodName" : "testChildFileRecreated",
  "sourceCode" : "@Test\r\npublic void testChildFileRecreated() throws Exception {\r\n    writeToFile(testFile);\r\n    try (FileObject fileObj = fileSystemManager.resolveFile(testDir.toURI().toURL().toString())) {\r\n        try (DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener())) {\r\n            monitor.setDelay(2000);\r\n            monitor.setRecursive(true);\r\n            monitor.addFile(fileObj);\r\n            monitor.start();\r\n            resetStatus();\r\n            Thread.sleep(DELAY_MILLIS * 5);\r\n            testFile.delete();\r\n            waitFor(Status.DELETED, DELAY_MILLIS * 30, PeekLocation.LAST);\r\n            resetStatus();\r\n            Thread.sleep(DELAY_MILLIS * 5);\r\n            writeToFile(testFile);\r\n            waitFor(Status.CREATED, DELAY_MILLIS * 30, PeekLocation.LAST);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileMonitorTest.java",
  "methodName" : "testFileCreated",
  "sourceCode" : "@Test\r\npublic void testFileCreated() throws Exception {\r\n    try (FileObject fileObject = fileSystemManager.resolveFile(testFile.toURI().toURL().toString())) {\r\n        try (DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener())) {\r\n            // TestFileListener manipulates status\r\n            monitor.setDelay(DELAY_MILLIS);\r\n            monitor.addFile(fileObject);\r\n            monitor.start();\r\n            writeToFile(testFile);\r\n            Thread.sleep(DELAY_MILLIS * 5);\r\n            waitFor(Status.CREATED, DELAY_MILLIS * 5, PeekLocation.FIRST);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileMonitorTest.java",
  "methodName" : "testFileDeleted",
  "sourceCode" : "@Test\r\npublic void testFileDeleted() throws Exception {\r\n    writeToFile(testFile);\r\n    try (FileObject fileObject = fileSystemManager.resolveFile(testFile.toURI().toString())) {\r\n        try (DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener())) {\r\n            // TestFileListener manipulates status\r\n            monitor.setDelay(DELAY_MILLIS);\r\n            monitor.addFile(fileObject);\r\n            monitor.start();\r\n            testFile.delete();\r\n            waitFor(Status.DELETED, DELAY_MILLIS * 5, PeekLocation.LAST);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileMonitorTest.java",
  "methodName" : "testFileModified",
  "sourceCode" : "@Test\r\npublic void testFileModified() throws Exception {\r\n    writeToFile(testFile);\r\n    try (FileObject fileObject = fileSystemManager.resolveFile(testFile.toURI().toURL().toString())) {\r\n        try (DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener())) {\r\n            // TestFileListener manipulates status\r\n            monitor.setDelay(DELAY_MILLIS);\r\n            monitor.addFile(fileObject);\r\n            monitor.start();\r\n            // Need a long delay to insure the new timestamp doesn't truncate to be the same as\r\n            // the current timestamp. Java only guarantees the timestamp will be to 1 second.\r\n            Thread.sleep(DELAY_MILLIS * 10);\r\n            final long valueMillis = System.currentTimeMillis();\r\n            final boolean rcMillis = testFile.setLastModified(valueMillis);\r\n            assertTrue(rcMillis, \"setLastModified succeeded\");\r\n            waitFor(Status.CHANGED, DELAY_MILLIS * 5, PeekLocation.LAST);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileMonitorTest.java",
  "methodName" : "testFileMonitorRestarted",
  "sourceCode" : "@Test\r\npublic void testFileMonitorRestarted() throws Exception {\r\n    try (FileObject fileObject = fileSystemManager.resolveFile(testFile.toURI().toString());\r\n        DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener())) {\r\n        try {\r\n            // TestFileListener manipulates status\r\n            monitor.setDelay(DELAY_MILLIS);\r\n            monitor.addFile(fileObject);\r\n            monitor.start();\r\n            writeToFile(testFile);\r\n            Thread.sleep(DELAY_MILLIS * 5);\r\n        } finally {\r\n            monitor.stop();\r\n        }\r\n        monitor.start();\r\n        try {\r\n            testFile.delete();\r\n            waitFor(Status.DELETED, DELAY_MILLIS * 5, PeekLocation.LAST);\r\n        } finally {\r\n            monitor.stop();\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileMonitorTest.java",
  "methodName" : "testFileRecreated",
  "sourceCode" : "@Test\r\npublic void testFileRecreated() throws Exception {\r\n    try (FileObject fileObject = fileSystemManager.resolveFile(testFile.toURI());\r\n        DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener())) {\r\n        // TestFileListener manipulates status\r\n        monitor.setDelay(DELAY_MILLIS);\r\n        monitor.addFile(fileObject);\r\n        monitor.start();\r\n        writeToFile(testFile);\r\n        waitFor(Status.CREATED, DELAY_MILLIS * 10, PeekLocation.LAST);\r\n        resetStatus();\r\n        testFile.delete();\r\n        waitFor(Status.DELETED, DELAY_MILLIS * 10, PeekLocation.LAST);\r\n        resetStatus();\r\n        Thread.sleep(DELAY_MILLIS * 5);\r\n        monitor.addFile(fileObject);\r\n        writeToFile(testFile);\r\n        waitFor(Status.CREATED, DELAY_MILLIS * 10, PeekLocation.LAST);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileMonitorTest.java",
  "methodName" : "testIgnoreTestAddRemove",
  "sourceCode" : "/**\r\n * VFS-299: Handlers are not removed. One instance is {@link DefaultFileMonitor#removeFile(FileObject)}.\r\n *\r\n * As a result, the file monitor will fire two created events.\r\n */\r\n@Disabled(\"VFS-299\")\r\n@Test\r\npublic void testIgnoreTestAddRemove() throws Exception {\r\n    try (FileObject fileObject = fileSystemManager.resolveFile(testFile.toURI().toString())) {\r\n        final CountingListener listener = new CountingListener();\r\n        try (DefaultFileMonitor monitor = new DefaultFileMonitor(listener)) {\r\n            monitor.setDelay(DELAY_MILLIS);\r\n            monitor.addFile(fileObject);\r\n            monitor.removeFile(fileObject);\r\n            monitor.addFile(fileObject);\r\n            monitor.start();\r\n            writeToFile(testFile);\r\n            Thread.sleep(DELAY_MILLIS * 3);\r\n            assertEquals(1, listener.created.get(), \"Created event is only fired once\");\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileMonitorTest.java",
  "methodName" : "testIgnoreTestStartStop",
  "sourceCode" : "/**\r\n * VFS-299: Handlers are not removed. There is no API for properly decommissioning a file monitor.\r\n *\r\n * As a result, listeners of stopped monitors still receive events.\r\n */\r\n@Disabled(\"VFS-299\")\r\n@Test\r\npublic void testIgnoreTestStartStop() throws Exception {\r\n    try (FileObject fileObject = fileSystemManager.resolveFile(testFile.toURI().toString())) {\r\n        final CountingListener stoppedListener = new CountingListener();\r\n        try (DefaultFileMonitor stoppedMonitor = new DefaultFileMonitor(stoppedListener)) {\r\n            stoppedMonitor.start();\r\n            stoppedMonitor.addFile(fileObject);\r\n        }\r\n        // Variant 1: it becomes documented behavior to manually remove all files after stop() such that all\r\n        // listeners\r\n        // are removed\r\n        // This currently does not work, see DefaultFileMonitorTests#testAddRemove above.\r\n        // stoppedMonitor.removeFile(file);\r\n        // Variant 2: change behavior of stop(), which then removes all handlers.\r\n        // This would remove the possibility to pause watching files. Resuming watching for the same files via\r\n        // start();\r\n        // stop(); start(); would not work.\r\n        // Variant 3: introduce new method DefaultFileMonitor#close which definitely removes all resources held by\r\n        // DefaultFileMonitor.\r\n        final CountingListener activeListener = new CountingListener();\r\n        try (DefaultFileMonitor activeMonitor = new DefaultFileMonitor(activeListener)) {\r\n            activeMonitor.setDelay(DELAY_MILLIS);\r\n            activeMonitor.addFile(fileObject);\r\n            activeMonitor.start();\r\n            writeToFile(testFile);\r\n            Thread.sleep(DELAY_MILLIS * 10);\r\n            assertEquals(1, activeListener.created.get(), \"The listener of the active monitor received one created event\");\r\n            assertEquals(0, stoppedListener.created.get(), \"The listener of the stopped monitor received no events\");\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testAddAndRemoveProvider",
  "sourceCode" : "@Test\r\npublic void testAddAndRemoveProvider() throws FileSystemException {\r\n    try (DefaultFileSystemManager fileSystemManager = new DefaultFileSystemManager()) {\r\n        fileSystemManager.setFilesCache(new NullFilesCache());\r\n        fileSystemManager.setCacheStrategy(CacheStrategy.MANUAL);\r\n        final RamFileProvider provider = Mockito.spy(new RamFileProvider());\r\n        fileSystemManager.addProvider(\"ram1\", provider);\r\n        fileSystemManager.addProvider(\"ram2\", provider);\r\n        assertNotNull(fileSystemManager.resolveFile(\"ram1:///\"));\r\n        assertNotNull(fileSystemManager.resolveFile(\"ram2:///\"));\r\n        fileSystemManager.removeProvider(\"ram1\");\r\n        Mockito.verify(provider, Mockito.never()).close();\r\n        assertThrows(FileSystemException.class, () -> fileSystemManager.resolveFile(\"ram1:///\"));\r\n        assertNotNull(fileSystemManager.resolveFile(\"ram2:///\"));\r\n        fileSystemManager.removeProvider(\"ram2\");\r\n        Mockito.verify(provider).close();\r\n        assertThrows(FileSystemException.class, () -> fileSystemManager.resolveFile(\"ram2:///\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testClose",
  "sourceCode" : "/**\r\n * Tests {@link DefaultFileSystemManager#close()}.\r\n *\r\n * @throws FileSystemException\r\n */\r\n@Test\r\npublic void testClose() throws FileSystemException {\r\n    try (FileSystemManager fileSystemManager = new DefaultFileSystemManager()) {\r\n        VFS.setManager(fileSystemManager);\r\n        VFS.setManager(null);\r\n    }\r\n    assertNotNull(VFS.getManager());\r\n    final Path path = Paths.get(\"DoesNotExist.not\");\r\n    assertFalse(VFS.getManager().resolveFile(path.toUri()).exists());\r\n    assertFalse(VFS.getManager().toFileObject(path.toFile()).exists());\r\n    assertFalse(VFS.getManager().toFileObject(path).exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testCreateBz2FileSystem",
  "sourceCode" : "@Test\r\npublic void testCreateBz2FileSystem() throws FileSystemException {\r\n    testCreateFileSystem(\"src/test/resources/test-data/bla.txt.bz2\", Bzip2FileObject.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testCreateGzipFileSystem",
  "sourceCode" : "@Test\r\n@Disabled\r\npublic void testCreateGzipFileSystem() throws FileSystemException {\r\n    testCreateFileSystem(\"src/test/resources/test-data/好.txt.gz\", GzipFileObject.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testCreateJarFileSystem",
  "sourceCode" : "@Test\r\npublic void testCreateJarFileSystem() throws FileSystemException {\r\n    testCreateFileSystem(\"src/test/resources/test-data/nested.jar\", JarFileObject.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testCreateZipFileSystem",
  "sourceCode" : "@Test\r\npublic void testCreateZipFileSystem() throws FileSystemException {\r\n    testCreateFileSystem(\"src/test/resources/test-data/nested.zip\", ZipFileObject.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testFileCacheEmptyAfterManagerClose",
  "sourceCode" : "@Test\r\npublic void testFileCacheEmptyAfterManagerClose() throws FileSystemException {\r\n    final FileSystemManager manager = VFS.getManager();\r\n    assertNotNull(manager);\r\n    try (FileObject fileObject = manager.resolveFile(Paths.get(\"src/test/resources/test-data/read-tests/file1.txt\").toUri())) {\r\n        assertTrue(fileObject.exists());\r\n        final FilesCache filesCache = manager.getFilesCache();\r\n        final FileName name = fileObject.getName();\r\n        // Make sure we have file object in the cache.\r\n        assertNotNull(filesCache.getFile(fileObject.getFileSystem(), name));\r\n        manager.close();\r\n        // Cache MUST now be empty.\r\n        assertNull(filesCache.getFile(fileObject.getFileSystem(), name));\r\n    } finally {\r\n        // Makes sure we reset the singleton or other tests will fail.\r\n        VFS.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testFileCacheEmptyAfterVFSClose",
  "sourceCode" : "@Test\r\npublic void testFileCacheEmptyAfterVFSClose() throws FileSystemException {\r\n    final FileSystemManager manager = VFS.getManager();\r\n    assertNotNull(manager);\r\n    try (FileObject fileObject = manager.resolveFile(Paths.get(\"src/test/resources/test-data/read-tests/file1.txt\").toUri())) {\r\n        assertTrue(fileObject.exists());\r\n        final FilesCache filesCache = manager.getFilesCache();\r\n        final FileName name = fileObject.getName();\r\n        // Make sure we have file object in the cache.\r\n        assertNotNull(filesCache.getFile(fileObject.getFileSystem(), name));\r\n        VFS.close();\r\n        // Cache MUST now be empty.\r\n        assertNull(filesCache.getFile(fileObject.getFileSystem(), name));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testResolveFileAbsoluteThrows",
  "sourceCode" : "/**\r\n * Even if the file name is absolute, the base file must be given. This is an inconsistency in the API, but it is documented as such.\r\n *\r\n * @see \"VFS-519\"\r\n */\r\n@Test\r\npublic void testResolveFileAbsoluteThrows() {\r\n    final String absolute = new File(\"/\").getAbsoluteFile().toURI().toString();\r\n    assertThrows(NullPointerException.class, () -> VFS.getManager().resolveFile((File) null, absolute));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testResolveFileNameNull",
  "sourceCode" : "/**\r\n * If the base name is {@code null}, the file system manager should fail throwing a FileSystemException.\r\n *\r\n * @see VFS-189\r\n */\r\n@Test\r\npublic void testResolveFileNameNull() {\r\n    assertThrows(FileSystemException.class, () -> VFS.getManager().resolveName((FileName) null, \"../\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testResolveFileNameType",
  "sourceCode" : "/**\r\n * If the path ends with one of '/' or '.' or '..' or anyPath/..' or 'anyPath/.' , the resulting FileName should be of FileType.FOLDER, else of\r\n * FileType.FILE.\r\n */\r\n@Test\r\npublic void testResolveFileNameType() {\r\n    try (DefaultFileSystemManager fileSystemManager = new DefaultFileSystemManager()) {\r\n        // @formatter:off\r\n        final FileName baseNameFolder = new GenericURLFileName(\"sftp\", \"localhost\", 22, 22, \"user\", \"password\", \"basePath\", FileType.FOLDER, \"query=test\");\r\n        // @formatter:on\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"/\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \".\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"..\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"./\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"../\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"./Sub Folder/\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"../Descendant Folder/\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"./Sub Folder/.\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"../Descendant Folder/..\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"./Sub Folder/./\").getType());\r\n        assertEquals(FileType.FOLDER, fileSystemManager.resolveName(baseNameFolder, \"../Descendant Folder/../\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"File.txt\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"/File.txt\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"./File.txt\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"../File.txt\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"./Sub Folder/File.txt\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"../Descendant Folder/File.txt\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"./Sub Folder/./File.txt\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"../Descendant Folder/../File.txt\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"../Descendant Folder/../File.\").getType());\r\n        assertEquals(FileType.FILE, fileSystemManager.resolveName(baseNameFolder, \"../Descendant Folder/../File..\").getType());\r\n    } catch (final FileSystemException e) {\r\n        fail(e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testResolveFileObjectNullAbsolute",
  "sourceCode" : "@Test\r\npublic void testResolveFileObjectNullAbsolute() throws FileSystemException {\r\n    final String absolute = new File(\"/\").getAbsoluteFile().toURI().toString();\r\n    VFS.getManager().resolveFile((FileObject) null, absolute);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testResolveFileObjectRelativeThrows",
  "sourceCode" : "@Test\r\npublic void testResolveFileObjectRelativeThrows() {\r\n    assertThrows(FileSystemException.class, () -> VFS.getManager().resolveFile((FileObject) null, \"relativePath\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\DefaultFileSystemManagerTest.java",
  "methodName" : "testResolveFileRelativeThrows",
  "sourceCode" : "@Test\r\npublic void testResolveFileRelativeThrows() {\r\n    assertThrows(NullPointerException.class, () -> VFS.getManager().resolveFile((File) null, \"relativePath\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\StandardFileSystemManagerTest.java",
  "methodName" : "testClose",
  "sourceCode" : "/**\r\n * Tests {@link StandardFileSystemManager#close()}.\r\n *\r\n * @throws FileSystemException\r\n */\r\n@Test\r\npublic void testClose() throws FileSystemException {\r\n    try (FileSystemManager fileSystemManager = new StandardFileSystemManager()) {\r\n        VFS.setManager(fileSystemManager);\r\n        VFS.setManager(null);\r\n    }\r\n    assertNotNull(VFS.getManager());\r\n    assertFalse(VFS.getManager().resolveFile(Paths.get(\"DoesNotExist.not\").toUri()).exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\VfsClassLoaderTests.java",
  "methodName" : "testGetResourcesJARs",
  "sourceCode" : "/**\r\n * Tests retrieving resources (from JAR searchpath).\r\n * <p>\r\n * This is run for all providers, but only when a local provider is present and jar extension is registered it will\r\n * actually carry out all tests.\r\n * </p>\r\n */\r\n@Test\r\npublic void testGetResourcesJARs() throws Exception {\r\n    final FileSystemManager manager = getManager();\r\n    try {\r\n        // hasProvider(\"file\") cannot be used as it triggers default provider URL\r\n        manager.toFileObject(new File(\".\"));\r\n    } catch (final FileSystemException e) {\r\n        System.out.println(\"VfsClassLoaderTests no local file provider, skipping.\");\r\n        return;\r\n    }\r\n    // build search path without using #getBaseFolder()\r\n    // because NestedJarTestCase redefines it\r\n    final File baseDir = getTestDirectoryFile();\r\n    final FileObject nestedJar = manager.resolveFile(baseDir, \"nested.jar\");\r\n    final FileObject testJar = manager.resolveFile(baseDir, \"test.jar\");\r\n    // test setup needs to know about .jar extension - i.e. NestedJarTestCase\r\n    if (!manager.canCreateFileSystem(nestedJar)) {\r\n        System.out.println(\"VfsClassLoaderTests no layered .jar provider, skipping.\");\r\n        return;\r\n    }\r\n    // verify test setup\r\n    assertSame(\"nested.jar is required for testing\", nestedJar.getType(), FileType.FILE);\r\n    assertSame(\"test.jar is required for testing\", testJar.getType(), FileType.FILE);\r\n    // System class loader (null) might be unpredictable in regards\r\n    // to returning resources for META-INF/MANIFEST.MF (see VFS-500)\r\n    // so we use our own which is guaranteed to not return any hit\r\n    final ClassLoader mockClassloader = new MockClassloader();\r\n    final FileObject[] search = { nestedJar, testJar };\r\n    final VFSClassLoader loader = new VFSClassLoader(search, getManager(), mockClassloader);\r\n    final Enumeration<URL> urls = loader.getResources(\"META-INF/MANIFEST.MF\");\r\n    final URL url1 = urls.nextElement();\r\n    final URL url2 = urls.nextElement();\r\n    assertTrue(\"First resource must refer to nested.jar but was \" + url1, url1.toString().endsWith(\"nested.jar!/META-INF/MANIFEST.MF\"));\r\n    assertTrue(\"Second resource must refer to test.jar but was \" + url2, url2.toString().endsWith(\"test.jar!/META-INF/MANIFEST.MF\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\VfsClassLoaderTests.java",
  "methodName" : "testGetResourcesNoLayerLocal",
  "sourceCode" : "/**\r\n * Tests retrieving resources (from local directory with .jar extension).\r\n * <p>\r\n * This test is repeated with various provider configurations but works on local files, only.\r\n * </p>\r\n */\r\n@Test\r\npublic void testGetResourcesNoLayerLocal() throws Exception {\r\n    final FileSystemManager manager = getManager();\r\n    try {\r\n        // hasProvider(\"file\") cannot be used as it triggers default provider URL\r\n        manager.toFileObject(new File(\".\"));\r\n    } catch (final FileSystemException e) {\r\n        System.out.println(\"VfsClassLoaderTests no local file provider, skipping.\");\r\n        return;\r\n    }\r\n    final File baseDir = getTestDirectoryFile();\r\n    // setup test folder\r\n    final FileObject dir = manager.resolveFile(baseDir, \"read-tests/dir1/subdir4.jar\");\r\n    assertSame(\"subdir4.jar/ is required for testing \" + dir, dir.getType(), FileType.FOLDER);\r\n    assertFalse(manager.canCreateFileSystem(dir));\r\n    // prepare classloader\r\n    final FileObject[] search = { dir };\r\n    final ClassLoader mockClassloader = new MockClassloader();\r\n    final VFSClassLoader loader = new VFSClassLoader(search, getManager(), mockClassloader);\r\n    // verify resource loading\r\n    final Enumeration<URL> urls = loader.getResources(\"file1.txt\");\r\n    final URL url1 = urls.nextElement();\r\n    assertFalse(\"Only one hit expected\", urls.hasMoreElements());\r\n    assertTrue(\"not pointing to resource \" + url1, url1.toString().endsWith(\"subdir4.jar/file1.txt\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\VfsClassLoaderTests.java",
  "methodName" : "testLoadClass",
  "sourceCode" : "/**\r\n * Tests loading a class.\r\n */\r\n@Test\r\npublic void testLoadClass() throws Exception {\r\n    final VFSClassLoader loader = createClassLoader();\r\n    final Class<?> testClass = loader.loadClass(\"code.ClassToLoad\");\r\n    final Package pack = testClass.getPackage();\r\n    assertEquals(\"code\", pack.getName());\r\n    verifyPackage(pack, false);\r\n    final Object testObject = testClass.getConstructor().newInstance();\r\n    assertEquals(\"**PRIVATE**\", testObject.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\VfsClassLoaderTests.java",
  "methodName" : "testLoadResource",
  "sourceCode" : "/**\r\n * Tests loading a resource.\r\n */\r\n@Test\r\npublic void testLoadResource() throws Exception {\r\n    final VFSClassLoader loader = createClassLoader();\r\n    final URL resource = loader.getResource(\"read-tests/file1.txt\");\r\n    assertNotNull(resource);\r\n    final URLConnection urlCon = resource.openConnection();\r\n    assertSameURLContent(FILE1_CONTENT, urlCon);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\VfsClassLoaderTests.java",
  "methodName" : "testSealing",
  "sourceCode" : "/**\r\n * Tests package sealing.\r\n */\r\n@Test\r\npublic void testSealing() throws Exception {\r\n    final VFSClassLoader loader = createClassLoader();\r\n    final Class<?> testClass = loader.loadClass(\"code.sealed.AnotherClass\");\r\n    final Package pack = testClass.getPackage();\r\n    assertEquals(\"code.sealed\", pack.getName());\r\n    verifyPackage(pack, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\impl\\VfsClassLoaderTests.java",
  "methodName" : "testThreadSafety",
  "sourceCode" : "@Test\r\npublic void testThreadSafety() throws Exception {\r\n    final int THREADS = 40;\r\n    final BlockingQueue<Runnable> workQueue = new ArrayBlockingQueue<>(THREADS * 2);\r\n    final List<Throwable> exceptions = new ArrayList<>();\r\n    final Thread.UncaughtExceptionHandler handler = (t, e) -> {\r\n        synchronized (exceptions) {\r\n            exceptions.add(e);\r\n        }\r\n    };\r\n    final ThreadFactory factory = r -> {\r\n        final Thread thread = new Thread(r, \"VfsClassLoaderTests.testThreadSafety\");\r\n        thread.setUncaughtExceptionHandler(handler);\r\n        return thread;\r\n    };\r\n    final Queue<Runnable> rejections = new LinkedList<>();\r\n    final RejectedExecutionHandler rejectionHandler = (r, executor) -> {\r\n        synchronized (rejections) {\r\n            rejections.add(r);\r\n        }\r\n    };\r\n    final ThreadPoolExecutor executor = new ThreadPoolExecutor(THREADS, THREADS, 0, TimeUnit.SECONDS, workQueue, factory, rejectionHandler);\r\n    executor.prestartAllCoreThreads();\r\n    for (int i = 0; i < THREADS; i++) {\r\n        final VFSClassLoader loader = createClassLoader();\r\n        workQueue.put(new VfsClassLoaderTests.LoadClass(loader));\r\n    }\r\n    while (!workQueue.isEmpty()) {\r\n        Thread.sleep(10);\r\n    }\r\n    while (!rejections.isEmpty() && executor.getActiveCount() > 0) {\r\n        final List<Runnable> rejected = new ArrayList<>();\r\n        synchronized (rejections) {\r\n            rejected.addAll(rejections);\r\n            rejections.clear();\r\n        }\r\n        workQueue.addAll(rejected);\r\n    }\r\n    executor.shutdown();\r\n    executor.awaitTermination(30, TimeUnit.SECONDS);\r\n    assertEquals(THREADS, executor.getCompletedTaskCount());\r\n    if (!exceptions.isEmpty()) {\r\n        final StringBuilder exceptionMsg = new StringBuilder();\r\n        final StringBuilderWriter writer = new StringBuilderWriter(exceptionMsg);\r\n        try (PrintWriter printWriter = new PrintWriter(writer)) {\r\n            for (final Throwable t : exceptions) {\r\n                printWriter.write(t.getMessage());\r\n                printWriter.write('\\n');\r\n                t.printStackTrace(printWriter);\r\n                printWriter.write('\\n');\r\n            }\r\n            printWriter.flush();\r\n        }\r\n        assertTrue(exceptions.size() + \" threads failed: \" + exceptionMsg, exceptions.isEmpty());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\InvertIncludeFileSelectorTest.java",
  "methodName" : "testInvertMatchAll",
  "sourceCode" : "@Test\r\npublic void testInvertMatchAll() throws Exception {\r\n    final FileObject[] list = PatternFileSelectorTest.getBaseFolder().findFiles(new InvertIncludeFileSelector(new PatternFileSelector(\".*\")));\r\n    assertEquals(0, list.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\InvertIncludeFileSelectorTest.java",
  "methodName" : "testInvertMatchSome",
  "sourceCode" : "@Test\r\npublic void testInvertMatchSome() throws Exception {\r\n    final FileObject[] list = PatternFileSelectorTest.getBaseFolder().findFiles(new InvertIncludeFileSelector(new PatternFileSelector(\".*\\\\.html\")));\r\n    assertEquals(7, list.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\IPv6LocalConnectionTests.java",
  "methodName" : "testConnectIPv6UrlLocal",
  "sourceCode" : "@Test\r\npublic void testConnectIPv6UrlLocal() throws Exception {\r\n    final List<String> localIPv6Addresses = getLocalIPv6Addresses();\r\n    boolean connected = false;\r\n    for (final String ipv6Address : localIPv6Addresses) {\r\n        final String ipv6Url = StringUtils.replace(getReadFolder().getURL().toString(), \"localhost\", \"[\" + ipv6Address + \"]\");\r\n        try {\r\n            final FileSystem fileSystem = getFileSystem();\r\n            final FileObject readFolderObject = getManager().resolveFile(ipv6Url, setupConnectionTimeoutHints(fileSystem));\r\n            connected = connected || readFolderObject.resolveFile(\"file1.txt\").getContent().getByteArray() != null;\r\n        } catch (final FileSystemException e) {\r\n            // We don't care, if some of the discovered IPv6 addresses don't work.\r\n            // We just need a single one to work for testing the functionality end-to-end.\r\n            log.warn(\"Failed to connect to some of the local IPv6 network addresses\", e);\r\n        }\r\n    }\r\n    assertTrue(\"None of the discovered local IPv6 network addresses has responded for connection: \" + localIPv6Addresses, connected);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\LastModifiedTests.java",
  "methodName" : "testGetAccuracy",
  "sourceCode" : "/**\r\n * Tests FileSystem#getLastModTimeAccuracy for sane values.\r\n *\r\n * @throws FileSystemException if error occurred\r\n */\r\n@Test\r\npublic void testGetAccuracy() throws FileSystemException {\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    final long lastModTimeAccuracyMillis = (long) file.getFileSystem().getLastModTimeAccuracy();\r\n    // System.out.println(\"Accuracy on \" + file.getFileSystem().getRootURI() + \" is \" + lastModTimeAccuracy + \" as\r\n    // told by \" + file.getFileSystem().getClass().getCanonicalName());\r\n    assertTrue(\"Accuracy must be positive\", lastModTimeAccuracyMillis >= 0);\r\n    // just any sane limit\r\n    assertTrue(\"Accuracy must be < 2m\", lastModTimeAccuracyMillis < Duration.ofMinutes(2).toMillis());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\LastModifiedTests.java",
  "methodName" : "testGetLastModifiedFile",
  "sourceCode" : "/**\r\n * Tests getting the last modified time of a file.\r\n *\r\n * @throws FileSystemException if error occurred\r\n */\r\n@Test\r\npublic void testGetLastModifiedFile() throws FileSystemException {\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertNotEquals(0L, file.getContent().getLastModifiedTime());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\LastModifiedTests.java",
  "methodName" : "testGetLastModifiedFolder",
  "sourceCode" : "/**\r\n * Tests getting the last modified time of a folder.\r\n *\r\n * @throws FileSystemException if error occurred\r\n */\r\n@Test\r\npublic void testGetLastModifiedFolder() throws FileSystemException {\r\n    final FileObject file = getReadFolder().resolveFile(\"dir1\");\r\n    assertNotEquals(0L, file.getContent().getLastModifiedTime());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\LastModifiedTests.java",
  "methodName" : "testSetLastModifiedFile",
  "sourceCode" : "/**\r\n * Tests setting the last modified time of file.\r\n *\r\n * @throws FileSystemException if error occurred\r\n */\r\n@Test\r\npublic void testSetLastModifiedFile() throws FileSystemException {\r\n    final long yesterdayMillis = Instant.now().minus(ONE_DAY).toEpochMilli();\r\n    if (getReadFolder().getFileSystem().hasCapability(Capability.SET_LAST_MODIFIED_FILE)) {\r\n        // Try a file\r\n        final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n        file.getContent().setLastModifiedTime(yesterdayMillis);\r\n        final long lastModTimeAccuracyMillis = (long) file.getFileSystem().getLastModTimeAccuracy();\r\n        // folder.refresh(); TODO: does not work with SSH VFS-563\r\n        final long lastModifiedTime = file.getContent().getLastModifiedTime();\r\n        assertDeltaMillis(\"set/getLastModified on File\", yesterdayMillis, lastModifiedTime, lastModTimeAccuracyMillis);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\LastModifiedTests.java",
  "methodName" : "testSetLastModifiedFolder",
  "sourceCode" : "/**\r\n * Tests setting the last modified time of a folder.\r\n *\r\n * @throws FileSystemException if error occurred\r\n */\r\n@Test\r\npublic void testSetLastModifiedFolder() throws FileSystemException {\r\n    final long yesterdayMillis = Instant.now().minus(ONE_DAY).toEpochMilli();\r\n    if (getReadFolder().getFileSystem().hasCapability(Capability.SET_LAST_MODIFIED_FOLDER)) {\r\n        // Try a folder\r\n        final FileObject folder = getReadFolder().resolveFile(\"dir1\");\r\n        folder.getContent().setLastModifiedTime(yesterdayMillis);\r\n        final long lastModTimeAccuracyMillis = (long) folder.getFileSystem().getLastModTimeAccuracy();\r\n        // folder.refresh(); TODO: does not work with SSH VFS-563\r\n        final long lastModifiedTime = folder.getContent().getLastModifiedTime();\r\n        assertDeltaMillis(\"set/getLastModified on Folder\", yesterdayMillis, lastModifiedTime, lastModTimeAccuracyMillis);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\NamingTests.java",
  "methodName" : "testAbsoluteNameConvert",
  "sourceCode" : "/**\r\n * Tests conversion from absolute to relative names.\r\n */\r\n@Test\r\npublic void testAbsoluteNameConvert() throws Exception {\r\n    final FileName baseName = getReadFolder().getName();\r\n    String path = \"/test1/test2\";\r\n    FileName name = getManager().resolveName(baseName, path);\r\n    assertEquals(path, name.getPath());\r\n    // Try child and descendent names\r\n    testRelName(name, \"child\");\r\n    testRelName(name, \"child1/child2\");\r\n    // Try own name\r\n    testRelName(name, \".\");\r\n    // Try parent, and root\r\n    testRelName(name, \"..\");\r\n    testRelName(name, \"../..\");\r\n    // Try sibling and descendent of sibling\r\n    testRelName(name, \"../sibling\");\r\n    testRelName(name, \"../sibling/child\");\r\n    // Try siblings with similar names\r\n    testRelName(name, \"../test2_not\");\r\n    testRelName(name, \"../test2_not/child\");\r\n    testRelName(name, \"../test\");\r\n    testRelName(name, \"../test/child\");\r\n    // Try unrelated\r\n    testRelName(name, \"../../unrelated\");\r\n    testRelName(name, \"../../test\");\r\n    testRelName(name, \"../../test/child\");\r\n    // Test against root\r\n    path = \"/\";\r\n    name = getManager().resolveName(baseName, path);\r\n    assertEquals(path, name.getPath());\r\n    // Try child and descendent names (against root)\r\n    testRelName(name, \"child\");\r\n    testRelName(name, \"child1/child2\");\r\n    // Try own name (against root)\r\n    testRelName(name, \".\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\NamingTests.java",
  "methodName" : "testAbsoluteNames",
  "sourceCode" : "/**\r\n * Tests resolution of absolute names.\r\n */\r\n@Test\r\npublic void testAbsoluteNames() throws Exception {\r\n    // Test against the base folder\r\n    FileName name = getReadFolder().getName();\r\n    checkAbsoluteNames(name);\r\n    // Test against the root\r\n    name = getReadFolder().getFileSystem().getRoot().getName();\r\n    checkAbsoluteNames(name);\r\n    // Test against some unknown file\r\n    name = getManager().resolveName(name, \"a/b/unknown\");\r\n    checkAbsoluteNames(name);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\NamingTests.java",
  "methodName" : "testChildName",
  "sourceCode" : "/**\r\n * Tests child file names.\r\n */\r\n@Test\r\npublic void testChildName() throws Exception {\r\n    final FileName baseName = getReadFolder().getName();\r\n    final String basePath = baseName.getPath();\r\n    final FileName name = getManager().resolveName(baseName, \"some-child\", NameScope.CHILD);\r\n    // Test path is absolute\r\n    assertTrue(\"is absolute\", basePath.startsWith(\"/\"));\r\n    // Test base name\r\n    assertEquals(\"base name\", \"some-child\", name.getBaseName());\r\n    // Test absolute path\r\n    assertEquals(\"absolute path\", basePath + \"/some-child\", name.getPath());\r\n    // Test parent path\r\n    assertEquals(\"parent absolute path\", basePath, name.getParent().getPath());\r\n    // Try using a compound name to find a child\r\n    assertBadName(name, \"a/b\", NameScope.CHILD);\r\n    // Check other invalid names\r\n    checkDescendentNames(name, NameScope.CHILD);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\NamingTests.java",
  "methodName" : "testDescendentName",
  "sourceCode" : "/**\r\n * Tests descendent name resolution.\r\n */\r\n@Test\r\npublic void testDescendentName() throws Exception {\r\n    final FileName baseName = getReadFolder().getName();\r\n    // Test direct child\r\n    String path = baseName.getPath() + \"/some-child\";\r\n    assertSameName(path, baseName, \"some-child\", NameScope.DESCENDENT);\r\n    // Test compound name\r\n    path += \"/grand-child\";\r\n    assertSameName(path, baseName, \"some-child/grand-child\", NameScope.DESCENDENT);\r\n    // Test relative names\r\n    assertSameName(path, baseName, \"./some-child/grand-child\", NameScope.DESCENDENT);\r\n    assertSameName(path, baseName, \"./nada/../some-child/grand-child\", NameScope.DESCENDENT);\r\n    assertSameName(path, baseName, \"some-child/./grand-child\", NameScope.DESCENDENT);\r\n    // Test badly formed descendent names\r\n    checkDescendentNames(baseName, NameScope.DESCENDENT);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\NamingTests.java",
  "methodName" : "testNameResolution",
  "sourceCode" : "/**\r\n * Tests relative name resolution, relative to the base folder.\r\n */\r\n@Test\r\npublic void testNameResolution() throws Exception {\r\n    final FileName baseName = getReadFolder().getName();\r\n    final String parentPath = baseName.getParent().getPath();\r\n    final String path = baseName.getPath();\r\n    final String childPath = path + \"/some-child\";\r\n    // Test empty relative path\r\n    assertSameName(path, baseName, \"\");\r\n    // Test . relative path\r\n    assertSameName(path, baseName, \".\");\r\n    // Test ./ relative path\r\n    assertSameName(path, baseName, \"./\");\r\n    // Test .// relative path\r\n    assertSameName(path, baseName, \".//\");\r\n    // Test .///.///. relative path\r\n    assertSameName(path, baseName, \".///.///.\");\r\n    assertSameName(path, baseName, \"./\\\\/.\\\\//.\");\r\n    // Test <elem>/.. relative path\r\n    assertSameName(path, baseName, \"a/..\");\r\n    // Test .. relative path\r\n    assertSameName(parentPath, baseName, \"..\");\r\n    // Test ../ relative path\r\n    assertSameName(parentPath, baseName, \"../\");\r\n    // Test ..//./ relative path\r\n    assertSameName(parentPath, baseName, \"..//./\");\r\n    assertSameName(parentPath, baseName, \"..//.\\\\\");\r\n    // Test <elem>/../.. relative path\r\n    assertSameName(parentPath, baseName, \"a/../..\");\r\n    // Test <elem> relative path\r\n    assertSameName(childPath, baseName, \"some-child\");\r\n    // Test ./<elem> relative path\r\n    assertSameName(childPath, baseName, \"./some-child\");\r\n    // Test ./<elem>/ relative path\r\n    assertSameName(childPath, baseName, \"./some-child/\");\r\n    // Test <elem>/././././ relative path\r\n    assertSameName(childPath, baseName, \"./some-child/././././\");\r\n    // Test <elem>/../<elem> relative path\r\n    assertSameName(childPath, baseName, \"a/../some-child\");\r\n    // Test <elem>/<elem>/../../<elem> relative path\r\n    assertSameName(childPath, baseName, \"a/b/../../some-child\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\NamingTests.java",
  "methodName" : "testRelativeURI",
  "sourceCode" : "/**\r\n * Tests resolution of relative file names via the FS manager.\r\n */\r\n@Test\r\npublic void testRelativeURI() throws Exception {\r\n    // Build base dir\r\n    getManager().setBaseFile(getReadFolder());\r\n    // Locate the base dir\r\n    FileObject file = getManager().resolveFile(\".\");\r\n    assertSame(\"file object\", getReadFolder(), file);\r\n    // Locate a child\r\n    file = getManager().resolveFile(\"some-child\");\r\n    assertSame(\"file object\", getReadFolder(), file.getParent());\r\n    // Locate a descendent\r\n    file = getManager().resolveFile(\"some-folder/some-file\");\r\n    assertSame(\"file object\", getReadFolder(), file.getParent().getParent());\r\n    // Locate parent\r\n    file = getManager().resolveFile(\"..\");\r\n    assertSame(\"file object\", getReadFolder().getParent(), file);\r\n    // free basefile\r\n    getManager().setBaseFile((FileObject) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\NamingTests.java",
  "methodName" : "testRelativeUriEncoding",
  "sourceCode" : "/**\r\n * Tests encoding of relative URI.\r\n */\r\n@Test\r\npublic void testRelativeUriEncoding() throws Exception {\r\n    // Build base dir\r\n    getManager().setBaseFile(getReadFolder());\r\n    final String path = getReadFolder().getName().getPath();\r\n    // §1 Encode \"some file\"\r\n    FileObject file = getManager().resolveFile(\"%73%6f%6d%65%20%66%69%6c%65\");\r\n    assertEquals(path + \"/some file\", file.getName().getPathDecoded());\r\n    // §2 Encode \".\"\r\n    file = getManager().resolveFile(\"%2e\");\r\n    // 18-6-2005 imario@apache.org: no need to keep the \"current directory\"\r\n    // assertEquals(path + \"/.\", file.getName().getPathDecoded());\r\n    assertEquals(path, file.getName().getPathDecoded());\r\n    // §3 Encode '%'\r\n    file = getManager().resolveFile(\"a%25\");\r\n    assertEquals(path + \"/a%\", file.getName().getPathDecoded());\r\n    // §4 Encode /\r\n    file = getManager().resolveFile(\"dir%2fchild\");\r\n    assertEquals(path + \"/dir/child\", file.getName().getPathDecoded());\r\n    // §5 Encode \\\r\n    file = getManager().resolveFile(\"dir%5cchild\");\r\n    // 18-6-2005 imario@apache.org: all file separators normalized to \"/\"\r\n    // decided to do this to get the same behavior as in §4 on Windows\r\n    // platforms\r\n    // assertEquals(path + \"/dir\\\\child\", file.getName().getPathDecoded());\r\n    assertEquals(path + \"/dir/child\", file.getName().getPathDecoded());\r\n    // §6 Use \"%\" literal\r\n    assertThrows(FileSystemException.class, () -> getManager().resolveFile(\"%\"));\r\n    // §7 Not enough digits in encoded char\r\n    assertThrows(FileSystemException.class, () -> getManager().resolveFile(\"%5\"));\r\n    // §8 Invalid digit in encoded char\r\n    assertThrows(FileSystemException.class, () -> getManager().resolveFile(\"%q\"));\r\n    // free basefile\r\n    getManager().setBaseFile((FileObject) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\NamingTests.java",
  "methodName" : "testRootFileName",
  "sourceCode" : "/**\r\n * Tests the root file name.\r\n */\r\n@Test\r\npublic void testRootFileName() throws Exception {\r\n    // Locate the root file\r\n    final FileName rootName = getReadFolder().getFileSystem().getRoot().getName();\r\n    // Test that the root path is \"/\"\r\n    assertEquals(\"root path\", \"/\", rootName.getPath());\r\n    // Test that the root base name is \"\"\r\n    assertEquals(\"root base name\", \"\", rootName.getBaseName());\r\n    // Test that the root name has no parent\r\n    assertNull(\"root parent\", rootName.getParent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\operations\\BasicOperationsTest.java",
  "methodName" : "testLifecycleComp",
  "sourceCode" : "/**\r\n * Ensure FileOperationProviders which are VfsComponents are set up and teared down.\r\n *\r\n * @throws FileSystemException for runtime problems\r\n */\r\n@Test\r\npublic void testLifecycleComp() throws FileSystemException {\r\n    try (final MyFileOperationProviderComp myop = new MyFileOperationProviderComp()) {\r\n        assertEquals(0, myop.ops);\r\n        manager.addOperationProvider(\"file\", myop);\r\n        assertEquals(7, myop.ops);\r\n        manager.close();\r\n        // VFS-577\r\n        assertEquals(15, myop.ops, \"close() not called\");\r\n    }\r\n    // fixture will close again\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\operations\\BasicOperationsTest.java",
  "methodName" : "testLifecycleNoncomp",
  "sourceCode" : "/**\r\n * Ensure you can use FileOperationProvider which is not a VfsComponent.\r\n *\r\n * @throws FileSystemException for runtime problems\r\n */\r\n@Test\r\npublic void testLifecycleNoncomp() throws FileSystemException {\r\n    final MyFileOperationProviderBase myop = new MyFileOperationProviderNoncomp();\r\n    manager.addOperationProvider(\"file\", myop);\r\n    final FileOperationProvider[] ops = manager.getOperationProviders(\"file\");\r\n    assertSame(1, ops.length, \"exactly one provider registered\");\r\n    assertSame(myop, ops[0]);\r\n    // collect not invoked\r\n    assertEquals(0, myop.ops);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\operations\\BasicOperationsTest.java",
  "methodName" : "testNotFoundAny",
  "sourceCode" : "/**\r\n * Ensures getOperations calls collect and allows empty response.\r\n *\r\n * @throws FileSystemException for runtime problems\r\n */\r\n@Test\r\npublic void testNotFoundAny() throws FileSystemException {\r\n    final MyFileOperationProviderBase myop = new MyFileOperationProviderNoncomp();\r\n    manager.addOperationProvider(\"file\", myop);\r\n    try (final FileObject fo = manager.toFileObject(new File(\".\"))) {\r\n        final FileOperations ops = fo.getFileOperations();\r\n        assertNotNull(ops);\r\n        final Class<? extends FileOperation>[] oparray = ops.getOperations();\r\n        assertSame(0, oparray.length, \"no ops should be found\");\r\n        // collect\r\n        assertSame(16, myop.ops);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\operations\\BasicOperationsTest.java",
  "methodName" : "testNotFoundOperation",
  "sourceCode" : "/**\r\n * Ensure proper response for not found FileOperation.\r\n *\r\n * @throws FileSystemException for runtime problems\r\n */\r\n@Test\r\npublic void testNotFoundOperation() throws FileSystemException {\r\n    final MyFileOperationProviderBase myop = new MyFileOperationProviderNoncomp();\r\n    manager.addOperationProvider(\"file\", myop);\r\n    try (final FileObject fo = manager.toFileObject(new File(\".\"))) {\r\n        final FileOperations ops = fo.getFileOperations();\r\n        assertNotNull(ops);\r\n        final FileSystemException thrown = assertThrows(FileSystemException.class, () -> ops.getOperation(VcsLog.class));\r\n        assertEquals(\"vfs.operation/operation-not-supported.error\", thrown.getCode());\r\n        // getOperation was called\r\n        assertSame(32, myop.ops);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PathTests.java",
  "methodName" : "testAbsoluteURI",
  "sourceCode" : "/**\r\n * Tests resolution of absolute URI.\r\n */\r\n@Test\r\npublic void testAbsoluteURI() throws Exception {\r\n    final FileObject readFolder = getReadFolder();\r\n    // Try fetching base folder again by its Path\r\n    final String pathStr = readFolder.getPath().toString();\r\n    try (FileObject fileObject = getManager().resolveFile(pathStr, readFolder.getFileSystem().getFileSystemOptions())) {\r\n        assertSame(\"file object\", readFolder, fileObject);\r\n    }\r\n    // Try fetching the filesystem root by its Path\r\n    final Path rootPath = Paths.get(readFolder.getName().getRootURI());\r\n    try (FileObject fileObject = getManager().resolveFile(rootPath.toString(), readFolder.getFileSystem().getFileSystemOptions())) {\r\n        assertSame(readFolder.getFileSystem().getRoot(), fileObject);\r\n        assertEquals(rootPath, Paths.get(fileObject.getName().getRootURI()));\r\n        assertEquals(rootPath, fileObject.getName().getPath());\r\n        assertEquals(FileName.ROOT_PATH, fileObject.getName().getPath());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PathTests.java",
  "methodName" : "testGetPath",
  "sourceCode" : "@Test\r\npublic void testGetPath() throws Exception {\r\n    try (FileObject fileObject = getReadFolder().resolveFile(\"some-dir/\")) {\r\n        final Path path = fileObject.getPath();\r\n        // FileName#getURI() returns a String, not a URI.\r\n        assertEquals(Paths.get(fileObject.getName().getURI()).toString(), path.toString());\r\n        assertEquals(Paths.get(fileObject.getName().getURI()), path);\r\n        assertEquals(fileObject.getPath().toString(), fileObject.getURI().toString());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PathTests.java",
  "methodName" : "testReservedCharacterSpace",
  "sourceCode" : "@Test\r\npublic void testReservedCharacterSpace() throws FileSystemException {\r\n    try (FileObject fileObject = getReadFolder().resolveFile(\"file with spaces.txt\")) {\r\n        final Path path = fileObject.getPath();\r\n        final String string = path.toString();\r\n        assertTrue(string, string.contains(\"file%20with%20spaces.txt\"));\r\n    }\r\n    try (FileObject fileObject = getReadFolder().resolveFile(\"file%20with%20spaces.txt\")) {\r\n        final Path path = fileObject.getPath();\r\n        final String string = path.toString();\r\n        assertTrue(string, string.contains(\"file%20with%20spaces.txt\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PathTests.java",
  "methodName" : "testURIContentProvider",
  "sourceCode" : "/**\r\n * Tests content.\r\n */\r\n@Test\r\npublic void testURIContentProvider() throws Exception {\r\n    // Test non-empty file\r\n    try (FileObject fileObject = getReadFolder().resolveFile(\"file1.txt\")) {\r\n        assertTrue(fileObject.exists());\r\n        final Path path = fileObject.getPath();\r\n        final String pathStr = path.toString();\r\n        final FileSystemOptions options = getReadFolder().getFileSystem().getFileSystemOptions();\r\n        try (FileObject f1 = getManager().resolveFile(pathStr, options);\r\n            final FileObject f2 = getManager().resolveFile(pathStr, options)) {\r\n            assertEquals(\"Two files resolved by URI must be equals on \" + pathStr, f1, f2);\r\n            assertSame(\"Resolving two times should not produce new filesystem on \" + pathStr, f1.getFileSystem(), f2.getFileSystem());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PatternFileSelectorTest.java",
  "methodName" : "testFileExtensions",
  "sourceCode" : "/**\r\n * Tests a one extension selector.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testFileExtensions() throws Exception {\r\n    final FileObject[] foArray = baseFolder.findFiles(Selectors.SELECT_FILES);\r\n    assertTrue(foArray.length > 0);\r\n    final String regExPrefix = \".*\\\\.\";\r\n    // gather file extensions.\r\n    final Set<String> extensionSet = new HashSet<>();\r\n    for (final FileObject fo : foArray) {\r\n        extensionSet.add(regExPrefix + fo.getName().getExtension());\r\n    }\r\n    final String message = String.format(\"Extensions: %s; files: %s\", extensionSet.toString(), Arrays.asList(foArray).toString());\r\n    assertEquals(EXTENSION_COUNT, extensionSet.size(), message);\r\n    // check each extension\r\n    for (final String extension : extensionSet) {\r\n        final FileSelector selector = new PatternFileSelector(extension);\r\n        final FileObject[] list = baseFolder.findFiles(selector);\r\n        assertEquals(FILES_PER_EXTENSION_COUNT, list.length);\r\n    }\r\n    // check each file against itself\r\n    for (final FileObject fo : foArray) {\r\n        final FileSelector selector = new PatternFileSelector(regExPrefix + fo.getName().getExtension());\r\n        final FileObject[] list = baseFolder.findFiles(selector);\r\n        assertEquals(FILES_PER_EXTENSION_COUNT, list.length);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PatternFileSelectorTest.java",
  "methodName" : "testMatchAll",
  "sourceCode" : "/**\r\n * Tests matching all.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testMatchAll() throws Exception {\r\n    final FileObject[] list = baseFolder.findFiles(new PatternFileSelector(\".*\"));\r\n    assertEquals(ENTRY_COUNT, list.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PatternFileSelectorTest.java",
  "methodName" : "testMatchPartial",
  "sourceCode" : "/**\r\n * Tests matching partial file names.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testMatchPartial() throws Exception {\r\n    final FileObject[] list = baseFolder.findFiles(new PatternFileSelector(\".*a.htm\"));\r\n    assertEquals(1, list.length);\r\n    assertEquals(\"aa.htm\", list[0].getName().getBaseName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PatternFileSelectorTest.java",
  "methodName" : "testMatchPartialDelimited",
  "sourceCode" : "/**\r\n * Tests matching partial file names with delimiter.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testMatchPartialDelimited() throws Exception {\r\n    final FileObject[] list = baseFolder.findFiles(new PatternFileSelector(\"^.*\\\\/b.htm$\"));\r\n    assertEquals(1, list.length);\r\n    assertEquals(\"b.htm\", list[0].getName().getBaseName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PatternFileSelectorTest.java",
  "methodName" : "testNullString",
  "sourceCode" : "/**\r\n * Tests a null selector.\r\n */\r\n@Test\r\npublic void testNullString() {\r\n    // Yep, this will blow up.\r\n    assertThrows(NullPointerException.class, () -> new PatternFileSelector((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PermissionsTests.java",
  "methodName" : "testExecutable",
  "sourceCode" : "/**\r\n * Tests for the execution permission.\r\n */\r\n@Test\r\npublic void testExecutable() throws Exception {\r\n    final FileObject file = createTestFile();\r\n    // On Windows, all files are executable\r\n    if (isWindows()) {\r\n        Assertions.assertTrue(file.isExecutable(), \"File expected to be executable: \" + file);\r\n    } else {\r\n        // Set the executable flag for owner\r\n        Assertions.assertTrue(file.setExecutable(true, true), \"Setting executable permission failed: \" + file);\r\n        Assertions.assertTrue(file.isExecutable(), \"File expected to be executable: \" + file);\r\n        // Set the executable flag for all\r\n        Assertions.assertTrue(file.setExecutable(true, false), \"Setting executable permission failed: \" + file);\r\n        Assertions.assertTrue(file.isExecutable(), \"File expected to be executable: \" + file);\r\n        // Clear the executable flag\r\n        Assertions.assertTrue(file.setExecutable(false, true), \"Setting executable permission failed: \" + file);\r\n        Assertions.assertFalse(file.isExecutable(), \"File expected to be not executable: \" + file);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PermissionsTests.java",
  "methodName" : "testReadable",
  "sourceCode" : "/**\r\n * Tests for the readable permission.\r\n */\r\n@Test\r\npublic void testReadable() throws Exception {\r\n    final FileObject file = createTestFile();\r\n    if (isWindows()) {\r\n        // On Windows, all owned files are readable\r\n        Assertions.assertTrue(file.isReadable(), \"File expected to be readable: \" + file);\r\n    } else {\r\n        // Set the readable permission for owner\r\n        Assertions.assertTrue(file.setReadable(true, true), \"Setting read permission failed: \" + file);\r\n        Assertions.assertTrue(file.isReadable(), \"File expected to be readable: \" + file);\r\n        // Set the readable permission for all\r\n        Assertions.assertTrue(file.setReadable(true, false), \"Setting read permission failed: \" + file);\r\n        Assertions.assertTrue(file.isReadable(), \"File expected to be readable: \" + file);\r\n        // Clear the readable permission\r\n        Assertions.assertTrue(file.setReadable(false, true), \"Setting read permission failed: \" + file);\r\n        Assertions.assertFalse(file.isReadable(), \"File expected to be not readable: \" + file);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\PermissionsTests.java",
  "methodName" : "testWriteable",
  "sourceCode" : "/**\r\n * Tests for the writable permission.\r\n */\r\n@Test\r\npublic void testWriteable() throws Exception {\r\n    final FileObject file = createTestFile();\r\n    // Set the write permission for owner\r\n    Assertions.assertTrue(file.setWritable(true, true), \"Setting write permission failed: \" + file);\r\n    Assertions.assertTrue(file.isWriteable(), \"File expected to be writable: \" + file);\r\n    // Set the write permission for all\r\n    Assertions.assertTrue(file.setWritable(true, false), \"Setting write permission failed: \" + file);\r\n    Assertions.assertTrue(file.isWriteable(), \"File expected to be writable: \" + file);\r\n    // Clear the write permission\r\n    Assertions.assertTrue(file.setWritable(false, true), \"Setting write permission failed: \" + file);\r\n    Assertions.assertFalse(file.isWriteable(), \"File expected to be not writable: \" + file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\AbstractFileNameTest.java",
  "methodName" : "testHashSignEncoded",
  "sourceCode" : "@Test\r\npublic void testHashSignEncoded() {\r\n    final AbstractFileName fileName = new AbstractFileName(\"file\", \"/foo/bar/file#name.txt\", FileType.FILE) {\r\n\r\n        @Override\r\n        protected void appendRootUri(final StringBuilder buffer, final boolean addPassword) {\r\n            if (addPassword) {\r\n                buffer.append(\"pass\");\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public FileName createName(final String absolutePath, final FileType fileType) {\r\n            return null;\r\n        }\r\n    };\r\n    assertEquals(\"pass/foo/bar/file%23name.txt\", fileName.getURI());\r\n    assertEquals(\"/foo/bar/file%23name.txt\", fileName.getFriendlyURI());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\bzip2\\Bzip2Test.java",
  "methodName" : "testBZip2",
  "sourceCode" : "@Test\r\npublic void testBZip2() throws IOException {\r\n    final File testResource = getTestResource(\"bla.txt.bz2\");\r\n    try (FileObject bz2FileObject = VFS.getManager().resolveFile(\"bz2://\" + testResource)) {\r\n        Assertions.assertTrue(bz2FileObject.exists());\r\n        Assertions.assertTrue(bz2FileObject.isFolder());\r\n        try (FileObject fileObjectDir = bz2FileObject.resolveFile(\"bla.txt\")) {\r\n            Assertions.assertTrue(fileObjectDir.exists());\r\n            Assertions.assertTrue(bz2FileObject.isFolder());\r\n            try (FileObject fileObject = fileObjectDir.resolveFile(\"bla.txt\")) {\r\n                Assertions.assertTrue(fileObject.exists());\r\n                Assertions.assertFalse(fileObject.isFolder());\r\n                Assertions.assertTrue(fileObject.isFile());\r\n                try (FileContent content = fileObject.getContent()) {\r\n                    Assertions.assertEquals(CompressedFileFileObject.SIZE_UNDEFINED, content.getSize());\r\n                    // blows up, Commons Compress?\r\n                    final String string = content.getString(StandardCharsets.UTF_8);\r\n                    Assertions.assertEquals(26, string.length());\r\n                    Assertions.assertEquals(\"Hallo, dies ist ein Test.\\n\", string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testGetZeroContents",
  "sourceCode" : "/**\r\n * Test VFS-724 should be done on a website which render a page with no content size. Note the getSize() is\r\n * currently the value sent back by the server then zero usually means no content length attached.\r\n */\r\n@Test\r\npublic void testGetZeroContents() throws IOException {\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    try (FileObject fo = fsManager.resolveFile(new File(\".\"), \"src/test/resources/test-data/size-0-file.bin\");\r\n        final FileContent content = fo.getContent()) {\r\n        assertEquals(0, content.getSize());\r\n        assertTrue(content.isEmpty());\r\n        assertEquals(StringUtils.EMPTY, content.getString(StandardCharsets.UTF_8));\r\n        assertEquals(StringUtils.EMPTY, content.getString(StandardCharsets.UTF_8.name()));\r\n        assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, content.getByteArray());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testInputStreamBufferSize0",
  "sourceCode" : "@Test\r\npublic void testInputStreamBufferSize0() throws Exception {\r\n    testInputStreamBufferSize(0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testInputStreamBufferSize1",
  "sourceCode" : "@Test\r\npublic void testInputStreamBufferSize1() throws Exception {\r\n    testInputStreamBufferSize(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testInputStreamBufferSizeNegative",
  "sourceCode" : "@Test\r\npublic void testInputStreamBufferSizeNegative() {\r\n    assertThrows(IllegalArgumentException.class, () -> testInputStreamBufferSize(-2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testInputStreamClosedInADifferentThread",
  "sourceCode" : "@Test\r\npublic void testInputStreamClosedInADifferentThread() throws Exception {\r\n    testStreamClosedInADifferentThread(FileContent::getInputStream);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testMarkingWhenReadingEOS",
  "sourceCode" : "@Test\r\npublic void testMarkingWhenReadingEOS() throws Exception {\r\n    final Path temp = Files.createTempFile(\"temp-file-name\", \".tmp\");\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    try (FileObject file = fileSystemManager.resolveFile(temp.toAbsolutePath().toString())) {\r\n        try (OutputStream outputStream = file.getContent().getOutputStream()) {\r\n            outputStream.write(expected.getBytes());\r\n            outputStream.flush();\r\n        }\r\n        try (InputStream stream = file.getContent().getInputStream()) {\r\n            int readCount = 0;\r\n            if (stream.markSupported()) {\r\n                for (int i = 0; i < 10; i++) {\r\n                    stream.mark(0);\r\n                    final byte[] data = new byte[100];\r\n                    readCount = stream.read(data, 0, 7);\r\n                    stream.read();\r\n                    assertEquals(7, readCount);\r\n                    assertEquals(expected, new String(data).trim());\r\n                    readCount = stream.read(data, 8, 10);\r\n                    assertEquals(-1, readCount);\r\n                    stream.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testMarkingWorks",
  "sourceCode" : "@Test\r\npublic void testMarkingWorks() throws Exception {\r\n    final Path temp = Files.createTempFile(\"temp-file-name\", \".tmp\");\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    try (FileObject file = fileSystemManager.resolveFile(temp.toAbsolutePath().toString())) {\r\n        try (OutputStream outputStream = file.getContent().getOutputStream()) {\r\n            outputStream.write(expected.getBytes());\r\n            outputStream.flush();\r\n        }\r\n        try (InputStream stream = file.getContent().getInputStream()) {\r\n            if (stream.markSupported()) {\r\n                for (int i = 0; i < 10; i++) {\r\n                    stream.mark(0);\r\n                    final byte[] data = new byte[100];\r\n                    stream.read(data, 0, 7);\r\n                    stream.read();\r\n                    assertEquals(expected, new String(data).trim());\r\n                    stream.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testOutputStreamBufferSize0",
  "sourceCode" : "@Test\r\npublic void testOutputStreamBufferSize0() throws Exception {\r\n    testOutputStreamBufferSize(0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testOutputStreamBufferSize1",
  "sourceCode" : "@Test\r\npublic void testOutputStreamBufferSize1() throws Exception {\r\n    testOutputStreamBufferSize(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testOutputStreamBufferSizeNegative",
  "sourceCode" : "@Test\r\npublic void testOutputStreamBufferSizeNegative() {\r\n    assertThrows(IllegalArgumentException.class, () -> testOutputStreamBufferSize(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testOutputStreamBufferSizeNegativeWithAppendFlag",
  "sourceCode" : "@Test\r\npublic void testOutputStreamBufferSizeNegativeWithAppendFlag() throws Exception {\r\n    final Path temp = Files.createTempFile(\"temp-file-name\", \".tmp\");\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    try (FileObject file = fileSystemManager.resolveFile(temp.toAbsolutePath().toString())) {\r\n        assertThrows(IllegalArgumentException.class, () -> file.getContent().getOutputStream(true, -1));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\DefaultFileContentTest.java",
  "methodName" : "testOutputStreamClosedInADifferentThread",
  "sourceCode" : "@Test\r\npublic void testOutputStreamClosedInADifferentThread() throws Exception {\r\n    testStreamClosedInADifferentThread(FileContent::getOutputStream);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpFileNameParserTest.java",
  "methodName" : "testGenericFileName1",
  "sourceCode" : "@Test\r\npublic void testGenericFileName1() throws Exception {\r\n    final String uri = \"ftp://blanks:blanks@localhost/path/file_b%20lanks\";\r\n    final FileName n = FtpFileNameParser.getInstance().parseUri(null, null, uri);\r\n    assertInstanceOf(GenericFileName.class, n);\r\n    final String genericUri = n.getURI();\r\n    assertEquals(genericUri, uri.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpFileNameParserTest.java",
  "methodName" : "testGenericFileName2",
  "sourceCode" : "@Test\r\npublic void testGenericFileName2() throws Exception {\r\n    final String uri = \"ftp://b%20lanks:b%20lanks@localhost/path/file\";\r\n    final FileName n = FtpFileNameParser.getInstance().parseUri(null, null, uri);\r\n    assertInstanceOf(GenericFileName.class, n);\r\n    final String genericUri = n.getURI();\r\n    assertEquals(genericUri, uri.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpFileSystemConfigBuilderTest.java",
  "methodName" : "testActivePortRange",
  "sourceCode" : "@Test\r\npublic void testActivePortRange() {\r\n    final FtpFileSystemConfigBuilder instance = FtpFileSystemConfigBuilder.getInstance();\r\n    final FileSystemOptions options = new FileSystemOptions();\r\n    instance.setActivePortRange(options, Range.between(2121, 2125));\r\n    assertEquals(Range.between(2121, 2125), instance.getActivePortRange(options));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpFileSystemConfigBuilderTest.java",
  "methodName" : "testControlEncoding",
  "sourceCode" : "@Test\r\npublic void testControlEncoding() {\r\n    final FileSystemOptions options = new FileSystemOptions();\r\n    final FtpFileSystemConfigBuilder builder = FtpFileSystemConfigBuilder.getInstance();\r\n    final Charset charset = StandardCharsets.UTF_8;\r\n    final String charsetName = charset.name();\r\n    builder.setControlEncoding(options, charsetName);\r\n    assertEquals(charset, builder.getControlEncodingCharset(options));\r\n    assertEquals(charsetName, builder.getControlEncoding(options));\r\n    builder.setControlEncoding(options, charset);\r\n    assertEquals(charset, builder.getControlEncodingCharset(options));\r\n    assertEquals(charsetName, builder.getControlEncoding(options));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpFileSystemConfigBuilderTest.java",
  "methodName" : "testControlKeepAliveReplyTimeout",
  "sourceCode" : "@Test\r\npublic void testControlKeepAliveReplyTimeout() {\r\n    final FtpFileSystemConfigBuilder instance = FtpFileSystemConfigBuilder.getInstance();\r\n    final FileSystemOptions options = new FileSystemOptions();\r\n    instance.setControlKeepAliveReplyTimeout(options, Duration.ofSeconds(10));\r\n    assertEquals(Duration.ofSeconds(10), instance.getControlKeepAliveReplyTimeout(options));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpFileSystemConfigBuilderTest.java",
  "methodName" : "testControlKeepAliveTimeout",
  "sourceCode" : "@Test\r\npublic void testControlKeepAliveTimeout() {\r\n    final FtpFileSystemConfigBuilder instance = FtpFileSystemConfigBuilder.getInstance();\r\n    final FileSystemOptions options = new FileSystemOptions();\r\n    instance.setControlKeepAliveTimeout(options, Duration.ofSeconds(10));\r\n    assertEquals(Duration.ofSeconds(10), instance.getControlKeepAliveTimeout(options));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpMdtmOffLastModifiedTests.java",
  "methodName" : "testGetLastModifiedFileInexactMatch",
  "sourceCode" : "/**\r\n * Tests getting the last modified time of a file.\r\n */\r\n@Test\r\npublic void testGetLastModifiedFileInexactMatch() throws IOException {\r\n    final String fileName = \"file1.txt\";\r\n    getFileSystem().getFileSystemManager().getFilesCache().clear(getFileSystem());\r\n    final FileObject readFolder = getReadFolder();\r\n    final FileObject fileObject = readFolder.resolveFile(fileName);\r\n    final long lastModifiedTimeMillis = fileObject.getContent().getLastModifiedTime();\r\n    // now try to match\r\n    final long lastModTimeAccuracyMillis = (long) readFolder.getFileSystem().getLastModTimeAccuracy();\r\n    final FileTime lastModifiedTime = Files.getLastModifiedTime(Paths.get(getTestDirectory(), AbstractTestSuite.READ_TESTS_FOLDER, fileName));\r\n    assertDeltaMillis(\"getLastModified on File\", lastModifiedTime.toMillis(), lastModifiedTimeMillis, Math.max(lastModTimeAccuracyMillis, Duration.ofMinutes(1).toMillis()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpMdtmOnLastModifiedTests.java",
  "methodName" : "testGetLastModifiedFileExactMatch",
  "sourceCode" : "/**\r\n * Tests getting the last modified time of a file.\r\n */\r\n@Test\r\npublic void testGetLastModifiedFileExactMatch() throws IOException {\r\n    final String fileName = \"file1.txt\";\r\n    final FileObject readFolder = getReadFolder();\r\n    final FileObject fileObject = readFolder.resolveFile(fileName);\r\n    final long lastModifiedTimeMillis = fileObject.getContent().getLastModifiedTime();\r\n    // now try to match\r\n    final FileTime lastModifiedTime = Files.getLastModifiedTime(Paths.get(getTestDirectory(), AbstractTestSuite.READ_TESTS_FOLDER, fileName));\r\n    if (SystemUtils.IS_JAVA_1_8) {\r\n        // Workaround OpenJDK 8 and 9 bug JDK-8177809\r\n        // https://bugs.openjdk.java.net/browse/JDK-8177809\r\n        assertDeltaMillis(fileName, lastModifiedTimeMillis, lastModifiedTimeMillis, lastModifiedTimeMillis);\r\n    } else {\r\n        assertEqualMillis(\"getLastModified on \" + fileObject, lastModifiedTime.toMillis(), lastModifiedTimeMillis);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpMdtmOnRefreshLastModifiedTests.java",
  "methodName" : "testGetLastModifiedFileExactMatchRefresh",
  "sourceCode" : "/**\r\n * Tests {@link FileContent#getLastModifiedTime()} re-calls {@link FtpClient#mdtmInstant(String)} after refresh.\r\n */\r\n@Test\r\npublic void testGetLastModifiedFileExactMatchRefresh() throws IOException {\r\n    final String fileName = \"file1.txt\";\r\n    final FileObject readFolder = getReadFolder();\r\n    final FtpFileObject fileObject = (FtpFileObject) readFolder.resolveFile(fileName);\r\n    returnsCorrectMdtmValue(fileObject);\r\n    fileObject.refresh();\r\n    returnsCorrectMdtmValue(fileObject);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\FtpProviderIPv6TestCase.java",
  "methodName" : "testResolveIPv6Url",
  "sourceCode" : "@org.junit.Test\r\npublic void testResolveIPv6Url() throws Exception {\r\n    final String ipv6Url = \"ftp://[fe80::1c42:dae:8370:aea6%en1]/file.txt\";\r\n    final FtpFileObject fileObject = (FtpFileObject) getManager().resolveFile(ipv6Url, new FileSystemOptions());\r\n    assertEquals(\"ftp://[fe80::1c42:dae:8370:aea6%en1]/\", fileObject.getFileSystem().getRootURI());\r\n    assertEquals(\"file.txt\", fileObject.getRelPath());\r\n}",
  "annotations" : [ "org.junit.Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\MultipleConnectionTest.java",
  "methodName" : "testConnectRoot",
  "sourceCode" : "@Test\r\npublic void testConnectRoot() throws IOException {\r\n    resolveRoot();\r\n    resolveRoot();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftp\\MultipleConnectionTest.java",
  "methodName" : "testUnderlyingConnect",
  "sourceCode" : "@Test\r\npublic void testUnderlyingConnect() throws SocketException, IOException {\r\n    final FTPClient client1 = new FTPClient();\r\n    final FTPClient client2 = new FTPClient();\r\n    try {\r\n        final String hostname = \"localhost\";\r\n        client1.connect(hostname, FtpProviderTestCase.getSocketPort());\r\n        client2.connect(hostname, FtpProviderTestCase.getSocketPort());\r\n    } finally {\r\n        client1.disconnect();\r\n        client2.disconnect();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftps\\FtpsMultipleConnectionTest.java",
  "methodName" : "testConnectRoot",
  "sourceCode" : "@Test\r\npublic void testConnectRoot() throws IOException {\r\n    resolveRoot();\r\n    resolveRoot();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ftps\\FtpsMultipleConnectionTest.java",
  "methodName" : "testUnderlyingConnect",
  "sourceCode" : "@Test\r\npublic void testUnderlyingConnect() throws SocketException, IOException {\r\n    final FTPSClient client1 = init(new FTPSClient(true));\r\n    final FTPSClient client2 = init(new FTPSClient(true));\r\n    try {\r\n        final String hostname = \"localhost\";\r\n        client1.connect(hostname, AbstractFtpsProviderTestCase.getSocketPort());\r\n        client2.connect(hostname, AbstractFtpsProviderTestCase.getSocketPort());\r\n    } finally {\r\n        if (client1 != null) {\r\n            client1.disconnect();\r\n        }\r\n        if (client2 != null) {\r\n            client2.disconnect();\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\gzip\\GzipTest.java",
  "methodName" : "testCreateGzipFileSystem",
  "sourceCode" : "@Test\r\npublic void testCreateGzipFileSystem() throws IOException {\r\n    final File gzFile = new File(\"src/test/resources/test-data/好.txt.gz\");\r\n    // global\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager manager = VFS.getManager();\r\n    try (FileObject localFileObject = manager.resolveFile(gzFile.getAbsolutePath());\r\n        FileObject gzFileObjectDir = manager.createFileSystem(localFileObject);\r\n        FileObject gzFileObject = gzFileObjectDir.resolveFile(\"好.txt\")) {\r\n        Assertions.assertInstanceOf(GzipFileObject.class, gzFileObjectDir);\r\n        Assertions.assertTrue(gzFileObjectDir.isFolder());\r\n        Assertions.assertInstanceOf(GzipFileObject.class, gzFileObject);\r\n        Assertions.assertFalse(gzFileObject.isFolder());\r\n        try (FileContent content = gzFileObject.getContent()) {\r\n            Assertions.assertEquals(\"aaa\", content.getString(StandardCharsets.UTF_8));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http\\HttpFilesCacheTest.java",
  "methodName" : "testQueryStringUrls",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/VFS-426.\r\n */\r\n@Test\r\npublic void testQueryStringUrls() throws FileSystemException {\r\n    final String noQueryStringUrl = \"http://commons.apache.org/vfs\";\r\n    final String queryStringUrl = \"http://commons.apache.org/vfs?query=string\";\r\n    final String queryStringUrl2 = \"http://commons.apache.org/vfs?query=string&more=stuff\";\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    try (FileObject noQueryFile = fileSystemManager.resolveFile(noQueryStringUrl)) {\r\n        assertEquals(noQueryStringUrl, noQueryFile.getURL().toExternalForm());\r\n    }\r\n    try (FileObject queryFile = fileSystemManager.resolveFile(queryStringUrl)) {\r\n        // failed for VFS-426\r\n        assertEquals(queryStringUrl, queryFile.getURL().toExternalForm());\r\n    }\r\n    try (FileObject queryFile2 = fileSystemManager.resolveFile(queryStringUrl2)) {\r\n        // failed for VFS-426\r\n        assertEquals(queryStringUrl2, queryFile2.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http\\HttpGetContentInfoFunctionalTest.java",
  "methodName" : "testGetContentInfo",
  "sourceCode" : "/**\r\n * Tests VFS-427 NPE on HttpFileObject.getContent().getContentInfo().\r\n *\r\n * @throws FileSystemException thrown when the getContentInfo API fails.\r\n */\r\n@Test\r\npublic void testGetContentInfo() throws FileSystemException, MalformedURLException {\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final String uri = \"https://www.apache.org/licenses/LICENSE-2.0.txt\";\r\n    try (FileObject fo = fsManager.resolveFile(uri, getOptionsWithProxy());\r\n        final FileContent content = fo.getContent()) {\r\n        assertNotNull(content);\r\n        // Used to NPE before fix:\r\n        content.getContentInfo();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http\\HttpProviderTestCase.java",
  "methodName" : "testHttpTimeoutConfig",
  "sourceCode" : "/**\r\n * Ensure VFS-453 options are present.\r\n */\r\n@Test\r\npublic void testHttpTimeoutConfig() {\r\n    final FileSystemOptions options = new FileSystemOptions();\r\n    final HttpFileSystemConfigBuilder builder = HttpFileSystemConfigBuilder.getInstance();\r\n    // ensure defaults are 0\r\n    assertEquals(0, builder.getConnectionTimeout(options));\r\n    assertEquals(0, builder.getConnectionTimeoutDuration(options).toMillis());\r\n    assertEquals(0, builder.getSoTimeout(options));\r\n    assertEquals(\"Jakarta-Commons-VFS\", builder.getUserAgent(options));\r\n    // Set with deprecated milliseconds APIs.\r\n    builder.setConnectionTimeout(options, 60000);\r\n    builder.setSoTimeout(options, 60000);\r\n    builder.setUserAgent(options, \"foo/bar\");\r\n    // ensure changes are visible\r\n    assertEquals(60000, builder.getConnectionTimeout(options));\r\n    assertEquals(ONE_MINUTE, builder.getConnectionTimeoutDuration(options));\r\n    assertEquals(60000, builder.getSoTimeout(options));\r\n    assertEquals(\"foo/bar\", builder.getUserAgent(options));\r\n    // Set with Duration APIs.\r\n    builder.setConnectionTimeout(options, ONE_MINUTE);\r\n    builder.setSoTimeout(options, ONE_MINUTE);\r\n    // ensure changes are visible\r\n    assertEquals(60000, builder.getConnectionTimeout(options));\r\n    assertEquals(ONE_MINUTE, builder.getConnectionTimeoutDuration(options));\r\n    assertEquals(60000, builder.getSoTimeout(options));\r\n    assertEquals(ONE_MINUTE, builder.getSoTimeoutDuration(options));\r\n    assertEquals(\"foo/bar\", builder.getUserAgent(options));\r\n    // TODO: should also check the created HTTPClient\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http\\HttpProviderTestCase.java",
  "methodName" : "testResolveFolderSlashNoRedirectOff",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashNoRedirectOff() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http\\HttpProviderTestCase.java",
  "methodName" : "testResolveFolderSlashNoRedirectOn",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashNoRedirectOn() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http\\HttpProviderTestCase.java",
  "methodName" : "testResolveFolderSlashYesRedirectOff",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashYesRedirectOff() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests/\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http\\HttpProviderTestCase.java",
  "methodName" : "testResolveFolderSlashYesRedirectOn",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashYesRedirectOn() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests/\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http\\HttpProviderTestCase.java",
  "methodName" : "testResolveIPv6Url",
  "sourceCode" : "@Test\r\npublic void testResolveIPv6Url() throws FileSystemException {\r\n    final String ipv6Url = \"http://[fe80::1c42:dae:8370:aea6%en1]/file.txt\";\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final FileObject fileObject = VFS.getManager().resolveFile(ipv6Url, new FileSystemOptions());\r\n    assertEquals(\"http://[fe80::1c42:dae:8370:aea6%en1]/\", fileObject.getFileSystem().getRootURI());\r\n    assertEquals(\"http://[fe80::1c42:dae:8370:aea6%en1]/file.txt\", fileObject.getName().getURI());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4FilesCacheTest.java",
  "methodName" : "testQueryStringUrl0",
  "sourceCode" : "@Test\r\npublic void testQueryStringUrl0() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    final String noQueryStringUrl = \"http4://commons.apache.org/\";\r\n    try (FileObject noQueryFile = fileSystemManager.resolveFile(noQueryStringUrl)) {\r\n        assertEquals(noQueryStringUrl, noQueryFile.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4FilesCacheTest.java",
  "methodName" : "testQueryStringUrl1",
  "sourceCode" : "@Test\r\npublic void testQueryStringUrl1() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    final String noQueryStringUrl = \"http4://commons.apache.org/vfs\";\r\n    try (FileObject noQueryFile = fileSystemManager.resolveFile(noQueryStringUrl)) {\r\n        assertEquals(noQueryStringUrl, noQueryFile.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4FilesCacheTest.java",
  "methodName" : "testQueryStringUrl2",
  "sourceCode" : "@Test\r\npublic void testQueryStringUrl2() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    final String queryStringUrl = \"http4://commons.apache.org/vfs?query=string\";\r\n    try (FileObject queryFile = fileSystemManager.resolveFile(queryStringUrl)) {\r\n        // failed for VFS-426\r\n        assertEquals(queryStringUrl, queryFile.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4FilesCacheTest.java",
  "methodName" : "testQueryStringUrl3",
  "sourceCode" : "@Test\r\npublic void testQueryStringUrl3() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    final String queryStringUrl2 = \"http4://commons.apache.org/vfs?query=string&more=stuff\";\r\n    try (FileObject queryFile2 = fileSystemManager.resolveFile(queryStringUrl2)) {\r\n        // failed for VFS-426\r\n        assertEquals(queryStringUrl2, queryFile2.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4FilesCacheTest.java",
  "methodName" : "testQueryStringUrl4",
  "sourceCode" : "@Test\r\npublic void testQueryStringUrl4() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    // TODO All lowercase input except the percent encoded '\\' (%5C);\r\n    // We end up converting back to lowercase, but OK per RFC.\r\n    final String queryStringUrl3 = \"http4://alice%5C1234:secret@localhost:8080/\";\r\n    try (FileObject queryFile3 = fileSystemManager.resolveFile(queryStringUrl3)) {\r\n        assertEquals(StringUtils.toRootLowerCase(queryStringUrl3), queryFile3.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4FilesCacheTest.java",
  "methodName" : "testQueryStringUrl5",
  "sourceCode" : "@Test\r\npublic void testQueryStringUrl5() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    // Like testQueryStringUrl4() but with all LC input.\r\n    final String queryStringUrl4 = \"http4://alice%5c1234:secret@localhost:8080/\";\r\n    try (FileObject queryFile4 = fileSystemManager.resolveFile(queryStringUrl4)) {\r\n        assertEquals(queryStringUrl4, queryFile4.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4FilesCacheTest.java",
  "methodName" : "testQueryStringUrl6",
  "sourceCode" : "@Test\r\npublic void testQueryStringUrl6() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    // Like testQueryStringUrl4() but with all LC input and NO percent encoding.\r\n    final String queryStringUrl4 = \"http4://alice:secret@localhost:8080/\";\r\n    try (FileObject queryFile4 = fileSystemManager.resolveFile(queryStringUrl4)) {\r\n        assertEquals(queryStringUrl4, queryFile4.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4FilesCacheTest.java",
  "methodName" : "testQueryStringUrl7",
  "sourceCode" : "@Test\r\npublic void testQueryStringUrl7() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    // Like testQueryStringUrl4() but with all LC input and NO percent encoding.\r\n    final String queryStringUrl4 = \"http4://localhost:8080/\";\r\n    try (FileObject queryFile4 = fileSystemManager.resolveFile(queryStringUrl4)) {\r\n        assertEquals(queryStringUrl4, queryFile4.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4GetContentInfoTest.java",
  "methodName" : "testGetContentInfo",
  "sourceCode" : "/**\r\n * Tests VFS-427 NPE on Http4FileObject.getContent().getContentInfo().\r\n *\r\n * @throws FileSystemException thrown when the getContentInfo API fails.\r\n */\r\n@Test\r\npublic void testGetContentInfo() throws FileSystemException, MalformedURLException {\r\n    // getManager() returns a global.\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final String uri = \"http4://www.apache.org/licenses/LICENSE-2.0.txt\";\r\n    try (FileObject fo = fsManager.resolveFile(uri, getOptionsWithProxy());\r\n        final FileContent content = fo.getContent()) {\r\n        assertNotNull(content);\r\n        // Used to NPE before fix:\r\n        content.getContentInfo();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4GetContentInfoTest.java",
  "methodName" : "testGetContentWithProxyAuthInfo",
  "sourceCode" : "/**\r\n * Tests VFS-782 pass correct proxy authentication credentials.\r\n *\r\n * @throws FileSystemException thrown when the authentication fails.\r\n */\r\n@Test\r\npublic void testGetContentWithProxyAuthInfo() throws FileSystemException, MalformedURLException {\r\n    // getManager() returns a global.\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final String uri = \"http4://www.apache.org/licenses/LICENSE-2.0.txt\";\r\n    try (FileObject fo = fsManager.resolveFile(uri, getOptionsWithProxyAuthentication());\r\n        final FileContent content = fo.getContent()) {\r\n        assertNotNull(content);\r\n        content.getContentInfo();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4ProviderTestCase.java",
  "methodName" : "testHttpTimeoutConfig",
  "sourceCode" : "/**\r\n * Ensure VFS-453 options are present.\r\n */\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testHttpTimeoutConfig() {\r\n    final FileSystemOptions opts = new FileSystemOptions();\r\n    final Http4FileSystemConfigBuilder builder = Http4FileSystemConfigBuilder.getInstance();\r\n    // ensure defaults are 0\r\n    assertEquals(0, builder.getConnectionTimeout(opts));\r\n    assertEquals(Duration.ZERO, builder.getConnectionTimeoutDuration(opts));\r\n    assertEquals(0, builder.getSoTimeout(opts));\r\n    assertEquals(Duration.ZERO, builder.getSoTimeoutDuration(opts));\r\n    assertEquals(\"Jakarta-Commons-VFS\", builder.getUserAgent(opts));\r\n    // Set int timeouts\r\n    builder.setConnectionTimeout(opts, 60000);\r\n    builder.setSoTimeout(opts, 60000);\r\n    builder.setUserAgent(opts, \"foo/bar\");\r\n    // ensure changes are visible\r\n    assertEquals(60_000, builder.getConnectionTimeout(opts));\r\n    assertEquals(60_000, builder.getConnectionTimeoutDuration(opts).toMillis());\r\n    assertEquals(60_000, builder.getSoTimeout(opts));\r\n    assertEquals(60_000, builder.getSoTimeoutDuration(opts).toMillis());\r\n    assertEquals(\"foo/bar\", builder.getUserAgent(opts));\r\n    // Set Duration timeouts\r\n    builder.setConnectionTimeout(opts, Duration.ofMinutes(1));\r\n    builder.setSoTimeout(opts, Duration.ofMinutes(1));\r\n    builder.setUserAgent(opts, \"foo/bar\");\r\n    // ensure changes are visible\r\n    assertEquals(60_000, builder.getConnectionTimeout(opts));\r\n    assertEquals(60_000, builder.getConnectionTimeoutDuration(opts).toMillis());\r\n    assertEquals(60_000, builder.getSoTimeout(opts));\r\n    assertEquals(60_000, builder.getSoTimeoutDuration(opts).toMillis());\r\n    assertEquals(\"foo/bar\", builder.getUserAgent(opts));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4ProviderTestCase.java",
  "methodName" : "testReadFileOperations",
  "sourceCode" : "@Test\r\npublic void testReadFileOperations() throws Exception {\r\n    try (DefaultFileSystemManager manager = new DefaultFileSystemManager();\r\n        Http4FileProvider provider = new Http4FileProvider();\r\n        SoftRefFilesCache filesCache = new SoftRefFilesCache()) {\r\n        manager.addProvider(\"http4\", provider);\r\n        manager.setFilesCache(filesCache);\r\n        manager.setCacheStrategy(CacheStrategy.ON_RESOLVE);\r\n        final String nonExistentFileUri = connectionUri + \"/read-tests/nonexistent.txt\";\r\n        try (FileObject nonExistentFileObject = manager.resolveFile(nonExistentFileUri);\r\n            FileContent content = nonExistentFileObject.getContent()) {\r\n            // Attempt to read from the stream\r\n            final FileSystemException e = Assertions.assertThrows(FileSystemException.class, content::getInputStream);\r\n            Assertions.assertTrue(e.getCode().contains(\"read-not-file.error\"), \"Expected HTTP 404 Not Found error, but got: \" + e.getMessage() + \" \" + e.getCode());\r\n        }\r\n        final String existentFileUri = connectionUri + \"/read-tests/file1.txt\";\r\n        try (FileObject existentFileObject = manager.resolveFile(existentFileUri)) {\r\n            Assertions.assertTrue(existentFileObject.exists(), \"File should exist\");\r\n            try (FileContent content = existentFileObject.getContent();\r\n                InputStream inputStream = content.getInputStream()) {\r\n                Assertions.assertNotNull(inputStream, \"InputStream should not be null\");\r\n                final int available = inputStream.available();\r\n                Assertions.assertTrue(available > 0, \"InputStream should have content available\");\r\n                final byte[] buffer = new byte[1024];\r\n                final int bytesRead = inputStream.read(buffer);\r\n                Assertions.assertTrue(bytesRead > 0, \"InputStream should read non-empty content\");\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4ProviderTestCase.java",
  "methodName" : "testResolveFolderSlashNoRedirectOff",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashNoRedirectOff() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4ProviderTestCase.java",
  "methodName" : "testResolveFolderSlashNoRedirectOn",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashNoRedirectOn() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4ProviderTestCase.java",
  "methodName" : "testResolveFolderSlashYesRedirectOff",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashYesRedirectOff() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests/\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4ProviderTestCase.java",
  "methodName" : "testResolveFolderSlashYesRedirectOn",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashYesRedirectOn() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests/\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4\\Http4ProviderTestCase.java",
  "methodName" : "testResolveIPv6Url",
  "sourceCode" : "@Test\r\npublic void testResolveIPv6Url() throws FileSystemException {\r\n    final String ipv6Url = \"http4://[fe80::1c42:dae:8370:aea6%en1]\";\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final Http4FileObject fileObject = (Http4FileObject) VFS.getManager().resolveFile(ipv6Url, new FileSystemOptions());\r\n    assertEquals(\"http://[fe80::1c42:dae:8370:aea6%en1]/\", fileObject.getInternalURI().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http4s\\Http4sGetContentInfoTest.java",
  "methodName" : "testGetContentInfo",
  "sourceCode" : "/**\r\n * Tests VFS-427 NPE on Http4FileObject.getContent().getContentInfo().\r\n *\r\n * @throws FileSystemException thrown when the getContentInfo API fails.\r\n * @throws MalformedURLException thrown when the System environment contains an invalid URL for an HTTPS proxy.\r\n */\r\n@Test\r\npublic void testGetContentInfo() throws FileSystemException, MalformedURLException {\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final String uri = \"http4://www.apache.org/licenses/LICENSE-2.0.txt\";\r\n    try (FileObject fo = fsManager.resolveFile(uri, getOptionsWithProxy())) {\r\n        final FileContent content = fo.getContent();\r\n        assertNotNull(content);\r\n        // Used to NPE before fix:\r\n        content.getContentInfo();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5FilesCacheTest.java",
  "methodName" : "testQueryStringUrls",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/VFS-426.\r\n */\r\n@Test\r\npublic void testQueryStringUrls() throws FileSystemException {\r\n    final String noQueryStringUrl = \"http5://commons.apache.org/vfs\";\r\n    final String queryStringUrl = \"http5://commons.apache.org/vfs?query=string\";\r\n    final String queryStringUrl2 = \"http5://commons.apache.org/vfs?query=string&more=stuff\";\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    final FileObject noQueryFile = fileSystemManager.resolveFile(noQueryStringUrl);\r\n    assertEquals(noQueryStringUrl, noQueryFile.getURL().toExternalForm());\r\n    final FileObject queryFile = fileSystemManager.resolveFile(queryStringUrl);\r\n    // failed for VFS-426\r\n    assertEquals(queryStringUrl, queryFile.getURL().toExternalForm());\r\n    final FileObject queryFile2 = fileSystemManager.resolveFile(queryStringUrl2);\r\n    // failed for VFS-426\r\n    assertEquals(queryStringUrl2, queryFile2.getURL().toExternalForm());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5GetContentInfoTest.java",
  "methodName" : "testGetContentInfo",
  "sourceCode" : "/**\r\n * Tests VFS-427 NPE on Http5FileObject.getContent().getContentInfo().\r\n *\r\n * @throws FileSystemException thrown when the getContentInfo API fails.\r\n */\r\n@Test\r\npublic void testGetContentInfo() throws FileSystemException, MalformedURLException {\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final String uri = \"http5://www.apache.org/licenses/LICENSE-2.0.txt\";\r\n    final FileObject fo = fsManager.resolveFile(uri, getOptionsWithProxy());\r\n    try (FileContent content = fo.getContent()) {\r\n        assertNotNull(content);\r\n        // Used to NPE before fix:\r\n        content.getContentInfo();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5GetContentInfoTest.java",
  "methodName" : "testGetContentWithProxyAuthInfo",
  "sourceCode" : "/**\r\n * Tests VFS-782 pass correct proxy authentication credentials.\r\n *\r\n * @throws FileSystemException thrown when the authentication fails.\r\n */\r\n@Test\r\npublic void testGetContentWithProxyAuthInfo() throws FileSystemException, MalformedURLException {\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final String uri = \"http4://www.apache.org/licenses/LICENSE-2.0.txt\";\r\n    try (FileObject fo = fsManager.resolveFile(uri, getOptionsWithProxyAuthentication())) {\r\n        final FileContent content = fo.getContent();\r\n        assertNotNull(content);\r\n        content.getContentInfo();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5ProviderTestCase.java",
  "methodName" : "testHttpTimeoutConfig",
  "sourceCode" : "/**\r\n * Ensure VFS-453 options are present.\r\n */\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testHttpTimeoutConfig() {\r\n    final FileSystemOptions opts = new FileSystemOptions();\r\n    final Http5FileSystemConfigBuilder builder = Http5FileSystemConfigBuilder.getInstance();\r\n    // ensure defaults are 0\r\n    assertEquals(0, builder.getConnectionTimeout(opts));\r\n    assertEquals(Duration.ZERO, builder.getConnectionTimeoutDuration(opts));\r\n    assertEquals(0, builder.getSoTimeout(opts));\r\n    assertEquals(Duration.ZERO, builder.getSoTimeoutDuration(opts));\r\n    assertEquals(\"Jakarta-Commons-VFS\", builder.getUserAgent(opts));\r\n    // timeout as int\r\n    builder.setConnectionTimeout(opts, 60000);\r\n    builder.setSoTimeout(opts, 60000);\r\n    builder.setUserAgent(opts, \"foo/bar\");\r\n    // ensure changes are visible\r\n    assertEquals(60000, builder.getConnectionTimeout(opts));\r\n    assertEquals(60000, builder.getSoTimeout(opts));\r\n    assertEquals(\"foo/bar\", builder.getUserAgent(opts));\r\n    // timeout as Duration\r\n    builder.setConnectionTimeout(opts, Duration.ofMinutes(1));\r\n    builder.setSoTimeout(opts, Duration.ofMinutes(1));\r\n    builder.setUserAgent(opts, \"foo/bar\");\r\n    // ensure changes are visible\r\n    assertEquals(60000, builder.getConnectionTimeoutDuration(opts).toMillis());\r\n    assertEquals(60000, builder.getSoTimeoutDuration(opts).toMillis());\r\n    assertEquals(\"foo/bar\", builder.getUserAgent(opts));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5ProviderTestCase.java",
  "methodName" : "testReadFileOperations",
  "sourceCode" : "@Test\r\npublic void testReadFileOperations() throws Exception {\r\n    try (DefaultFileSystemManager manager = new DefaultFileSystemManager();\r\n        Http5FileProvider provider = new Http5FileProvider();\r\n        SoftRefFilesCache filesCache = new SoftRefFilesCache()) {\r\n        manager.addProvider(\"http5\", provider);\r\n        manager.setFilesCache(filesCache);\r\n        manager.setCacheStrategy(CacheStrategy.ON_RESOLVE);\r\n        final String nonExistentFileUri = connectionUri + \"/read-tests/nonexistent.txt\";\r\n        try (FileObject nonExistentFileObject = manager.resolveFile(nonExistentFileUri);\r\n            FileContent content = nonExistentFileObject.getContent()) {\r\n            // Attempt to read from the stream\r\n            final FileSystemException e = Assertions.assertThrows(FileSystemException.class, content::getInputStream);\r\n            Assertions.assertTrue(e.getCode().contains(\"read-not-file.error\"), \"Expected HTTP 404 Not Found error, but got: \" + e.getMessage() + \" \" + e.getCode());\r\n        }\r\n        final String existentFileUri = connectionUri + \"/read-tests/file1.txt\";\r\n        try (FileObject existentFileObject = manager.resolveFile(existentFileUri)) {\r\n            Assertions.assertTrue(existentFileObject.exists(), \"File should exist\");\r\n            try (FileContent content = existentFileObject.getContent();\r\n                InputStream inputStream = content.getInputStream()) {\r\n                Assertions.assertNotNull(inputStream, \"InputStream should not be null\");\r\n                final int available = inputStream.available();\r\n                Assertions.assertTrue(available > 0, \"InputStream should have content available\");\r\n                final byte[] buffer = new byte[1024];\r\n                final int bytesRead = inputStream.read(buffer);\r\n                Assertions.assertTrue(bytesRead > 0, \"InputStream should read non-empty content\");\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5ProviderTestCase.java",
  "methodName" : "testResolveFolderSlashNoRedirectOff",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashNoRedirectOff() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5ProviderTestCase.java",
  "methodName" : "testResolveFolderSlashNoRedirectOn",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashNoRedirectOn() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5ProviderTestCase.java",
  "methodName" : "testResolveFolderSlashYesRedirectOff",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashYesRedirectOff() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests/\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5ProviderTestCase.java",
  "methodName" : "testResolveFolderSlashYesRedirectOn",
  "sourceCode" : "@Test\r\npublic void testResolveFolderSlashYesRedirectOn() throws FileSystemException {\r\n    testResolveFolderSlash(connectionUri + \"/read-tests/\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5\\Http5ProviderTestCase.java",
  "methodName" : "testResolveIPv6Url",
  "sourceCode" : "@Test\r\npublic void testResolveIPv6Url() throws FileSystemException {\r\n    final String ipv6Url = \"http5://[fe80::1c42:dae:8370:aea6%en1]\";\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final Http5FileObject fileObject = (Http5FileObject) VFS.getManager().resolveFile(ipv6Url, new FileSystemOptions());\r\n    assertEquals(\"http://[fe80::1c42:dae:8370:aea6%en1]/\", fileObject.getInternalURI().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5s\\Http5sGetContentInfoTest.java",
  "methodName" : "testGetContentInfo",
  "sourceCode" : "/**\r\n * Tests VFS-427 NPE on Http5FileObject.getContent().getContentInfo().\r\n *\r\n * @throws FileSystemException thrown when the getContentInfo API fails.\r\n * @throws MalformedURLException thrown when the System environment contains an invalid URL for an HTTPS proxy.\r\n */\r\n@Test\r\npublic void testGetContentInfo() throws FileSystemException, MalformedURLException {\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final String uri = \"http5://www.apache.org/licenses/LICENSE-2.0.txt\";\r\n    final FileObject fo = fsManager.resolveFile(uri, getOptionsWithProxy());\r\n    final FileContent content = fo.getContent();\r\n    assertNotNull(content);\r\n    // Used to NPE before fix:\r\n    content.getContentInfo();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\http5s\\Http5sGetContentInfoTest.java",
  "methodName" : "testSSLGetContentInfo",
  "sourceCode" : "/**\r\n * Tests VFS-786 set keystore type.\r\n *\r\n * @throws FileSystemException   thrown when the getContentInfo API fails.\r\n * @throws MalformedURLException thrown when the System environment contains an invalid URL for an HTTPS proxy.\r\n */\r\n@Test\r\npublic void testSSLGetContentInfo() throws IOException {\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final String uri = \"http5s://www.apache.org/licenses/LICENSE-2.0.txt\";\r\n    final FileObject fo = fsManager.resolveFile(uri, getOptionsWithSSL());\r\n    final FileContent content = fo.getContent();\r\n    try (InputStream is = content.getInputStream()) {\r\n        final String text = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8)).lines().collect(Collectors.joining(\"\\n\"));\r\n        assertNotNull(text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\https\\HttpsGetContentInfoFunctionalTest.java",
  "methodName" : "testGetContentInfo",
  "sourceCode" : "/**\r\n * Tests VFS-427 NPE on HttpFileObject.getContent().getContentInfo().\r\n *\r\n * @throws FileSystemException   thrown when the getContentInfo API fails.\r\n * @throws MalformedURLException thrown when the System environment contains an\r\n *                               invalid URL for an HTTPS proxy.\r\n */\r\n@Test\r\npublic void testGetContentInfo() throws FileSystemException, MalformedURLException {\r\n    // getManager() returns a global.\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final String uri = \"https://www.apache.org/licenses/LICENSE-2.0.txt\";\r\n    try (FileObject fo = fsManager.resolveFile(uri, getOptionsWithProxy());\r\n        final FileContent content = fo.getContent()) {\r\n        assertNotNull(content);\r\n        // Used to NPE before fix:\r\n        content.getContentInfo();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\jar\\JarAttributesTest.java",
  "methodName" : "testAttributes",
  "sourceCode" : "@Test\r\npublic void testAttributes() throws Exception {\r\n    final FileObject file = JarProviderTestCase.getTestJar(VFS.getManager(), \"test.jar\");\r\n    final Map<String, Object> attributes = file.getContent().getAttributes();\r\n    assertEquals(\"1.0\", attributes.get(\"Manifest-Version\"));\r\n    // Debugging:\r\n    // this.printAttributes(attributes);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\jar\\JarAttributesTest.java",
  "methodName" : "testNestedAttributes",
  "sourceCode" : "@Test\r\npublic void testNestedAttributes() throws Exception {\r\n    final FileObject nested = JarProviderTestCase.getTestJar(VFS.getManager(), \"nested.jar\");\r\n    final FileObject file = nested.resolveFile(\"test.jar\");\r\n    final Map<String, Object> attributes = file.getContent().getAttributes();\r\n    assertEquals(\"1.0\", attributes.get(\"Manifest-Version\"));\r\n    // Debugging:\r\n    // this.printAttributes(attributes);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\ConversionTest.java",
  "methodName" : "testFileNameWithCharacters",
  "sourceCode" : "@Test\r\n@Disabled(\"Ignored pre JUnit v5\")\r\npublic void testFileNameWithCharacters() throws URISyntaxException, IOException {\r\n    final File file = new File(\"target\", \"+# %&.txt\");\r\n    final String fileURL = file.toURI().toURL().toExternalForm();\r\n    assertEquals(file.getAbsoluteFile(), new File(file.toURI().getPath()));\r\n    assertEquals(file.getAbsoluteFile(), new File(new URL(fileURL).toURI().getPath()));\r\n    try {\r\n        Files.newOutputStream(file.toPath()).close();\r\n        assertTrue(file.exists());\r\n        final FileSystemManager manager = VFS.getManager();\r\n        final FileObject fo = manager.resolveFile(fileURL);\r\n        assertTrue(fo.exists());\r\n        assertEquals(file.getAbsoluteFile(), new File(new URL(fo.getURL().toExternalForm()).toURI().getPath()));\r\n    } finally {\r\n        file.delete();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\ConversionTest.java",
  "methodName" : "testFileNameWithSpaces",
  "sourceCode" : "@Test\r\n@Disabled(\"Ignored pre JUnit v5\")\r\npublic void testFileNameWithSpaces() throws URISyntaxException, IOException {\r\n    final File file = new File(\"target\", \"a name.txt\");\r\n    final String fileURL = file.toURI().toURL().toExternalForm();\r\n    assertEquals(file.getAbsoluteFile(), new File(file.toURI().getPath()));\r\n    assertEquals(file.getAbsoluteFile(), new File(new URL(fileURL).toURI().getPath()));\r\n    final FileSystemManager manager = VFS.getManager();\r\n    final FileObject fo = manager.resolveFile(fileURL);\r\n    assertEquals(file.getAbsoluteFile(), new File(new URL(fo.getURL().toExternalForm()).toURI().getPath()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\FileNameTests.java",
  "methodName" : "testAbsoluteFileName",
  "sourceCode" : "/**\r\n * Tests resolution of an absolute file name.\r\n */\r\n@Test\r\npublic void testAbsoluteFileName() throws Exception {\r\n    // Locate file by absolute file name\r\n    final String fileName = new File(\"testdir\").getAbsolutePath();\r\n    final DefaultFileSystemManager manager = getManager();\r\n    Assertions.assertNotNull(manager, \"Unexpected null manager for test \" + this);\r\n    try (FileObject absFile = manager.resolveFile(fileName)) {\r\n        // Locate file by URI\r\n        final String uri = \"file://\" + fileName.replace(File.separatorChar, '/');\r\n        final FileObject uriFile = manager.resolveFile(uri);\r\n        assertSame(\"file object\", absFile, uriFile);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\LocalFileRandomAccessContentTest.java",
  "methodName" : "testInputStreamRead0xff",
  "sourceCode" : "/**\r\n * test LocalFileRandomAccessContent InputStream read one byte 0xff; see VFS-624.\r\n */\r\n@Test\r\npublic void testInputStreamRead0xff() throws IOException {\r\n    // open test file,this file has only one byte data 0xff\r\n    final File file = new File(\"src/test/resources/test-data/0xff_file.txt\");\r\n    // read test data,first data should be 0xFF instead of -1. Will read -1 finally (EOF)\r\n    try (InputStream in = new LocalFileRandomAccessContent(file, RandomAccessMode.READ).getInputStream()) {\r\n        // read first data\r\n        final int read = in.read();\r\n        assertNotEquals(EOF, read);\r\n        assertEquals(0xFF, read);\r\n        // read EOF\r\n        assertEquals(EOF, in.read());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\TempFileTests.java",
  "methodName" : "testLocalFile",
  "sourceCode" : "/**\r\n * https://issues.apache.org/jira/browse/VFS-790.\r\n */\r\n@Test\r\npublic void testLocalFile() throws Exception {\r\n    final String prefix = \"\\u0074\\u0065\\u0074\";\r\n    final Path file = Files.createTempFile(prefix + \"-\", \"-\" + prefix);\r\n    assertTrue(Files.exists(file));\r\n    final URI uri = file.toUri();\r\n    try (FileSystemManager manager = getManager()) {\r\n        try (FileObject fileObject = manager.resolveFile(uri)) {\r\n            try (FileContent sourceContent = fileObject.getContent()) {\r\n                assertEquals(sourceContent.getSize(), Files.size(file));\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\UrlTests.java",
  "methodName" : "testHashFindFiles",
  "sourceCode" : "/**\r\n * Tests FindFiles with a file name that has a hash sign in it.\r\n */\r\n@Test\r\npublic void testHashFindFiles() throws Exception {\r\n    final FileSystemManager fsManager = VFS.getManager();\r\n    final FileObject[] foList = getBaseFolder().findFiles(Selectors.SELECT_FILES);\r\n    boolean hashFileFound = false;\r\n    for (final FileObject fo : foList) {\r\n        if (fo.getURL().toString().contains(\"test-hash\")) {\r\n            hashFileFound = true;\r\n            assertEquals(fo.toString(), UriParser.decode(fo.getURL().toString()));\r\n        }\r\n    }\r\n    if (!hashFileFound) {\r\n        fail(\"Test hash file containing 'test-hash' not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\UrlTests.java",
  "methodName" : "testHashURL",
  "sourceCode" : "/**\r\n * Tests resolution of an absolute file name.\r\n */\r\n@Test\r\npublic void testHashURL() throws Exception {\r\n    final FileObject file = getReadFolder().resolveFile(\"test-hash-#test.txt\");\r\n    assertEquals(file.toString(), UriParser.decode(file.getURL().toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\WindowsFileNameTests.java",
  "methodName" : "testWindowsFileNameParserError",
  "sourceCode" : "@Test\r\npublic void testWindowsFileNameParserError() {\r\n    // check VFS-338 with 2+4 slashes we want a dedicated error\r\n    try {\r\n        final String file = \"file://////\";\r\n        final DefaultFileSystemManager manager = getManager();\r\n        Assertions.assertNotNull(manager, \"Unexpected null manager for test \" + this);\r\n        final FileObject fo = manager.resolveFile(file);\r\n        fail(\"Windows File Parser should not allow \" + file + \" \" + fo);\r\n    } catch (FileSystemException ex) {\r\n        assertEquals(\"Exception code\", \"vfs.provider/invalid-absolute-uri.error\", ex.getCode());\r\n        ex = (FileSystemException) ex.getCause();\r\n        assertEquals(\"Exception code\", \"vfs.provider.local/not-absolute-file-name.error\", ex.getCode());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\WindowsFileNameTests.java",
  "methodName" : "testWindowsFileNameUNCStartError",
  "sourceCode" : "@Test\r\npublic void testWindowsFileNameUNCStartError() {\r\n    try {\r\n        final String file = \"file://///\";\r\n        final DefaultFileSystemManager manager = getManager();\r\n        Assertions.assertNotNull(manager, \"Unexpected null manager for test \" + this);\r\n        final FileObject fo = manager.resolveFile(file);\r\n        fail(\"Windows File Parser should not allow \" + file + \" \" + fo);\r\n    } catch (FileSystemException ex) {\r\n        assertEquals(\"Exception code\", \"vfs.provider/invalid-absolute-uri.error\", ex.getCode());\r\n        ex = (FileSystemException) ex.getCause();\r\n        assertEquals(\"Exception code\", \"vfs.provider.local/missing-share-name.error\", ex.getCode());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\WindowsFileNameTests.java",
  "methodName" : "testWindowsRoots",
  "sourceCode" : "@Test\r\npublic void testWindowsRoots() throws Exception {\r\n    // valid URI forms of the filesystem root\r\n    final String[] tests = { \"file:///C:/\", \"file://C:/\", \"file:/C:/\", \"file:C:/\" };\r\n    for (final String name : tests) {\r\n        final DefaultFileSystemManager manager = getManager();\r\n        Assertions.assertNotNull(manager, \"Unexpected null manager for test \" + this);\r\n        final FileName fn = manager.resolveFile(name).getName();\r\n        // the following tests work for Windows file names only\r\n        assertSame(WindowsFileName.class, fn.getClass());\r\n        // all should result in the same FileName\r\n        assertEquals(\"file:///C:/\", fn.toString());\r\n        assertEquals(\"/\", fn.getPath());\r\n        assertEquals(\"/\", fn.getPathDecoded());\r\n        assertEquals(\"file:///C:/\", fn.getRootURI());\r\n        assertEquals(\"file:///C:/\", fn.getFriendlyURI());\r\n        assertEquals(\"file:///C:/\", fn.getRoot().toString());\r\n        assertEquals(\"\", fn.getExtension());\r\n        assertEquals(\"\", fn.getBaseName());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\local\\WindowsFileNameTests.java",
  "methodName" : "testWindowsWrongRoots",
  "sourceCode" : "@Test\r\npublic void testWindowsWrongRoots() {\r\n    final String[] tests = { \"file:///C:\", \"file://C:\", \"file:/C:\", \"file:C:\" };\r\n    for (final String name : tests) {\r\n        try {\r\n            final DefaultFileSystemManager manager = getManager();\r\n            Assertions.assertNotNull(manager, \"Unexpected null manager for test \" + this);\r\n            final FileName fn = manager.resolveFile(name).getName();\r\n            fail(\"should not accept root \" + name);\r\n        } catch (final FileSystemException ex) {\r\n            assertEquals(\"vfs.provider/invalid-absolute-uri.error\", ex.getCode());\r\n            assertTrue(ex.toString().contains(name));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testFSOptions",
  "sourceCode" : "@Test\r\npublic void testFSOptions() throws Exception {\r\n    // Default FS\r\n    final FileObject fo1 = manager.resolveFile(\"ram:/\");\r\n    final FileObject fo2 = manager.resolveFile(\"ram:/\");\r\n    assertSame(\"Both files should exist in the same fs instance.\", fo1.getFileSystem(), fo2.getFileSystem());\r\n    FileSystemOptions fsOptions = fo1.getFileSystem().getFileSystemOptions();\r\n    long maxFilesystemSize = RamFileSystemConfigBuilder.getInstance().getLongMaxSize(fsOptions);\r\n    assertEquals(Long.MAX_VALUE, maxFilesystemSize, \"Filesystem option maxSize must be unlimited\");\r\n    // Small FS\r\n    final FileObject fo3 = manager.resolveFile(\"ram:/fo3\", smallSizedFso);\r\n    final FileObject fo4 = manager.resolveFile(\"ram:/\", smallSizedFso);\r\n    assertSame(\"Both files should exist in the same FileSystem instance.\", fo3.getFileSystem(), fo4.getFileSystem());\r\n    assertNotSame(\"Both files should exist in different FileSystem instance.\", fo1.getFileSystem(), fo3.getFileSystem());\r\n    fsOptions = fo3.getFileSystem().getFileSystemOptions();\r\n    maxFilesystemSize = RamFileSystemConfigBuilder.getInstance().getLongMaxSize(fsOptions);\r\n    assertEquals(10, maxFilesystemSize, \"Filesystem option maxSize must be set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testMoveFile",
  "sourceCode" : "/**\r\n * Tests VFS-625.\r\n * @throws FileSystemException\r\n */\r\n@Test\r\npublic void testMoveFile() throws FileSystemException {\r\n    final FileObject fileSource = manager.resolveFile(\"ram://virtual/source\");\r\n    fileSource.createFile();\r\n    final FileObject fileDest = manager.resolveFile(\"ram://virtual/dest\");\r\n    assertTrue(fileSource.canRenameTo(fileDest));\r\n    fileSource.moveTo(fileDest);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testReadEmptyFileByteByByte",
  "sourceCode" : "@Test\r\npublic void testReadEmptyFileByteByByte() throws FileSystemException, IOException {\r\n    final InputStream input = createEmptyFile();\r\n    assertEquals(-1, input.read(), \"Empty file didn't return EOF -1\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testReadEmptyFileIntoBuffer",
  "sourceCode" : "@Test\r\npublic void testReadEmptyFileIntoBuffer() throws FileSystemException, IOException {\r\n    final InputStream input = createEmptyFile();\r\n    final byte[] buffer = new byte[100];\r\n    assertEquals(-1, input.read(buffer), \"Empty file didn't return when filling buffer\");\r\n    assertArrayEquals(new byte[100], buffer, \"Buffer was written too\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testReadEmptyFileIntoBufferWithOffsetAndLength",
  "sourceCode" : "@Test\r\npublic void testReadEmptyFileIntoBufferWithOffsetAndLength() throws FileSystemException, IOException {\r\n    final InputStream input = createEmptyFile();\r\n    final byte[] buffer = new byte[100];\r\n    assertEquals(-1, input.read(buffer, 10, 90), \"Empty file didn't return when filling buffer\");\r\n    assertArrayEquals(new byte[100], buffer, \"Buffer was written too\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testReadNonEmptyFileByteByByte",
  "sourceCode" : "@Test\r\npublic void testReadNonEmptyFileByteByByte() throws FileSystemException, IOException {\r\n    final InputStream input = createNonEmptyFile();\r\n    assertEquals(1, input.read(), \"Read 1st byte failed\");\r\n    assertEquals(2, input.read(), \"Read 2st byte failed\");\r\n    assertEquals(3, input.read(), \"Read 3st byte failed\");\r\n    assertEquals(-1, input.read(), \"File should be empty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testReadNonEmptyFileIntoBuffer",
  "sourceCode" : "@Test\r\npublic void testReadNonEmptyFileIntoBuffer() throws FileSystemException, IOException {\r\n    final InputStream input = createNonEmptyFile();\r\n    final byte[] buffer = new byte[100];\r\n    assertEquals(NON_EMPTY_FILE_CONTENT.length, input.read(buffer), \"Filling buffer failed when file is not empty\");\r\n    final byte[] expectedBuffer = Arrays.copyOf(NON_EMPTY_FILE_CONTENT, 100);\r\n    assertArrayEquals(expectedBuffer, buffer, \"Buffer not filled\");\r\n    Arrays.fill(buffer, (byte) 0);\r\n    Arrays.fill(expectedBuffer, (byte) 0);\r\n    assertEquals(-1, input.read(buffer), \"File should be empty after filling buffer\");\r\n    assertArrayEquals(expectedBuffer, buffer, \"Buffer was written when empty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testReadNonEmptyFileIntoBufferWithOffsetAndLength",
  "sourceCode" : "@Test\r\npublic void testReadNonEmptyFileIntoBufferWithOffsetAndLength() throws FileSystemException, IOException {\r\n    final InputStream input = createNonEmptyFile();\r\n    final byte[] buffer = new byte[100];\r\n    final int offset = 10;\r\n    assertEquals(NON_EMPTY_FILE_CONTENT.length, input.read(buffer, offset, 100 - offset), \"Filling buffer failed when file is not empty\");\r\n    final byte[] expectedBuffer = new byte[100];\r\n    System.arraycopy(NON_EMPTY_FILE_CONTENT, 0, expectedBuffer, offset, NON_EMPTY_FILE_CONTENT.length);\r\n    assertArrayEquals(expectedBuffer, buffer, \"Buffer not filled\");\r\n    Arrays.fill(buffer, (byte) 0);\r\n    Arrays.fill(expectedBuffer, (byte) 0);\r\n    assertEquals(-1, input.read(buffer, 10, 90), \"File should be empty after filling buffer\");\r\n    assertArrayEquals(expectedBuffer, buffer, \"Buffer was written when empty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testRootFolderExists",
  "sourceCode" : "/**\r\n * Checks root folder exists.\r\n *\r\n * @throws FileSystemException\r\n */\r\n@Test\r\npublic void testRootFolderExists() throws FileSystemException {\r\n    final FileObject root = manager.resolveFile(\"ram:///\", defaultRamFso);\r\n    assertTrue(root.getType().hasChildren());\r\n    try {\r\n        root.delete();\r\n        fail();\r\n    } catch (final FileSystemException e) {\r\n        // Expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testSchemePrefix",
  "sourceCode" : "/**\r\n * Test if listing files with known scheme prefix works.\r\n * <p>\r\n * This test is not RamProvider specific but it uses it as a simple test-bed.\r\n * Verifies VFS-741.\r\n * </p>\r\n */\r\n@Test\r\npublic void testSchemePrefix() throws FileSystemException {\r\n    // use a :-prefix with a known scheme (unknown scheme works since VFS-398)\r\n    // typically \"ram\"\r\n    final String KNOWN_SCHEME = manager.getSchemes()[0];\r\n    // we test with this file name\r\n    final String testDir = \"/prefixtest/\";\r\n    final String testFileName = KNOWN_SCHEME + \":test:txt\";\r\n    final String expectedName = testDir + testFileName;\r\n    final FileObject dir = prepareSpecialFile(testDir, testFileName);\r\n    // verify we can list dir\r\n    // if not it throws:\r\n    // Caused by: org.apache.commons.vfs2.FileSystemException: Invalid descendent file name \"ram:data:test.txt\".\r\n    //   at org.apache.commons.vfs2.impl.DefaultFileSystemManager.resolveName\r\n    //   at org.apache.commons.vfs2.provider.AbstractFileObject.getChildren\r\n    //   at org.apache.commons.vfs2.provider.AbstractFileObject.traverse\r\n    //   at org.apache.commons.vfs2.provider.AbstractFileObject.findFiles\r\n    // test methods to get the child:\r\n    // includes dir\r\n    final FileObject[] findFilesResult = dir.findFiles(new AllFileSelector());\r\n    final FileObject[] getChildrenResult = dir.getChildren();\r\n    final FileObject getChildResult = dir.getChild(testFileName);\r\n    // validate findFiles returns expected result\r\n    assertEquals(2, findFilesResult.length, () -> \"Unexpected result findFiles: \" + Arrays.toString(findFilesResult));\r\n    String resultName = findFilesResult[0].getName().getPathDecoded();\r\n    assertEquals(expectedName, resultName, \"findFiles Child name does not match\");\r\n    assertEquals(FileType.FILE, findFilesResult[0].getType(), \"Did findFiles but child was no file\");\r\n    // validate getChildren returns expected result\r\n    assertEquals(1, getChildrenResult.length, () -> \"Unexpected result getChildren: \" + Arrays.toString(getChildrenResult));\r\n    resultName = getChildrenResult[0].getName().getPathDecoded();\r\n    assertEquals(expectedName, resultName, \"getChildren Child name does not match\");\r\n    assertEquals(FileType.FILE, getChildrenResult[0].getType(), \"Did getChildren but child was no file\");\r\n    // validate getChild returns expected child\r\n    assertNotNull(getChildResult, \"Did not find direct child\");\r\n    resultName = getChildResult.getName().getPathDecoded();\r\n    assertEquals(expectedName, resultName, \"getChild name does not match\");\r\n    assertEquals(FileType.FILE, getChildResult.getType(), \"getChild was no file\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testSmallFS",
  "sourceCode" : "@Test\r\npublic void testSmallFS() throws Exception {\r\n    // Small FS\r\n    final FileObject fo3 = manager.resolveFile(\"ram:/fo3\", smallSizedFso);\r\n    fo3.createFile();\r\n    try {\r\n        final OutputStream os = fo3.getContent().getOutputStream();\r\n        os.write(new byte[10]);\r\n        os.close();\r\n    } catch (final FileSystemException e) {\r\n        fail(\"Test should be able to save such a small file\");\r\n    }\r\n    try {\r\n        final OutputStream os = fo3.getContent().getOutputStream();\r\n        os.write(new byte[11]);\r\n        os.close();\r\n        fail(\"It shouldn't save such a big file\");\r\n    } catch (final FileSystemException e) {\r\n        // Expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\CustomRamProviderTest.java",
  "methodName" : "testSpecialName",
  "sourceCode" : "/**\r\n * Test some special file name symbols.\r\n * <p>\r\n * Use the RamProvider since it has no character limitations like\r\n * the (Windows) LocalFileProvider.\r\n */\r\n@Test\r\npublic void testSpecialName() throws FileSystemException {\r\n    // we test with this file name\r\n    // does not work with '!'\r\n    final String testDir = \"/specialtest/\";\r\n    final String testFileName = \"test:+-_ \\\"()<>%#.txt\";\r\n    final String expectedName = testDir + testFileName;\r\n    final FileObject dir = prepareSpecialFile(testDir, testFileName);\r\n    // DO: verify you can list it:\r\n    // includes dir\r\n    final FileObject[] findFilesResult = dir.findFiles(new AllFileSelector());\r\n    final FileObject[] getChildrenResult = dir.getChildren();\r\n    final FileObject getChildResult = dir.getChild(UriParser.encode(testFileName, ENC));\r\n    // validate findFiles returns expected result\r\n    assertEquals(2, findFilesResult.length, () -> \"Unexpected result findFiles: \" + Arrays.toString(findFilesResult));\r\n    String resultName = findFilesResult[0].getName().getPathDecoded();\r\n    assertEquals(expectedName, resultName, \"findFiles Child name does not match\");\r\n    assertEquals(FileType.FILE, findFilesResult[0].getType(), \"Did findFiles but child was no file\");\r\n    // validate getChildren returns expected result\r\n    assertEquals(1, getChildrenResult.length, () -> \"Unexpected result getChildren: \" + Arrays.toString(getChildrenResult));\r\n    resultName = getChildrenResult[0].getName().getPathDecoded();\r\n    assertEquals(expectedName, resultName, \"getChildren Child name does not match\");\r\n    assertEquals(FileType.FILE, getChildrenResult[0].getType(), \"Did getChildren but child was no file\");\r\n    // validate getChild returns expected child\r\n    assertNotNull(getChildResult, \"Did not find direct child\");\r\n    resultName = getChildResult.getName().getPathDecoded();\r\n    assertEquals(expectedName, resultName, \"getChild name does not match\");\r\n    assertEquals(FileType.FILE, getChildResult.getType(), \"getChild was no file\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\ram\\RamFileRandomAccessContentTest.java",
  "methodName" : "testInputStreamRead0xff",
  "sourceCode" : "@Test\r\npublic void testInputStreamRead0xff() throws IOException {\r\n    // create ram file to test\r\n    final FileObject file = VFS.getManager().resolveFile(\"ram://file\");\r\n    file.createFile();\r\n    // write test data,a single byte 0xFF\r\n    try (OutputStream out = file.getContent().getOutputStream()) {\r\n        out.write(0xFF);\r\n    }\r\n    // read test data,first data should be 0xFF instead of -1. Will read -1 finally (EOF)\r\n    try (InputStream in = new RamFileRandomAccessContent((RamFileObject) file, RandomAccessMode.READ).getInputStream()) {\r\n        // read first data\r\n        final int read = in.read();\r\n        assertNotEquals(EOF, read);\r\n        assertEquals(0xFF, read);\r\n        // read EOF\r\n        assertEquals(EOF, in.read());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveFileString",
  "sourceCode" : "@Test\r\npublic void testResolveFileString() throws FileSystemException {\r\n    assertTrue(VFS.getManager().resolveFile(\"res:test.properties\").exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveFileStringS",
  "sourceCode" : "@Test\r\npublic void testResolveFileStringS() throws FileSystemException {\r\n    assertTrue(VFS.getManager().resolveFile(\"res:/test.properties\").exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveFileStringSS",
  "sourceCode" : "@Test\r\npublic void testResolveFileStringSS() throws FileSystemException {\r\n    assertTrue(VFS.getManager().resolveFile(\"res://test.properties\").exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveFileStringSSS",
  "sourceCode" : "@Test\r\npublic void testResolveFileStringSSS() throws FileSystemException {\r\n    assertTrue(VFS.getManager().resolveFile(\"res://test.properties\").exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveFileStringSSSnull",
  "sourceCode" : "@Test\r\npublic void testResolveFileStringSSSnull() {\r\n    // Resulting path is empty\r\n    assertThrows(FileSystemException.class, () -> VFS.getManager().resolveFile(\"res:///\").exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveFileURI",
  "sourceCode" : "@Test\r\npublic void testResolveFileURI() throws FileSystemException, URISyntaxException {\r\n    assertTrue(VFS.getManager().resolveFile(new URI(\"res:test.properties\")).exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveFileURIS",
  "sourceCode" : "@Test\r\npublic void testResolveFileURIS() throws FileSystemException, URISyntaxException {\r\n    assertTrue(VFS.getManager().resolveFile(new URI(\"res:/test.properties\")).exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveFileURISS",
  "sourceCode" : "@Test\r\npublic void testResolveFileURISS() throws FileSystemException, URISyntaxException {\r\n    assertTrue(VFS.getManager().resolveFile(new URI(\"res://test.properties\")).exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveFileURISSS",
  "sourceCode" : "@Test\r\npublic void testResolveFileURISSS() throws FileSystemException, URISyntaxException {\r\n    assertTrue(VFS.getManager().resolveFile(new URI(\"res://test.properties\")).exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveURIString",
  "sourceCode" : "@Test\r\npublic void testResolveURIString() throws FileSystemException {\r\n    assertTrue(VFS.getManager().resolveURI(\"res:test.properties\").isFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveURIStringS",
  "sourceCode" : "@Test\r\npublic void testResolveURIStringS() throws FileSystemException {\r\n    assertTrue(VFS.getManager().resolveURI(\"res:/test.properties\").isFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveURIStringSS",
  "sourceCode" : "@Test\r\npublic void testResolveURIStringSS() throws FileSystemException {\r\n    assertTrue(VFS.getManager().resolveURI(\"res://test.properties\").isFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveURIStringSSS",
  "sourceCode" : "@Test\r\npublic void testResolveURIStringSSS() throws FileSystemException {\r\n    assertTrue(VFS.getManager().resolveURI(\"res:///test.properties\").isFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\ResSchemeTest.java",
  "methodName" : "testResolveURIStringSSSnull",
  "sourceCode" : "@Test\r\npublic void testResolveURIStringSSSnull() {\r\n    // Resulting path is empty\r\n    assertThrows(FileSystemException.class, () -> VFS.getManager().resolveURI(\"res:///\").isFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\Vfs444TestCase.java",
  "methodName" : "testResolveFullPathFile0",
  "sourceCode" : "@Test\r\npublic void testResolveFullPathFile0() throws FileSystemException {\r\n    final FileObject result = getManager().resolveFile(\"res:test-data/test.zip\");\r\n    Assertions.assertTrue(result.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\Vfs444TestCase.java",
  "methodName" : "testResolveFullPathFile1",
  "sourceCode" : "@Test\r\npublic void testResolveFullPathFile1() throws FileSystemException {\r\n    final FileObject result = getManager().resolveFile(\"res:/test-data/test.zip\");\r\n    Assertions.assertTrue(result.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\Vfs444TestCase.java",
  "methodName" : "testResolveFullPathFile2",
  "sourceCode" : "@Test\r\npublic void testResolveFullPathFile2() throws FileSystemException {\r\n    final FileObject result = getManager().resolveFile(\"res://test-data/test.zip\");\r\n    Assertions.assertTrue(result.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\Vfs444TestCase.java",
  "methodName" : "testResolveFullPathURI0",
  "sourceCode" : "@Test\r\npublic void testResolveFullPathURI0() throws FileSystemException {\r\n    final FileName result = getManager().resolveURI(\"res:test-data/test.zip\");\r\n    Assertions.assertTrue(result.isFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\Vfs444TestCase.java",
  "methodName" : "testResolveFullPathURI1",
  "sourceCode" : "@Test\r\npublic void testResolveFullPathURI1() throws FileSystemException {\r\n    final FileName result = getManager().resolveURI(\"res:/test-data/test.zip\");\r\n    Assertions.assertTrue(result.isFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\Vfs444TestCase.java",
  "methodName" : "testResolveFullPathURI2",
  "sourceCode" : "@Test\r\npublic void testResolveFullPathURI2() throws FileSystemException {\r\n    final FileName result = getManager().resolveURI(\"res://test-data/test.zip\");\r\n    Assertions.assertTrue(result.isFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\Vfs444TestCase.java",
  "methodName" : "testResolvePartialPath1",
  "sourceCode" : "@Test\r\npublic void testResolvePartialPath1() throws FileSystemException {\r\n    final FileName result = getManager().resolveURI(\"res:test-data\");\r\n    Assertions.assertTrue(result.isFile());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\res\\Vfs444TestCase.java",
  "methodName" : "testResolvePartialPath2",
  "sourceCode" : "@Test\r\npublic void testResolvePartialPath2() throws FileSystemException {\r\n    final FileName root = getManager().resolveURI(\"res:test-data\");\r\n    final FileName file = getManager().resolveName(root, \"test.zip\");\r\n    final String uri = file.getURI();\r\n    final FileObject result = getManager().resolveFile(uri);\r\n    Assertions.assertNotNull(result);\r\n    Assertions.assertTrue(result.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\sftp\\SftpFileSystemConfigBuilderTest.java",
  "methodName" : "testConnectTimeout",
  "sourceCode" : "@Test\r\npublic void testConnectTimeout() {\r\n    final FileSystemOptions options = new FileSystemOptions();\r\n    final SftpFileSystemConfigBuilder builder = SftpFileSystemConfigBuilder.getInstance();\r\n    builder.setConnectTimeout(options, ONE_MINUTE);\r\n    assertEquals(ONE_MINUTE, builder.getConnectTimeout(options));\r\n    assertEquals(ONE_MINUTE.toMillis(), (long) builder.getConnectTimeoutMillis(options));\r\n    //\r\n    builder.setConnectTimeoutMillis(options, (int) ONE_MINUTE.toMillis());\r\n    assertEquals(ONE_MINUTE, builder.getConnectTimeout(options));\r\n    assertEquals(ONE_MINUTE.toMillis(), (long) builder.getConnectTimeoutMillis(options));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\sftp\\SftpFileSystemConfigBuilderTest.java",
  "methodName" : "testSessionTimeout",
  "sourceCode" : "@Test\r\npublic void testSessionTimeout() {\r\n    final FileSystemOptions options = new FileSystemOptions();\r\n    final SftpFileSystemConfigBuilder builder = SftpFileSystemConfigBuilder.getInstance();\r\n    builder.setSessionTimeout(options, ONE_MINUTE);\r\n    assertEquals(ONE_MINUTE, builder.getSessionTimeout(options));\r\n    assertEquals(ONE_MINUTE.toMillis(), (long) builder.getSessionTimeoutMillis(options));\r\n    //\r\n    builder.setSessionTimeoutMillis(options, (int) ONE_MINUTE.toMillis());\r\n    assertEquals(ONE_MINUTE, builder.getSessionTimeout(options));\r\n    assertEquals(ONE_MINUTE.toMillis(), (long) builder.getSessionTimeoutMillis(options));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\sftp\\SftpFileSystemGroupsTests.java",
  "methodName" : "testShouldHandleEmptyGroupResult",
  "sourceCode" : "@Test\r\npublic void testShouldHandleEmptyGroupResult() {\r\n    final StringBuilder builder = new StringBuilder(\"\\n\");\r\n    final int[] groups = fileSystem.parseGroupIdOutput(builder);\r\n    assertEquals(0, groups.length, \"Group ids should be empty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\sftp\\SftpFileSystemGroupsTests.java",
  "methodName" : "testShouldHandleListOfGroupIds",
  "sourceCode" : "@Test\r\npublic void testShouldHandleListOfGroupIds() {\r\n    final StringBuilder builder = new StringBuilder(\"1 22 333 4444\\n\");\r\n    final int[] groups = fileSystem.parseGroupIdOutput(builder);\r\n    assertEquals(4, groups.length, \"Group ids should not be empty\");\r\n    assertArrayEquals(new int[] { 1, 22, 333, 4444 }, groups);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\sftp\\SftpFileSystemGroupsTests.java",
  "methodName" : "testShouldThrowOnUnexpectedOutput",
  "sourceCode" : "@Test\r\npublic void testShouldThrowOnUnexpectedOutput() {\r\n    final StringBuilder builder = new StringBuilder(\"abc\\n\");\r\n    assertThrows(NumberFormatException.class, () -> fileSystem.parseGroupIdOutput(builder));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\sftp\\SftpMultiThreadWriteTests.java",
  "methodName" : "testParallelCopyFromLocalFileSystem",
  "sourceCode" : "/**\r\n * Tests file copy from local file system in parallel mode. This was a problem with SFTP channels.\r\n */\r\n@Test\r\npublic void testParallelCopyFromLocalFileSystem() throws Exception {\r\n    final File localFile = new File(\"src/test/resources/test-data/test.zip\");\r\n    final FileObject localFileObject = VFS.getManager().toFileObject(localFile);\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    final List<Callable<Boolean>> tasks = new ArrayList<>();\r\n    for (int i = 0; i < 100; i++) {\r\n        final String fileName = \"file\" + i + \"copy.txt\";\r\n        tasks.add(() -> {\r\n            try {\r\n                final FileObject fileObjectCopy = scratchFolder.resolveFile(fileName);\r\n                assertFalse(fileObjectCopy.exists());\r\n                fileObjectCopy.copyFrom(localFileObject, Selectors.SELECT_SELF);\r\n            } catch (final Throwable e) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    final ExecutorService service = Executors.newFixedThreadPool(10);\r\n    try {\r\n        final List<Future<Boolean>> futures = service.invokeAll(tasks);\r\n        assertTrue(futures.stream().allMatch(future -> {\r\n            try {\r\n                return future.get(5, TimeUnit.SECONDS);\r\n            } catch (final Exception e) {\r\n                return false;\r\n            }\r\n        }));\r\n    } finally {\r\n        service.shutdown();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\sftp\\SftpPermissionExceptionTestCase.java",
  "methodName" : "testGetOutputStreamException",
  "sourceCode" : "/**\r\n * Test SftpFileObject.doGetOutputStream return the channel to pool, when there is an exception in channel.put.\r\n */\r\n@Test\r\npublic void testGetOutputStreamException() throws Exception {\r\n    final File localFile = new File(\"src/test/resources/test-data/test.zip\");\r\n    final FileObject localFileObject = VFS.getManager().toFileObject(localFile);\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // try to create local file\r\n    final String fileName = \"filecopy.txt\";\r\n    FileObject fileObjectCopy = scratchFolder.resolveFile(fileName);\r\n    fileObjectCopy.setWritable(false, false);\r\n    fileObjectCopy.copyFrom(localFileObject, Selectors.SELECT_SELF);\r\n    // try to set the local file to readonly\r\n    Paths.get(getTestDirectory(), scratchFolder.getName().getBaseName(), fileName).toFile().setWritable(false);\r\n    for (int i = 0; i < 30; i++) {\r\n        try {\r\n            fileObjectCopy = scratchFolder.resolveFile(fileName);\r\n            Assertions.assertFalse(fileObjectCopy.isWriteable());\r\n            fileObjectCopy.copyFrom(localFileObject, Selectors.SELECT_SELF);\r\n            Assertions.fail(\"permission fail\");\r\n        } catch (final Exception ex) {\r\n            // ignore no permission\r\n        }\r\n    }\r\n    // try to get created channel number.\r\n    final int channelId = server.getActiveSessions().get(0).registerChannel(new ChannelSession());\r\n    Assertions.assertTrue(channelId < 30, \"create too many sftp channel more\");\r\n    // try to set the local file to writable\r\n    Paths.get(getTestDirectory(), scratchFolder.getName().getBaseName(), fileName).toFile().setWritable(true);\r\n    fileObjectCopy = scratchFolder.resolveFile(fileName);\r\n    Assertions.assertTrue(fileObjectCopy.isWriteable());\r\n    fileObjectCopy.copyFrom(localFileObject, Selectors.SELECT_SELF);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\sftp\\SftpProviderIPv6TestCase.java",
  "methodName" : "testResolveIPv6Url",
  "sourceCode" : "@org.junit.Test\r\npublic void testResolveIPv6Url() throws Exception {\r\n    try {\r\n        // We only want to use mocked client for this test, not for the test class initialization\r\n        getManager().removeProvider(\"sftp\");\r\n        getManager().addProvider(\"sftp\", new MockedClientSftpFileProvider());\r\n        final String ipv6Url = \"sftp://user:pass@[fe80::1c42:dae:8370:aea6%en1]/file.txt\";\r\n        final FileObject fileObject = getManager().resolveFile(ipv6Url, new FileSystemOptions());\r\n        assertEquals(\"sftp://user:pass@[fe80::1c42:dae:8370:aea6%en1]/\", fileObject.getFileSystem().getRootURI());\r\n        assertEquals(\"sftp://user:pass@[fe80::1c42:dae:8370:aea6%en1]/file.txt\", fileObject.getName().getURI());\r\n    } finally {\r\n        getManager().removeProvider(\"sftp\");\r\n        getManager().addProvider(\"sftp\", new SftpFileProvider());\r\n    }\r\n}",
  "annotations" : [ "org.junit.Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\sftp\\SftpPutChannelTestCase.java",
  "methodName" : "testDoGetInputStream",
  "sourceCode" : "/**\r\n * Tests SftpFileObject.doGetInputStream return the channel to pool, when there is an exception.\r\n */\r\n@Test\r\npublic void testDoGetInputStream() throws Exception {\r\n    final FileObject readFolder = getReadFolder();\r\n    // try MAX_CHANNELS * 2 times, then check channels count less than MAX_CHANNELS\r\n    // ( actually must <= 2, but less than MAX_CHANNELS is enough\r\n    for (int i = 0; i < MAX_CHANNELS * 2; i++) {\r\n        try {\r\n            try (InputStream ignored = readFolder.resolveFile(\"not-exists.txt\").getContent().getInputStream()) {\r\n                Assertions.fail(\"file should not be exists\");\r\n            }\r\n        } catch (final FileSystemException e) {\r\n            final int channelsCount = ((CustomServerSession) server.getActiveSessions().get(0)).getChannelsCount();\r\n            Assertions.assertTrue(channelsCount < MAX_CHANNELS, \"channels count expected less than \" + MAX_CHANNELS);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\CreateFileSystemTest.java",
  "methodName" : "testTarFile",
  "sourceCode" : "@Test\r\npublic void testTarFile() throws IOException {\r\n    final String testFilePath = \"src/test/resources/test-data/test.tar\";\r\n    try (FileObject fileObject = createFileSystem(testFilePath)) {\r\n        assertInstanceOf(TarFileObject.class, fileObject);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\CreateFileSystemTest.java",
  "methodName" : "testTbz2File",
  "sourceCode" : "@Test\r\npublic void testTbz2File() throws IOException {\r\n    final String testFilePath = \"src/test/resources/test-data/test.tbz2\";\r\n    try (FileObject fileObject = createFileSystem(testFilePath)) {\r\n        assertInstanceOf(TarFileObject.class, fileObject);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\CreateFileSystemTest.java",
  "methodName" : "testTgzFile",
  "sourceCode" : "@Test\r\npublic void testTgzFile() throws IOException {\r\n    final String testFilePath = \"src/test/resources/test-data/test.tgz\";\r\n    try (FileObject fileObject = createFileSystem(testFilePath)) {\r\n        assertInstanceOf(TarFileObject.class, fileObject);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\LargeTarTest.java",
  "methodName" : "testLargeFile",
  "sourceCode" : "@Test\r\npublic void testLargeFile() throws Exception {\r\n    final File realFile = new File(largeFilePath + largeFileName + \".tar.gz\");\r\n    final FileObject file = manager.resolveFile(\"tgz:file://\" + realFile.getCanonicalPath() + \"!/\");\r\n    assertNotNull(file);\r\n    final List<FileObject> files = Arrays.asList(file.getChildren());\r\n    assertNotNull(files);\r\n    assertEquals(1, files.size());\r\n    final FileObject f = files.get(0);\r\n    assertEquals(f.getName().getBaseName(), largeFileName + \".txt\", () -> \"Expected file not found: \" + largeFileName + \".txt\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\TarFileObjectTest.java",
  "methodName" : "testReadSpecialNameFileInTarFile",
  "sourceCode" : "/**\r\n * Test read file with special name in a tar file.\r\n */\r\n@Test\r\npublic void testReadSpecialNameFileInTarFile() throws FileSystemException {\r\n    testReadSpecialNameFileInFile(\"src/test/resources/test-data/special_fileName.tar\", \"tar\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\TarFileObjectTest.java",
  "methodName" : "testReadSpecialNameFileInTbz2File",
  "sourceCode" : "/**\r\n * Test read file with special name in a tbz2 file.\r\n */\r\n@Test\r\npublic void testReadSpecialNameFileInTbz2File() throws FileSystemException {\r\n    testReadSpecialNameFileInFile(\"src/test/resources/test-data/special_fileName.tbz2\", \"tbz2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\TarFileObjectTest.java",
  "methodName" : "testReadSpecialNameFileInTgzFile",
  "sourceCode" : "/**\r\n * Test read file with special name in a tgz file.\r\n */\r\n@Test\r\npublic void testReadSpecialNameFileInTgzFile() throws FileSystemException {\r\n    testReadSpecialNameFileInFile(\"src/test/resources/test-data/special_fileName.tgz\", \"tgz\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\TarFileSystemTest.java",
  "methodName" : "testTarFileUseDefaultFilesCache",
  "sourceCode" : "@Test\r\npublic void testTarFileUseDefaultFilesCache() throws FileSystemException {\r\n    testUseWeakRefFilesCache(\"tar\", \"src/test/resources/test-data/test.tar\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\TarFileSystemTest.java",
  "methodName" : "testTarFileUseWeakRefFilesCache",
  "sourceCode" : "@Test\r\n// Managed by the file system, no need to close.\r\n@SuppressWarnings(\"resource\")\r\npublic void testTarFileUseWeakRefFilesCache() throws FileSystemException {\r\n    testUseWeakRefFilesCache(\"tar\", \"src/test/resources/test-data/test.tar\", new WeakRefFilesCache());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\TarFileSystemTest.java",
  "methodName" : "testTbz2FileUseDefaultFilesCache",
  "sourceCode" : "@Test\r\npublic void testTbz2FileUseDefaultFilesCache() throws FileSystemException {\r\n    testUseWeakRefFilesCache(\"tbz2\", \"src/test/resources/test-data/test.tbz2\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\TarFileSystemTest.java",
  "methodName" : "testTbz2FileUseWeakRefFilesCache",
  "sourceCode" : "@Test\r\n// Managed by the file system, no need to close.\r\n@SuppressWarnings(\"resource\")\r\npublic void testTbz2FileUseWeakRefFilesCache() throws FileSystemException {\r\n    testUseWeakRefFilesCache(\"tbz2\", \"src/test/resources/test-data/test.tbz2\", new WeakRefFilesCache());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\TarFileSystemTest.java",
  "methodName" : "testTgzFileUseDefaultFilesCache",
  "sourceCode" : "@Test\r\npublic void testTgzFileUseDefaultFilesCache() throws FileSystemException {\r\n    testUseWeakRefFilesCache(\"tgz\", \"src/test/resources/test-data/test.tgz\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\tar\\TarFileSystemTest.java",
  "methodName" : "testTgzFileUseWeakRefFilesCache",
  "sourceCode" : "@Test\r\n// Managed by the file system, no need to close.\r\n@SuppressWarnings(\"resource\")\r\npublic void testTgzFileUseWeakRefFilesCache() throws FileSystemException {\r\n    testUseWeakRefFilesCache(\"tgz\", \"src/test/resources/test-data/test.tgz\", new WeakRefFilesCache());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\FileObjectSortTest.java",
  "methodName" : "testSortArrayIgnoreCase",
  "sourceCode" : "/**\r\n * Tests that sorting ignores case.\r\n *\r\n * @throws FileSystemException\r\n */\r\n@Test\r\npublic void testSortArrayIgnoreCase() throws FileSystemException {\r\n    final FileObject file1 = vfsFileSystem.resolveFile(\"A1\");\r\n    final FileObject file2 = vfsFileSystem.resolveFile(\"a2\");\r\n    final FileObject file3 = vfsFileSystem.resolveFile(\"A3\");\r\n    final FileObject[] actualArray = { file3, file1, file2, file1, file2 };\r\n    final FileObject[] expectedArray = { file1, file1, file2, file2, file3 };\r\n    Arrays.sort(actualArray);\r\n    assertArrayEquals(expectedArray, actualArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\FileObjectSortTest.java",
  "methodName" : "testSortArrayMoveAll",
  "sourceCode" : "/**\r\n * Tests sorting an array.\r\n */\r\n@Test\r\npublic void testSortArrayMoveAll() {\r\n    final FileObject[] actualArray = unSortedArray.clone();\r\n    assertFalse(Arrays.equals(unSortedArray, sortedArray));\r\n    Arrays.sort(actualArray);\r\n    assertArrayEquals(sortedArray, actualArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\FileObjectSortTest.java",
  "methodName" : "testSortArrayMoveNone",
  "sourceCode" : "/**\r\n * Tests that sorting an array already in oder does not mess it up.\r\n */\r\n@Test\r\npublic void testSortArrayMoveNone() {\r\n    final FileObject[] actualArray = sortedArray.clone();\r\n    Arrays.sort(actualArray);\r\n    assertArrayEquals(sortedArray, actualArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\FileObjectSortTest.java",
  "methodName" : "testSortListMoveAll",
  "sourceCode" : "/**\r\n * Tests sorting a list.\r\n */\r\n@Test\r\npublic void testSortListMoveAll() {\r\n    final List<FileObject> actualList = Arrays.asList(unSortedArray);\r\n    final List<FileObject> expectedSortedList = Arrays.asList(sortedArray);\r\n    assertNotEquals(actualList, expectedSortedList);\r\n    actualList.sort(null);\r\n    assertEquals(actualList, expectedSortedList);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\FileObjectSortTest.java",
  "methodName" : "testSortListMoveNone",
  "sourceCode" : "/**\r\n * Tests that sorting a list already in oder does not mess it up.\r\n */\r\n@Test\r\npublic void testSortListMoveNone() {\r\n    final List<FileObject> actualList = Arrays.asList(sortedArray);\r\n    final List<FileObject> expectedSortedList = Arrays.asList(sortedArray);\r\n    actualList.sort(null);\r\n    assertEquals(actualList, expectedSortedList);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\GenericFileNameTest.java",
  "methodName" : "testBadlyFormedUri",
  "sourceCode" : "/**\r\n * Tests error handling in URI parser.\r\n */\r\n@Test\r\npublic void testBadlyFormedUri() throws Exception {\r\n    // Does not start with ftp://\r\n    testBadlyFormedUri(\"ftp:\", \"vfs.provider/missing-double-slashes.error\");\r\n    testBadlyFormedUri(\"ftp:/\", \"vfs.provider/missing-double-slashes.error\");\r\n    testBadlyFormedUri(\"ftp:a\", \"vfs.provider/missing-double-slashes.error\");\r\n    // Missing hostname\r\n    testBadlyFormedUri(\"ftp://\", \"vfs.provider/missing-hostname.error\");\r\n    testBadlyFormedUri(\"ftp://:21/file\", \"vfs.provider/missing-hostname.error\");\r\n    testBadlyFormedUri(\"ftp:///file\", \"vfs.provider/missing-hostname.error\");\r\n    // Empty port\r\n    testBadlyFormedUri(\"ftp://host:\", \"vfs.provider/missing-port.error\");\r\n    testBadlyFormedUri(\"ftp://host:/file\", \"vfs.provider/missing-port.error\");\r\n    testBadlyFormedUri(\"ftp://host:port/file\", \"vfs.provider/missing-port.error\");\r\n    // Missing absolute path\r\n    testBadlyFormedUri(\"ftp://host:90a\", \"vfs.provider/missing-hostname-path-sep.error\");\r\n    testBadlyFormedUri(\"ftp://host?a\", \"vfs.provider/missing-hostname-path-sep.error\");\r\n    // TODO Improperly accepted malformed uris\r\n    // testBadlyFormedUri(\"ftp://host[a/file\", \"malformed uri\");\r\n    // testBadlyFormedUri(\"ftp://host]a/file\", \"malformed uri\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\GenericFileNameTest.java",
  "methodName" : "testIPv6BadlyFormedUri",
  "sourceCode" : "@Test\r\npublic void testIPv6BadlyFormedUri() {\r\n    // address with opening bracket only\r\n    testBadlyFormedUri(\"ftp://[\", \"vfs.provider/unterminated-ipv6-hostname.error\");\r\n    // address with closing bracket only (ftp://]) actually currently parses ok, but it's not considered as IPv6 case by parser\r\n    // address with unterminated host name\r\n    testBadlyFormedUri(\"ftp://[fe80::8b2:d61e:e5c:b333\", \"vfs.provider/unterminated-ipv6-hostname.error\");\r\n    // address without opening bracket (first \":\" considered as port number separator in this case)\r\n    testBadlyFormedUri(\"ftp://fe80::8b2:d61e:e5c:b333]\", \"vfs.provider/missing-port.error\");\r\n    // empty address in brackets\r\n    testBadlyFormedUri(\"ftp://[]\", \"vfs.provider/missing-hostname.error\");\r\n    // double square brackets\r\n    // (first \"]\" considered as terminating bracket, path separator is expected instead of the second \"]\")\r\n    testBadlyFormedUri(\"ftp://[[fe80::8b2:d61e:e5c:b333]]\", \"vfs.provider/missing-hostname-path-sep.error\");\r\n    // two empty strings in brackets\r\n    testBadlyFormedUri(\"ftp://[][]\", \"vfs.provider/missing-hostname.error\");\r\n    // two non-empty strings in brackets\r\n    testBadlyFormedUri(\"ftp://[fe80::8b2:d61e:e5c:b333][fe80::8b2:d61e:e5c:b333]\", \"vfs.provider/missing-hostname-path-sep.error\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\GenericFileNameTest.java",
  "methodName" : "testParseIPv6InvalidHostsTolerance",
  "sourceCode" : "@Test\r\npublic void testParseIPv6InvalidHostsTolerance() throws Exception {\r\n    // We don't strictly validate IPv6 host name, if it can be parsed out from URI\r\n    // Assuming, it'll just fail on connection stage\r\n    final GenericURLFileNameParser urlParser = new GenericURLFileNameParser(21);\r\n    // too few segments\r\n    GenericFileName name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[1:2e]:2222/test\");\r\n    assertEquals(\"[1:2e]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[1:2e]:2222/test\", name.getURI());\r\n    // IPv4 address in square brackets\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[192.168.1.1]:2222/test\");\r\n    assertEquals(\"[192.168.1.1]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[192.168.1.1]:2222/test\", name.getURI());\r\n    // too many segments\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[::7:6:5:4:3:2:1:0]:2222/test\");\r\n    assertEquals(\"[::7:6:5:4:3:2:1:0]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[::7:6:5:4:3:2:1:0]:2222/test\", name.getURI());\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[3ffe:0:0:0:0:0:0:0:1]:2222/test\");\r\n    assertEquals(\"[3ffe:0:0:0:0:0:0:0:1]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[3ffe:0:0:0:0:0:0:0:1]:2222/test\", name.getURI());\r\n    // segment exceeds 16 bits\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[3ffe::10000]:2222/test\");\r\n    assertEquals(\"[3ffe::10000]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[3ffe::10000]:2222/test\", name.getURI());\r\n    // whitespace host\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[ ]:2222/test\");\r\n    assertEquals(\"[ ]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[ ]:2222/test\", name.getURI());\r\n    // just some invalid sequences\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[:]:2222/test\");\r\n    assertEquals(\"[:]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[:]:2222/test\", name.getURI());\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[:::]:2222/test\");\r\n    assertEquals(\"[:::]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[:::]:2222/test\", name.getURI());\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[xyz]:2222/test\");\r\n    assertEquals(\"[xyz]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[xyz]:2222/test\", name.getURI());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\GenericFileNameTest.java",
  "methodName" : "testParseIPv6Uri",
  "sourceCode" : "@Test\r\npublic void testParseIPv6Uri() throws Exception {\r\n    final GenericURLFileNameParser urlParser = new GenericURLFileNameParser(21);\r\n    // basic case\r\n    GenericFileName name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[fe80::3dd0:7f8e:57b7:34d5]:2222/test\");\r\n    assertEquals(\"[fe80::3dd0:7f8e:57b7:34d5]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"/test\", name.getPath());\r\n    assertEquals(\"ftp://[fe80::3dd0:7f8e:57b7:34d5]:2222/\", name.getRootURI());\r\n    assertEquals(\"ftp://[fe80::3dd0:7f8e:57b7:34d5]:2222/test\", name.getURI());\r\n    // full uri case\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"http://user:password@[fe80::3dd0:7f8e:57b7:34d5]:2222/test?param1=value1&param2=value2#fragment\");\r\n    assertEquals(\"[fe80::3dd0:7f8e:57b7:34d5]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"/test\", name.getPath());\r\n    assertEquals(\"http://user:password@[fe80::3dd0:7f8e:57b7:34d5]:2222/\", name.getRootURI());\r\n    assertEquals(\"http://user:password@[fe80::3dd0:7f8e:57b7:34d5]:2222/test?param1=value1&param2=value2#fragment\", name.getURI());\r\n    // no trailing zeroes case\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[2001:658:22a:cafe::]:2222/test\");\r\n    assertEquals(\"[2001:658:22a:cafe::]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[2001:658:22a:cafe::]:2222/test\", name.getURI());\r\n    // the loopback address\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[::1]:2222/test\");\r\n    assertEquals(\"[::1]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[::1]:2222/test\", name.getURI());\r\n    // the unspecified address\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[::]:2222/test\");\r\n    assertEquals(\"[::]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[::]:2222/test\", name.getURI());\r\n    // form for a mixed environment of IPv4 and IPv6\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[0:0:0:0:0:0:13.1.68.3]:2222/test\");\r\n    assertEquals(\"[0:0:0:0:0:0:13.1.68.3]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[0:0:0:0:0:0:13.1.68.3]:2222/test\", name.getURI());\r\n    // compressed form for a mixed environment of IPv4 and IPv6\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[::13.1.68.3]:2222/test\");\r\n    assertEquals(\"[::13.1.68.3]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[::13.1.68.3]:2222/test\", name.getURI());\r\n    // compressed form for a mixed environment of IPv4 and IPv6\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[::FFFF:129.144.52.38]:2222/test\");\r\n    assertEquals(\"[::ffff:129.144.52.38]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[::ffff:129.144.52.38]:2222/test\", name.getURI());\r\n    // a multicast address\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[FF01::101]:2222/test\");\r\n    assertEquals(\"[ff01::101]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[ff01::101]:2222/test\", name.getURI());\r\n    // url without path\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[FF01::101]:2222\");\r\n    assertEquals(\"[ff01::101]\", name.getHostName());\r\n    assertEquals(2222, name.getPort());\r\n    assertEquals(\"ftp://[ff01::101]:2222/\", name.getURI());\r\n    // url without path and port\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[FF01::101]\");\r\n    assertEquals(\"[ff01::101]\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(\"ftp://[ff01::101]/\", name.getURI());\r\n    // address with scopeId\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[fe80::8b2:d61e:e5c:b333%15]\");\r\n    assertEquals(\"[fe80::8b2:d61e:e5c:b333%15]\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(\"ftp://[fe80::8b2:d61e:e5c:b333%15]/\", name.getURI());\r\n    // address with scopeId and escaped characters in the path\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://[fe80::8b2:d61e:e5c:b333%15]/tests%3A+test+1\");\r\n    assertEquals(\"[fe80::8b2:d61e:e5c:b333%15]\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(\"ftp://[fe80::8b2:d61e:e5c:b333%15]/tests:+test+1\", name.getURI());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\GenericFileNameTest.java",
  "methodName" : "testParseUri",
  "sourceCode" : "/**\r\n * Tests parsing a URI into its parts.\r\n */\r\n@Test\r\npublic void testParseUri() throws Exception {\r\n    final URLFileNameParser urlParser = new URLFileNameParser(21);\r\n    // Simple name\r\n    GenericFileName name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://hostname/file\");\r\n    assertEquals(\"ftp\", name.getScheme());\r\n    assertNull(name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(name.getDefaultPort(), name.getPort());\r\n    assertEquals(\"/file\", name.getPath());\r\n    assertEquals(\"ftp://hostname/\", name.getRootURI());\r\n    assertEquals(\"ftp://hostname/file\", name.getURI());\r\n    // Name with port\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://hostname:9090/file\");\r\n    assertEquals(\"ftp\", name.getScheme());\r\n    assertNull(name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(9090, name.getPort());\r\n    assertEquals(\"/file\", name.getPath());\r\n    assertEquals(\"ftp://hostname:9090/\", name.getRootURI());\r\n    assertEquals(\"ftp://hostname:9090/file\", name.getURI());\r\n    // Name with no path\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://hostname\");\r\n    assertEquals(\"ftp\", name.getScheme());\r\n    assertNull(name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(\"/\", name.getPath());\r\n    assertEquals(\"ftp://hostname/\", name.getRootURI());\r\n    assertEquals(\"ftp://hostname/\", name.getURI());\r\n    // Name with username\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://user@hostname/file\");\r\n    assertEquals(\"ftp\", name.getScheme());\r\n    assertEquals(\"user\", name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(\"/file\", name.getPath());\r\n    assertEquals(\"ftp://user@hostname/\", name.getRootURI());\r\n    assertEquals(\"ftp://user@hostname/file\", name.getURI());\r\n    // Name with username and password\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://user:password@hostname/file\");\r\n    assertEquals(\"ftp\", name.getScheme());\r\n    assertEquals(\"user\", name.getUserName());\r\n    assertEquals(\"password\", name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(\"/file\", name.getPath());\r\n    assertEquals(\"ftp://user:password@hostname/\", name.getRootURI());\r\n    assertEquals(\"ftp://user:password@hostname/file\", name.getURI());\r\n    // Encoded username and password: %75 -> 'u', %40 -> '@'\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://%75ser%3A:%40@hostname\");\r\n    assertEquals(\"ftp\", name.getScheme());\r\n    assertEquals(\"user:\", name.getUserName());\r\n    assertEquals(\"@\", name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(\"/\", name.getPath());\r\n    // RFC 2396: The ':' character in a userinfo does not have to be escaped/percent-encoded, it is NOT RECOMMENDED for use.\r\n    // RFC 3986: The ':' character in a userinfo is deprecated.\r\n    // See also https://issues.apache.org/jira/browse/VFS-810\r\n    assertEquals(\"ftp://user::%40@hostname/\", name.getRootURI());\r\n    assertEquals(\"ftp://user::%40@hostname/\", name.getURI());\r\n    // Hostname with unreserved uri symbols \"-\", \".\", \"_\", \"~\"\r\n    // https://datatracker.ietf.org/doc/html/rfc3986#page-49\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://p0~p1_p2-p3.p4/file\");\r\n    assertEquals(\"ftp\", name.getScheme());\r\n    assertNull(name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"p0~p1_p2-p3.p4\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(\"/file\", name.getPath());\r\n    assertEquals(\"ftp://p0~p1_p2-p3.p4/\", name.getRootURI());\r\n    assertEquals(\"ftp://p0~p1_p2-p3.p4/file\", name.getURI());\r\n    // Hostname with sub-delim uri symbols that are currently accepted with the hostname parser\r\n    // https://datatracker.ietf.org/doc/html/rfc3986#page-49\r\n    name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://p0!p1'p2(p3)*p4/file\");\r\n    assertEquals(\"ftp\", name.getScheme());\r\n    assertNull(name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"p0!p1'p2(p3)*p4\", name.getHostName());\r\n    assertEquals(21, name.getPort());\r\n    assertEquals(\"/file\", name.getPath());\r\n    assertEquals(\"ftp://p0!p1'p2(p3)*p4/\", name.getRootURI());\r\n    assertEquals(\"ftp://p0!p1'p2(p3)*p4/file\", name.getURI());\r\n    // Hostnames with sub-delim uri symbols that are currently not accepted with the hostname parser\r\n    // (which looks wrong)\r\n    // https://datatracker.ietf.org/doc/html/rfc3986#page-49\r\n    // name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://p0$p1/file\");\r\n    // name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://p0&p1/file\");\r\n    // name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://p0+p1/file\");\r\n    // name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://p0,p1/file\");\r\n    // name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://p0;p1/file\");\r\n    // name = (GenericFileName) urlParser.parseUri(null, null, \"ftp://p0=p1/file\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\JunctionTests.java",
  "methodName" : "testAncestors",
  "sourceCode" : "/**\r\n * Checks ancestors are created when a junction is created.\r\n */\r\n@Test\r\npublic void testAncestors() throws Exception {\r\n    final FileSystem fs = getManager().createVirtualFileSystem(\"vfs://\").getFileSystem();\r\n    final FileObject baseDir = getBaseDir();\r\n    // Make sure the file at the junction point and its ancestors do not exist\r\n    FileObject file = fs.resolveFile(\"/a/b\");\r\n    assertFalse(file.exists());\r\n    file = file.getParent();\r\n    assertFalse(file.exists());\r\n    file = file.getParent();\r\n    assertFalse(file.exists());\r\n    // Add the junction\r\n    fs.addJunction(\"/a/b\", baseDir);\r\n    // Make sure the file at the junction point and its ancestors exist\r\n    file = fs.resolveFile(\"/a/b\");\r\n    assertTrue(\"Does not exist\", file.exists());\r\n    file = file.getParent();\r\n    assertTrue(\"Does not exist\", file.exists());\r\n    file = file.getParent();\r\n    assertTrue(\"Does not exist\", file.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\test\\JunctionTests.java",
  "methodName" : "testNestedJunction",
  "sourceCode" : "/**\r\n * Checks nested junctions are not supported.\r\n */\r\n@Test\r\npublic void testNestedJunction() throws Exception {\r\n    final FileSystem fs = getManager().createVirtualFileSystem(\"vfs:\").getFileSystem();\r\n    final FileObject baseDir = getBaseDir();\r\n    fs.addJunction(\"/a\", baseDir);\r\n    // Nested\r\n    try {\r\n        fs.addJunction(\"/a/b\", baseDir);\r\n        fail();\r\n    } catch (final Exception e) {\r\n        assertSameMessage(\"vfs.impl/nested-junction.error\", \"vfs:/a/b\", e);\r\n    }\r\n    // At same point\r\n    try {\r\n        fs.addJunction(\"/a\", baseDir);\r\n        fail();\r\n    } catch (final Exception e) {\r\n        assertSameMessage(\"vfs.impl/nested-junction.error\", \"vfs:/a\", e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testColonInFileName",
  "sourceCode" : "@Test\r\npublic void testColonInFileName() {\r\n    assertNull(UriParser.extractScheme(\"some/path/some:file\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testColonInFileNameAndNotSupportedScheme",
  "sourceCode" : "@Test\r\npublic void testColonInFileNameAndNotSupportedScheme() {\r\n    assertNull(UriParser.extractScheme(schemes, \"some:file\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testColonInFileNameWithPath",
  "sourceCode" : "@Test\r\npublic void testColonInFileNameWithPath() {\r\n    assertNull(UriParser.extractScheme(schemes, \"some/path/some:file\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testColonNotFollowedBySlash",
  "sourceCode" : "@Test\r\npublic void testColonNotFollowedBySlash() {\r\n    assertEquals(\"file\", UriParser.extractScheme(schemes, \"file:user/subdir/some/path/some:file\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testIPv6CheckUriEncoding",
  "sourceCode" : "@Test\r\npublic void testIPv6CheckUriEncoding() throws FileSystemException {\r\n    UriParser.checkUriEncoding(\"http://[fe80::14b5:1204:5410:64ca%en1]:8080\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testNormalScheme",
  "sourceCode" : "@Test\r\npublic void testNormalScheme() {\r\n    assertEquals(\"ftp\", UriParser.extractScheme(schemes, \"ftp://user:pass@host/some/path/some:file\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testNormalSchemeWithBuffer",
  "sourceCode" : "@Test\r\npublic void testNormalSchemeWithBuffer() {\r\n    final StringBuilder buffer = new StringBuilder();\r\n    UriParser.extractScheme(schemes, \"ftp://user:pass@host/some/path/some:file\", buffer);\r\n    assertEquals(\"//user:pass@host/some/path/some:file\", buffer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testOneSlashScheme",
  "sourceCode" : "@Test\r\npublic void testOneSlashScheme() {\r\n    assertEquals(\"file\", UriParser.extractScheme(schemes, \"file:/user:pass@host/some/path/some:file\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testOneSlashSchemeWithBuffer",
  "sourceCode" : "@Test\r\npublic void testOneSlashSchemeWithBuffer() {\r\n    final StringBuilder buffer = new StringBuilder();\r\n    UriParser.extractScheme(schemes, \"file:/user:pass@host/some/path/some:file\", buffer);\r\n    assertEquals(\"/user:pass@host/some/path/some:file\", buffer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testPathOfNormalizedPath",
  "sourceCode" : "@Test\r\npublic void testPathOfNormalizedPath() throws FileSystemException {\r\n    checkNormalizedPath(\"./Sub Folder/\", \"Sub Folder\");\r\n    checkNormalizedPath(\"./Sub Folder/../\", \"\");\r\n    checkNormalizedPath(\"./Sub Folder%2f..%2f\", \"\");\r\n    checkNormalizedPath(\"File.txt\", \"File.txt\");\r\n    checkNormalizedPath(\"./Sub Folder/./File.txt\", \"Sub Folder/File.txt\");\r\n    checkNormalizedPath(\"./Sub Folder%2F.%2FFile.txt\", \"Sub Folder/File.txt\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\UriParserTest.java",
  "methodName" : "testTypeOfNormalizedPath",
  "sourceCode" : "@Test\r\npublic void testTypeOfNormalizedPath() {\r\n    try {\r\n        assertEquals(FileType.FOLDER, UriParser.normalisePath(new StringBuilder(\"\")));\r\n        assertEquals(FileType.FOLDER, UriParser.normalisePath(new StringBuilder(\"/\")));\r\n        assertEquals(FileType.FOLDER, UriParser.normalisePath(new StringBuilder(\".\")));\r\n        assertEquals(FileType.FOLDER, UriParser.normalisePath(new StringBuilder(\"./\")));\r\n        assertEquals(FileType.FOLDER, UriParser.normalisePath(new StringBuilder(\"./Sub Folder/\")));\r\n        assertEquals(FileType.FOLDER, UriParser.normalisePath(new StringBuilder(\"./Sub Folder/.\")));\r\n        assertEquals(FileType.FOLDER, UriParser.normalisePath(new StringBuilder(\"./Sub Folder/./\")));\r\n        assertEquals(FileType.FILE, UriParser.normalisePath(new StringBuilder(\"File.txt\")));\r\n        assertEquals(FileType.FILE, UriParser.normalisePath(new StringBuilder(\"/File.txt\")));\r\n        assertEquals(FileType.FILE, UriParser.normalisePath(new StringBuilder(\"./File.txt\")));\r\n        assertEquals(FileType.FILE, UriParser.normalisePath(new StringBuilder(\"./Sub Folder/File.txt\")));\r\n        assertEquals(FileType.FILE, UriParser.normalisePath(new StringBuilder(\"./Sub Folder/./File.txt\")));\r\n        assertEquals(FileType.FILE, UriParser.normalisePath(new StringBuilder(\"./Sub Folder/./File.\")));\r\n        assertEquals(FileType.FILE, UriParser.normalisePath(new StringBuilder(\"./Sub Folder/./File..\")));\r\n    } catch (final FileSystemException e) {\r\n        fail(e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\url\\UrlFileNameParserTest.java",
  "methodName" : "testJira739SchemeFile",
  "sourceCode" : "@Test\r\npublic void testJira739SchemeFile() throws Exception {\r\n    testJira739(\"file:///\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\url\\UrlFileNameParserTest.java",
  "methodName" : "testJira739SchemeMaprfs",
  "sourceCode" : "@Test\r\npublic void testJira739SchemeMaprfs() throws Exception {\r\n    testJira739(\"maprfs:///\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\url\\UrlFileNameParserTest.java",
  "methodName" : "testJira739SchemeRam",
  "sourceCode" : "@Test\r\npublic void testJira739SchemeRam() throws Exception {\r\n    testJira739(\"ram:///\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testCannotDeleteWhileStreaming",
  "sourceCode" : "@Test\r\npublic void testCannotDeleteWhileStreaming() throws Exception {\r\n    try (FileObject zipFileObject = manager.resolveFile(zipFileUri)) {\r\n        try (InputStream inputStream = zipFileObject.getContent().getInputStream()) {\r\n            if (SystemUtils.IS_OS_WINDOWS) {\r\n                // We do not use newZipFile in the Assert message to avoid touching it before calling delete().\r\n                assertFalse(newZipFile.toFile().delete(), \"Could not delete file\");\r\n            }\r\n        }\r\n    }\r\n    assertDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testCannotDeleteWhileStreaming2",
  "sourceCode" : "@Test\r\npublic void testCannotDeleteWhileStreaming2() throws Exception {\r\n    assumeTrue(SystemUtils.IS_OS_WINDOWS);\r\n    try (FileObject zipFileObject = manager.resolveFile(zipFileUri)) {\r\n        try (InputStream inputStream = zipFileObject.getContent().getInputStream()) {\r\n            // We do not use newZipFile in the Assert message to avoid touching it before calling delete().\r\n            assertFalse(newZipFile.toFile().delete(), \"Could not delete file\");\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testReadClosedFileObject",
  "sourceCode" : "@Test\r\npublic void testReadClosedFileObject() throws Exception {\r\n    final FileObject zipFileObjectRef;\r\n    try (FileObject zipFileObject = manager.resolveFile(zipFileUri)) {\r\n        zipFileObjectRef = zipFileObject;\r\n        try (InputStream inputStream = zipFileObject.getContent().getInputStream()) {\r\n            readAndAssert(inputStream);\r\n        }\r\n    }\r\n    try (InputStream inputStream = zipFileObjectRef.getContent().getInputStream()) {\r\n        readAndAssert(inputStream);\r\n    } finally {\r\n        zipFileObjectRef.close();\r\n    }\r\n    assertDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testResolveAndOpenCloseContent",
  "sourceCode" : "@Test\r\npublic void testResolveAndOpenCloseContent() throws Exception {\r\n    resolveAndOpenCloseContent();\r\n    assertDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testResolveAndOpenCloseContent3",
  "sourceCode" : "@Test\r\npublic void testResolveAndOpenCloseContent3() throws Exception {\r\n    resolveAndOpenCloseContent();\r\n    resolveAndOpenCloseContent();\r\n    resolveAndOpenCloseContent();\r\n    assertDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testResolveAndOpenCloseInputStream",
  "sourceCode" : "/**\r\n * This test checks whether we can modify an underlying Zip file after we have performed IO operations on files\r\n * within it, but although we no longer have any FileObjects explicitly open.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\npublic void testResolveAndOpenCloseInputStream() throws Exception {\r\n    resolveAndOpenCloseInputStream();\r\n    assertDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testResolveAndOpenCloseInputStream3",
  "sourceCode" : "@Test\r\npublic void testResolveAndOpenCloseInputStream3() throws Exception {\r\n    resolveAndOpenCloseInputStream();\r\n    resolveAndOpenCloseInputStream();\r\n    resolveAndOpenCloseInputStream();\r\n    assertDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testResolveAndOpenReadCloseInputStream",
  "sourceCode" : "@Test\r\npublic void testResolveAndOpenReadCloseInputStream() throws Exception {\r\n    resolveAndOpenReadCloseInputStream();\r\n    assertDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testResolveAndOpenReadCloseInputStream3",
  "sourceCode" : "@Test\r\npublic void testResolveAndOpenReadCloseInputStream3() throws Exception {\r\n    resolveAndOpenReadCloseInputStream();\r\n    resolveAndOpenReadCloseInputStream();\r\n    resolveAndOpenReadCloseInputStream();\r\n    assertDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\FileLockTest.java",
  "methodName" : "testResolveOpenCloseNestedInputStreams",
  "sourceCode" : "@Test\r\npublic void testResolveOpenCloseNestedInputStreams() throws Exception {\r\n    try (FileObject zipFileObject = manager.resolveFile(zipFileUri)) {\r\n        try (FileObject zipFileObject2 = manager.resolveFile(zipFileUri)) {\r\n            zipFileObject2.getContent().getInputStream().close();\r\n        }\r\n        zipFileObject.getContent().getInputStream().close();\r\n    }\r\n    assertDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayer",
  "sourceCode" : "@Test\r\npublic void testZipParentLayer() throws Exception {\r\n    final File file = new File(\"src/test/resources/test-data/test.zip\");\r\n    final String nestedPath = \"zip:\" + file.getAbsolutePath() + \"!/read-tests/file1.txt\";\r\n    try (FileObject fileObject = VFS.getManager().resolveFile(nestedPath);\r\n        final FileObject wrappedFileObject = new OnCallRefreshFileObject(fileObject)) {\r\n        // VFS.getManager().getFilesCache().close();\r\n        assertNotNull(wrappedFileObject.getFileSystem().getParentLayer(), \"getParentLayer() 1\");\r\n        wrappedFileObject.exists();\r\n        wrappedFileObject.getContent();\r\n        assertNotNull(wrappedFileObject.getFileSystem().getParentLayer(), \"getParentLayer() 2\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerExists",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerExists() throws Exception {\r\n    testZipParentLayer(FileObject::exists);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerExistsGetContents",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerExistsGetContents() throws Exception {\r\n    testZipParentLayer(fileObject -> {\r\n        fileObject.exists();\r\n        fileObject.getContent();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerGetChildren",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerGetChildren() throws Exception {\r\n    testZipParentLayer(fileObject -> fileObject.getParent().getChildren());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerGetContents",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerGetContents() throws Exception {\r\n    testZipParentLayer(FileObject::getContent);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerGetType",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerGetType() throws Exception {\r\n    testZipParentLayer(FileObject::getType);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerIsAttached",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerIsAttached() throws Exception {\r\n    testZipParentLayer(FileObject::isAttached);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerIsContentOpen",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerIsContentOpen() throws Exception {\r\n    testZipParentLayer(FileObject::isContentOpen);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerIsExecutable",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerIsExecutable() throws Exception {\r\n    testZipParentLayer(FileObject::isExecutable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerIsFile",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerIsFile() throws Exception {\r\n    testZipParentLayer(FileObject::isFile);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerIsFolder",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerIsFolder() throws Exception {\r\n    testZipParentLayer(FileObject::isFolder);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerIsHidden",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerIsHidden() throws Exception {\r\n    testZipParentLayer(FileObject::isHidden);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerIsReadable",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerIsReadable() throws Exception {\r\n    testZipParentLayer(FileObject::isReadable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\Jira733Test.java",
  "methodName" : "testZipParentLayerIsWriteable",
  "sourceCode" : "@Test\r\npublic void testZipParentLayerIsWriteable() throws Exception {\r\n    testZipParentLayer(FileObject::isWriteable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ParseXmlInZipTest.java",
  "methodName" : "testParseXmlInZip",
  "sourceCode" : "@Test\r\npublic void testParseXmlInZip() throws IOException, SAXException {\r\n    final Path newZipFile = createTempFile();\r\n    final String xmlFilePath = \"zip:file:\" + newZipFile.toAbsolutePath() + \"!/read-xml-tests/file1.xml\";\r\n    final FileSystemManager manager = VFS.getManager();\r\n    try (FileObject zipFileObject = manager.resolveFile(xmlFilePath)) {\r\n        try (InputStream inputStream = zipFileObject.getContent().getInputStream()) {\r\n            final Document document = newDocumentBuilder(zipFileObject, zipFileObject, null).parse(inputStream);\r\n            assertNotNull(document);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ParseXmlInZipTest.java",
  "methodName" : "testResolveAndParseBiggerXmlInZip",
  "sourceCode" : "@Test\r\npublic void testResolveAndParseBiggerXmlInZip() throws IOException, SAXException {\r\n    // File is > 64 bytes\r\n    // In this case, we want to make sure that the XML document does NOT fit in the internal buffer used to parse\r\n    // the XML declaration and see if that affects JAXP when it uses its \"rewind\" input stream.\r\n    testResolveAndParseXmlInZip(\"read-xml-tests/file3-bigger.xml\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ParseXmlInZipTest.java",
  "methodName" : "testResolveAndParseInvalidXml",
  "sourceCode" : "@Test\r\npublic void testResolveAndParseInvalidXml() throws IOException, SAXException {\r\n    try {\r\n        testResolveAndParseXmlInZip(\"read-xml-tests/name-invalid.xml\", \"/read-xml-tests/name.xsd\");\r\n    } catch (final SAXException e) {\r\n        final Pattern p = Pattern.compile(\"Invalid content was found starting with element.+FOO\");\r\n        assertTrue(p.matcher(e.toString()).find());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ParseXmlInZipTest.java",
  "methodName" : "testResolveAndParseNotWellFormedXml",
  "sourceCode" : "@Test\r\npublic void testResolveAndParseNotWellFormedXml() throws IOException {\r\n    try {\r\n        testResolveAndParseXmlInZip(\"read-xml-tests/name-not-well-formed.xml\", \"/read-xml-tests/name.xsd\");\r\n    } catch (final SAXException e) {\r\n        assertTrue(e.toString().contains(\"XML document structures must start and end within the same entity.\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ParseXmlInZipTest.java",
  "methodName" : "testResolveAndParseXmlInZip",
  "sourceCode" : "@Test\r\npublic void testResolveAndParseXmlInZip() throws IOException, SAXException {\r\n    // File is < 64 bytes\r\n    // In this case, we want to make sure that the XML document DOES fit in the internal buffer used to parse\r\n    // the XML declaration and see if that affects JAXP when it uses its \"rewind\" input stream.\r\n    testResolveAndParseXmlInZip(\"read-xml-tests/file1.xml\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ParseXmlInZipTest.java",
  "methodName" : "testResolveAndParseXmlInZipWithOneXmlSchema",
  "sourceCode" : "@Test\r\npublic void testResolveAndParseXmlInZipWithOneXmlSchema() throws IOException, SAXException {\r\n    testResolveAndParseXmlInZip(\"read-xml-tests/name-with-xsd-ref.xml\", \"/read-xml-tests/name.xsd\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ParseXmlInZipTest.java",
  "methodName" : "testResolveAndParseXmlInZipWithTwoXmlSchema",
  "sourceCode" : "@Test\r\npublic void testResolveAndParseXmlInZipWithTwoXmlSchema() throws IOException, SAXException {\r\n    testResolveAndParseXmlInZip(\"read-xml-tests/person.xml\", \"/read-xml-tests/person.xsd\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ZipFileObjectTest.java",
  "methodName" : "testLeaveNestedFileOpen",
  "sourceCode" : "/**\r\n * Tests that when we read a file inside a file Zip and leave it open, we can still delete the Zip after we clean up\r\n * the Zip file.\r\n *\r\n * @throws IOException\r\n */\r\n@Test\r\n@Disabled(\"Shows that leaving a stream open and not closing any resource leaves the container file locked\")\r\npublic void testLeaveNestedFileOpen() throws IOException {\r\n    final Path newZipFile = createTempFile();\r\n    final FileSystemManager manager = VFS.getManager();\r\n    try (FileObject zipFileObject = manager.resolveFile(\"zip:file:\" + newZipFile.toAbsolutePath())) {\r\n        @SuppressWarnings({ \"resource\" })\r\n        final FileObject zipFileObject1 = zipFileObject.resolveFile(NESTED_FILE_1);\r\n        getInputStreamAndAssert(zipFileObject1, \"1\");\r\n    }\r\n    assertDelete(newZipFile);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ZipFileObjectTest.java",
  "methodName" : "testReadingFilesInZipFile",
  "sourceCode" : "/**\r\n * Tests that we can read more than one file within a Zip file, especially after closing each FileObject.\r\n *\r\n * @throws IOException\r\n */\r\n@Test\r\npublic void testReadingFilesInZipFile() throws IOException {\r\n    final Path newZipFile = createTempFile();\r\n    final FileSystemManager manager = VFS.getManager();\r\n    try (FileObject zipFileObject = manager.resolveFile(\"zip:file:\" + newZipFile.toAbsolutePath())) {\r\n        try (FileObject zipFileObject1 = zipFileObject.resolveFile(NESTED_FILE_1)) {\r\n            try (InputStream inputStream = zipFileObject1.getContent().getInputStream()) {\r\n                readAndAssert(zipFileObject1, inputStream, \"1\");\r\n            }\r\n        }\r\n        resolveReadAssert(zipFileObject, NESTED_FILE_2);\r\n    }\r\n    assertDelete(newZipFile);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ZipFileObjectTest.java",
  "methodName" : "testReadingOneAfterClosingAnotherFile",
  "sourceCode" : "/**\r\n * Tests that we can get a stream from one file in a ZIP file, then close another file from the same zip, then\r\n * process the initial input stream.\r\n *\r\n * @throws IOException\r\n */\r\n@Test\r\npublic void testReadingOneAfterClosingAnotherFile() throws IOException {\r\n    final Path newZipFile = createTempFile();\r\n    final FileSystemManager manager = VFS.getManager();\r\n    final FileObject zipFileObject1;\r\n    final InputStream inputStream1;\r\n    try (FileObject zipFileObject = manager.resolveFile(\"zip:file:\" + newZipFile.toAbsolutePath())) {\r\n        // leave resources open\r\n        zipFileObject1 = zipFileObject.resolveFile(NESTED_FILE_1);\r\n        inputStream1 = zipFileObject1.getContent().getInputStream();\r\n    }\r\n    // The zip file is \"closed\", but we read from the stream now.\r\n    readAndAssert(zipFileObject1, inputStream1, \"1\");\r\n    // clean up\r\n    zipFileObject1.close();\r\n    assertDelete(newZipFile);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ZipFileObjectTest.java",
  "methodName" : "testReadingOneAfterClosingAnotherStream",
  "sourceCode" : "/**\r\n * Tests that we can get a stream from one file in a ZIP file, then close another file from the same zip, then\r\n * process the initial input stream. If our internal reference counting is correct, the test passes.\r\n *\r\n * @throws IOException\r\n */\r\n@Test\r\npublic void testReadingOneAfterClosingAnotherStream() throws IOException {\r\n    final Path newZipFile = createTempFile();\r\n    final FileSystemManager manager = VFS.getManager();\r\n    final FileObject zipFileObject1;\r\n    final InputStream inputStream1;\r\n    try (FileObject zipFileObject = manager.resolveFile(\"zip:file:\" + newZipFile.toAbsolutePath())) {\r\n        // leave resources open (note that internal counters are updated)\r\n        zipFileObject1 = zipFileObject.resolveFile(NESTED_FILE_1);\r\n        inputStream1 = zipFileObject1.getContent().getInputStream();\r\n        resolveReadAssert(zipFileObject, NESTED_FILE_2);\r\n    }\r\n    // The Zip file is \"closed\", but we read from the stream now, which currently fails.\r\n    // Why aren't internal counters preventing the stream from closing?\r\n    readAndAssert(zipFileObject1, inputStream1, \"1\");\r\n    // clean up\r\n    zipFileObject1.close();\r\n    assertDelete(newZipFile);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ZipFileObjectTest.java",
  "methodName" : "testReadSpecialNameFileInZipFile",
  "sourceCode" : "/**\r\n * Test read file with special name in a ZIP file.\r\n */\r\n@Test\r\npublic void testReadSpecialNameFileInZipFile() throws FileSystemException {\r\n    final File testFile = new File(\"src/test/resources/test-data/special_fileName.zip\");\r\n    final String[] fileNames = { \"file.txt\", \"file^.txt\", \"file~.txt\", \"file?.txt\", \"file@.txt\", \"file$.txt\", \"file*.txt\", \"file&.txt\", \"file#.txt\", \"file%.txt\", \"file!.txt\" };\r\n    final FileSystemManager manager = VFS.getManager();\r\n    final String baseUrl = \"zip:file:\" + testFile.getAbsolutePath();\r\n    // test\r\n    try (FileObject fileObject = manager.resolveFile(baseUrl)) {\r\n        // test getChildren() number equal\r\n        assertEquals(fileObject.getChildren().length, fileNames.length);\r\n        // test getChild(String)\r\n        for (final String fileName : fileNames) {\r\n            assertNotNull(fileObject.getChild(fileName), () -> \"can't read file \" + fileName);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ZipFileObjectTest.java",
  "methodName" : "testResolveNestedFileWithoutCleanup",
  "sourceCode" : "/**\r\n * Tests that we can resolve a file in a Zip file, then close the container zip, which should still let us delete\r\n * the Zip file.\r\n *\r\n * @throws IOException\r\n */\r\n@Test\r\npublic void testResolveNestedFileWithoutCleanup() throws IOException {\r\n    final Path newZipFile = createTempFile();\r\n    final FileSystemManager manager = VFS.getManager();\r\n    try (FileObject zipFileObject = manager.resolveFile(\"zip:file:\" + newZipFile.toAbsolutePath())) {\r\n        @SuppressWarnings({ \"unused\", \"resource\" })\r\n        final FileObject // We resolve a nested file and do nothing else.\r\n        zipFileObject1 = zipFileObject.resolveFile(NESTED_FILE_1);\r\n    }\r\n    assertDelete(newZipFile);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\zip\\ZipFileSystemTest.java",
  "methodName" : "testZipFileUseWeakRefFilesCache",
  "sourceCode" : "/**\r\n * Sets a file system's file cache to use WeakReference, and test resolve file after GC.\r\n */\r\n@Test\r\npublic void testZipFileUseWeakRefFilesCache() throws FileSystemException {\r\n    final File file = new File(\"src/test/resources/test-data/test.zip\");\r\n    final String fileUri = \"zip:file:\" + file.getAbsolutePath();\r\n    FileObject fileObject = null;\r\n    try (StandardFileSystemManager manager = new StandardFileSystemManager()) {\r\n        // set file system's file cache use WeakReference, and init file system\r\n        // Managed by the file system, no need to close.\r\n        @SuppressWarnings(\"resource\")\r\n        final WeakRefFilesCache filesCache = new WeakRefFilesCache();\r\n        manager.setFilesCache(filesCache);\r\n        manager.init();\r\n        int cnt = 0;\r\n        while (cnt < 100_000) {\r\n            cnt++;\r\n            // resolve file, assert fileObject exist. clear fileObject to null and wait GC.\r\n            try {\r\n                fileObject = manager.resolveFile(fileUri);\r\n                assertTrue(fileObject.exists());\r\n            } finally {\r\n                FileObject.close(fileObject);\r\n                fileObject = null;\r\n            }\r\n            // every 200 times suggest one gc\r\n            if (cnt % 200 == 0) {\r\n                System.gc();\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderCacheStrategyTests.java",
  "methodName" : "testManualCache",
  "sourceCode" : "/**\r\n * Test the manual cache strategy.\r\n */\r\n@Test\r\npublic void testManualCache() throws Exception {\r\n    final FileObject scratchFolder = getWriteFolder();\r\n    if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class) || scratchFolder.getFileSystem() instanceof VirtualFileSystem) {\r\n        // can't check ram filesystem as every manager holds its own ram filesystem data\r\n        return;\r\n    }\r\n    scratchFolder.delete(Selectors.EXCLUDE_SELF);\r\n    final DefaultFileSystemManager fs = createManager();\r\n    fs.setCacheStrategy(CacheStrategy.MANUAL);\r\n    fs.init();\r\n    final FileObject foBase2 = getBaseTestFolder(fs);\r\n    final FileObject cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());\r\n    FileObject[] fos = cachedFolder.getChildren();\r\n    assertContainsNot(fos, \"file1.txt\");\r\n    scratchFolder.resolveFile(\"file1.txt\").createFile();\r\n    fos = cachedFolder.getChildren();\r\n    assertContainsNot(fos, \"file1.txt\");\r\n    cachedFolder.refresh();\r\n    fos = cachedFolder.getChildren();\r\n    assertContains(fos, \"file1.txt\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderCacheStrategyTests.java",
  "methodName" : "testOnCallCache",
  "sourceCode" : "/**\r\n * Test the on_call strategy.\r\n */\r\n@Test\r\npublic void testOnCallCache() throws Exception {\r\n    final FileObject scratchFolder = getWriteFolder();\r\n    if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class) || scratchFolder.getFileSystem() instanceof VirtualFileSystem) {\r\n        // can't check ram filesystem as every manager holds its own ram filesystem data\r\n        return;\r\n    }\r\n    scratchFolder.delete(Selectors.EXCLUDE_SELF);\r\n    final DefaultFileSystemManager fs = createManager();\r\n    fs.setCacheStrategy(CacheStrategy.ON_CALL);\r\n    fs.init();\r\n    final FileObject foBase2 = getBaseTestFolder(fs);\r\n    final FileObject cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());\r\n    FileObject[] fos = cachedFolder.getChildren();\r\n    assertContainsNot(fos, \"file1.txt\");\r\n    scratchFolder.resolveFile(\"file1.txt\").createFile();\r\n    fos = cachedFolder.getChildren();\r\n    assertContains(fos, \"file1.txt\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderCacheStrategyTests.java",
  "methodName" : "testOnResolveCache",
  "sourceCode" : "/**\r\n * Test the on_resolve strategy.\r\n */\r\n@Test\r\npublic void testOnResolveCache() throws Exception {\r\n    final FileObject scratchFolder = getWriteFolder();\r\n    if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class) || scratchFolder.getFileSystem() instanceof VirtualFileSystem) {\r\n        // can't check ram filesystem as every manager holds its own ram filesystem data\r\n        return;\r\n    }\r\n    scratchFolder.delete(Selectors.EXCLUDE_SELF);\r\n    final DefaultFileSystemManager fs = createManager();\r\n    fs.setCacheStrategy(CacheStrategy.ON_RESOLVE);\r\n    fs.init();\r\n    final FileObject foBase2 = getBaseTestFolder(fs);\r\n    FileObject cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());\r\n    FileObject[] fos = cachedFolder.getChildren();\r\n    assertContainsNot(fos, \"file1.txt\");\r\n    scratchFolder.resolveFile(\"file1.txt\").createFile();\r\n    fos = cachedFolder.getChildren();\r\n    assertContainsNot(fos, \"file1.txt\");\r\n    cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());\r\n    fos = cachedFolder.getChildren();\r\n    assertContains(fos, \"file1.txt\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderDeleteTests.java",
  "methodName" : "testDeleteAllFiles",
  "sourceCode" : "/**\r\n * deletes files.\r\n */\r\n@Test\r\npublic void testDeleteAllFiles() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    final int deleteCount = scratchFolder.delete(new FileTypeSelector(FileType.FILE));\r\n    if (deleteCount < 2) {\r\n        // Slow deletion in an embedded server perhaps (FTPS for example).\r\n        Thread.sleep(500);\r\n    }\r\n    assertEquals(2, deleteCount);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderDeleteTests.java",
  "methodName" : "testDeleteFile",
  "sourceCode" : "/**\r\n * deletes a single file.\r\n */\r\n@Test\r\npublic void testDeleteFile() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    final FileObject file = scratchFolder.resolveFile(\"dir1/a.txt\");\r\n    assertTrue(file.delete());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderDeleteTests.java",
  "methodName" : "testDeleteFiles",
  "sourceCode" : "/**\r\n * deletes the complete structure.\r\n */\r\n@Test\r\npublic void testDeleteFiles() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    assertEquals(4, scratchFolder.delete(Selectors.EXCLUDE_SELF));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderDeleteTests.java",
  "methodName" : "testDeleteNonExistantFile",
  "sourceCode" : "/**\r\n * Deletes a non existent file.\r\n */\r\n@Test\r\npublic void testDeleteNonExistantFile() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    final FileObject file = scratchFolder.resolveFile(\"dir1/aa.txt\");\r\n    assertFalse(file.delete());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderDeleteTests.java",
  "methodName" : "testDeleteOneFiles",
  "sourceCode" : "/**\r\n * deletes a.txt.\r\n */\r\n@Test\r\npublic void testDeleteOneFiles() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    assertEquals(1, scratchFolder.delete(new FileNameSelector(\"a.txt\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderRandomReadTests.java",
  "methodName" : "testRandomRead",
  "sourceCode" : "/**\r\n * Read a file.\r\n */\r\n@Test\r\npublic void testRandomRead() throws Exception {\r\n    try (FileObject file = getReadFolder().resolveFile(\"file1.txt\")) {\r\n        final RandomAccessContent ra = file.getContent().getRandomAccessContent(RandomAccessMode.READ);\r\n        // read first byte\r\n        byte c = ra.readByte();\r\n        assertEquals(TEST_DATA.charAt(0), c);\r\n        assertEquals(\"fp\", 1, ra.getFilePointer());\r\n        // start at pos 4\r\n        ra.seek(3);\r\n        c = ra.readByte();\r\n        assertEquals(TEST_DATA.charAt(3), c);\r\n        assertEquals(\"fp\", 4, ra.getFilePointer());\r\n        c = ra.readByte();\r\n        assertEquals(TEST_DATA.charAt(4), c);\r\n        assertEquals(\"fp\", 5, ra.getFilePointer());\r\n        // restart at pos 4\r\n        ra.seek(3);\r\n        c = ra.readByte();\r\n        assertEquals(TEST_DATA.charAt(3), c);\r\n        assertEquals(\"fp\", 4, ra.getFilePointer());\r\n        c = ra.readByte();\r\n        assertEquals(TEST_DATA.charAt(4), c);\r\n        assertEquals(\"fp\", 5, ra.getFilePointer());\r\n        // advance to pos 11\r\n        ra.seek(10);\r\n        c = ra.readByte();\r\n        assertEquals(TEST_DATA.charAt(10), c);\r\n        assertEquals(\"fp\", 11, ra.getFilePointer());\r\n        c = ra.readByte();\r\n        assertEquals(TEST_DATA.charAt(11), c);\r\n        assertEquals(\"fp\", 12, ra.getFilePointer());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderRandomReadWriteTests.java",
  "methodName" : "testRandomWrite",
  "sourceCode" : "/**\r\n * Writes a file.\r\n */\r\n@Test\r\npublic void testRandomWrite() throws Exception {\r\n    try (FileObject file = createScratchFolder().resolveFile(\"random_write.txt\")) {\r\n        file.createFile();\r\n        final RandomAccessContent ra = file.getContent().getRandomAccessContent(RandomAccessMode.READWRITE);\r\n        // write first byte\r\n        ra.writeByte(TEST_DATA.charAt(0));\r\n        // start at pos 4\r\n        ra.seek(3);\r\n        ra.writeByte(TEST_DATA.charAt(3));\r\n        ra.writeByte(TEST_DATA.charAt(4));\r\n        // restart at pos 4 (but overwrite with different content)\r\n        ra.seek(3);\r\n        ra.writeByte(TEST_DATA.charAt(7));\r\n        ra.writeByte(TEST_DATA.charAt(8));\r\n        // advance to pos 11\r\n        ra.seek(10);\r\n        ra.writeByte(TEST_DATA.charAt(10));\r\n        ra.writeByte(TEST_DATA.charAt(11));\r\n        // now read\r\n        ra.seek(0);\r\n        assertEquals(ra.readByte(), TEST_DATA.charAt(0));\r\n        ra.seek(3);\r\n        assertEquals(ra.readByte(), TEST_DATA.charAt(7));\r\n        assertEquals(ra.readByte(), TEST_DATA.charAt(8));\r\n        ra.seek(10);\r\n        assertEquals(ra.readByte(), TEST_DATA.charAt(10));\r\n        assertEquals(ra.readByte(), TEST_DATA.charAt(11));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderRandomSetLengthTests.java",
  "methodName" : "testRandomSetLength",
  "sourceCode" : "/**\r\n * Writes a file.\r\n */\r\n@Test\r\npublic void testRandomSetLength() throws Exception {\r\n    try (FileObject file = createScratchFolder().resolveFile(\"random_write.txt\")) {\r\n        file.createFile();\r\n        final String fileString = file.toString();\r\n        final RandomAccessContent ra = file.getContent().getRandomAccessContent(RandomAccessMode.READWRITE);\r\n        // Write long string\r\n        ra.writeBytes(TEST_DATA);\r\n        Assertions.assertEquals(TEST_DATA.length(), ra.length(), fileString);\r\n        // Shrink to length 1\r\n        ra.setLength(1);\r\n        Assertions.assertEquals(1, ra.length(), fileString);\r\n        // now read 1\r\n        ra.seek(0);\r\n        Assertions.assertEquals(TEST_DATA.charAt(0), ra.readByte(), fileString);\r\n        try {\r\n            ra.readByte();\r\n            Assertions.fail(\"Expected \" + Exception.class.getName());\r\n        } catch (final IOException e) {\r\n            // Expected\r\n        }\r\n        // Grow to length 2\r\n        ra.setLength(2);\r\n        Assertions.assertEquals(2, ra.length(), fileString);\r\n        // We have an undefined extra byte\r\n        ra.seek(1);\r\n        ra.readByte();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testConcurrentReadFolder",
  "sourceCode" : "/**\r\n * Tests can perform operations on a folder while reading from a different files.\r\n */\r\n@Test\r\npublic void testConcurrentReadFolder() throws Exception {\r\n    final FileObject file = resolveFile1Txt();\r\n    assertTrue(file.exists());\r\n    final FileObject folder = getReadFolderDir1();\r\n    assertTrue(folder.exists());\r\n    // Start reading from the file\r\n    try (InputStream instr = file.getContent().getInputStream()) {\r\n        // Do some operations\r\n        folder.exists();\r\n        folder.getType();\r\n        folder.getChildren();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testDotJarFolderName",
  "sourceCode" : "/**\r\n * Tests that we can traverse a folder that has JAR name.\r\n */\r\n@Test\r\npublic void testDotJarFolderName() throws Exception {\r\n    final FileObject folder = getReadFolderDir1().resolveFile(\"subdir4.jar\");\r\n    Assertions.assertTrue(folder.exists());\r\n    final FileObject file = folder.resolveFile(\"file1.txt\");\r\n    Assertions.assertTrue(file.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testDotJarFolderNameLayer",
  "sourceCode" : "/**\r\n * Tests that a folder can't be layered.\r\n */\r\n@Test\r\npublic void testDotJarFolderNameLayer() throws Exception {\r\n    final FileObject folder = getReadFolderDir1().resolveFile(\"subdir4.jar\");\r\n    Assertions.assertTrue(folder.isFolder(), \"subdir4.jar/ must exist as folder, check test setup.\");\r\n    Assertions.assertFalse(getManager().canCreateFileSystem(folder), \"subdir4.jar/ must not be layerable\");\r\n    try {\r\n        final FileObject ignored = getManager().createFileSystem(folder);\r\n        fail(\"Should not be able to create a layered filesystem on a directory. \" + ignored);\r\n    } catch (final FileSystemException e) {\r\n        assertSame(\"Creation of layered filesystem should fail\" + e, \"vfs.impl/no-provider-for-file.error\", e.getCode());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testFindFiles",
  "sourceCode" : "/**\r\n * Tests that findFiles() works.\r\n */\r\n@Test\r\npublic void testFindFiles() throws Exception {\r\n    final FileInfo fileInfo = buildExpectedStructure();\r\n    final VerifyingFileSelector selector = new VerifyingFileSelector(fileInfo);\r\n    // Find the files\r\n    final FileObject[] actualFiles = getReadFolder().findFiles(selector);\r\n    // Compare actual and expected list of files\r\n    final List<FileObject> expectedFiles = selector.finish();\r\n    assertEquals(expectedFiles.size(), actualFiles.length);\r\n    final int count = expectedFiles.size();\r\n    for (int i = 0; i < count; i++) {\r\n        final FileObject expected = expectedFiles.get(i);\r\n        final FileObject actual = actualFiles[i];\r\n        assertEquals(expected, actual);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testFolderContent",
  "sourceCode" : "/**\r\n * Tests that folders have no content.\r\n */\r\n@Test\r\npublic void testFolderContent() throws Exception {\r\n    if (getFileSystem().hasCapability(Capability.DIRECTORY_READ_CONTENT)) {\r\n        // test won't fail\r\n        return;\r\n    }\r\n    // Try getting the content of a folder\r\n    final FileObject folder = getReadFolderDir1();\r\n    try {\r\n        folder.getContent().getInputStream();\r\n        fail();\r\n    } catch (final FileSystemException e) {\r\n        assertSameMessage(\"vfs.provider/read-not-file.error\", folder, e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testFolderIsHidden",
  "sourceCode" : "/**\r\n * Tests that test read folder is not hidden.\r\n */\r\n@Test\r\npublic void testFolderIsHidden() throws Exception {\r\n    final FileObject folder = getReadFolderDir1();\r\n    Assertions.assertFalse(folder.isHidden());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testFolderIsReadable",
  "sourceCode" : "/**\r\n * Tests that test read folder is readable.\r\n */\r\n@Test\r\npublic void testFolderIsReadable() throws Exception {\r\n    final FileObject folder = getReadFolderDir1();\r\n    Assertions.assertTrue(folder.isReadable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testFolderIsSymbolicLink",
  "sourceCode" : "/**\r\n * Tests that test read folder is not a symbolic link.\r\n */\r\n@Test\r\npublic void testFolderIsSymbolicLink() throws Exception {\r\n    final FileObject folder = getReadFolderDir1();\r\n    Assertions.assertFalse(folder.isSymbolicLink());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testGetContent",
  "sourceCode" : "@Test\r\npublic void testGetContent() throws Exception {\r\n    final FileObject file = resolveFile1Txt();\r\n    assertTrue(file.exists());\r\n    final FileContent content = file.getContent();\r\n    assertNotNull(content);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testGetContentInfo",
  "sourceCode" : "@Test\r\npublic void testGetContentInfo() throws Exception {\r\n    final FileObject file = resolveFile1Txt();\r\n    assertTrue(file.exists());\r\n    final FileContent content = file.getContent();\r\n    assertNotNull(content);\r\n    final FileContentInfo contentInfo = content.getContentInfo();\r\n    assertNotNull(contentInfo);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testReadEmptyMultipleEOF",
  "sourceCode" : "/**\r\n * Tests can read multiple time end of stream of empty file.\r\n */\r\n@Test\r\npublic void testReadEmptyMultipleEOF() throws Exception {\r\n    final FileObject file = getReadFolder().resolveFile(\"empty.txt\");\r\n    assertTrue(file.exists());\r\n    // Start reading from the file\r\n    try (InputStream instr = file.getContent().getInputStream()) {\r\n        assertEquals(\"read() from empty file should return EOF\", -1, instr.read());\r\n        for (int i = 0; i < 5; i++) {\r\n            assertEquals(\"multiple read() at EOF should return EOF\", -1, instr.read());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testReadFileEOFMultiple",
  "sourceCode" : "/**\r\n * Tests can read multiple time end of stream.\r\n */\r\n@Test\r\npublic void testReadFileEOFMultiple() throws Exception {\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertTrue(file.exists());\r\n    assertEquals(\"Expecting 20 bytes test-data file1.txt\", 20, file.getContent().getSize());\r\n    // Start reading from the file\r\n    try (InputStream instr = file.getContent().getInputStream()) {\r\n        final byte[] buf = new byte[25];\r\n        assertEquals(20, instr.read(buf));\r\n        for (int i = 0; i < 5; i++) {\r\n            assertEquals(\"multiple read(byte[]) at EOF should return EOF\", -1, instr.read(buf));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testRoot",
  "sourceCode" : "/**\r\n * Tests the contents of root of file system can be listed.\r\n */\r\n@Test\r\npublic void testRoot() throws FileSystemException {\r\n    if (!getProviderConfig().isFileSystemRootAccessible()) {\r\n        return;\r\n    }\r\n    final FileSystem fs = getFileSystem();\r\n    final String uri = fs.getRootURI();\r\n    final FileObject file = getManager().resolveFile(uri, fs.getFileSystemOptions());\r\n    file.getChildren();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testSort",
  "sourceCode" : "/**\r\n * Tests that FileObjects can be sorted.\r\n */\r\n@Test\r\npublic void testSort() throws FileSystemException {\r\n    final FileInfo fileInfo = buildExpectedStructure();\r\n    final VerifyingFileSelector selector = new VerifyingFileSelector(fileInfo);\r\n    // Find the files\r\n    final FileObject[] actualFiles = getReadFolder().findFiles(selector);\r\n    Arrays.sort(actualFiles);\r\n    FileObject prevActualFile = actualFiles[0];\r\n    for (final FileObject actualFile : actualFiles) {\r\n        assertTrue(prevActualFile.toString().compareTo(actualFile.toString()) <= 0);\r\n        prevActualFile = actualFile;\r\n    }\r\n    // Compare actual and expected list of files\r\n    final List<FileObject> expectedFiles = selector.finish();\r\n    Collections.sort(expectedFiles);\r\n    assertEquals(expectedFiles.size(), actualFiles.length);\r\n    final int count = expectedFiles.size();\r\n    for (int i = 0; i < count; i++) {\r\n        final FileObject expected = expectedFiles.get(i);\r\n        final FileObject actual = actualFiles[i];\r\n        assertEquals(expected, actual);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testStructure",
  "sourceCode" : "/**\r\n * Walks the base folder structure, asserting it contains exactly the expected files and folders.\r\n */\r\n@Test\r\npublic void testStructure() throws Exception {\r\n    final FileInfo baseInfo = buildExpectedStructure();\r\n    assertSameStructure(getReadFolder(), baseInfo);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderReadTests.java",
  "methodName" : "testType",
  "sourceCode" : "/**\r\n * Tests type determination.\r\n */\r\n@Test\r\npublic void testType() throws Exception {\r\n    // Test a file\r\n    FileObject file = resolveFile1Txt();\r\n    assertSame(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    // Test a folder\r\n    file = getReadFolderDir1();\r\n    assertSame(FileType.FOLDER, file.getType());\r\n    assertTrue(file.isFolder());\r\n    // Test an unknown file\r\n    file = getReadFolder().resolveFile(\"unknown-child\");\r\n    assertSame(FileType.IMAGINARY, file.getType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderRenameTests.java",
  "methodName" : "testRenameFile",
  "sourceCode" : "/**\r\n * Tests create-delete-create-a-file sequence on the same file system.\r\n */\r\n@Test\r\npublic void testRenameFile() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    final FileObject file = scratchFolder.resolveFile(\"file1.txt\");\r\n    assertFalse(file.exists());\r\n    final String content = createTestFile(file);\r\n    // Make sure we can move the new file to another file on the same file system\r\n    moveFile(scratchFolder, file, content);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderRenameTests.java",
  "methodName" : "testRenameFileAndLeaveFolderEmpty",
  "sourceCode" : "/**\r\n * Moves a file from a child folder to a parent folder to test what happens when the original folder is now empty.\r\n *\r\n * See [VFS-298] FTP: Exception is thrown when renaming a file.\r\n */\r\n@Test\r\npublic void testRenameFileAndLeaveFolderEmpty() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    final FileObject folder = scratchFolder.resolveFile(\"folder\");\r\n    folder.createFolder();\r\n    assertTrue(folder.exists());\r\n    final FileObject file = folder.resolveFile(\"file1.txt\");\r\n    assertFalse(file.exists());\r\n    final String content = createTestFile(file);\r\n    // Make sure we can move the new file to another file on the same file system\r\n    moveFile(scratchFolder, file, content);\r\n    assertEquals(0, folder.getChildren().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderRenameTests.java",
  "methodName" : "testRenameFileIntoEmptyFolder",
  "sourceCode" : "/**\r\n * Tests moving a file to empty folder.\r\n * <p>\r\n * This fails with VFS-558, but only with a CacheStrategy.ON_CALL.\r\n */\r\n@Test\r\npublic void testRenameFileIntoEmptyFolder() throws Exception {\r\n    try (FileObject scratchFolder = createScratchFolder();\r\n        // Create direct child of the test folder\r\n        final FileObject file = scratchFolder.resolveFile(\"file1.txt\")) {\r\n        assertFalse(file.exists());\r\n        final String content = createTestFile(file);\r\n        final FileObject destFolder = scratchFolder.resolveFile(\"empty-target-folder\");\r\n        destFolder.createFolder();\r\n        assertTrue(\"new destination must be folder\", destFolder.getType().hasChildren());\r\n        assertEquals(\"new destination must be empty\", 0, destFolder.getChildren().length);\r\n        moveFile(destFolder, file, content);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderRenameTests.java",
  "methodName" : "testRenameFileWithSpaces",
  "sourceCode" : "/**\r\n * Tests create-delete-create-a-file sequence on the same file system.\r\n */\r\n@Test\r\npublic void testRenameFileWithSpaces() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    final FileObject file = scratchFolder.resolveFile(\"file space.txt\");\r\n    assertFalse(file.exists());\r\n    final String content = createTestFile(file);\r\n    // Make sure we can move the new file to another file on the same file system\r\n    moveFile(scratchFolder, file, content);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteAppendTests.java",
  "methodName" : "testAppendContent",
  "sourceCode" : "/**\r\n * Tests create-delete-create-a-file sequence on the same file system.\r\n */\r\n@Test\r\npublic void testAppendContent() throws Exception {\r\n    try (FileObject scratchFolder = createScratchFolder();\r\n        // Create direct child of the test folder\r\n        final FileObject file = scratchFolder.resolveFile(\"file1.txt\")) {\r\n        assertFalse(file.exists());\r\n        // Create the source file\r\n        final String content = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n        final String contentAppend = content + content;\r\n        try (FileContent fileContent = file.getContent();\r\n            OutputStream os = fileContent.getOutputStream()) {\r\n            os.write(content.getBytes(StandardCharsets.UTF_8));\r\n        }\r\n        assertSameContent(content, file);\r\n        // Append to the new file\r\n        try (FileContent fileContent = file.getContent();\r\n            OutputStream os2 = fileContent.getOutputStream(true)) {\r\n            os2.write(content.getBytes(StandardCharsets.UTF_8));\r\n        }\r\n        assertSameContent(contentAppend, file);\r\n        // Make sure we can copy the new file to another file on the same filesystem\r\n        try (FileObject fileCopy = scratchFolder.resolveFile(\"file1copy.txt\")) {\r\n            assertFalse(fileCopy.exists());\r\n            fileCopy.copyFrom(file, Selectors.SELECT_SELF);\r\n            assertSameContent(contentAppend, fileCopy);\r\n            // Delete the file.\r\n            assertTrue(fileCopy.exists());\r\n            assertTrue(fileCopy.delete());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteAppendTests.java",
  "methodName" : "testAppendToNonExisting",
  "sourceCode" : "/**\r\n * Tests append-write into a non-existing file.\r\n *\r\n * See [VFS-807].\r\n */\r\n@Test\r\npublic void testAppendToNonExisting() throws Exception {\r\n    try (FileObject scratchFolder = createScratchFolder();\r\n        // Create direct child of the test folder\r\n        final FileObject file = scratchFolder.resolveFile(\"file2.txt\")) {\r\n        assertFalse(file.exists());\r\n        // Create the source file\r\n        final String content1 = \"Here is some sample content for the file. Blah Blah Blah.\";\r\n        try (FileContent fileContent = file.getContent();\r\n            OutputStream os = fileContent.getOutputStream(true)) {\r\n            os.write(content1.getBytes(StandardCharsets.UTF_8));\r\n        }\r\n        assertSameContent(content1, file);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testCopyFromOverwriteSameFileSystem",
  "sourceCode" : "/**\r\n * Tests overwriting a file on the same file system.\r\n */\r\n@Test\r\npublic void testCopyFromOverwriteSameFileSystem() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    final FileObject file = scratchFolder.resolveFile(\"file1.txt\");\r\n    assertFalse(file.exists());\r\n    // Create the source file\r\n    final String content = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content, file);\r\n    // Make sure we can copy the new file to another file on the same filesystem\r\n    final FileObject fileCopy = scratchFolder.resolveFile(\"file1copy.txt\");\r\n    assertFalse(fileCopy.exists());\r\n    fileCopy.copyFrom(file, Selectors.SELECT_SELF);\r\n    assertSameContent(content, fileCopy);\r\n    // Make sure we can copy the same new file to the same target file on the same filesystem\r\n    assertTrue(fileCopy.exists());\r\n    fileCopy.copyFrom(file, Selectors.SELECT_SELF);\r\n    assertSameContent(content, fileCopy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testCopySameFileSystem",
  "sourceCode" : "/**\r\n * Tests file copy to and from the same file system type. This was a problem w/ FTP.\r\n */\r\n@Test\r\npublic void testCopySameFileSystem() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    final FileObject file = scratchFolder.resolveFile(\"file1.txt\");\r\n    assertFalse(file.exists());\r\n    // Create the source file\r\n    final String content = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content, file);\r\n    // Make sure we can copy the new file to another file on the same filesystem\r\n    final FileObject fileCopy = scratchFolder.resolveFile(\"file1copy.txt\");\r\n    assertFalse(fileCopy.exists());\r\n    fileCopy.copyFrom(file, Selectors.SELECT_SELF);\r\n    assertSameContent(content, fileCopy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testCreateDeleteCreateSameFileSystem",
  "sourceCode" : "/**\r\n * Tests create-delete-create-a-file sequence on the same file system.\r\n */\r\n@Test\r\npublic void testCreateDeleteCreateSameFileSystem() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    final FileObject file = scratchFolder.resolveFile(\"file1.txt\");\r\n    assertFalse(file.exists());\r\n    // Create the source file\r\n    final String content = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content, file);\r\n    // Make sure we can copy the new file to another file on the same filesystem\r\n    final FileObject fileCopy = scratchFolder.resolveFile(\"file1copy.txt\");\r\n    assertFalse(fileCopy.exists());\r\n    fileCopy.copyFrom(file, Selectors.SELECT_SELF);\r\n    assertSameContent(content, fileCopy);\r\n    // Delete the file.\r\n    assertTrue(fileCopy.exists());\r\n    assertTrue(fileCopy.delete());\r\n    // Make sure we can copy the same new file to the same target file on the same filesystem\r\n    assertFalse(fileCopy.exists());\r\n    fileCopy.copyFrom(file, Selectors.SELECT_SELF);\r\n    assertSameContent(content, fileCopy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testDelete",
  "sourceCode" : "/*\r\n      Tests concurrent read and write on the same file fails.\r\n     */\r\n/*\r\n     * imario@apache.org leave this to some sort of LockManager public void testConcurrentReadWrite() throws Exception {\r\n     * final FileObject scratchFolder = createScratchFolder();\r\n     *\r\n     * final FileObject file = scratchFolder.resolveFile(\"file1.txt\"); file.createFile();\r\n     *\r\n     * // Start reading from the file final InputStream instr = file.getContent().getInputStream();\r\n     *\r\n     * try { // Try to write to the file file.getContent().getOutputStream(); fail(); } catch (final FileSystemException\r\n     * e) { // Check error message assertSameMessage(\"vfs.provider/write-in-use.error\", file, e); } finally {\r\n     * instr.close(); } }\r\n     */\r\n/*\r\n      Tests concurrent writes on the same file fails.\r\n     */\r\n/*\r\n     * imario@apache.org leave this to some sort of LockManager public void testConcurrentWrite() throws Exception {\r\n     * final FileObject scratchFolder = createScratchFolder();\r\n     *\r\n     * final FileObject file = scratchFolder.resolveFile(\"file1.txt\"); file.createFile();\r\n     *\r\n     * // Start writing to the file final OutputStream outstr = file.getContent().getOutputStream(); final String\r\n     * testContent = \"some content\"; try { // Write some content to the first stream\r\n     * outstr.write(testContent.getBytes());\r\n     *\r\n     * // Try to open another output stream file.getContent().getOutputStream(); fail(); } catch (final\r\n     * FileSystemException e) { // Check error message assertSameMessage(\"vfs.provider/write-in-use.error\", file, e); }\r\n     * finally { outstr.close(); }\r\n     *\r\n     * // Make sure that the content written to the first stream is actually applied assertSameContent(testContent,\r\n     * file); }\r\n     */\r\n/**\r\n * Tests deletion.\r\n */\r\n@Test\r\npublic void testDelete() throws Exception {\r\n    // Set up the test structure\r\n    final FileObject folder = createScratchFolder();\r\n    folder.resolveFile(\"file1.txt\").createFile();\r\n    folder.resolveFile(\"file%25.txt\").createFile();\r\n    folder.resolveFile(\"emptydir\").createFolder();\r\n    folder.resolveFile(\"dir1/file1.txt\").createFile();\r\n    folder.resolveFile(\"dir1/dir2/file2.txt\").createFile();\r\n    // Delete a file\r\n    FileObject file = folder.resolveFile(\"file1.txt\");\r\n    assertTrue(file.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n    // Delete a special name file\r\n    file = folder.resolveFile(\"file%25.txt\");\r\n    assertTrue(file.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n    // Delete an empty folder\r\n    file = folder.resolveFile(\"emptydir\");\r\n    assertTrue(file.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n    // Recursive delete\r\n    file = folder.resolveFile(\"dir1\");\r\n    final FileObject file2 = file.resolveFile(\"dir2/file2.txt\");\r\n    assertTrue(file.exists());\r\n    assertTrue(file2.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n    assertFalse(file2.exists());\r\n    // Delete a file that does not exist\r\n    file = folder.resolveFile(\"some-folder/some-file\");\r\n    assertFalse(file.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testDeleteAllDescendants",
  "sourceCode" : "/**\r\n * Tests deletion.\r\n */\r\n@Test\r\npublic void testDeleteAllDescendants() throws Exception {\r\n    // Set up the test structure\r\n    final FileObject folder = createScratchFolder();\r\n    folder.resolveFile(\"file1.txt\").createFile();\r\n    folder.resolveFile(\"file%25.txt\").createFile();\r\n    folder.resolveFile(\"emptydir\").createFolder();\r\n    folder.resolveFile(\"dir1/file1.txt\").createFile();\r\n    folder.resolveFile(\"dir1/dir2/file2.txt\").createFile();\r\n    // Delete a file\r\n    FileObject file = folder.resolveFile(\"file1.txt\");\r\n    assertTrue(file.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n    // Delete a special name file\r\n    file = folder.resolveFile(\"file%25.txt\");\r\n    assertTrue(file.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n    // Delete an empty folder\r\n    file = folder.resolveFile(\"emptydir\");\r\n    assertTrue(file.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n    // Recursive delete\r\n    file = folder.resolveFile(\"dir1\");\r\n    final FileObject file2 = file.resolveFile(\"dir2/file2.txt\");\r\n    assertTrue(file.exists());\r\n    assertTrue(file2.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n    assertFalse(file2.exists());\r\n    // Delete a file that does not exist\r\n    file = folder.resolveFile(\"some-folder/some-file\");\r\n    assertFalse(file.exists());\r\n    file.deleteAll();\r\n    assertFalse(file.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testFileCreate",
  "sourceCode" : "/**\r\n * Tests file creation.\r\n */\r\n@Test\r\npublic void testFileCreate() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    FileObject file = scratchFolder.resolveFile(\"file1.txt\");\r\n    assertFalse(file.exists());\r\n    file.createFile();\r\n    assertTrue(file.exists());\r\n    assertSame(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    assertEquals(0, file.getContent().getSize());\r\n    assertTrue(file.getContent().isEmpty());\r\n    assertFalse(file.isHidden());\r\n    assertFalse(file.isSymbolicLink());\r\n    assertTrue(file.isReadable());\r\n    assertTrue(file.isWriteable());\r\n    // Create direct child of the test folder - special name\r\n    file = scratchFolder.resolveFile(\"file1%25.txt\");\r\n    assertFalse(file.exists());\r\n    file.createFile();\r\n    assertTrue(file.exists());\r\n    assertSame(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    assertEquals(0, file.getContent().getSize());\r\n    assertFalse(file.isHidden());\r\n    assertTrue(file.isReadable());\r\n    assertTrue(file.isWriteable());\r\n    // Create a descendant, where the intermediate folders don't exist\r\n    file = scratchFolder.resolveFile(\"dir1/dir1/file1.txt\");\r\n    assertFalse(file.exists());\r\n    assertFalse(file.getParent().exists());\r\n    assertFalse(file.getParent().getParent().exists());\r\n    file.createFile();\r\n    assertTrue(file.exists());\r\n    assertSame(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    assertEquals(0, file.getContent().getSize());\r\n    assertTrue(file.getParent().exists());\r\n    assertTrue(file.getParent().getParent().exists());\r\n    assertFalse(file.getParent().isHidden());\r\n    assertFalse(file.getParent().getParent().isHidden());\r\n    // Test creating a file that already exists\r\n    assertTrue(file.exists());\r\n    file.createFile();\r\n    assertTrue(file.exists());\r\n    assertTrue(file.isReadable());\r\n    assertTrue(file.isWriteable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testFileCreateMismatched",
  "sourceCode" : "/**\r\n * Tests file/folder creation with mismatched types.\r\n */\r\n@Test\r\npublic void testFileCreateMismatched() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create a test file and folder\r\n    final FileObject file = scratchFolder.resolveFile(\"dir1/file1.txt\");\r\n    file.createFile();\r\n    assertEquals(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    final FileObject folder = scratchFolder.resolveFile(\"dir1/dir2\");\r\n    folder.createFolder();\r\n    assertEquals(FileType.FOLDER, folder.getType());\r\n    assertTrue(folder.isFolder());\r\n    // Attempt to create a file that already exists as a folder\r\n    assertThrows(FileSystemException.class, () -> folder.createFile());\r\n    // Attempt to create a folder that already exists as a file\r\n    assertThrows(FileSystemException.class, () -> file.createFolder());\r\n    // Attempt to create a folder as a child of a file\r\n    final FileObject folder2 = file.resolveFile(\"some-child\");\r\n    assertThrows(FileSystemException.class, () -> folder2.createFolder());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testFolderCreate",
  "sourceCode" : "/**\r\n * Tests folder creation.\r\n */\r\n@Test\r\npublic void testFolderCreate() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    FileObject folder = scratchFolder.resolveFile(\"dir1\");\r\n    assertFalse(folder.exists());\r\n    folder.createFolder();\r\n    assertTrue(folder.exists());\r\n    assertSame(FileType.FOLDER, folder.getType());\r\n    assertTrue(folder.isFolder());\r\n    assertEquals(0, folder.getChildren().length);\r\n    // Create a descendant, where the intermediate folders don't exist\r\n    folder = scratchFolder.resolveFile(\"dir2/dir1/dir1\");\r\n    assertFalse(folder.exists());\r\n    assertFalse(folder.getParent().exists());\r\n    assertFalse(folder.getParent().getParent().exists());\r\n    folder.createFolder();\r\n    assertTrue(folder.exists());\r\n    assertSame(FileType.FOLDER, folder.getType());\r\n    assertTrue(folder.isFolder());\r\n    assertEquals(0, folder.getChildren().length);\r\n    assertTrue(folder.getParent().exists());\r\n    assertTrue(folder.getParent().getParent().exists());\r\n    // Test creating a folder that already exists\r\n    assertTrue(folder.exists());\r\n    folder.createFolder();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testFolderIsHidden",
  "sourceCode" : "/**\r\n * Tests that test read folder is not hidden.\r\n */\r\n@Test\r\npublic void testFolderIsHidden() throws Exception {\r\n    final FileObject folder = getReadFolderDir1();\r\n    Assertions.assertFalse(folder.isHidden());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testFolderIsReadable",
  "sourceCode" : "/**\r\n * Tests that test read folder is readable.\r\n */\r\n@Test\r\npublic void testFolderIsReadable() throws Exception {\r\n    final FileObject folder = getReadFolderDir1();\r\n    Assertions.assertTrue(folder.isReadable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testFolderIsWritable",
  "sourceCode" : "/**\r\n * Tests that test folder is writable.\r\n */\r\n@Test\r\npublic void testFolderIsWritable() throws Exception {\r\n    final FileObject folder = getWriteFolder().resolveFile(\"dir1\");\r\n    Assertions.assertTrue(folder.isWriteable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testListChildren",
  "sourceCode" : "/**\r\n * Test that children are handled correctly by create and delete.\r\n */\r\n@Test\r\npublic void testListChildren() throws Exception {\r\n    final FileObject folder = createScratchFolder();\r\n    final HashSet<String> names = new HashSet<>();\r\n    // Make sure the folder is empty\r\n    assertEquals(0, folder.getChildren().length);\r\n    // Create a child folder\r\n    folder.resolveFile(\"dir1\").createFolder();\r\n    names.add(\"dir1\");\r\n    assertSameFileSet(names, folder.getChildren());\r\n    // Create a child file\r\n    folder.resolveFile(\"file1.html\").createFile();\r\n    names.add(\"file1.html\");\r\n    assertSameFileSet(names, folder.getChildren());\r\n    // Create a descendent\r\n    folder.resolveFile(\"dir2/file1.txt\").createFile();\r\n    names.add(\"dir2\");\r\n    assertSameFileSet(names, folder.getChildren());\r\n    // Create a child file via an output stream\r\n    final OutputStream outstr = folder.resolveFile(\"file2.txt\").getContent().getOutputStream();\r\n    outstr.close();\r\n    names.add(\"file2.txt\");\r\n    assertSameFileSet(names, folder.getChildren());\r\n    // Delete a child folder\r\n    folder.resolveFile(\"dir1\").deleteAll();\r\n    names.remove(\"dir1\");\r\n    assertSameFileSet(names, folder.getChildren());\r\n    // Delete a child file\r\n    folder.resolveFile(\"file1.html\").deleteAll();\r\n    names.remove(\"file1.html\");\r\n    assertSameFileSet(names, folder.getChildren());\r\n    // Recreate the folder\r\n    folder.deleteAll();\r\n    folder.createFolder();\r\n    assertEquals(0, folder.getChildren().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testListener",
  "sourceCode" : "/**\r\n * Check listeners are notified of changes.\r\n */\r\n@Test\r\npublic void testListener() throws Exception {\r\n    final FileObject baseFile = createScratchFolder();\r\n    final FileObject child = baseFile.resolveFile(\"newfile.txt\");\r\n    assertFalse(child.exists());\r\n    final FileSystem fs = baseFile.getFileSystem();\r\n    final TestListener listener = new TestListener(child);\r\n    fs.addListener(child, listener);\r\n    try {\r\n        // Create as a folder\r\n        listener.addCreateEvent();\r\n        child.createFolder();\r\n        listener.assertFinished();\r\n        // Create the folder again. Should not get an event.\r\n        child.createFolder();\r\n        // Delete\r\n        listener.addDeleteEvent();\r\n        child.delete();\r\n        listener.assertFinished();\r\n        // Delete again. Should not get an event\r\n        child.delete();\r\n        // Create as a file\r\n        listener.addCreateEvent();\r\n        child.createFile();\r\n        listener.assertFinished();\r\n        // Create the file again. Should not get an event\r\n        child.createFile();\r\n        listener.addDeleteEvent();\r\n        child.delete();\r\n        // Create as a file, by writing to it.\r\n        listener.addCreateEvent();\r\n        child.getContent().getOutputStream().close();\r\n        listener.assertFinished();\r\n        // Recreate the file by writing to it\r\n        child.getContent().getOutputStream().close();\r\n        // Copy another file over the top\r\n        final FileObject otherChild = baseFile.resolveFile(\"folder1\");\r\n        otherChild.createFolder();\r\n        listener.addDeleteEvent();\r\n        listener.addCreateEvent();\r\n        child.copyFrom(otherChild, Selectors.SELECT_SELF);\r\n        listener.assertFinished();\r\n    } finally {\r\n        fs.removeListener(child, listener);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testOverwriteContent",
  "sourceCode" : "/**\r\n * Tests overwriting the file.\r\n *\r\n * See [VFS-807].\r\n */\r\n@Test\r\npublic void testOverwriteContent() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    final FileObject file = scratchFolder.resolveFile(\"file1.txt\");\r\n    assertFalse(file.exists());\r\n    // Create the source file\r\n    final String content1 = \"Here is some sample content for the file. Blah Blah Blah.\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content1.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content1, file);\r\n    // VFS-807, part 1: verify that writing to the existing file overwrites its content!\r\n    // content2 must be shorter than content1\r\n    final String content2 = \"0123456789 ABCD\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content2.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content2, file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testOverwriteSameFileSystem",
  "sourceCode" : "/**\r\n * Tests overwriting a file on the same file system.\r\n */\r\n@Test\r\npublic void testOverwriteSameFileSystem() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    final FileObject file = scratchFolder.resolveFile(\"file1.txt\");\r\n    assertFalse(file.exists());\r\n    // Create the source file\r\n    final String content = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content, file);\r\n    // Make sure we can copy the new file to another file on the same file system\r\n    final FileObject fileCopy = scratchFolder.resolveFile(\"file1copy.txt\");\r\n    assertFalse(fileCopy.exists());\r\n    file.getContent().write(fileCopy);\r\n    assertSameContent(content, fileCopy);\r\n    // Make sure we can copy the same new file to the same target file on the same file system\r\n    assertTrue(fileCopy.exists());\r\n    file.getContent().write(fileCopy);\r\n    assertSameContent(content, fileCopy);\r\n    // Make sure we can copy the same new file to the same target file on the same file system\r\n    assertTrue(fileCopy.exists());\r\n    file.getContent().write(fileCopy.getContent());\r\n    assertSameContent(content, fileCopy);\r\n    // Make sure we can copy the same new file to the same target file on the same file system\r\n    assertTrue(fileCopy.exists());\r\n    OutputStream outputStream = fileCopy.getContent().getOutputStream();\r\n    try {\r\n        file.getContent().write(outputStream);\r\n    } finally {\r\n        outputStream.close();\r\n    }\r\n    assertSameContent(content, fileCopy);\r\n    // Make sure we can copy the same new file to the same target file on the same file system\r\n    assertTrue(fileCopy.exists());\r\n    outputStream = fileCopy.getContent().getOutputStream();\r\n    try {\r\n        file.getContent().write(outputStream, 1234);\r\n    } finally {\r\n        outputStream.close();\r\n    }\r\n    assertSameContent(content, fileCopy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\ProviderWriteTests.java",
  "methodName" : "testWriteSameFileSystem",
  "sourceCode" : "/**\r\n * Tests file write to and from the same file system type.\r\n */\r\n@Test\r\npublic void testWriteSameFileSystem() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    // Create direct child of the test folder\r\n    final FileObject fileSource = scratchFolder.resolveFile(\"file1.txt\");\r\n    assertFalse(fileSource.exists());\r\n    // Create the source file\r\n    final String expectedString = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n    try (OutputStream expectedOutputStream = fileSource.getContent().getOutputStream()) {\r\n        expectedOutputStream.write(expectedString.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(expectedString, fileSource);\r\n    // Make sure we can copy the new file to another file on the same filesystem\r\n    final FileObject fileTarget = scratchFolder.resolveFile(\"file1copy.txt\");\r\n    assertFalse(fileTarget.exists());\r\n    final FileContent contentSource = fileSource.getContent();\r\n    //\r\n    // Tests FileContent#write(FileContent)\r\n    contentSource.write(fileTarget.getContent());\r\n    assertSameContent(expectedString, fileTarget);\r\n    //\r\n    // Tests FileContent#write(OutputStream)\r\n    OutputStream outputStream = fileTarget.getContent().getOutputStream();\r\n    try {\r\n        contentSource.write(outputStream);\r\n    } finally {\r\n        outputStream.close();\r\n    }\r\n    assertSameContent(expectedString, fileTarget);\r\n    //\r\n    // Tests FileContent#write(OutputStream, int)\r\n    outputStream = fileTarget.getContent().getOutputStream();\r\n    try {\r\n        contentSource.write(outputStream, 1234);\r\n    } finally {\r\n        outputStream.close();\r\n    }\r\n    assertSameContent(expectedString, fileTarget);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UriTests.java",
  "methodName" : "testAbsoluteURI",
  "sourceCode" : "/**\r\n * Tests resolution of absolute URI.\r\n */\r\n@Test\r\npublic void testAbsoluteURI() throws Exception {\r\n    final FileObject readFolder = getReadFolder();\r\n    // Try fetching base folder again by its URI\r\n    final String uri = readFolder.getName().getURI();\r\n    FileObject file = getManager().resolveFile(uri, readFolder.getFileSystem().getFileSystemOptions());\r\n    // assert properties\r\n    assertEquals(readFolder.exists(), file.exists());\r\n    assertEquals(readFolder.getName(), file.getName());\r\n    // Needs JRE file providers\r\n    // assertEquals(readFolder.getPath(), file.getPath());\r\n    assertEquals(readFolder.getPublicURIString(), file.getPublicURIString());\r\n    assertEquals(readFolder.getType(), file.getType());\r\n    assertEquals(readFolder.getURI(), file.getURI());\r\n    assertEquals(readFolder.getURL(), file.getURL());\r\n    assertEquals(readFolder.isAttached(), file.isAttached());\r\n    assertEquals(readFolder.isContentOpen(), file.isContentOpen());\r\n    assertEquals(readFolder.isExecutable(), file.isExecutable());\r\n    assertEquals(readFolder.isFile(), file.isFile());\r\n    assertEquals(readFolder.isFolder(), file.isFolder());\r\n    assertEquals(readFolder.isHidden(), file.isHidden());\r\n    assertEquals(readFolder.isReadable(), file.isReadable());\r\n    assertEquals(readFolder.isSymbolicLink(), file.isSymbolicLink());\r\n    assertEquals(readFolder.isWriteable(), file.isWriteable());\r\n    assertEquals(readFolder.toString(), file.toString());\r\n    assertEquals(String.format(\"file object %s %s, %s %s\", readFolder.getClass(), ObjectUtils.identityHashCodeHex(readFolder), file.getClass(), ObjectUtils.identityHashCodeHex(file)), readFolder.toString(), file.toString());\r\n    // Try fetching the filesystem root by its URI\r\n    final String rootUri = readFolder.getName().getRootURI();\r\n    file = getManager().resolveFile(rootUri, readFolder.getFileSystem().getFileSystemOptions());\r\n    assertEquals(readFolder.getFileSystem().getRoot().toString(), file.toString());\r\n    assertEquals(rootUri, file.getName().getRootURI());\r\n    assertEquals(rootUri, file.getName().getURI());\r\n    assertEquals(FileName.ROOT_PATH, file.getName().getPath());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UriTests.java",
  "methodName" : "testGetURI",
  "sourceCode" : "@Test\r\npublic void testGetURI() throws Exception {\r\n    final FileObject fileObject = getReadFolder().resolveFile(\"some-dir/\");\r\n    final URI uri = fileObject.getURI();\r\n    // FileName#getURI() returns a String, not a URI.\r\n    assertEquals(fileObject.getName().getURI(), uri.toString());\r\n    assertEquals(URI.create(fileObject.getName().getURI()), uri);\r\n    assertEquals(fileObject.getURL().toString(), fileObject.getURI().toString());\r\n    assertEquals(fileObject.getURL().toURI(), fileObject.getURI());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UriTests.java",
  "methodName" : "testReservedCharacterSpace",
  "sourceCode" : "@Test\r\npublic void testReservedCharacterSpace() throws FileSystemException {\r\n    try (FileObject fileObject = getReadFolder().resolveFile(\"file with spaces.txt\")) {\r\n        final URI url = fileObject.getURI();\r\n        final String string = url.toString();\r\n        assertTrue(string, string.contains(\"file%20with%20spaces.txt\"));\r\n    }\r\n    try (FileObject fileObject = getReadFolder().resolveFile(\"file%20with%20spaces.txt\")) {\r\n        final URI url = fileObject.getURI();\r\n        final String string = url.toString();\r\n        assertTrue(string, string.contains(\"file%20with%20spaces.txt\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UriTests.java",
  "methodName" : "testURIContentProvider",
  "sourceCode" : "/**\r\n * Tests content.\r\n */\r\n@Test\r\npublic void testURIContentProvider() throws Exception {\r\n    // Test non-empty file\r\n    final FileObject fileObject = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertTrue(fileObject.exists());\r\n    final URI uri = fileObject.getURI();\r\n    final String uriStr = uri.toString();\r\n    final FileSystemOptions options = getReadFolder().getFileSystem().getFileSystemOptions();\r\n    final FileObject f1 = getManager().resolveFile(uriStr, options);\r\n    final FileObject f2 = getManager().resolveFile(uriStr, options);\r\n    assertEquals(\"Two files resolved by URI must be equals on \" + uriStr, f1, f2);\r\n    assertSame(\"Resolving two times should not produce new filesystem on \" + uriStr, f1.getFileSystem(), f2.getFileSystem());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UrlStructureTests.java",
  "methodName" : "testFolderURL",
  "sourceCode" : "/**\r\n * Tests that folders have no content.\r\n */\r\n@Test\r\npublic void testFolderURL() throws Exception {\r\n    final FileObject folder = getReadFolder().resolveFile(\"dir1\");\r\n    if (folder.getFileSystem().hasCapability(Capability.DIRECTORY_READ_CONTENT)) {\r\n        // test might not fail on e.g. HttpFileSystem as there are no directories.\r\n        // A Directory do have a content on http. e.g a generated directory listing or the index.html page.\r\n        return;\r\n    }\r\n    assertTrue(folder.exists());\r\n    // Try getting the content of a folder\r\n    try (InputStream inputStream = folder.getURL().openConnection().getInputStream()) {\r\n        fail();\r\n    } catch (final IOException e) {\r\n        assertSameMessage(\"vfs.provider/read-not-file.error\", folder, e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UrlTests.java",
  "methodName" : "testReservedCharacterSpace",
  "sourceCode" : "@Test\r\npublic void testReservedCharacterSpace() throws FileSystemException {\r\n    try (FileObject fileObject = getReadFolder().resolveFile(\"file with spaces.txt\")) {\r\n        final URL url = fileObject.getURL();\r\n        final String string = url.toString();\r\n        assertTrue(string, string.contains(\"file%20with%20spaces.txt\"));\r\n    }\r\n    try (FileObject fileObject = getReadFolder().resolveFile(\"file%20with%20spaces.txt\")) {\r\n        final URL url = fileObject.getURL();\r\n        final String string = url.toString();\r\n        assertTrue(string, string.contains(\"file%20with%20spaces.txt\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UrlTests.java",
  "methodName" : "testUnknownURL",
  "sourceCode" : "/**\r\n * Tests that unknown files have no content.\r\n */\r\n@Test\r\npublic void testUnknownURL() throws Exception {\r\n    // Try getting the content of an unknown file\r\n    final FileObject unknownFile = getReadFolder().resolveFile(\"unknown-file\");\r\n    assertFalse(unknownFile.exists());\r\n    final URLConnection connection = unknownFile.getURL().openConnection();\r\n    try {\r\n        connection.getInputStream();\r\n        fail();\r\n    } catch (final IOException e) {\r\n        assertSameMessage(\"vfs.provider/read-not-file.error\", unknownFile, e);\r\n    }\r\n    assertEquals(-1, connection.getContentLength());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UrlTests.java",
  "methodName" : "testURL",
  "sourceCode" : "/**\r\n * Tests url.\r\n */\r\n@Test\r\npublic void testURL() throws Exception {\r\n    final FileObject file = getReadFolder().resolveFile(\"some-dir/\");\r\n    final URL url = file.getURL();\r\n    assertEquals(file.getName().getURI(), url.toExternalForm());\r\n    final URL parentURL = new URL(url, \"..\");\r\n    assertEquals(file.getParent().getURL(), parentURL);\r\n    final URL rootURL = new URL(url, \"/\");\r\n    assertEquals(file.getFileSystem().getRoot().getURL(), rootURL);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UrlTests.java",
  "methodName" : "testURLContent",
  "sourceCode" : "/**\r\n * Tests content.\r\n */\r\n@Test\r\npublic void testURLContent() throws Exception {\r\n    testURLContent(getReadFolder());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UrlTests.java",
  "methodName" : "testURLContentProvider",
  "sourceCode" : "/**\r\n * Tests content.\r\n */\r\n@Test\r\npublic void testURLContentProvider() throws Exception {\r\n    // Test non-empty file\r\n    final FileObject file = getReadFolder().resolveFile(\"file1.txt\");\r\n    assertTrue(file.exists());\r\n    final String uri = file.getURL().toExternalForm();\r\n    final FileSystemOptions options = getReadFolder().getFileSystem().getFileSystemOptions();\r\n    final FileObject f1 = getManager().resolveFile(uri, options);\r\n    final FileObject f2 = getManager().resolveFile(uri, options);\r\n    assertEquals(\"Two files resolved by URI must be equals on \" + uri, f1, f2);\r\n    assertSame(\"Resolving two times should not produce new filesystem on \" + uri, f1.getFileSystem(), f2.getFileSystem());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UserAuthenticationDataTest.java",
  "methodName" : "testCharacterBasedData",
  "sourceCode" : "@Test\r\npublic void testCharacterBasedData() {\r\n    final UserAuthenticationData data = new UserAuthenticationData();\r\n    final char[] array = \"PMC\".toCharArray();\r\n    data.setData(UserAuthenticationData.USERNAME, array);\r\n    data.setData(UserAuthenticationData.DOMAIN, \"Apache\".toCharArray());\r\n    assertSame(array, data.getData(UserAuthenticationData.USERNAME));\r\n    assertArrayEquals(\"Apache\".toCharArray(), data.getData(UserAuthenticationData.DOMAIN));\r\n    data.setData(UserAuthenticationData.DOMAIN, \"Apache Commons\".toCharArray());\r\n    assertArrayEquals(\"Apache Commons\".toCharArray(), data.getData(UserAuthenticationData.DOMAIN));\r\n    assertNull(data.getData(UserAuthenticationData.PASSWORD));\r\n    data.cleanup();\r\n    assertNull(data.getData(UserAuthenticationData.USERNAME));\r\n    assertNull(data.getData(UserAuthenticationData.DOMAIN));\r\n    final char[] nulls = { 0, 0, 0 };\r\n    assertArrayEquals(nulls, array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\UserAuthenticationDataTest.java",
  "methodName" : "testCustomType",
  "sourceCode" : "@Test\r\npublic void testCustomType() {\r\n    final UserAuthenticationData.Type type = new UserAuthenticationData.Type(\"JUNIT\");\r\n    final UserAuthenticationData data = new UserAuthenticationData();\r\n    final char[] array = \"test\".toCharArray();\r\n    data.setData(type, array);\r\n    assertSame(array, data.getData(type));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\DelegatingFileSystemOptionsBuilderTest.java",
  "methodName" : "testConfiguration",
  "sourceCode" : "@Test\r\npublic void testConfiguration() throws Exception {\r\n    for (final String scheme : schemes) {\r\n        assertTrue(fsm.hasProvider(scheme), () -> \"Missing \" + scheme + \" provider\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\DelegatingFileSystemOptionsBuilderTest.java",
  "methodName" : "testDelegatingBad",
  "sourceCode" : "@Test\r\npublic void testDelegatingBad() throws Throwable {\r\n    final FileSystemOptions opts = new FileSystemOptions();\r\n    final DelegatingFileSystemOptionsBuilder delegate = new DelegatingFileSystemOptionsBuilder(fsm);\r\n    try {\r\n        delegate.setConfigString(opts, \"http\", \"proxyPort\", \"wrong_port\");\r\n        fail();\r\n    } catch (final FileSystemException e) {\r\n        assertSame(e.getCause().getClass(), InvocationTargetException.class);\r\n        assertSame(((InvocationTargetException) e.getCause()).getTargetException().getClass(), NumberFormatException.class);\r\n    }\r\n    try {\r\n        delegate.setConfigClass(opts, \"sftp\", \"userinfo\", String.class);\r\n        fail();\r\n    } catch (final FileSystemException e) {\r\n        assertEquals(e.getCode(), \"vfs.provider/config-value-invalid.error\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\DelegatingFileSystemOptionsBuilderTest.java",
  "methodName" : "testDelegatingGood",
  "sourceCode" : "@Test\r\npublic void testDelegatingGood() throws Throwable {\r\n    final String[] identityPaths = { \"/file1\", \"/file2\" };\r\n    final FileSystemOptions opts = new FileSystemOptions();\r\n    final DelegatingFileSystemOptionsBuilder delegate = new DelegatingFileSystemOptionsBuilder(fsm);\r\n    delegate.setConfigString(opts, \"http\", \"proxyHost\", \"proxy\");\r\n    delegate.setConfigString(opts, \"http\", \"proxyPort\", \"8080\");\r\n    delegate.setConfigClass(opts, \"sftp\", \"userinfo\", TrustEveryoneUserInfo.class);\r\n    delegate.setConfigStrings(opts, \"sftp\", \"identities\", identityPaths);\r\n    assertEquals(Http5FileSystemConfigBuilder.getInstance().getProxyHost(opts), \"proxy\", \"http.proxyHost\");\r\n    assertEquals(Http5FileSystemConfigBuilder.getInstance().getProxyPort(opts), 8080, \"http.proxyPort\");\r\n    assertSame(SftpFileSystemConfigBuilder.getInstance().getUserInfo(opts).getClass(), TrustEveryoneUserInfo.class, \"sftp.userInfo\");\r\n    final File[] identities = SftpFileSystemConfigBuilder.getInstance().getIdentities(opts);\r\n    assertNotNull(identities, \"sftp.identities\");\r\n    assertEquals(identities.length, identityPaths.length, \"sftp.identities size\");\r\n    for (int iterIdentities = 0; iterIdentities < identities.length; iterIdentities++) {\r\n        assertEquals(identities[iterIdentities].getAbsolutePath(), new File(identityPaths[iterIdentities]).getAbsolutePath(), \"sftp.identities #\" + iterIdentities);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\EncryptDecryptTest.java",
  "methodName" : "testEncryptDecrypt",
  "sourceCode" : "@Test\r\npublic void testEncryptDecrypt() throws Exception {\r\n    final String source = \"Qryp2!t&tpR59\";\r\n    final String expected = \"914589F049CE3E8E3BB1A41BEAE12A9C\";\r\n    final Cryptor cryptor = CryptorFactory.getCryptor();\r\n    final String encrypted = cryptor.encrypt(source);\r\n    assertEquals(expected, encrypted);\r\n    final String decrypted = cryptor.decrypt(encrypted);\r\n    assertEquals(source, decrypted);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\EncryptDecryptTest.java",
  "methodName" : "testInvalidDecrypt",
  "sourceCode" : "@Test\r\npublic void testInvalidDecrypt() {\r\n    // provider.HostFileNameParser.extractToPath(String, StringBuilder) catches `Exception`\r\n    final String broken = \"91458\";\r\n    final Cryptor cryptor = CryptorFactory.getCryptor();\r\n    assertThrows(IllegalArgumentException.class, () -> cryptor.decrypt(broken));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\FileObjectUtilsTest.java",
  "methodName" : "testExistsNotNull",
  "sourceCode" : "@Test\r\npublic void testExistsNotNull() throws FileSystemException {\r\n    assertTrue(FileObjectUtils.exists(VFS.getManager().toFileObject(SystemUtils.getJavaIoTmpDir())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\FileObjectUtilsTest.java",
  "methodName" : "testgetContentAsStringCharset",
  "sourceCode" : "@Test\r\npublic void testgetContentAsStringCharset() throws IOException {\r\n    assertEquals(\"This is a test file.\", FileObjectUtils.getContentAsString(VFS.getManager().toFileObject(new File(\"src/test/resources/test-data/read-tests/file1.txt\")), StandardCharsets.UTF_8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\FileObjectUtilsTest.java",
  "methodName" : "testgetContentAsStringCharsetNull",
  "sourceCode" : "@Test\r\npublic void testgetContentAsStringCharsetNull() throws IOException {\r\n    assertEquals(\"This is a test file.\", FileObjectUtils.getContentAsString(VFS.getManager().toFileObject(new File(\"src/test/resources/test-data/read-tests/file1.txt\")), (Charset) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\FileObjectUtilsTest.java",
  "methodName" : "testgetContentAsStringString",
  "sourceCode" : "@Test\r\npublic void testgetContentAsStringString() throws IOException {\r\n    assertEquals(\"This is a test file.\", FileObjectUtils.getContentAsString(VFS.getManager().toFileObject(new File(\"src/test/resources/test-data/read-tests/file1.txt\")), StandardCharsets.UTF_8.name()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\FileObjectUtilsTest.java",
  "methodName" : "testgetContentAsStringStringNull",
  "sourceCode" : "@Test\r\npublic void testgetContentAsStringStringNull() throws IOException {\r\n    assertEquals(\"This is a test file.\", FileObjectUtils.getContentAsString(VFS.getManager().toFileObject(new File(\"src/test/resources/test-data/read-tests/file1.txt\")), (String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\FileObjectUtilsTest.java",
  "methodName" : "testNotExistsNotNull",
  "sourceCode" : "@Test\r\npublic void testNotExistsNotNull() throws FileSystemException {\r\n    assertFalse(FileObjectUtils.exists(VFS.getManager().toFileObject(new File(\"This file can't possibly exist, right?\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\FileObjectUtilsTest.java",
  "methodName" : "testNotExistsNull",
  "sourceCode" : "@Test\r\npublic void testNotExistsNull() throws FileSystemException {\r\n    assertFalse(FileObjectUtils.exists(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\FileObjectUtilsTest.java",
  "methodName" : "testReadProperties",
  "sourceCode" : "@Test\r\npublic void testReadProperties() throws FileSystemException, IOException {\r\n    assertProperties(FileObjectUtils.readProperties(VFS.getManager().toFileObject(new File(\"src/test/resources/test.properties\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\FileObjectUtilsTest.java",
  "methodName" : "testReadPropertiesInto",
  "sourceCode" : "@Test\r\npublic void testReadPropertiesInto() throws IOException {\r\n    final Properties p = new Properties();\r\n    p.setProperty(\"extraKey\", \"extraValue\");\r\n    assertProperties(FileObjectUtils.readProperties(VFS.getManager().toFileObject(new File(\"src/test/resources/test.properties\")), p));\r\n    assertEquals(\"extraValue\", p.getProperty(\"extraKey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\RandomAccessModeTest.java",
  "methodName" : "testFromAccessMode",
  "sourceCode" : "@Test\r\npublic void testFromAccessMode() {\r\n    assertEquals(RandomAccessMode.READ, RandomAccessMode.from(AccessMode.READ));\r\n    assertEquals(RandomAccessMode.READ, RandomAccessMode.from(AccessMode.READ, AccessMode.READ));\r\n    assertEquals(RandomAccessMode.READ, RandomAccessMode.from(AccessMode.READ, AccessMode.READ, AccessMode.EXECUTE));\r\n    assertEquals(RandomAccessMode.READWRITE, RandomAccessMode.from(AccessMode.WRITE));\r\n    assertEquals(RandomAccessMode.READWRITE, RandomAccessMode.from(AccessMode.WRITE, AccessMode.WRITE));\r\n    assertEquals(RandomAccessMode.READWRITE, RandomAccessMode.from(AccessMode.WRITE, AccessMode.READ));\r\n    assertEquals(RandomAccessMode.READWRITE, RandomAccessMode.from(AccessMode.READ, AccessMode.WRITE));\r\n    assertEquals(RandomAccessMode.READWRITE, RandomAccessMode.from(AccessMode.WRITE, AccessMode.WRITE, AccessMode.EXECUTE));\r\n    assertThrows(IllegalArgumentException.class, () -> RandomAccessMode.from(AccessMode.EXECUTE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\RandomAccessModeTest.java",
  "methodName" : "testGetModeStringRead",
  "sourceCode" : "@Test\r\npublic void testGetModeStringRead() {\r\n    assertEquals(\"r\", RandomAccessMode.READ.getModeString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\RandomAccessModeTest.java",
  "methodName" : "testGetModeStringReadWrite",
  "sourceCode" : "@Test\r\npublic void testGetModeStringReadWrite() {\r\n    assertEquals(\"rw\", RandomAccessMode.READWRITE.getModeString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\RandomAccessModeTest.java",
  "methodName" : "testRead",
  "sourceCode" : "@Test\r\npublic void testRead() {\r\n    assertTrue(RandomAccessMode.READ.requestRead());\r\n    assertFalse(RandomAccessMode.READ.requestWrite());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\RandomAccessModeTest.java",
  "methodName" : "testReadWrite",
  "sourceCode" : "@Test\r\npublic void testReadWrite() {\r\n    assertTrue(RandomAccessMode.READWRITE.requestRead());\r\n    assertTrue(RandomAccessMode.READWRITE.requestWrite());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\util\\RandomAccessModeTest.java",
  "methodName" : "testToAccessModes",
  "sourceCode" : "@Test\r\npublic void testToAccessModes() {\r\n    assertArrayEquals(new AccessMode[] { AccessMode.READ }, RandomAccessMode.READ.toAccessModes());\r\n    assertArrayEquals(new AccessMode[] { AccessMode.READ, AccessMode.WRITE }, RandomAccessMode.READWRITE.toAccessModes());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\VFSTest.java",
  "methodName" : "testClose",
  "sourceCode" : "/**\r\n * Tests {@link FileSystemManager#close()}.\r\n *\r\n * @throws FileSystemException\r\n */\r\n@Test\r\npublic void testClose() throws FileSystemException {\r\n    try (FileSystemManager fileSystemManager = new StandardFileSystemManager()) {\r\n        VFS.setManager(fileSystemManager);\r\n        VFS.setManager(null);\r\n    }\r\n    assertNotNull(VFS.getManager());\r\n    assertFalse(VFS.getManager().resolveFile(Paths.get(\"DoesNotExist.not\").toUri()).exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\VFSTest.java",
  "methodName" : "testSetManager",
  "sourceCode" : "@Test\r\npublic void testSetManager() throws FileSystemException {\r\n    final StandardFileSystemManager fileSystemManager = new StandardFileSystemManager();\r\n    VFS.setManager(fileSystemManager);\r\n    assertEquals(fileSystemManager, VFS.getManager());\r\n    // Reset global for other tests\r\n    VFS.setManager(null);\r\n    assertNotNull(VFS.getManager());\r\n    assertNotEquals(fileSystemManager, VFS.getManager());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\VFSTest.java",
  "methodName" : "testStaticClose",
  "sourceCode" : "@Test\r\npublic void testStaticClose() throws FileSystemException {\r\n    final FileSystemManager manager = VFS.getManager();\r\n    VFS.close();\r\n    assertNotEquals(manager, VFS.getManager());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2\\src\\test\\java\\org\\apache\\commons\\vfs2\\VFSTest.java",
  "methodName" : "testStaticCloseRepeatable",
  "sourceCode" : "@Test\r\npublic void testStaticCloseRepeatable() {\r\n    VFS.close();\r\n    VFS.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testCanRenameTo",
  "sourceCode" : "@Test\r\npublic void testCanRenameTo() throws Exception {\r\n    final FileObject fo = createTestFile(hdfs);\r\n    assertNotNull(fo);\r\n    fo.canRenameTo(fo);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testDoListChildren",
  "sourceCode" : "@Test\r\npublic void testDoListChildren() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    final FileObject dir = file.getParent();\r\n    final FileObject[] children = dir.getChildren();\r\n    assertEquals(1, children.length);\r\n    assertEquals(children[0].getName(), file.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\npublic void testEquals() throws Exception {\r\n    // Create test file (and check parent was created)\r\n    final FileObject dir = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(dir);\r\n    assertFalse(dir.exists());\r\n    final FileObject file1 = createTestFile(hdfs);\r\n    assertTrue(file1.exists());\r\n    assertTrue(dir.exists());\r\n    // Get a handle to the same file and ensure it is equal\r\n    final FileObject file2 = manager.resolveFile(TEST_FILE1);\r\n    assertEquals(file1, file2);\r\n    // Ensure different files on same filesystem are not equal\r\n    assertNotEquals(dir, file1);\r\n    assertNotEquals(dir, file2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testGetAttributes",
  "sourceCode" : "@Test\r\npublic void testGetAttributes() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    final Map<String, Object> attributes = file.getContent().getAttributes();\r\n    assertTrue(attributes.containsKey(HdfsFileAttributes.BLOCK_SIZE.toString()));\r\n    assertTrue(attributes.containsKey(HdfsFileAttributes.GROUP.toString()));\r\n    assertTrue(attributes.containsKey(HdfsFileAttributes.LAST_ACCESS_TIME.toString()));\r\n    assertTrue(attributes.containsKey(HdfsFileAttributes.LENGTH.toString()));\r\n    assertTrue(attributes.containsKey(HdfsFileAttributes.MODIFICATION_TIME.toString()));\r\n    assertTrue(attributes.containsKey(HdfsFileAttributes.OWNER.toString()));\r\n    assertTrue(attributes.containsKey(HdfsFileAttributes.PERMISSIONS.toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testGetContentSize",
  "sourceCode" : "@Test\r\npublic void testGetContentSize() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    assertEquals(0, file.getContent().getSize());\r\n    assertTrue(file.getContent().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testGetInputStream",
  "sourceCode" : "@Test\r\npublic void testGetInputStream() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    file.getContent().getInputStream().close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testInit",
  "sourceCode" : "@Test\r\npublic void testInit() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_FILE1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testIsHidden",
  "sourceCode" : "@Test\r\npublic void testIsHidden() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    assertFalse(file.isHidden());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testIsReadable",
  "sourceCode" : "@Test\r\npublic void testIsReadable() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    assertTrue(file.isReadable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testIsWritable",
  "sourceCode" : "@Test\r\npublic void testIsWritable() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    assertTrue(file.isWriteable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testLastModificationTime",
  "sourceCode" : "@Test\r\npublic void testLastModificationTime() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    assertNotEquals(-1, file.getContent().getLastModifiedTime());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testRandomAccessContent",
  "sourceCode" : "@Test\r\npublic void testRandomAccessContent() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    assertThrows(FileSystemException.class, () -> file.getContent().getRandomAccessContent(RandomAccessMode.READWRITE).close());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-hdfs\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\hdfs\\HdfsFileProviderTest.java",
  "methodName" : "testRandomAccessContent2",
  "sourceCode" : "@Test\r\npublic void testRandomAccessContent2() throws Exception {\r\n    final FileObject fo = manager.resolveFile(TEST_DIR1);\r\n    assertNotNull(fo);\r\n    assertFalse(fo.exists());\r\n    // Create the test file\r\n    final FileObject file = createTestFile(hdfs);\r\n    assertTrue(fo.exists());\r\n    file.getContent().getRandomAccessContent(RandomAccessMode.READ).close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit1\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav\\test\\WebdavProviderTestCase.java",
  "methodName" : "testResolveIPv6Url",
  "sourceCode" : "@org.junit.Test\r\npublic void testResolveIPv6Url() throws Exception {\r\n    final String ipv6Url = \"webdav://user:pass@[fe80::1c42:dae:8370:aea6%en1]/file.txt\";\r\n    final FileObject fileObject = VFS.getManager().resolveFile(ipv6Url, new FileSystemOptions());\r\n    assertEquals(\"webdav://user:pass@[fe80::1c42:dae:8370:aea6%en1]/\", fileObject.getFileSystem().getRootURI());\r\n    assertEquals(\"webdav://user:pass@[fe80::1c42:dae:8370:aea6%en1]/file.txt\", fileObject.getName().getURI());\r\n}",
  "annotations" : [ "org.junit.Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit1\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav\\test\\WebdavVersioningTests.java",
  "methodName" : "testVersioning",
  "sourceCode" : "@Test\r\npublic void testVersioning() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    final FileSystemOptions opts = scratchFolder.getFileSystem().getFileSystemOptions();\r\n    final WebdavFileSystemConfigBuilder builder = (WebdavFileSystemConfigBuilder) getManager().getFileSystemConfigBuilder(\"webdav\");\r\n    builder.setVersioning(opts, true);\r\n    final FileObject file = getManager().resolveFile(scratchFolder, \"file1.txt\", opts);\r\n    final FileSystemOptions newOpts = file.getFileSystem().getFileSystemOptions();\r\n    assertSame(opts, newOpts);\r\n    assertTrue(builder.isVersioning(newOpts));\r\n    assertFalse(file.exists());\r\n    file.createFile();\r\n    assertTrue(file.exists());\r\n    assertSame(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    assertEquals(0, file.getContent().getSize());\r\n    assertTrue(file.getContent().isEmpty());\r\n    assertFalse(file.isExecutable());\r\n    assertFalse(file.isHidden());\r\n    assertTrue(file.isReadable());\r\n    assertTrue(file.isWriteable());\r\n    Map<?, ?> map = file.getContent().getAttributes();\r\n    final String name = ((URLFileName) file.getName()).getUserName();\r\n    assertTrue(map.containsKey(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    if (name != null) {\r\n        assertEquals(name, map.get(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    }\r\n    assertTrue(map.containsKey(VersionControlledResource.CHECKED_IN.toString()));\r\n    // Create the source file\r\n    final String content = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content, file);\r\n    map = file.getContent().getAttributes();\r\n    assertTrue(map.containsKey(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    if (name != null) {\r\n        assertEquals(name, map.get(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    }\r\n    assertTrue(map.containsKey(VersionControlledResource.CHECKED_IN.toString()));\r\n    builder.setVersioning(opts, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit1\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav\\test\\WebdavVersioningTests.java",
  "methodName" : "testVersioningWithCreator",
  "sourceCode" : "@Test\r\npublic void testVersioningWithCreator() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    final FileSystemOptions opts = scratchFolder.getFileSystem().getFileSystemOptions();\r\n    final WebdavFileSystemConfigBuilder builder = (WebdavFileSystemConfigBuilder) getManager().getFileSystemConfigBuilder(\"webdav\");\r\n    builder.setVersioning(opts, true);\r\n    builder.setCreatorName(opts, \"testUser\");\r\n    final FileObject file = getManager().resolveFile(scratchFolder, \"file1.txt\", opts);\r\n    final FileSystemOptions newOpts = file.getFileSystem().getFileSystemOptions();\r\n    assertSame(opts, newOpts);\r\n    assertTrue(builder.isVersioning(newOpts));\r\n    assertFalse(file.exists());\r\n    file.createFile();\r\n    assertTrue(file.exists());\r\n    assertSame(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    assertEquals(0, file.getContent().getSize());\r\n    assertTrue(file.getContent().isEmpty());\r\n    assertFalse(file.isExecutable());\r\n    assertFalse(file.isHidden());\r\n    assertTrue(file.isReadable());\r\n    assertTrue(file.isWriteable());\r\n    Map<?, ?> map = file.getContent().getAttributes();\r\n    final String name = ((URLFileName) file.getName()).getUserName();\r\n    assertTrue(map.containsKey(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    assertEquals(\"testUser\", map.get(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    if (name != null) {\r\n        assertTrue(map.containsKey(DeltaVConstants.COMMENT.toString()));\r\n        assertEquals(\"Modified by user \" + name, map.get(DeltaVConstants.COMMENT.toString()));\r\n    }\r\n    assertTrue(map.containsKey(VersionControlledResource.CHECKED_IN.toString()));\r\n    // Create the source file\r\n    final String content = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content, file);\r\n    map = file.getContent().getAttributes();\r\n    assertTrue(map.containsKey(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    assertEquals(\"testUser\", map.get(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    if (name != null) {\r\n        assertTrue(map.containsKey(DeltaVConstants.COMMENT.toString()));\r\n        assertEquals(\"Modified by user \" + name, map.get(DeltaVConstants.COMMENT.toString()));\r\n    }\r\n    assertTrue(map.containsKey(VersionControlledResource.CHECKED_IN.toString()));\r\n    builder.setVersioning(opts, false);\r\n    builder.setCreatorName(opts, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav4\\test\\WebDav4FilesTest.java",
  "methodName" : "testUrlWithAuthority",
  "sourceCode" : "@Test\r\npublic void testUrlWithAuthority() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    // TODO All lowercase input except the percent encoded '\\' (%5C);\r\n    // We end up converting back to lowercase, but OK per RFC.\r\n    final String urlWithAuthority = \"webdav4://alice%5C1234:secret@localhost:80\";\r\n    try (final FileObject file = fileSystemManager.resolveFile(urlWithAuthority)) {\r\n        assertEquals(\"webdav4://alice%5c1234:secret@localhost/\", file.getURL().toExternalForm());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav4\\test\\Webdav4ProviderTestCase.java",
  "methodName" : "testResolveIPv6Url",
  "sourceCode" : "@org.junit.Test\r\npublic void testResolveIPv6Url() throws Exception {\r\n    final String ipv6Url = \"webdav4://user:pass@[fe80::1c42:dae:8370:aea6%en1]/file.txt\";\r\n    final FileObject fileObject = VFS.getManager().resolveFile(ipv6Url, new FileSystemOptions());\r\n    assertEquals(\"webdav4://user:pass@[fe80::1c42:dae:8370:aea6%en1]/\", fileObject.getFileSystem().getRootURI());\r\n    assertEquals(\"webdav4://user:pass@[fe80::1c42:dae:8370:aea6%en1]/file.txt\", fileObject.getName().getURI());\r\n}",
  "annotations" : [ "org.junit.Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav4\\test\\Webdav4VersioningTests.java",
  "methodName" : "testVersioning",
  "sourceCode" : "@Test\r\npublic void testVersioning() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    final FileSystemOptions opts = scratchFolder.getFileSystem().getFileSystemOptions();\r\n    final Webdav4FileSystemConfigBuilder builder = (Webdav4FileSystemConfigBuilder) getManager().getFileSystemConfigBuilder(\"webdav\");\r\n    builder.setVersioning(opts, true);\r\n    final FileObject file = getManager().resolveFile(scratchFolder, \"file1.txt\", opts);\r\n    final FileSystemOptions newOpts = file.getFileSystem().getFileSystemOptions();\r\n    assertSame(opts, newOpts);\r\n    assertTrue(builder.isVersioning(newOpts));\r\n    assertFalse(file.exists());\r\n    file.createFile();\r\n    assertTrue(file.exists());\r\n    assertSame(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    assertEquals(0, file.getContent().getSize());\r\n    assertTrue(file.getContent().isEmpty());\r\n    assertFalse(file.isExecutable());\r\n    assertFalse(file.isHidden());\r\n    assertTrue(file.isReadable());\r\n    assertTrue(file.isWriteable());\r\n    Map<?, ?> map = file.getContent().getAttributes();\r\n    final String name = ((GenericURLFileName) file.getName()).getUserName();\r\n    assertTrue(map.containsKey(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    if (name != null) {\r\n        assertEquals(name, map.get(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    }\r\n    assertTrue(map.containsKey(VersionControlledResource.CHECKED_IN.toString()));\r\n    // Create the source file\r\n    final String content = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content, file);\r\n    map = file.getContent().getAttributes();\r\n    assertTrue(map.containsKey(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    if (name != null) {\r\n        assertEquals(name, map.get(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    }\r\n    assertTrue(map.containsKey(VersionControlledResource.CHECKED_IN.toString()));\r\n    builder.setVersioning(opts, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav4\\test\\Webdav4VersioningTests.java",
  "methodName" : "testVersioningWithCreator",
  "sourceCode" : "@Test\r\npublic void testVersioningWithCreator() throws Exception {\r\n    final FileObject scratchFolder = createScratchFolder();\r\n    final FileSystemOptions opts = scratchFolder.getFileSystem().getFileSystemOptions();\r\n    final Webdav4FileSystemConfigBuilder builder = (Webdav4FileSystemConfigBuilder) getManager().getFileSystemConfigBuilder(\"webdav\");\r\n    builder.setVersioning(opts, true);\r\n    builder.setCreatorName(opts, \"testUser\");\r\n    final FileObject file = getManager().resolveFile(scratchFolder, \"file1.txt\", opts);\r\n    final FileSystemOptions newOpts = file.getFileSystem().getFileSystemOptions();\r\n    assertSame(opts, newOpts);\r\n    assertTrue(builder.isVersioning(newOpts));\r\n    assertFalse(file.exists());\r\n    file.createFile();\r\n    assertTrue(file.exists());\r\n    assertSame(FileType.FILE, file.getType());\r\n    assertTrue(file.isFile());\r\n    assertEquals(0, file.getContent().getSize());\r\n    assertTrue(file.getContent().isEmpty());\r\n    assertFalse(file.isExecutable());\r\n    assertFalse(file.isHidden());\r\n    assertTrue(file.isReadable());\r\n    assertTrue(file.isWriteable());\r\n    Map<?, ?> map = file.getContent().getAttributes();\r\n    final String name = ((GenericURLFileName) file.getName()).getUserName();\r\n    assertTrue(map.containsKey(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    assertEquals(\"testUser\", map.get(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    if (name != null) {\r\n        assertTrue(map.containsKey(DeltaVConstants.COMMENT.toString()));\r\n        assertEquals(\"Modified by user \" + name, map.get(DeltaVConstants.COMMENT.toString()));\r\n    }\r\n    assertTrue(map.containsKey(VersionControlledResource.CHECKED_IN.toString()));\r\n    // Create the source file\r\n    final String content = \"Here is some sample content for the file.  Blah Blah Blah.\";\r\n    try (OutputStream os = file.getContent().getOutputStream()) {\r\n        os.write(content.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n    assertSameContent(content, file);\r\n    map = file.getContent().getAttributes();\r\n    assertTrue(map.containsKey(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    assertEquals(\"testUser\", map.get(DeltaVConstants.CREATOR_DISPLAYNAME.toString()));\r\n    if (name != null) {\r\n        assertTrue(map.containsKey(DeltaVConstants.COMMENT.toString()));\r\n        assertEquals(\"Modified by user \" + name, map.get(DeltaVConstants.COMMENT.toString()));\r\n    }\r\n    assertTrue(map.containsKey(VersionControlledResource.CHECKED_IN.toString()));\r\n    builder.setVersioning(opts, false);\r\n    builder.setCreatorName(opts, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav4\\Webdav4FileNameTest.java",
  "methodName" : "testWebdavUrlWithoutTrailingSlash",
  "sourceCode" : "/**\r\n * If the resolved path ends without a '/'\r\n */\r\n@Test\r\npublic void testWebdavUrlWithoutTrailingSlash() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemOptions fsoptsWithToutrailingSlashDefault = new FileSystemOptions();\r\n    final FileSystemOptions fsoptsWithoutTrailingSlash = new FileSystemOptions();\r\n    Webdav4FileSystemConfigBuilder.getInstance().setAppendTrailingSlash(fsoptsWithoutTrailingSlash, false);\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    final String urlBase = \"webdav4://localhost:80\";\r\n    final String urlWithFile1 = \"webdav4://localhost:80/File.txt\";\r\n    final String urlWithFile2 = \"webdav4://localhost:80/Path/File.txt\";\r\n    final String urlWithFileWithoutExtension1 = \"webdav4://localhost:80/File\";\r\n    final String urlWithFileWithoutExtension2 = \"webdav4://localhost:80/Path/File\";\r\n    final String urlWithSubpath = \"webdav4://localhost:80/Path/Sub Path/\";\r\n    final String urlWithRelativePart1 = \"webdav4://localhost:80/Path/.\";\r\n    final String urlWithRelativePart2 = \"webdav4://localhost:80/Path/./\";\r\n    final String urlWithRelativePart3 = \"webdav4://localhost:80/Path/../Decendant Path/\";\r\n    final String urlWithRelativePart4 = \"webdav4://localhost:80/Path/Sub Path/..\";\r\n    final String urlWithRelativePart5 = \"webdav4://localhost:80/Path/Sub Path/../\";\r\n    final String urlWithQuery1 = \"webdav4://localhost:80/Path/Sub Path/?\";\r\n    final String urlWithQuery2 = \"webdav4://localhost:80/Path/Sub Path/?foo=bar\";\r\n    final String urlWithQuery3 = \"webdav4://localhost:80/Path/Sub Path/?foo=1&bar=2\";\r\n    final String urlWithQuery4 = \"webdav4://localhost:80/Path/Sub Path/?foo=1&bar=2\";\r\n    final String urlWithQuery5 = \"webdav4://localhost:80/Path/File?foo=1&bar=2\";\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlBase, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        //The ROOT is always with trailing slash\r\n        assertEquals(\"http://localhost/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlBase, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        //The ROOT is always with trailing slash\r\n        assertEquals(\"http://localhost/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFile1, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/File.txt\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFile1, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/File.txt\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFile2, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/File.txt\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFile2, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/File.txt\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFileWithoutExtension1, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/File\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFileWithoutExtension1, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/File\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFileWithoutExtension2, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/File\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFileWithoutExtension2, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/File\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithSubpath, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithSubpath, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart1, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart1, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart2, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart2, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart3, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Decendant%20Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart3, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Decendant%20Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart4, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart4, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart5, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart5, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery1, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery1, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery2, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path?foo=bar\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery2, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path?foo=bar\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery3, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path?foo=1&bar=2\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery3, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path?foo=1&bar=2\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery4, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path?foo=1&bar=2\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery4, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path?foo=1&bar=2\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery5, fsoptsWithoutTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/File?foo=1&bar=2\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery5, fsoptsWithToutrailingSlashDefault)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/File?foo=1&bar=2\", file.toUrlString(fileName));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav4\\Webdav4FileNameTest.java",
  "methodName" : "testWebdavUrlWithTrailingSlash",
  "sourceCode" : "/**\r\n * If the resolved path ends with a '/'\r\n */\r\n@Test\r\npublic void testWebdavUrlWithTrailingSlash() throws FileSystemException {\r\n    @SuppressWarnings(\"resource\")\r\n    final FileSystemOptions fsoptsWithTrailingSlash = new FileSystemOptions();\r\n    Webdav4FileSystemConfigBuilder.getInstance().setAppendTrailingSlash(fsoptsWithTrailingSlash, true);\r\n    final FileSystemManager fileSystemManager = VFS.getManager();\r\n    final String urlBase = \"webdav4://localhost:80\";\r\n    final String urlWithFile1 = \"webdav4://localhost:80/File.txt\";\r\n    final String urlWithFile2 = \"webdav4://localhost:80/Path/File.txt\";\r\n    final String urlWithFileWithoutExtension1 = \"webdav4://localhost:80/File\";\r\n    final String urlWithFileWithoutExtension2 = \"webdav4://localhost:80/Path/File\";\r\n    final String urlWithSubpath = \"webdav4://localhost:80/Path/Sub Path/\";\r\n    final String urlWithRelativePart1 = \"webdav4://localhost:80/Path/.\";\r\n    final String urlWithRelativePart2 = \"webdav4://localhost:80/Path/./\";\r\n    final String urlWithRelativePart3 = \"webdav4://localhost:80/Path/../Decendant Path/\";\r\n    final String urlWithRelativePart4 = \"webdav4://localhost:80/Path/Sub Path/..\";\r\n    final String urlWithRelativePart5 = \"webdav4://localhost:80/Path/Sub Path/../\";\r\n    final String urlWithQuery1 = \"webdav4://localhost:80/Path/Sub Path/?\";\r\n    final String urlWithQuery2 = \"webdav4://localhost:80/Path/Sub Path/?foo=bar\";\r\n    final String urlWithQuery3 = \"webdav4://localhost:80/Path/Sub Path/?foo=1&bar=2\";\r\n    final String urlWithQuery4 = \"webdav4://localhost:80/Path/Sub Path/?foo=1&bar=2\";\r\n    final String urlWithQuery5 = \"webdav4://localhost:80/Path/File?foo=1&bar=2\";\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlBase, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFile1, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/File.txt\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFile2, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/File.txt\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFileWithoutExtension1, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/File\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithFileWithoutExtension2, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/File\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithSubpath, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart1, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart2, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart3, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Decendant%20Path/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart4, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithRelativePart5, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery1, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path/\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery2, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path/?foo=bar\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery3, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path/?foo=1&bar=2\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery4, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/Sub%20Path/?foo=1&bar=2\", file.toUrlString(fileName));\r\n    }\r\n    try (final Webdav4FileObject file = (Webdav4FileObject) fileSystemManager.resolveFile(urlWithQuery5, fsoptsWithTrailingSlash)) {\r\n        final GenericURLFileName fileName = (GenericURLFileName) file.getName();\r\n        assertEquals(\"http://localhost/Path/File?foo=1&bar=2\", file.toUrlString(fileName));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav4\\Webdav4FileObjectTest.java",
  "methodName" : "testWebdav4FileObjectURLs",
  "sourceCode" : "@Test\r\npublic void testWebdav4FileObjectURLs() throws FileSystemException {\r\n    final FileSystemManager fsm = VFS.getManager();\r\n    try (final FileObject file = fsm.resolveFile(WEBDAV4_URL)) {\r\n        assertEquals(WEBDAV4_URL, file.getURL().toString());\r\n        assertInstanceOf(Webdav4FileObject.class, file);\r\n        final Webdav4FileObject webdav4File = (Webdav4FileObject) file;\r\n        assertEquals(INTERNAL_WEBDAV4_URL, webdav4File.toUrlString((GenericURLFileName) webdav4File.getName()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-jackrabbit2\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\webdav4\\Webdav4FileObjectTest.java",
  "methodName" : "testWebdav4sFileObjectURLs",
  "sourceCode" : "@Test\r\npublic void testWebdav4sFileObjectURLs() throws FileSystemException {\r\n    final FileSystemManager fsm = VFS.getManager();\r\n    try (final FileObject file = fsm.resolveFile(WEBDAV4S_URL)) {\r\n        assertEquals(WEBDAV4S_URL, file.getURL().toString());\r\n        assertInstanceOf(Webdav4FileObject.class, file);\r\n        final Webdav4FileObject webdav4File = (Webdav4FileObject) file;\r\n        assertEquals(INTERNAL_WEBDAV4S_URL, webdav4File.toUrlString((GenericURLFileName) webdav4File.getName()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-sandbox\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\smb\\test\\FileNameTest.java",
  "methodName" : "testBadlyFormedUri",
  "sourceCode" : "/**\r\n * Tests error handling in URI parser.\r\n *\r\n * @throws Exception in case of error\r\n */\r\n@Test\r\npublic void testBadlyFormedUri() throws Exception {\r\n    // Does not start with smb://\r\n    testBadlyFormedUri(\"smb:\", \"vfs.provider/missing-double-slashes.error\");\r\n    testBadlyFormedUri(\"smb:/\", \"vfs.provider/missing-double-slashes.error\");\r\n    testBadlyFormedUri(\"smb:a\", \"vfs.provider/missing-double-slashes.error\");\r\n    // Missing hostname\r\n    testBadlyFormedUri(\"smb://\", \"vfs.provider/missing-hostname.error\");\r\n    testBadlyFormedUri(\"smb://:21/share\", \"vfs.provider/missing-hostname.error\");\r\n    testBadlyFormedUri(\"smb:///share\", \"vfs.provider/missing-hostname.error\");\r\n    // Empty port\r\n    testBadlyFormedUri(\"smb://host:\", \"vfs.provider/missing-port.error\");\r\n    testBadlyFormedUri(\"smb://host:/share\", \"vfs.provider/missing-port.error\");\r\n    testBadlyFormedUri(\"smb://host:port/share/file\", \"vfs.provider/missing-port.error\");\r\n    // Missing absolute path\r\n    testBadlyFormedUri(\"smb://host:90a\", \"vfs.provider/missing-hostname-path-sep.error\");\r\n    testBadlyFormedUri(\"smb://host?a\", \"vfs.provider/missing-hostname-path-sep.error\");\r\n    // Missing share name\r\n    testBadlyFormedUri(\"smb://host\", \"vfs.provider.smb/missing-share-name.error\");\r\n    testBadlyFormedUri(\"smb://host/\", \"vfs.provider.smb/missing-share-name.error\");\r\n    testBadlyFormedUri(\"smb://host:9090/\", \"vfs.provider.smb/missing-share-name.error\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-sandbox\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\smb\\test\\FileNameTest.java",
  "methodName" : "testParseUri",
  "sourceCode" : "/**\r\n * Tests parsing a URI into its parts.\r\n *\r\n * @throws Exception in case of error\r\n */\r\n@Test\r\npublic void testParseUri() throws Exception {\r\n    // Simple name\r\n    SmbFileName name = (SmbFileName) SmbFileNameParser.getInstance().parseUri(null, null, \"smb://hostname/share/file\");\r\n    assertEquals(\"smb\", name.getScheme());\r\n    assertNull(name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(139, name.getPort());\r\n    assertEquals(name.getDefaultPort(), name.getPort());\r\n    assertEquals(\"share\", name.getShare());\r\n    assertEquals(\"/file\", name.getPath());\r\n    assertEquals(\"smb://hostname/share/\", name.getRootURI());\r\n    assertEquals(\"smb://hostname/share/file\", name.getURI());\r\n    // Name with port\r\n    name = (SmbFileName) SmbFileNameParser.getInstance().parseUri(null, null, \"smb://hostname:9090/share/file\");\r\n    assertEquals(\"smb\", name.getScheme());\r\n    assertNull(name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(9090, name.getPort());\r\n    assertEquals(\"share\", name.getShare());\r\n    assertEquals(\"/file\", name.getPath());\r\n    assertEquals(\"smb://hostname:9090/share/\", name.getRootURI());\r\n    assertEquals(\"smb://hostname:9090/share/file\", name.getURI());\r\n    // Name with no path\r\n    name = (SmbFileName) SmbFileNameParser.getInstance().parseUri(null, null, \"smb://hostname/share\");\r\n    assertEquals(\"smb\", name.getScheme());\r\n    assertNull(name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(139, name.getPort());\r\n    assertEquals(\"share\", name.getShare());\r\n    assertEquals(\"/\", name.getPath());\r\n    assertEquals(\"smb://hostname/share/\", name.getRootURI());\r\n    assertEquals(\"smb://hostname/share/\", name.getURI());\r\n    // Name with username\r\n    name = (SmbFileName) SmbFileNameParser.getInstance().parseUri(null, null, \"smb://user@hostname/share/file\");\r\n    assertEquals(\"smb\", name.getScheme());\r\n    assertEquals(\"user\", name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(139, name.getPort());\r\n    assertEquals(\"share\", name.getShare());\r\n    assertEquals(\"/file\", name.getPath());\r\n    assertEquals(\"smb://user@hostname/share/\", name.getRootURI());\r\n    assertEquals(\"smb://user@hostname/share/file\", name.getURI());\r\n    // Name with extension\r\n    name = (SmbFileName) SmbFileNameParser.getInstance().parseUri(null, null, \"smb://user@hostname/share/file.txt\");\r\n    assertEquals(\"smb\", name.getScheme());\r\n    assertEquals(\"user\", name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(139, name.getPort());\r\n    assertEquals(\"share\", name.getShare());\r\n    assertEquals(\"/file.txt\", name.getPath());\r\n    assertEquals(\"file.txt\", name.getBaseName());\r\n    assertEquals(\"txt\", name.getExtension());\r\n    assertEquals(\"smb://user@hostname/share/\", name.getRootURI());\r\n    assertEquals(\"smb://user@hostname/share/file.txt\", name.getURI());\r\n    // Name look likes extension, but isn't\r\n    name = (SmbFileName) SmbFileNameParser.getInstance().parseUri(null, null, \"smb://user@hostname/share/.bashrc\");\r\n    assertEquals(\"smb\", name.getScheme());\r\n    assertEquals(\"user\", name.getUserName());\r\n    assertNull(name.getPassword());\r\n    assertEquals(\"hostname\", name.getHostName());\r\n    assertEquals(139, name.getPort());\r\n    assertEquals(\"share\", name.getShare());\r\n    assertEquals(\"/.bashrc\", name.getPath());\r\n    assertEquals(\".bashrc\", name.getBaseName());\r\n    assertEquals(\"\", name.getExtension());\r\n    assertEquals(\"smb://user@hostname/share/\", name.getRootURI());\r\n    assertEquals(\"smb://user@hostname/share/.bashrc\", name.getURI());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-vfs\\commons-vfs2-sandbox\\src\\test\\java\\org\\apache\\commons\\vfs2\\provider\\smb\\test\\SmbProviderTestCase.java",
  "methodName" : "testResolveIPv6Url",
  "sourceCode" : "@org.junit.jupiter.api.Test\r\npublic void testResolveIPv6Url() throws Exception {\r\n    final String ipv6Url = \"smb://user:pass@[fe80::1c42:dae:8370:aea6%en1]/share\";\r\n    final FileObject fileObject = VFS.getManager().resolveFile(ipv6Url, new FileSystemOptions());\r\n    Assertions.assertEquals(\"smb://user:pass@[fe80::1c42:dae:8370:aea6%en1]/share/\", fileObject.getFileSystem().getRootURI());\r\n    Assertions.assertEquals(\"smb://user:pass@[fe80::1c42:dae:8370:aea6%en1]/share/\", fileObject.getName().getURI());\r\n}",
  "annotations" : [ "org.junit.jupiter.api.Test" ]
} ]